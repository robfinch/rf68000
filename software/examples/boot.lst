Sections:
00: "CODE" (0-CEE7)
01: "DATA" (0-700)


Source: "boot.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: ;-------------------------------------------------------------------------------
                            	    37: ;
                            	    38: ; system memory map
                            	    39: ;
                            	    40: ;
                            	    41: ; 00000000 +----------------+      <+
                            	    42: ;          | startup sp,pc  | 8 B   |
                            	    43: ; 00000008 +----------------+       |
                            	    44: ;					 |    vectors     | pair shared+
                            	    45: ; 00000400 +----------------+       |
                            	    46: ;					 |   bios mem     |       |
                            	    47: ; 00001000 +----------------+       |
                            	    48: ;					 |   bios code    |       |
                            	    49: ; 00020000 +----------------+      <+
                            	    50: ;					 |    unused      |
                            	    51: ; 00040000 +----------------+
                            	    52: ;					 |   local ram    |
                            	    53: ; 00048000 +----------------+
                            	    54: ;					 |    unused      |
                            	    55: ; 00100000 +----------------+
                            	    56: ;					 |   global ram   |
                            	    57: ; 00101000 +----------------+
                            	    58: ;					 | serial rcvbuf  |
                            	    59: ; 00102000 +----------------+
                            	    60: ;          | serial xmitbuf |
                            	    61: ; 00103000 +----------------+
                            	    62: ;					 |    unused      |
                            	    63: ; 40000000 +----------------+
                            	    64: ;          |                |
                            	    65: ;          |                |
                            	    66: ;          |                |
                            	    67: ;          :  dram memory   : 1GB MB
                            	    68: ;          |                |
                            	    69: ;          |                |
                            	    70: ;          |                |
                            	    71: ; 80000000 +----------------+
                            	    72: ;          |                |
                            	    73: ;          |                |
                            	    74: ;          |                |
                            	    75: ;          :  dram memory   : 1GB MB
                            	    76: ;          |     mirror     |
                            	    77: ;          |                |
                            	    78: ;          |                |
                            	    79: ; C0000000 +----------------+
                            	    80: ;          |                |
                            	    81: ;          :     unused     :
                            	    82: ;          |                |
                            	    83: ; FD000000 +----------------+
                            	    84: ;          |                |
                            	    85: ;          :    I/O area    : 1.0 M
                            	    86: ;          |                |
                            	    87: ; FFE00000 +----------------+
                            	    88: ;          |                |
                            	    89: ;          :     unused     :
                            	    90: ;          |                |
                            	    91: ; FFFFFFFF +----------------+
                            	    92: ;
                            	    93: ;-------------------------------------------------------------------------------
                            	    94: ;
                            	    95: HAS_MMU equ 0
                            	    96: NCORES equ 4
                            	    97: TEXTCOL equ 64
                            	    98: TEXTROW	equ	32
                            	    99: 
                            	   100: CTRLC	EQU		$03
                            	   101: CTRLH	EQU		$08
                            	   102: CTRLS	EQU		$13
                            	   103: CTRLX	EQU		$18
                            	   104: CTRLZ	EQU		$1A
                            	   105: LF		EQU		$0A
                            	   106: CR		EQU		$0D
                            	   107: XON		EQU		$11
                            	   108: XOFF	EQU		$13
                            	   109: EOT		EQU		$04
                            	   110: BLANK EQU		$20
                            	   111: 
                            	   112: SC_F12  EQU    $07
                            	   113: SC_C    EQU    $21
                            	   114: SC_T    EQU    $2C
                            	   115: SC_Z    EQU    $1A
                            	   116: SC_KEYUP	EQU		$F0
                            	   117: SC_EXTEND   EQU		$E0
                            	   118: SC_CTRL		EQU		$14
                            	   119: SC_RSHIFT	EQU		$59
                            	   120: SC_NUMLOCK	EQU		$77
                            	   121: SC_SCROLLLOCK	EQU	$7E
                            	   122: SC_CAPSLOCK		EQU	$58
                            	   123: SC_ALT		EQU		$11
                            	   124: SC_LSHIFT	EQU		$12
                            	   125: SC_DEL		EQU		$71		; extend
                            	   126: SC_LCTRL	EQU		$58
                            	   127: SC_TAB      EQU		$0D
                            	   128: 
                            	   129: 	include "..\Femtiki\device.x68"

Source: "..\Femtiki\device.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2020-2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: DEV_INIT equ 0
                            	    38: DEV_STAT equ 1
                            	    39: DEV_PUTCHAR equ 2
                            	    40: DEV_PUTBUF equ 3
                            	    41: DEV_GETCHAR equ 4
                            	    42: DEV_GETBUF equ 5
                            	    43: DEV_SET_INPOS equ 6
                            	    44: DEV_SET_OUTPOS equ 7
                            	    45: DEV_GETCHAR_DIRECT equ 8
                            	    46: DEV_PEEKCHAR equ 9
                            	    47: DEV_PEEKCHAR_DIRECT equ 10
                            	    48: DEV_PUTCHAR_DIRECT equ 11
                            	    49: DEV_CLEAR equ 12
                            	    50: DEV_SWAPBUF equ 13
                            	    51: DEV_SETBUF1 equ 14
                            	    52: DEV_SETBUF2 equ 15
                            	    53: DEV_GETBUF1 equ 16
                            	    54: DEV_GETBUF2 equ 17
                            	    55: DEV_WRITEAT equ 18
                            	    56: DEV_SETUNIT equ 19
                            	    57: DEV_GET_DIMEN equ 20
                            	    58: DEV_GET_COLOR equ 21
                            	    59: DEV_GET_INPOS equ 22
                            	    60: DEV_GET_OUTPOS equ 23
                            	    61: DEV_GET_OUTPTR equ 24
                            	    62: DEV_SET_COLOR equ 25
                            	    63: DEV_SET_COLOR123 equ 26
                            	    64: 
                            	    65: DCB_MAGIC equ	0			; 'DCB'
                            	    66: DCB_NAME	equ 4			; 15 chars+NULL
                            	    67: DCB_CMDPROC	equ 24	; 8 byte pointer to command processor
                            	    68: DCB_OUTPOSX equ 32
                            	    69: DCB_OUTPOSY equ 36
                            	    70: DCB_OUTPOSZ equ 40
                            	    71: DCB_INPOSX equ 44
                            	    72: DCB_INPOSY equ 48
                            	    73: DCB_INPOSZ equ 52
                            	    74: DCB_INBUFPTR equ 56
                            	    75: DCB_OUTBUFPTR equ 60
                            	    76: DCB_INBUFSIZE equ 64
                            	    77: DCB_OUTBUFSIZE equ 68
                            	    78: DCB_INDIMX equ 72
                            	    79: DCB_INDIMY equ 76
                            	    80: DCB_INDIMZ equ 80
                            	    81: DCB_OUTDIMX equ 84
                            	    82: DCB_OUTDIMY equ 88
                            	    83: DCB_OUTDIMZ equ 92
                            	    84: DCB_BKCOLOR equ 96
                            	    85: DCB_FGCOLOR equ 100
                            	    86: DCB_OPCODE equ 104
                            	    87: DCB_LASTERC equ 108
                            	    88: DCB_INBUFPTR2 equ 112
                            	    89: DCB_OUTBUFPTR2 equ 116
                            	    90: DCB_INBUFSIZE2 equ 120
                            	    91: DCB_OUTBUFSIZE2 equ 124
                            	    92: DCB_UNIT equ 128
                            	    93: DCB_SIZE equ 132
                            	    94: 
                            	    95: ;Standard Devices are:
                            	    96: 
                            	    97: ;#		Device					Standard name
                            	    98: 
                            	    99: ;0		NULL device 			NUL		(OS built-in)
                            	   100: ;1		Keyboard (sequential)	KBD		(OS built-in, ReadOnly)
                            	   101: ;2		Video (sequential)		VID		(OS built-in, WriteOnly)
                            	   102: ;3		Printer (parallel 1)	LPT		(OS built-in)
                            	   103: ;4		Printer (parallel 2)	LPT2	(OS built-in)
                            	   104: ;5		RS-232 1				COM1	(OS built-in)
                            	   105: ;6		RS-232 2				COM2	(OS built-in)
                            	   106: ;7		RS-232 3				COM3	(OS built-in)
                            	   107: ;8		RS-232 4				COM4	(OS built-in)
                            	   108: ;9
                            	   109: ;10		Floppy					FD0 	(OS built-in)
                            	   110: ;11		Floppy					FD1 	(OS built-in)
                            	   111: ;12		Hard disk				HD0 	(OS built-in)
                            	   112: ;13		Hard disk				HD1 	(OS built-in)
                            	   113: ;14
                            	   114: ;15
                            	   115: ;16
                            	   116: ;17
                            	   117: ;18
                            	   118: ;19
                            	   119: ;20
                            	   120: ;21
                            	   121: ;22
                            	   122: ;23
                            	   123: 

Source: "boot.x68"
                            	   130: 	include "..\Femtiki\FemtikiTop.x68"

Source: "..\Femtiki\FemtikiTop.x68"
                            	     1: 	include "..\Femtiki\const.x68"

Source: "..\Femtiki\const.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2020-2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: TS_NONE			EQU		0
                            	    38: TS_READY		EQU		1
                            	    39: TS_DEAD			EQU		2
                            	    40: TS_MSGRDY		EQU		4
                            	    41: TS_WAITMSG	EQU		8
                            	    42: TS_TIMEOUT	EQU		16
                            	    43: TS_PREEMPT	EQU		32
                            	    44: TS_RUNNING	EQU		128
                            	    45: 
                            	    46: ; error codes
                            	    47: E_Ok		EQU		$00
                            	    48: E_Arg		EQU		$01
                            	    49: E_Func  EQU    $02
                            	    50: E_BadMbx	EQU		$04
                            	    51: E_QueFull	EQU		$05
                            	    52: E_NoThread	EQU		$06
                            	    53: E_NotAlloc	EQU		$09
                            	    54: E_NotSupported EQU $0A
                            	    55: E_NoMsg		EQU		$0b
                            	    56: E_Timeout	EQU		$10
                            	    57: E_BadAlarm	EQU		$11
                            	    58: E_NotOwner	EQU		$12
                            	    59: E_QueStrategy EQU		$13
                            	    60: E_DCBInUse	EQU		$19
                            	    61: ; Device driver errors
                            	    62: E_BadDevNum	EQU		$20
                            	    63: E_NoDev		EQU		$21
                            	    64: E_BadDevOp	EQU		$22
                            	    65: E_ReadError	EQU		$23
                            	    66: E_WriteError EQU		$24
                            	    67: E_BadBlockNum	EQU	$25
                            	    68: E_TooManyBlocks	EQU	$26
                            	    69: 
                            	    70: ; resource errors
                            	    71: E_NoMoreMbx	EQU		$40
                            	    72: E_NoMoreMsgBlks	EQU	$41
                            	    73: E_NoMoreAlarmBlks	EQU $44
                            	    74: E_NoMoreTCBs	EQU	$45
                            	    75: E_NoMem		EQU 12
                            	    76: 
                            	    77: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     2: 	include "..\Femtiki\config.x68"

Source: "..\Femtiki\config.x68"
                            	     1: MAX_TID		EQU		4095
                            	     2: NR_TCB		EQU		4096
                            	     3: NTASK     EQU   4096    ; number of threads allowed
                            	     4: LOG_TCBSZ	EQU		8
                            	     5: LOG_PGSZ	EQU		10
                            	     6: LOG_ACBSZ EQU   12
                            	     7: OSPAGES		EQU		16			; pages of memory dedicated to OS
                            	     8: PAGESZ    EQU   16384  	; size of a page of memory
                            	     9: MEMSZ     EQU   32768   ; pages
                            	    10: MBX_BLOCKPTR_BUFSZ  EQU   8 ; number of block pointer entries
                            	    11: NR_MSG		EQU		21842		; number of messages available
                            	    12: NR_MBX		EQU		9792
                            	    13: 
                            	    14: 
                            	    15: 
                            	    16: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     3: 	include "..\Femtiki\types.x68"

Source: "..\Femtiki\types.x68"
                            	     1: ; Thread Control Block
                            	     2: TCBMagic    EQU		$0000
                            	     3: TCBRegs  		EQU   $0004		; register set storage area
                            	     4: TCBUSP			EQU		$0044
                            	     5: TCBSSP			EQU		$0048
                            	     6: TCBSR				EQU		$004C
                            	     7: TCBPC				EQU		$0050
                            	     8: TCBStatus		EQU		$0054
                            	     9: TCBPriority	EQU		$0055
                            	    10: TCBWaitMbx	EQU		$0056
                            	    11: TCBHasFocus EQU   $005A
                            	    12: TCBStackBot	EQU		$005C
                            	    13: TCBMsgD1		EQU		$0060
                            	    14: TCBMsgD2		EQU		$0064
                            	    15: TCBMsgD3		EQU		$0068
                            	    16: TCBStartTick	EQU	$006C
                            	    17: TCBEndTick	EQU		$0070
                            	    18: TCBTicks		EQU		$0074
                            	    19: TCBException	EQU	$0078
                            	    20: TCBNext			EQU		$007C
                            	    21: TCBPrev			EQU		$0080
                            	    22: TCBAffinityBase	EQU	$0082
                            	    23: TCBAffinity	EQU		$0084
                            	    24: TCBTimeout	EQU		$0088
                            	    25: TCBtid      EQU   $008C
                            	    26: TCBmid      EQU   $0090
                            	    27: TCBappid    EQU   $0094
                            	    28: TCBOpMode   EQU   $0098
                            	    29: TCBMbxNext  EQU   $009C
                            	    30: TCBMbxPrev  EQU   $00A0
                            	    31: TCBThreadNum  EQU   $00A4
                            	    32: TCBAcbNext	EQU		$00A8
                            	    33: TCBAcbPrev	EQU		$00AC
                            	    34: TCBhMailboxes	EQU		$00B0
                            	    35: TCBName			EQU		$00C0
                            	    36: TCB_SIZE		EQU		$0100
                            	    37: 
                            	    38: MBX_MAGIC		equ		0
                            	    39: MBX_OWNER		equ		4		; tid of owning task
                            	    40: MBX_LINK    equ   8
                            	    41: MBX_TQHEAD  equ   12   ; link field for free list shared with task queue head
                            	    42: MBX_TQTAIL  equ   16
                            	    43: MBX_MQHEAD	equ		20
                            	    44: MBX_MQTAIL	equ		24
                            	    45: MBX_SIZE		equ		32
                            	    46: 
                            	    47: MSG_MAGIC   equ   0
                            	    48: MSG_LINK	  equ		4
                            	    49: MSG_RETADR  equ   8
                            	    50: MSG_TGTADR  equ   12
                            	    51: MSG_TYPE    equ   16
                            	    52: MSG_D1		  equ		20
                            	    53: MSG_D2		  equ		24
                            	    54: MSG_D3		  equ		28
                            	    55: MSG_SIZE	  equ		32
                            	    56: 
                            	    57: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     4: 
                            	     5: 	include "..\Femtiki\source\kernel\Femtiki_vars.x68"

Source: "..\Femtiki\source\kernel\Femtiki_vars.x68"
                            	     1: 
                            	     2: PAMShareCounts	EQU	$20000000	; one byte for each physical page of memory
                            	     3: tcbs						EQU	$20010000	; 4095*256 = 1MB
                            	     4: tcbs_end				EQU	$20020000
                            	     5: messages				EQU	$20020000	; 32*8192 (680*16=21760 messages)
                            	     6: messages_end		EQU	$20060000
                            	     7: mailboxes				EQU	$20060000
                            	     8: mailboxes_end		EQU	$20078000	;	12*8192 (816*12=9792 mailboxes)
                            	     9: acbs						EQU	$20080000	; 32*2*8192 =512kB
                            	    10: acbs_end				EQU	$20100000
                            	    11: 
                            	    12: 
                            	    13: sys_stacks			EQU	$DF0000
                            	    14: 
                            	    15: FemtikiVars			EQU	$00100200
                            	    16: PAMLastAllocate2	EQU		$00100218
                            	    17: RunningAID		EQU		$00100220
                            	    18: RunningTCB			EQU		$00100224
                            	    19: ACBPtrs				EQU		$00100228
                            	    20: MidStackBottoms	EQU		$00100264
                            	    21: FemtikiInited	EQU		$00100284
                            	    22: missed_ticks	EQU		$00100288
                            	    23: IOFocusList		EQU		$0010028C
                            	    24: IOFocusID			EQU		$001002AC
                            	    25: iof_switch		EQU		$001002AD
                            	    26: nMessage			EQU		$001002AE
                            	    27: nMailbox			EQU		$001002B0
                            	    28: hKeybdMbx			EQU		$001002BA
                            	    29: hFocusSwitchMbx		EQU		$001002BC
                            	    30: BIOS_RespMbx	EQU		$001002BE
                            	    31: hasUltraHighPriorityTasks	EQU		$001002C0
                            	    32: im_save				EQU		$001002C2
                            	    33: sp_tmp				EQU		$001002C4
                            	    34: startQNdx			EQU		$001002C6
                            	    35: NPAGES				EQU		$001002D8
                            	    36: syspages			EQU		$001002DA
                            	    37: mmu_FreeMaps	EQU		$001002E0
                            	    38: mmu_entries		EQU		$00100300
                            	    39: freelist			EQU		$00100302
                            	    40: hSearchMap		EQU		$00100304
                            	    41: OSActive			EQU		$00100305
                            	    42: FreeACB				EQU		$00100308
                            	    43: FreeTCB				EQU		$0010030C
                            	    44: FreeMSG				EQU		$00100310
                            	    45: FreeMBX				EQU		$00100314
                            	    46: TimeoutList		EQU		$00100318
                            	    47: QueueCycle    EQU   $0010031C
                            	    48: readyQ				EQU		$00100320		; 32 bytes per queue per core, 2 cores for now
                            	    49: readyQEnd			EQU		$00100360
                            	    50: FemtikiVars_end	EQU	$00100400
                            	    51: 
                            	    52: ;gc_stack		rmb		512
                            	    53: ;gc_pc				fcdw		0
                            	    54: ;gc_omapno		fcw			0
                            	    55: ;gc_mapno		fcw			0
                            	    56: ;gc_dl				fcw			0
                            	    57: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     6: 	code
                            	     7: 	even
                            	     8: 	include "..\Femtiki\source\kernel\tcb.x68"

Source: "..\Femtiki\source\kernel\tcb.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ; Initialize variables related to TCBs.
                            	    39: ;------------------------------------------------------------------------------
                            	    40: 
                            	    41: TCBInit:
00:00000000 41F920010000    	    42: 	lea tcbs,a0
00:00000006 4E7B8013        	    43: 	movec a0,tcba
00:0000000A 700F            	    44: 	moveq #2*8-1,d0		; 2 cores, 32 bytes (8 lwords) per queue
00:0000000C 72FF            	    45: 	moveq #-1,d1			; value to set
00:0000000E 41F900100320    	    46: 	lea readyQ,a0			; clear out ready queue
                            	    47: .0001
00:00000014 20C1            	    48: 	move.l d1,(a0)+
00:00000016 51C8FFFC        	    49: 	dbra d0,.0001
00:0000001A 203C0003FFFF    	    50: 	move.l #TCB_SIZE*NR_TCB/4-1,d0
                            	    51: .clearTCBs
00:00000020 4298            	    52: 	clr.l (a0)+
00:00000022 51C8FFFC        	    53: 	dbra d0,.clearTCBs
00:00000026 4E75            	    54: 	rts
                            	    55: 
                            	    56: ;------------------------------------------------------------------------------
                            	    57: ; Convert a TCB handle into a pointer.
                            	    58: ;
                            	    59: ; Parameters:
                            	    60: ;		d0 = TCB handle
                            	    61: ; Returns:
                            	    62: ;		a0 = pointer to TCB
                            	    63: ;------------------------------------------------------------------------------
                            	    64: 
                            	    65: TCBHandleToPointer:
00:00000028 2F01            	    66: 	move.l d1,-(a7)
00:0000002A 028000000FFF    	    67: 	andi.l #MAX_TID,d0		; limit to # threads
00:00000030 4E7A1013        	    68: 	movec tcba,d1
00:00000034 E188            	    69: 	lsl.l #8,d0
00:00000036 D280            	    70: 	add.l d0,d1
00:00000038 2041            	    71: 	move.l d1,a0
00:0000003A E088            	    72: 	lsr.l #8,d0						; restore d0
00:0000003C 221F            	    73: 	move.l (a7)+,d1
00:0000003E 4E75            	    74: 	rts
                            	    75: 
                            	    76: ;------------------------------------------------------------------------------
                            	    77: ; Convert a TCB pointer into a handle.
                            	    78: ;
                            	    79: ; Parameters:
                            	    80: ;		a0 = TCB pointer
                            	    81: ; Returns:
                            	    82: ;		d0 = TCB handle
                            	    83: ;------------------------------------------------------------------------------
                            	    84: 
                            	    85: TCBPointerToHandle:
00:00000040 2F01            	    86: 	move.l d1,-(a7)				; save d1
00:00000042 4E7A1013        	    87: 	movec tcba,d1
00:00000046 91C1            	    88: 	sub.l d1,a0
00:00000048 2008            	    89: 	move.l a0,d0
00:0000004A E088            	    90: 	lsr.l #8,d0
00:0000004C 221F            	    91: 	move.l (a7)+,d1				; restore d1
00:0000004E 4E75            	    92: 	rts
                            	    93: 
                            	    94: ;------------------------------------------------------------------------------
                            	    95: ; Internal TCB allocation function.
                            	    96: ;
                            	    97: ; Parameters:
                            	    98: ;		none
                            	    99: ; Returns:
                            	   100: ;		d0 = handle for allocated TCB, NULL if none available
                            	   101: ;------------------------------------------------------------------------------
                            	   102: 
                            	   103: TCBIAlloc:
00:00000050 30390010030C    	   104: 	move.w FreeTCB,d0				; d1 = Free handle
00:00000056 6714            	   105: 	beq .0001
00:00000058 2F08            	   106: 	move.l a0,-(sp)
00:0000005A 61CC            	   107: 	bsr TCBHandleToPointer	; convert to pointer
00:0000005C 3228007C        	   108: 	move.w TCBNext(a0),d1		; d1 = next on free list
00:00000060 33C10010030C    	   109: 	move.w d1,FreeTCB				; update head of free list
00:00000066 61D8            	   110: 	bsr TCBPointerToHandle	; convert pointer to handle
00:00000068 205F            	   111: 	move.l (sp)+,a0
00:0000006A 4E75            	   112: 	rts
                            	   113: 	; Here there was no free TCB available. Return a NULL
                            	   114: .0001
00:0000006C 4E75            	   115: 	rts
                            	   116: 	
                            	   117: ;------------------------------------------------------------------------------
                            	   118: ; TCB allocation function. Locks the system semaphore during allocation.
                            	   119: ;
                            	   120: ; Parameters:
                            	   121: ;		none
                            	   122: ; Returns:
                            	   123: ;		d0 = handle for allocated TCB, NULL if none available
                            	   124: ;		d1 = E_Ok
                            	   125: ;------------------------------------------------------------------------------
                            	   126: 
                            	   127: TCBAlloc:
00:0000006E 61000326        	   128: 	bsr LockSysSemaphore
00:00000072 61DC            	   129: 	bsr	TCBIAlloc
00:00000074 61000330        	   130: 	bsr UnlockSysSemaphore
00:00000078 7200            	   131: 	moveq #E_Ok,d1
00:0000007A 4E75            	   132: 	rts
                            	   133: 	
                            	   134: ;------------------------------------------------------------------------------
                            	   135: ; Internal TCB free function.
                            	   136: ;
                            	   137: ; Modifies:
                            	   138: ;		none
                            	   139: ; Parameters:
                            	   140: ;		d0 = handle to TCB
                            	   141: ; Returns:
                            	   142: ;		d0 = handle to TCB
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: TCBIFree:
00:0000007C 2F08            	   146: 	move.l a0,-(sp)
00:0000007E 61A8            	   147: 	bsr TCBHandleToPointer
00:00000080 31790010030C007C	   148: 	move.w FreeTCB,TCBNext(a0)
00:00000088 33C00010030C    	   149: 	move.w d0,FreeTCB
00:0000008E 205F            	   150: 	move.l (sp)+,a0
00:00000090 4E75            	   151: 	rts
                            	   152: 
                            	   153: ;------------------------------------------------------------------------------
                            	   154: ; TCB free function. Locks the system sempaphore while freeing.
                            	   155: ;
                            	   156: ; Modifies:
                            	   157: ;		none
                            	   158: ; Parameters:
                            	   159: ;		d0 = handle to TCB
                            	   160: ; Returns:
                            	   161: ;		d0 = handle to TCB
                            	   162: ;		d1 = E_Ok
                            	   163: ;------------------------------------------------------------------------------
                            	   164: 
                            	   165: TCBFree:
00:00000092 61000302        	   166: 	bsr LockSysSemaphore
00:00000096 61E4            	   167: 	bsr TCBIFree
00:00000098 6100030C        	   168: 	bsr UnlockSysSemaphore
00:0000009C 7200            	   169: 	moveq #E_Ok,d1
00:0000009E 4E75            	   170: 	rts
                            	   171: 
                            	   172: ;------------------------------------------------------------------------------
                            	   173: ; Given an affinity, chose the core number to run on.
                            	   174: ;
                            	   175: ; Parameters:
                            	   176: ;		a0 = pointer to TCB
                            	   177: ;	Returns:
                            	   178: ;		d0 = core number to run on
                            	   179: ;------------------------------------------------------------------------------
                            	   180: 
                            	   181: TCBAffineChose:
00:000000A0 48E75000        	   182: 	movem.l d1/d3,-(sp)
00:000000A4 363C001F        	   183: 	move.w #31,d3										; limit number of bit selects to 32
00:000000A8 12280082        	   184: 	move.b TCBAffinityBase(a0),d1		; d1 = starting bit
00:000000AC 20280084        	   185: 	move.l TCBAffinity(a0),d0				; d0 = affinity mask
                            	   186: .0002
00:000000B0 0300            	   187: 	btst.l d1,d0										; is bit d1 set?
00:000000B2 6610            	   188: 	bne .0001												; if set, exit loop
00:000000B4 5241            	   189: 	addq #1,d1
00:000000B6 51CBFFF8        	   190: 	dbra d3,.0002
                            	   191: 	; no bits set? How?
00:000000BA 117C00020082    	   192: 	move.b #2,TCBAffinityBase(a0)
00:000000C0 7000            	   193: 	moveq #0,d0											; just return core #2 (0)
00:000000C2 4E75            	   194: 	rts
                            	   195: .0001
00:000000C4 1001            	   196: 	move.b d1,d0
00:000000C6 5500            	   197: 	subi.b #2,d0										; cores start at #2
00:000000C8 4880            	   198: 	ext.w d0
00:000000CA 48C0            	   199: 	ext.l d0
00:000000CC 5241            	   200: 	addq #1,d1											; increment bit selection for next time
00:000000CE 11410082        	   201: 	move.b d1,TCBAffinityBase(a0)		; and store in TCB
00:000000D2 4CDF000A        	   202: 	movem.l (sp)+,d1/d3
00:000000D6 4E75            	   203: 	rts
                            	   204: 
                            	   205: ;------------------------------------------------------------------------------
                            	   206: ; Insert thread into ready queue. The thread is added at the tail of the 
                            	   207: ; queue. The queue is a doubly linked list.
                            	   208: ;
                            	   209: ; Stack Space:
                            	   210: ;		8 lwords
                            	   211: ; Modifies:
                            	   212: ;		none
                            	   213: ; Parameters:
                            	   214: ;		d0 = thread id to insert
                            	   215: ; Returns:
                            	   216: ;		d0 = TCB handle
                            	   217: ; ----------------------------------------------------------------------------
                            	   218: 
                            	   219: TCBInsertIntoReadyQueue:
00:000000D8 48E770F0        	   220: 	movem.l d1-d3/a0-a3,-(sp)
00:000000DC 2400            	   221: 	move.l d0,d2											; d2 = thread to insert
00:000000DE 6100FF48        	   222: 	bsr TCBHandleToPointer
00:000000E2 2648            	   223: 	move.l a0,a3											; a3 = TCB pointer of thread to insert
00:000000E4 610002B0        	   224: 	bsr LockSysSemaphore
00:000000E8 002800800054    	   225: 	ori.b #TS_RUNNING,TCBStatus(a0)
00:000000EE 61B0            	   226: 	bsr TCBAffineChose								; Chose which cores queue to use
00:000000F0 EB88            	   227: 	lsl.l #5,d0												; 32 bytes per readyQ head/tail per core
00:000000F2 7200            	   228: 	clr.l d1
00:000000F4 12280055        	   229: 	move.b TCBPriority(a0),d1					; d1 = priority
00:000000F8 028100000007    	   230: 	andi.l #7,d1
00:000000FE E589            	   231: 	lsl.l #2,d1												; 4 bytes per priority level
00:00000100 D280            	   232: 	add.l d0,d1												; add in base queue
00:00000102 D2BC00100320    	   233: 	add.l #readyQ,d1									; add in start of ready queues
00:00000108 2241            	   234: 	move.l d1,a1
00:0000010A 30290004        	   235: 	move.w 4(a1),d0										; d0 = tail entry
00:0000010E 3600            	   236: 	move.w d0,d3											; d3 = tail entry
00:00000110 4A40            	   237: 	tst.w d0
00:00000112 6D20            	   238: 	blt .qempty
00:00000114 6100FF12        	   239: 	bsr TCBHandleToPointer						; a0 = pointer to tail
00:00000118 2448            	   240: 	move.l a0,a2
00:0000011A 2038007C        	   241: 	move.l TCBNext,d0
00:0000011E 6100FF08        	   242: 	bsr TCBHandleToPointer						; a0 = tail->next
00:00000122 21420080        	   243: 	move.l d2,TCBPrev(a0)							; tail->next->prev = new entry
00:00000126 2542007C        	   244: 	move.l d2,TCBNext(a2)							; tail->next = new entry
00:0000012A 2740007C        	   245: 	move.l d0,TCBNext(a3)							; new entry->next = tail->next
00:0000012E 27430080        	   246: 	move.l d3,TCBPrev(a3)							; new entry->prev = tail
00:00000132 6012            	   247: 	bra .0002
                            	   248: .qempty
00:00000134 4A51            	   249: 	tst.w (a1)												; check if there is a list head
00:00000136 6C0E            	   250: 	bge .0002													; head with no tail -> list corrupt
00:00000138 33420004        	   251: 	move.w d2,4(a1)										; head and tail equal new entry
00:0000013C 3282            	   252: 	move.w d2,(a1)
00:0000013E 3742007C        	   253: 	move.w d2,TCBNext(a3)							; next and prev of new entry point to self
00:00000142 37420080        	   254: 	move.w d2,TCBPrev(a3)
                            	   255: 	; Head but no tail, list corrupt?
                            	   256: .0002
00:00000146 6100025E        	   257: 	bsr UnlockSysSemaphore
00:0000014A 4CDF0F0E        	   258: 	movem.l (sp)+,d1-d3/a0-a3
00:0000014E 4E75            	   259: 	rts
                            	   260: 
                            	   261: ;------------------------------------------------------------------------------
                            	   262: ; Remove a thread from the ready queue. Actual removal is not done here, it
                            	   263: ; is done the next time the thread is selected to run. Just mark the thread as
                            	   264: ; not running.
                            	   265: ;
                            	   266: ; Parameters:
                            	   267: ;		d0 = thread id to remove
                            	   268: ; Returns:
                            	   269: ;		none
                            	   270: ; -----------------------------------------------------------------------------
                            	   271: 
                            	   272: TCBRemoveFromReadyQueue:
00:00000150 4A40            	   273: 	cmpi.w #0,d0
00:00000152 6D1C            	   274: 	blt .0001
00:00000154 028000000FFF    	   275: 	andi.l #MAX_TID,d0									; limit to # of threads
00:0000015A 2F08            	   276: 	move.l a0,-(sp)
00:0000015C 6100FECA        	   277: 	bsr	TCBHandleToPointer
00:00000160 61000234        	   278: 	bsr LockSysSemaphore
00:00000164 0228007F0054    	   279: 	andi.b #TS_RUNNING^$FF,TCBStatus(a0)
00:0000016A 6100023A        	   280: 	bsr UnlockSysSemaphore
00:0000016E 205F            	   281: 	move.l (sp)+,a0
                            	   282: .0001
00:00000170 4E75            	   283: 	rts
                            	   284: 	
                            	   285: ; ----------------------------------------------------------------------------
                            	   286: ; Register Usage
                            	   287: ;		d0 = temporary
                            	   288: ;		d1 = index into list of queues
                            	   289: ;		d2 = index to queue set
                            	   290: ;		d4 = queue counter, goes from 7 down to 0
                            	   291: ;		d5 = temporary
                            	   292: ;		d6 = next on list
                            	   293: ;		a0 = temporary pointer to TCB
                            	   294: ;		a1 = pointer to queue
                            	   295: ;		a2 = pointer to old head of list
                            	   296: ;		a3 = pointer to TCB at head of queue
                            	   297: ; Modifies:
                            	   298: ;		none
                            	   299: ; Parameters:
                            	   300: ;		none
                            	   301: ; Returns:
                            	   302: ;		a0 = pointer to TCB, NULL if none on list
                            	   303: ;		d0 = TCB handle
                            	   304: ; ----------------------------------------------------------------------------
                            	   305: 
                            	   306: StartQ
00:00000172 01              	   307: 	dc.b 1,2,3,4,1,5,6,7
00:00000173 02
00:00000174 03
00:00000175 04
00:00000176 01
00:00000177 05
00:00000178 06
00:00000179 07
                            	   308: 
                            	   309: 	even
                            	   310: TCBPopReadyQueue:
00:0000017A 48E77E70        	   311: 	movem.l	d1-d6/a1-a3,-(a7)
00:0000017E 4E7A2FE0        	   312: 	movec coreno,d2					; select the queue set based on the core number
00:00000182 5502            	   313: 	subi.b #2,d2						; cores start at #2
00:00000184 EB8A            	   314: 	lsl.l #5,d2							; d2 = index to queue set, 32 bytes per queue set
00:00000186 7807            	   315: 	moveq #7,d4							; d4 = queue count
00:00000188 6100020C        	   316: 	bsr LockSysSemaphore
                            	   317: 	; One in four tries pick a different priority to start searching from. 
00:0000018C 12390010031C    	   318: 	move.b QueueCycle,d1		; increment Queue cycle counter
00:00000192 5201            	   319: 	addi.b #1,d1
00:00000194 02010007        	   320: 	andi.b #7,d1
00:00000198 13C10010031C    	   321: 	move.b d1,QueueCycle
00:0000019E 6612            	   322: 	bne	.0001
00:000001A0 43FAFFD0        	   323: 	lea StartQ,a1
00:000001A4 4881            	   324: 	ext.w d1
00:000001A6 12311000        	   325: 	move.b (a1,d1.w),d1
00:000001AA 02410007        	   326: 	andi.w #7,d1						; limit to number of queues
00:000001AE E549            	   327: 	lsl.w #2,d1							; make into lword index
00:000001B0 6002            	   328: 	bra .0002
                            	   329: .0001
00:000001B2 7200            	   330: 	moveq #0,d1							; start at Queue #0
                            	   331: .0002
00:000001B4 43F900100320    	   332: 	lea readyQ,a1						; a1 = pointer to list of ready queues
00:000001BA D3C2            	   333: 	add.l d2,a1							; a1 = pointer to queue set
00:000001BC 36311000        	   334: 	move.w (a1,d1.w),d3			; d3 = old head of list
00:000001C0 6D4E            	   335: 	blt .nextQ							; anything on list?, if not go next queue
00:000001C2 3003            	   336: 	move.w d3,d0						; d0 = old head of list
00:000001C4 6100FE62        	   337: 	bsr TCBHandleToPointer
00:000001C8 2448            	   338: 	move.l a0,a2						; a2 = pointer to old head of list
00:000001CA 3A2A007C        	   339: 	move.w TCBNext(a2),d5		; remove head of list from list
00:000001CE BA80            	   340: 	cmp.l d0,d5							; removing last TCB?
00:000001D0 6736            	   341: 	beq .removeLast
00:000001D2 3C05            	   342: 	move.w d5,d6						; d6 = next on list
00:000001D4 3005            	   343: 	move.w d5,d0						; d0 = next on list
00:000001D6 6100FE50        	   344: 	bsr TCBHandleToPointer	; a0 = pointer to next TCB on list
00:000001DA 3A2A0080        	   345: 	move.w TCBPrev(a2),d5		; d5 = previous TCB from head
00:000001DE 31450080        	   346: 	move.w d5,TCBPrev(a0)		; next->prev = head->prev
00:000001E2 3005            	   347: 	move.w d5,d0
00:000001E4 6100FE42        	   348: 	bsr TCBHandleToPointer	; a0 = pointer to previous TCB from head
00:000001E8 3146007C        	   349: 	move.w d6,TCBNext(a0)		; head->prev->next = next
                            	   350: .0003
00:000001EC 33861000        	   351: 	move.w d6,(a1,d1.w)			; reset head of list to next
00:000001F0 3543007C        	   352: 	move.w d3,TCBNext(a2)		; point links back to self
00:000001F4 35430080        	   353: 	move.w d3,TCBPrev(a2)
00:000001F8 3003            	   354: 	move.w d3,d0						; return handle in d0
00:000001FA 48C0            	   355: 	ext.l d0
00:000001FC 204A            	   356: 	move.l a2,a0						; return pointer in a0
                            	   357: .0004
00:000001FE 610001A6        	   358: 	bsr UnlockSysSemaphore
00:00000202 4CDF0E7E        	   359: 	movem.l	(a7)+,d1-d6/a1-a3
00:00000206 4E75            	   360: 	rts
                            	   361: .removeLast
00:00000208 7CFF            	   362: 	moveq #-1,d6						; set head to negative when removing last
00:0000020A 33861002        	   363: 	move.w d6,2(a1,d1.w)		; tail = negative
00:0000020E 60DC            	   364: 	bra .0003
                            	   365: .nextQ
00:00000210 5841            	   366: 	addi.w #4,d1						; increment queue number by lword
00:00000212 0241001C        	   367: 	andi.w #$1C,d1					; limit to number of queues
00:00000216 51CCFF9C        	   368: 	dbra d4,.0002						; go back and check the next queue
00:0000021A 70FF            	   369: 	moveq #-1,d0						; return handle < 0 if nothing in any queue
00:0000021C 91C8            	   370: 	suba.l a0,a0						; and NULL pointer
00:0000021E 60DE            	   371: 	bra	.0004								; return NULL pointer if nothing in any queue
                            	   372: 
                            	   373: ;------------------------------------------------------------------------------
                            	   374: ; Remove a thread from the timeout list.
                            	   375: ; Called when a mailbox is freed and a thread is waiting at the
                            	   376: ; mailbox.
                            	   377: ;
                            	   378: ; Parameters:
                            	   379: ;		B = task id to remove
                            	   380: ; Modifies:
                            	   381: ;		none
                            	   382: ; Returns:
                            	   383: ;		none
                            	   384: ;------------------------------------------------------------------------------
                            	   385: 	if 0
                            	   386: RemoveFromTimeoutList:
                            	   387: 	pshs	d,w,x,y,u
                            	   388: 	cmpb	TimeoutList			; head of list?
                            	   389: 	beq		0001f
                            	   390: 	lbsr	TCBHandleToPointer
                            	   391: 	tfr		d,x
                            	   392: 	ldb		TCBNext,x
                            	   393: 	clra
                            	   394: 	tfr		d,u
                            	   395: 	ldf		TCBPrev,x
                            	   396: 	lbsr	TCBHandleToPointer
                            	   397: 	tfr		d,y
                            	   398: 	stf		TCBPrev,y
                            	   399: 	tfr		f,b
                            	   400: 	clra
                            	   401: 	lbsr	TCBHandleToPointer
                            	   402: 	tfr		d,y
                            	   403: 	tfr		u,d
                            	   404: 	stb		TCBNext,y
                            	   405: 	bra		0002f
                            	   406: 	; Removing from head of timeout list
                            	   407: 0001:
                            	   408: 	lbsr	TCBHandleToPointer
                            	   409: 	tfr		d,x
                            	   410: 	ldb		TCBNext,x
                            	   411: 	stb		TimeoutList		; set new head of list
                            	   412: 	clra
                            	   413: 	lbsr	TCBHandleToPointer
                            	   414: 	tfr		d,y
                            	   415: 	clrb
                            	   416: 	stb		TCBPrev,y			; next->prev = NULL
                            	   417: 0002:
                            	   418: 	clrd
                            	   419: 	std		TCBNext,x			; next = NULL
                            	   420: 	std		TCBPrev,x			; prev = NULL
                            	   421: 	puls	d,w,x,y,u,pc
                            	   422: 	
                            	   423: ;// ----------------------------------------------------------------------------
                            	   424: ;// Pop the top entry from the timeout list.
                            	   425: ;// ----------------------------------------------------------------------------
                            	   426: ;
                            	   427: ;hTCB PopTimeoutList()
                            	   428: ;{
                            	   429: ;    TCB *p;
                            	   430: ;    hTCB h;
                            	   431: ;
                            	   432: ;    h = TimeoutList;
                            	   433: ;    if (TimeoutList > 0 && TimeoutList < NR_TCB) {
                            	   434: ;        TimeoutList = tcbs[TimeoutList].next;
                            	   435: ;        if (TimeoutList >= 0 && TimeoutList < NR_TCB) {
                            	   436: ;            tcbs[TimeoutList].prev = h->prev;
                            	   437: ;            h->prev->next = TimeoutList;
                            	   438: ;        }
                            	   439: ;    }
                            	   440: ;    return h;
                            	   441: ;}
                            	   442: ;
                            	   443: ; Returns:
                            	   444: ;		B = task at top of list
                            	   445: ;
                            	   446: 
                            	   447: PopTimeoutList:
                            	   448: 	pshs	w,x,y
                            	   449: 	ldb		TimeoutList
                            	   450: 	pshs	b
                            	   451: 	beq		0001f
                            	   452: 	cmpb	#NR_TCB
                            	   453: 	bhs		0001f
                            	   454: 	bsr		TCBHandleToPointer
                            	   455: 	tfr		d,x
                            	   456: 	ldb		TCBNext,x
                            	   457: 	tfr		b,f
                            	   458: 	lde		TCBPrev,x
                            	   459: 	stb		TimeoutList
                            	   460: 	beq		0001f
                            	   461: 	cmpb	#NR_TCB
                            	   462: 	bhs		0001f
                            	   463: 	bsr		TCBHandleToPointer
                            	   464: 	tfr		d,y
                            	   465: 	ste		TCBPrev,y
                            	   466: 	tfr		e,b
                            	   467: 	bsr		TCBHandleToPointer
                            	   468: 	tfr		d,y
                            	   469: 	stf		TCBNext,y
                            	   470: 	clr		TCBPrev,x
                            	   471: 	clr		TCBNext,x
                            	   472: 0001:
                            	   473: 	puls	b
                            	   474: 	puls	x,y,w,pc
                            	   475: 
                            	   476: ; ----------------------------------------------------------------------------
                            	   477: ; ----------------------------------------------------------------------------
                            	   478: DispTwoSpace:
                            	   479: 	bsr	DispSpace
                            	   480: DispSpace:
                            	   481: 	ldb		#' '
                            	   482: 	swi
                            	   483: 	fcb		MF_OUTCH
                            	   484: 	rts
                            	   485: 
                            	   486: DumpTCBs:
                            	   487: 	swi
                            	   488: 	fcb		MF_CRLF
                            	   489: 	ldb		#1
                            	   490: 0002:
                            	   491: 	lbsr	TCBHandleToPointer
                            	   492: 	tfr		d,x
                            	   493: 	ldb		TCBtid,x
                            	   494: 	swi
                            	   495: 	fcb		MF_DisplayByteAsHex
                            	   496: 	bsr		DispSpace
                            	   497: 	ldb		TCBStatus,x
                            	   498: 	swi
                            	   499: 	fcb		MF_DisplayByteAsHex
                            	   500: 	bsr		DispTwoSpace
                            	   501: 	swi
                            	   502: 	fcb		MF_CRLF
                            	   503: 	ldb		TCBNext,x
                            	   504: 	beq		0001f
                            	   505: 	bra		0002b
                            	   506: 0001:
                            	   507: 	rts
                            	   508: 	
                            	   509: fcb	"TID Stat"
                            	   510: 	endif
                            	   511: 
                            	   512: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	     9: 	include "..\Femtiki\source\kernel\Femtiki.x68"

Source: "..\Femtiki\source\kernel\Femtiki.x68"
                            	     1: 	code
                            	     2: 	even
                            	     3: ;------------------------------------------------------------------------------
                            	     4: ; Initialize the Femtiki OS.
                            	     5: ;------------------------------------------------------------------------------
                            	     6: 
                            	     7: FemtikiInit:
00:00000220 7000            	     8: 	moveq #0,d0
00:00000222 4E7B0012        	     9: 	movec d0,tr
00:00000226 6100FDD8        	    10: 	bsr TCBInit
00:0000022A 42390010031C    	    11: 	clr.b QueueCycle
                            	    12: FemtikiInitIRQ:
00:00000230 43FA00DC        	    13: 	lea FemtikiTimerIRQ,a1						; Set timer IRQ vector to Femtiki
00:00000234 4E7A8801        	    14: 	movec vbr,a0
00:00000238 21490078        	    15: 	move.l a1,30*4(a0)								; vector #30
00:0000023C 4E75            	    16: 	rts
                            	    17: 
                            	    18: ;------------------------------------------------------------------------------
                            	    19: ; Operating system call dispatcher.
                            	    20: ; On entry, the task state has been saved including the system stack pointer,
                            	    21: ; in the task control block.
                            	    22: ;------------------------------------------------------------------------------
                            	    23: 
                            	    24: OSCallTable
00:0000023E 0000            	    25: 	dc.w		0
                            	    26: 
                            	    27: 	even
                            	    28: CallOS:
00:00000240 2F08            	    29: 	move.l	a0,-(a7)
00:00000242 207900100224    	    30: 	move.l	RunningTCB,a0
00:00000248 48E8FFFF0004    	    31: 	movem.l d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,TCBRegs(a0)
00:0000024E 225F            	    32: 	move.l	(a7)+,a1
00:00000250 21490020        	    33: 	move.l	a1,32(a0)
00:00000254 4E7A9800        	    34: 	movec		usp,a1
00:00000258 21490044        	    35: 	move.l	a1,TCBUSP(a0)
00:0000025C 301F            	    36: 	move.w	(a7)+,d0					; pop the status register
00:0000025E 3140004C        	    37: 	move.w	d0,TCBSR(a0)			; save in TCB
00:00000262 225F            	    38: 	move.l	(a7)+,a1					; pop the program counter
00:00000264 5489            	    39: 	lea	2(a1),a1							; increment past inline callno argument
00:00000266 21490050        	    40: 	move.l	a1,TCBPC(a0)			; save PC in TCB
00:0000026A 214F0048        	    41: 	move.l	a7,TCBSSP(a0)			; finally save SSP
00:0000026E 3029FFFE        	    42: 	move.w	-2(a1),d0					; d0 = call number
00:00000272 E548            	    43: 	lsl.w		#2,d0							; make into table index
00:00000274 43FAFFC8        	    44: 	lea			OSCallTable,a1
00:00000278 22710000        	    45: 	move.l	(a1,d0.w),a1
00:0000027C 4E91            	    46: 	jsr			(a1)							; call the OS function
                            	    47: 	; Restore the thread context and return
00:0000027E 207900100224    	    48: 	move.l	RunningTCB,a0
00:00000284 2E780048        	    49: 	move.l	TCBSSP,a7
00:00000288 2F280050        	    50: 	move.l	TCBPC(a0),-(a7)		; setup the PC and the SR on the stack
00:0000028C 3F28004C        	    51: 	move.w	TCBSR(a0),-(a7)		; prep for RTE
00:00000290 20380044        	    52: 	move.l	TCBUSP,d0					; restore user stack pointer
00:00000294 4E7B0800        	    53: 	movec		d0,usp
00:00000298 4CE800FF0004    	    54: 	movem.l	TCBRegs(a0),d0/d1/d2/d3/d4/d5/d6/d7
00:0000029E 4CE87E00002C    	    55: 	movem.l TCBRegs+40(a0),a1/a2/a3/a4/a5/a6
00:000002A4 20680024        	    56: 	move.l	TCBRegs+32(a0),a0
00:000002A8 4E73            	    57: 	rte
                            	    58: 
                            	    59: ;------------------------------------------------------------------------------
                            	    60: ; Get a pointer to the currently running TCB.
                            	    61: ;
                            	    62: ; Returns:
                            	    63: ;		a0 = pointer to running TCB
                            	    64: ;------------------------------------------------------------------------------
                            	    65: 
                            	    66: GetRunningTCBPointer:
00:000002AA 48E7C000        	    67: 	movem.l d0/d1,-(a7)
00:000002AE 4E7A0012        	    68: 	movec tr,d0
00:000002B2 6100FD74        	    69: 	bsr TCBHandleToPointer
00:000002B6 028000000FFF    	    70: 	andi.l #MAX_TID,d0		; limit to # threads
00:000002BC 4CDF0003        	    71: 	movem.l (a7)+,d0/d1
00:000002C0 4E75            	    72: 	rts
                            	    73: 
                            	    74: ; ----------------------------------------------------------------------------
                            	    75: ; Select a thread to run. Relatively easy. All that needs to be done is to
                            	    76: ; keep popping the queue until a valid running task is found. There should
                            	    77: ; always be at least one thread in the queue.
                            	    78: ;
                            	    79: ; Modifies:
                            	    80: ;		none
                            	    81: ; Returns:
                            	    82: ;		d0 = handle of the next thread to run
                            	    83: ; ----------------------------------------------------------------------------
                            	    84: 
                            	    85: SelectThreadToRun:
                            	    86: .0001										; keep popping tasks from the readyQ until a valid one
00:000002C2 6100FEB6        	    87: 	bsr	TCBPopReadyQueue	; is found.
00:000002C6 4A40            	    88: 	tst.w d0
00:000002C8 6B0C            	    89: 	bmi	.0002
00:000002CA 0C2800800054    	    90: 	cmpi.b #TS_RUNNING,TCBStatus(a0)	; ensure the thread is to be running
00:000002D0 66F0            	    91: 	bne	.0001													; if not, go get the next thread
00:000002D2 6000FE04        	    92: 	bra	TCBInsertIntoReadyQueue				; insert thread back into queue
                            	    93: 	; Nothing in queues? There is supposed to be. Add the OS task to the queue.
                            	    94: .0002
00:000002D6 4E7A8013        	    95: 	movec tcba,a0
00:000002DA 117C00800054    	    96: 	move.b #TS_RUNNING,TCBStatus(a0)	; flag as RUNNING
00:000002E0 117C00040055    	    97: 	move.b #4,TCBPriority(a0)					; OS has normal priority
00:000002E6 7000            	    98: 	moveq #0,d0												; fast pointer to handle
00:000002E8 6000FDEE        	    99: 	bra TCBInsertIntoReadyQueue
                            	   100: 
                            	   101: ; ----------------------------------------------------------------------------
                            	   102: ; Update the IRQ live indicator on screen.
                            	   103: ; ----------------------------------------------------------------------------
                            	   104: 
                            	   105: UpdateIRQLive:
00:000002EC 227900040004    	   106: 	move.l TextScr,a1					; a1 = screen address
00:000002F2 2411            	   107: 	move.l (a1),d2
00:000002F4 E15A            	   108: 	rol.w	#8,d2								; reverse byte order of d2
00:000002F6 4842            	   109: 	swap d2
00:000002F8 E15A            	   110: 	rol.w	#8,d2
00:000002FA 06010030        	   111: 	addi.b #'0',d1						; binary to ascii core number
00:000002FE D202            	   112: 	add.b	d2,d1
00:00000300 E159            	   113: 	rol.w	#8,d1								; put bytes back in order
00:00000302 4841            	   114: 	swap d1
00:00000304 E159            	   115: 	rol.w	#8,d1
00:00000306 23410004        	   116: 	move.l d1,4(a1)						; update onscreen IRQ flag
00:0000030A 5291            	   117: 	addi.l #1,(a1)						; flashy colors
00:0000030C 4E75            	   118: 	rts
                            	   119: 
                            	   120: ; ----------------------------------------------------------------------------
                            	   121: ; Femtiki IRQ service routine. This is where a thread switch can occur so,
                            	   122: ; the thread context is saved and restored.
                            	   123: ; ----------------------------------------------------------------------------
                            	   124: 
                            	   125: FemtikiTimerIRQ:
00:0000030E 46FC2600        	   126: 	move.w #$2600,sr							; disable lower level IRQs
00:00000312 2F00            	   127: 	move.l d0,-(a7)
00:00000314 2F08            	   128: 	move.l a0,-(a7)
00:00000316 6192            	   129: 	bsr GetRunningTCBPointer			; a0 = pointer to running TCB
00:00000318 48E8FFFF0004    	   130: 	movem.l #$FFFF,TCBRegs(a0)		; save all registers
00:0000031E 201F            	   131: 	move.l (a7)+,d0
00:00000320 21400020        	   132: 	move.l d0,32(a0)							; save original a0 value
00:00000324 201F            	   133: 	move.l (a7)+,d0
00:00000326 2080            	   134: 	move.l d0,(a0)								; save original d0 value
00:00000328 4E7A0800        	   135: 	movec usp,d0									; save user stack pointer
00:0000032C 21400044        	   136: 	move.l d0,TCBUSP(a0)
00:00000330 2E7C00041BFC    	   137: 	move.l #TimerStack,a7					; reset stack pointer
00:00000336 4E7A1FE0        	   138: 	movec	coreno,d1								; d1 = core number
00:0000033A 0C010002        	   139: 	cmpi.b #2,d1
00:0000033E 6612            	   140: 	bne.s	.0002
00:00000340 23FC1D000000FD09	   141: 	move.l #$1D000000,PLIC+$14		; reset edge sense circuit
00:00000348 0014
00:0000034A 13FC0001000400A0	   142: 	move.b #1,IRQFlag							; set IRQ flag for TinyBasic shell
                            	   143: .0002
00:00000352 6198            	   144: 	bsr UpdateIRQLive							; Update IRQ live indicator
                            	   145: ;	bsr ReceiveMsg								; Check for RPC
00:00000354 4E7A0FF0        	   146: 	movec tick,d0									; Update time accounting
00:00000358 21400070        	   147: 	move.l d0,TCBEndTick(a0)			; compute number of ticks thread was running
00:0000035C 90A8006C        	   148: 	sub.l	TCBStartTick(a0),d0
00:00000360 D1A80074        	   149: 	add.l	d0,TCBTicks(a0)					; add to cumulative ticks
00:00000364 117C00200054    	   150: 	move.b #TS_PREEMPT,TCBStatus(a0)	; set thread status to PREEMPT
00:0000036A 6100FF56        	   151: 	bsr	SelectThreadToRun					; d0 = TCB handle
00:0000036E 4E7B0012        	   152: 	movec d0,tr										; set running thread number in tr
00:00000372 6100FF36        	   153: 	bsr GetRunningTCBPointer			; a0 = pointer to TCB
00:00000376 117C00800054    	   154: 	move.b #TS_RUNNING,TCBStatus(a0)	; set thread status to RUNNING
00:0000037C 4E7A0FF0        	   155: 	movec	tick,d0
00:00000380 2140006C        	   156: 	move.l d0,TCBStartTick(a0)		; record starting tick
00:00000384 20280044        	   157: 	move.l TCBUSP(a0),d0					; restore user stack pointer
00:00000388 4E7B0800        	   158: 	movec d0,usp
00:0000038C 4CE8FFFF0004    	   159: 	movem.l TCBRegs(a0),#$FFFF		; restore all registers
00:00000392 504F            	   160: 	addq #8,sp										; "pop" d0/a0, saved stack pointer is off by 8
00:00000394 4E73            	   161: 	rte														; and return
                            	   162: 
                            	   163: 	include "..\Femtiki\source\kernel\Semaphore.x68"

Source: "..\Femtiki\source\kernel\Semaphore.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@finitron.ca
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;-------------------------------------------------------------------------------
                            	    38: ; Lock the system semaphore. Call the BIOS.
                            	    39: ;
                            	    40: ; Parameters:
                            	    41: ;		none
                            	    42: ; Returns:
                            	    43: ;		none
                            	    44: ;-------------------------------------------------------------------------------
                            	    45: 
                            	    46: LockSysSemaphore:
00:00000396 48E7C000        	    47: 	movem.l d0/d1,-(sp)
00:0000039A 7025            	    48: 	moveq #37,d0				; lock semaphore
00:0000039C 7208            	    49: 	moveq #FMTK_SEMA,d1
00:0000039E 4E4F            	    50: 	trap #15
00:000003A0 4CDF0003        	    51: 	movem.l (sp)+,d0/d1
00:000003A4 4E75            	    52: 	rts
                            	    53: 
                            	    54: 
                            	    55: ;-------------------------------------------------------------------------------
                            	    56: ; Unlock the system semaphore.
                            	    57: ;
                            	    58: ; Parameters:
                            	    59: ;		none
                            	    60: ; Returns:
                            	    61: ;		none
                            	    62: ;-------------------------------------------------------------------------------
                            	    63: 
                            	    64: UnlockSysSemaphore:
00:000003A6 48E7C000        	    65: 	movem.l d0/d1,-(sp)
00:000003AA 7026            	    66: 	moveq #38,d0				; unlock semaphore
00:000003AC 7208            	    67: 	moveq #FMTK_SEMA,d1
00:000003AE 4E4F            	    68: 	trap #15
00:000003B0 4CDF0003        	    69: 	movem.l (sp)+,d0/d1
00:000003B4 4E75            	    70: 	rts
                            	    71: 
                            	    72: 

Source: "..\Femtiki\source\kernel\Femtiki.x68"
                            	   164: 
                            	   165: 

Source: "..\Femtiki\FemtikiTop.x68"
                            	    10: 

Source: "boot.x68"
                            	   131: 
                            	   132: DDATA EQU $FFFFFFF0     ; DS.L    3
                            	   133: HISPC EQU $FFFFFFFC     ; DS.L    1
                            	   134: SCREEN_FORMAT = 1
                            	   135: 
                            	   136: 	if HAS_MMU
                            	   137: TEXTREG		EQU	$1E3FF00	; virtual addresses
                            	   138: txtscreen	EQU	$1E00000
                            	   139: semamem		EQU	$1E50000
                            	   140: ACIA			EQU	$1E60000
                            	   141: ACIA_RX		EQU	0
                            	   142: ACIA_TX		EQU	0
                            	   143: ACIA_STAT	EQU	4
                            	   144: ACIA_CMD	EQU	8
                            	   145: ACIA_CTRL	EQU	12
                            	   146: I2C2 			equ $01E69000
                            	   147: I2C_PREL 	equ 0
                            	   148: I2C_PREH 	equ 1
                            	   149: I2C_CTRL 	equ 2
                            	   150: I2C_RXR 	equ 3
                            	   151: I2C_TXR 	equ 3
                            	   152: I2C_CMD 	equ 4
                            	   153: I2C_STAT 	equ 4
                            	   154: PLIC			EQU	$1E90000
                            	   155: MMU				EQU $FDC00000	; physical address
                            	   156: leds			EQU	$1EFFF00	; virtual addresses
                            	   157: keybd			EQU	$1EFFE00
                            	   158: KEYBD			EQU	$1EFFE00
                            	   159: RAND			EQU	$1EFFD00
                            	   160: RAND_NUM	EQU	$1EFFD00
                            	   161: RAND_STRM	EQU	$1EFFD04
                            	   162: RAND_MZ		EQU $1EFFD08
                            	   163: RAND_MW		EQU	$1EFFD0C
                            	   164: RST_REG		EQU	$1EFFC00
                            	   165: IO_BITMAP	EQU $1F00000
                            	   166: 	else
                            	   167: TEXTREG		EQU	$FD080000
                            	   168: txtscreen	EQU	$FD000000
                            	   169: semamem		EQU	$FD050000
                            	   170: ACIA			EQU	$FD060000
                            	   171: ACIA_RX		EQU	0
                            	   172: ACIA_TX		EQU	0
                            	   173: ACIA_STAT	EQU	4
                            	   174: ACIA_CMD	EQU	8
                            	   175: ACIA_CTRL	EQU	12
                            	   176: I2C2 			equ $FD069000
                            	   177: I2C_PREL 	equ 0
                            	   178: I2C_PREH 	equ 1
                            	   179: I2C_CTRL 	equ 2
                            	   180: I2C_RXR 	equ 3
                            	   181: I2C_TXR 	equ 3
                            	   182: I2C_CMD 	equ 4
                            	   183: I2C_STAT 	equ 4
                            	   184: PLIC			EQU	$FD090000
                            	   185: MMU				EQU $FDC00000	; physical address
                            	   186: leds			EQU	$FD0FFF00	; virtual addresses
                            	   187: keybd			EQU	$FD0FFE00
                            	   188: KEYBD			EQU	$FD0FFE00
                            	   189: RAND			EQU	$FD0FFD00
                            	   190: RAND_NUM	EQU	$FD0FFD00
                            	   191: RAND_STRM	EQU	$FD0FFD04
                            	   192: RAND_MZ		EQU $FD0FFD08
                            	   193: RAND_MW		EQU	$FD0FFD0C
                            	   194: RST_REG		EQU	$FD0FFC00
                            	   195: IO_BITMAP	EQU $FD100000
                            	   196: FRAMEBUF	EQU	$FD200000
                            	   197: GFXACCEL	EQU	$FD300000
                            	   198: 	endif
                            	   199: 
                            	   200: SERIAL_SEMA	EQU	2
                            	   201: KEYBD_SEMA	EQU	3
                            	   202: RAND_SEMA		EQU	4
                            	   203: SCREEN_SEMA	EQU	5
                            	   204: MEMORY_SEMA EQU 6
                            	   205: TCB_SEMA 		EQU	7
                            	   206: FMTK_SEMA		EQU	8
                            	   207: 
                            	   208: macIRQ_proc	macro arg1
                            	   209: 	dc.l IRQ_proc\1
                            	   210: endm
                            	   211: 
                            	   212: macIRQ_proc_label	macro arg1
                            	   213: IRQ_proc\1:
                            	   214: endm
                            	   215: 
                            	   216: 	data
                            	   217: 	; 0
01:00000000 00040FFC        	   218: 	dc.l		$00040FFC
01:00000004 000003B8        	   219: 	dc.l		start
01:00000008 00008D0A        	   220: 	dc.l		bus_err
01:0000000C 000090E6        	   221: 	dc.l		addr_err
01:00000010 00009134        	   222: 	dc.l		illegal_trap		* ILLEGAL instruction
01:00000014 00000000        	   223: 	dc.l		0
01:00000018 0000208C        	   224: 	dc.l		chk_exception		; CHK
01:0000001C 000021D0        	   225: 	dc.l		EXCEPTION_7			* TRAPV
01:00000020 00000000        	   226: 	dc.l		0
01:00000024 00000000        	   227: 	dc.l		0
                            	   228: 	
                            	   229: 	; 10
01:00000028 00000000        	   230: 	dc.l		0
01:0000002C 00000000        	   231: 	dc.l		0
01:00000030 00000000        	   232: 	dc.l		0
01:00000034 00000000        	   233: 	dc.l		0
01:00000038 00000000        	   234: 	dc.l		0
01:0000003C 00000000        	   235: 	dc.l		0
01:00000040 00000000        	   236: 	dc.l		0
01:00000044 00000000        	   237: 	dc.l		0
01:00000048 00000000        	   238: 	dc.l		0
01:0000004C 00000000        	   239: 	dc.l		0
                            	   240: 	
                            	   241: 	; 20
01:00000050 00000000        	   242: 	dc.l		0
01:00000054 00000000        	   243: 	dc.l		0
01:00000058 00000000        	   244: 	dc.l		0
01:0000005C 00000000        	   245: 	dc.l		0
01:00000060 000090D2        	   246: 	dc.l		SpuriousIRQ
01:00000064 00000000        	   247: 	dc.l		0
01:00000068 00000000        	   248: 	dc.l		0
01:0000006C 000090A0        	   249: 	dc.l		irq3_rout
01:00000070 00000000        	   250: 	dc.l		0
01:00000074 00000000        	   251: 	dc.l		0
                            	   252: 	
                            	   253: 	; 30
01:00000078 0000905E        	   254: 	dc.l		TickIRQ						; IRQ 30 - timer / keyboard
01:0000007C 000090D4        	   255: 	dc.l		nmi_rout
01:00000080 00008FC4        	   256: 	dc.l		io_trap						; TRAP zero
01:00000084 00000000        	   257: 	dc.l		0
01:00000088 00000000        	   258: 	dc.l		0
01:0000008C 00008D24        	   259: 	dc.l		trap3							; breakpoint
01:00000090 00000000        	   260: 	dc.l		0
01:00000094 00000000        	   261: 	dc.l		0
01:00000098 00000000        	   262: 	dc.l		0
01:0000009C 00000000        	   263: 	dc.l		0
                            	   264: 
                            	   265: 	; 40
01:000000A0 00000000        	   266: 	dc.l		0
01:000000A4 00000000        	   267: 	dc.l		0
01:000000A8 00000000        	   268: 	dc.l		0
01:000000AC 00000000        	   269: 	dc.l		0
01:000000B0 00000000        	   270: 	dc.l		0
01:000000B4 00000000        	   271: 	dc.l		0
01:000000B8 00000000        	   272: 	dc.l		0
01:000000BC 000072D6        	   273: 	dc.l		TRAP15
01:000000C0 00000000        	   274: 	dc.l		0
01:000000C4 00000000        	   275: 	dc.l		0
                            	   276: 
                            	   277: 	; 50	
01:000000C8 00000000        	   278: 	dc.l		0
01:000000CC 00000000        	   279: 	dc.l		0
01:000000D0 00000000        	   280: 	dc.l		0
01:000000D4 00000000        	   281: 	dc.l		0
01:000000D8 00000000        	   282: 	dc.l		0
01:000000DC 00000000        	   283: 	dc.l		0
01:000000E0 00000000        	   284: 	dc.l		0
01:000000E4 00000000        	   285: 	dc.l		0
01:000000E8 00000000        	   286: 	dc.l		0
01:000000EC 0000914A        	   287: 	dc.l		io_irq
                            	   288: 
                            	   289: 	; 60
01:000000F0 00000B0E        	   290: 	dc.l		KeybdIRQ
01:000000F4 00001742        	   291: 	dc.l		SerialIRQ
01:000000F8 00000000        	   292: 	dc.l		0
01:000000FC 000090FC        	   293: 	dc.l		brdisp_trap
                            	   294: 	
                            	   295: 	; 64
                            	   296: 
                            	   297: IRQ_trampolines:
                            	   298: ;	rept 192
                            	   299: ;	macIRQ_proc REPTN
                            	   300: ;	endr
                            	   301: 
                            	   302: 	org			$400
                            	   303: 
                            	   304: irq_list_tbl:
                            	   305: 	rept 192
                            	   306: 	dc.l 0
                            	   307: 	dc.l 0
                            	   308: 	endr
01:00000400 00000000        	     1R 	dc.l 0
01:00000404 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000408 00000000        	     1R 	dc.l 0
01:0000040C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000410 00000000        	     1R 	dc.l 0
01:00000414 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000418 00000000        	     1R 	dc.l 0
01:0000041C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000420 00000000        	     1R 	dc.l 0
01:00000424 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000428 00000000        	     1R 	dc.l 0
01:0000042C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000430 00000000        	     1R 	dc.l 0
01:00000434 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000438 00000000        	     1R 	dc.l 0
01:0000043C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000440 00000000        	     1R 	dc.l 0
01:00000444 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000448 00000000        	     1R 	dc.l 0
01:0000044C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000450 00000000        	     1R 	dc.l 0
01:00000454 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000458 00000000        	     1R 	dc.l 0
01:0000045C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000460 00000000        	     1R 	dc.l 0
01:00000464 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000468 00000000        	     1R 	dc.l 0
01:0000046C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000470 00000000        	     1R 	dc.l 0
01:00000474 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000478 00000000        	     1R 	dc.l 0
01:0000047C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000480 00000000        	     1R 	dc.l 0
01:00000484 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000488 00000000        	     1R 	dc.l 0
01:0000048C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000490 00000000        	     1R 	dc.l 0
01:00000494 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000498 00000000        	     1R 	dc.l 0
01:0000049C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004A0 00000000        	     1R 	dc.l 0
01:000004A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004A8 00000000        	     1R 	dc.l 0
01:000004AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004B0 00000000        	     1R 	dc.l 0
01:000004B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004B8 00000000        	     1R 	dc.l 0
01:000004BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004C0 00000000        	     1R 	dc.l 0
01:000004C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004C8 00000000        	     1R 	dc.l 0
01:000004CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004D0 00000000        	     1R 	dc.l 0
01:000004D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004D8 00000000        	     1R 	dc.l 0
01:000004DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004E0 00000000        	     1R 	dc.l 0
01:000004E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004E8 00000000        	     1R 	dc.l 0
01:000004EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004F0 00000000        	     1R 	dc.l 0
01:000004F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000004F8 00000000        	     1R 	dc.l 0
01:000004FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000500 00000000        	     1R 	dc.l 0
01:00000504 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000508 00000000        	     1R 	dc.l 0
01:0000050C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000510 00000000        	     1R 	dc.l 0
01:00000514 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000518 00000000        	     1R 	dc.l 0
01:0000051C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000520 00000000        	     1R 	dc.l 0
01:00000524 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000528 00000000        	     1R 	dc.l 0
01:0000052C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000530 00000000        	     1R 	dc.l 0
01:00000534 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000538 00000000        	     1R 	dc.l 0
01:0000053C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000540 00000000        	     1R 	dc.l 0
01:00000544 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000548 00000000        	     1R 	dc.l 0
01:0000054C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000550 00000000        	     1R 	dc.l 0
01:00000554 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000558 00000000        	     1R 	dc.l 0
01:0000055C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000560 00000000        	     1R 	dc.l 0
01:00000564 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000568 00000000        	     1R 	dc.l 0
01:0000056C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000570 00000000        	     1R 	dc.l 0
01:00000574 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000578 00000000        	     1R 	dc.l 0
01:0000057C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000580 00000000        	     1R 	dc.l 0
01:00000584 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000588 00000000        	     1R 	dc.l 0
01:0000058C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000590 00000000        	     1R 	dc.l 0
01:00000594 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000598 00000000        	     1R 	dc.l 0
01:0000059C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005A0 00000000        	     1R 	dc.l 0
01:000005A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005A8 00000000        	     1R 	dc.l 0
01:000005AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005B0 00000000        	     1R 	dc.l 0
01:000005B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005B8 00000000        	     1R 	dc.l 0
01:000005BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005C0 00000000        	     1R 	dc.l 0
01:000005C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005C8 00000000        	     1R 	dc.l 0
01:000005CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005D0 00000000        	     1R 	dc.l 0
01:000005D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005D8 00000000        	     1R 	dc.l 0
01:000005DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005E0 00000000        	     1R 	dc.l 0
01:000005E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005E8 00000000        	     1R 	dc.l 0
01:000005EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005F0 00000000        	     1R 	dc.l 0
01:000005F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000005F8 00000000        	     1R 	dc.l 0
01:000005FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000600 00000000        	     1R 	dc.l 0
01:00000604 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000608 00000000        	     1R 	dc.l 0
01:0000060C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000610 00000000        	     1R 	dc.l 0
01:00000614 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000618 00000000        	     1R 	dc.l 0
01:0000061C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000620 00000000        	     1R 	dc.l 0
01:00000624 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000628 00000000        	     1R 	dc.l 0
01:0000062C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000630 00000000        	     1R 	dc.l 0
01:00000634 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000638 00000000        	     1R 	dc.l 0
01:0000063C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000640 00000000        	     1R 	dc.l 0
01:00000644 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000648 00000000        	     1R 	dc.l 0
01:0000064C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000650 00000000        	     1R 	dc.l 0
01:00000654 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000658 00000000        	     1R 	dc.l 0
01:0000065C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000660 00000000        	     1R 	dc.l 0
01:00000664 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000668 00000000        	     1R 	dc.l 0
01:0000066C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000670 00000000        	     1R 	dc.l 0
01:00000674 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000678 00000000        	     1R 	dc.l 0
01:0000067C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000680 00000000        	     1R 	dc.l 0
01:00000684 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000688 00000000        	     1R 	dc.l 0
01:0000068C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000690 00000000        	     1R 	dc.l 0
01:00000694 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000698 00000000        	     1R 	dc.l 0
01:0000069C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006A0 00000000        	     1R 	dc.l 0
01:000006A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006A8 00000000        	     1R 	dc.l 0
01:000006AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006B0 00000000        	     1R 	dc.l 0
01:000006B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006B8 00000000        	     1R 	dc.l 0
01:000006BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006C0 00000000        	     1R 	dc.l 0
01:000006C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006C8 00000000        	     1R 	dc.l 0
01:000006CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006D0 00000000        	     1R 	dc.l 0
01:000006D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006D8 00000000        	     1R 	dc.l 0
01:000006DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006E0 00000000        	     1R 	dc.l 0
01:000006E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006E8 00000000        	     1R 	dc.l 0
01:000006EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006F0 00000000        	     1R 	dc.l 0
01:000006F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000006F8 00000000        	     1R 	dc.l 0
01:000006FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000700 00000000        	     1R 	dc.l 0
01:00000704 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000708 00000000        	     1R 	dc.l 0
01:0000070C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000710 00000000        	     1R 	dc.l 0
01:00000714 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000718 00000000        	     1R 	dc.l 0
01:0000071C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000720 00000000        	     1R 	dc.l 0
01:00000724 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000728 00000000        	     1R 	dc.l 0
01:0000072C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000730 00000000        	     1R 	dc.l 0
01:00000734 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000738 00000000        	     1R 	dc.l 0
01:0000073C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000740 00000000        	     1R 	dc.l 0
01:00000744 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000748 00000000        	     1R 	dc.l 0
01:0000074C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000750 00000000        	     1R 	dc.l 0
01:00000754 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000758 00000000        	     1R 	dc.l 0
01:0000075C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000760 00000000        	     1R 	dc.l 0
01:00000764 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000768 00000000        	     1R 	dc.l 0
01:0000076C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000770 00000000        	     1R 	dc.l 0
01:00000774 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000778 00000000        	     1R 	dc.l 0
01:0000077C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000780 00000000        	     1R 	dc.l 0
01:00000784 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000788 00000000        	     1R 	dc.l 0
01:0000078C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000790 00000000        	     1R 	dc.l 0
01:00000794 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000798 00000000        	     1R 	dc.l 0
01:0000079C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007A0 00000000        	     1R 	dc.l 0
01:000007A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007A8 00000000        	     1R 	dc.l 0
01:000007AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007B0 00000000        	     1R 	dc.l 0
01:000007B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007B8 00000000        	     1R 	dc.l 0
01:000007BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007C0 00000000        	     1R 	dc.l 0
01:000007C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007C8 00000000        	     1R 	dc.l 0
01:000007CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007D0 00000000        	     1R 	dc.l 0
01:000007D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007D8 00000000        	     1R 	dc.l 0
01:000007DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007E0 00000000        	     1R 	dc.l 0
01:000007E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007E8 00000000        	     1R 	dc.l 0
01:000007EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007F0 00000000        	     1R 	dc.l 0
01:000007F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000007F8 00000000        	     1R 	dc.l 0
01:000007FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000800 00000000        	     1R 	dc.l 0
01:00000804 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000808 00000000        	     1R 	dc.l 0
01:0000080C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000810 00000000        	     1R 	dc.l 0
01:00000814 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000818 00000000        	     1R 	dc.l 0
01:0000081C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000820 00000000        	     1R 	dc.l 0
01:00000824 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000828 00000000        	     1R 	dc.l 0
01:0000082C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000830 00000000        	     1R 	dc.l 0
01:00000834 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000838 00000000        	     1R 	dc.l 0
01:0000083C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000840 00000000        	     1R 	dc.l 0
01:00000844 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000848 00000000        	     1R 	dc.l 0
01:0000084C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000850 00000000        	     1R 	dc.l 0
01:00000854 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000858 00000000        	     1R 	dc.l 0
01:0000085C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000860 00000000        	     1R 	dc.l 0
01:00000864 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000868 00000000        	     1R 	dc.l 0
01:0000086C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000870 00000000        	     1R 	dc.l 0
01:00000874 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000878 00000000        	     1R 	dc.l 0
01:0000087C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000880 00000000        	     1R 	dc.l 0
01:00000884 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000888 00000000        	     1R 	dc.l 0
01:0000088C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000890 00000000        	     1R 	dc.l 0
01:00000894 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000898 00000000        	     1R 	dc.l 0
01:0000089C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008A0 00000000        	     1R 	dc.l 0
01:000008A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008A8 00000000        	     1R 	dc.l 0
01:000008AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008B0 00000000        	     1R 	dc.l 0
01:000008B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008B8 00000000        	     1R 	dc.l 0
01:000008BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008C0 00000000        	     1R 	dc.l 0
01:000008C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008C8 00000000        	     1R 	dc.l 0
01:000008CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008D0 00000000        	     1R 	dc.l 0
01:000008D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008D8 00000000        	     1R 	dc.l 0
01:000008DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008E0 00000000        	     1R 	dc.l 0
01:000008E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008E8 00000000        	     1R 	dc.l 0
01:000008EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008F0 00000000        	     1R 	dc.l 0
01:000008F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000008F8 00000000        	     1R 	dc.l 0
01:000008FC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000900 00000000        	     1R 	dc.l 0
01:00000904 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000908 00000000        	     1R 	dc.l 0
01:0000090C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000910 00000000        	     1R 	dc.l 0
01:00000914 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000918 00000000        	     1R 	dc.l 0
01:0000091C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000920 00000000        	     1R 	dc.l 0
01:00000924 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000928 00000000        	     1R 	dc.l 0
01:0000092C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000930 00000000        	     1R 	dc.l 0
01:00000934 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000938 00000000        	     1R 	dc.l 0
01:0000093C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000940 00000000        	     1R 	dc.l 0
01:00000944 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000948 00000000        	     1R 	dc.l 0
01:0000094C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000950 00000000        	     1R 	dc.l 0
01:00000954 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000958 00000000        	     1R 	dc.l 0
01:0000095C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000960 00000000        	     1R 	dc.l 0
01:00000964 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000968 00000000        	     1R 	dc.l 0
01:0000096C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000970 00000000        	     1R 	dc.l 0
01:00000974 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000978 00000000        	     1R 	dc.l 0
01:0000097C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000980 00000000        	     1R 	dc.l 0
01:00000984 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000988 00000000        	     1R 	dc.l 0
01:0000098C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000990 00000000        	     1R 	dc.l 0
01:00000994 00000000        	     2R 	dc.l 0
                            	     3R 	
01:00000998 00000000        	     1R 	dc.l 0
01:0000099C 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009A0 00000000        	     1R 	dc.l 0
01:000009A4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009A8 00000000        	     1R 	dc.l 0
01:000009AC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009B0 00000000        	     1R 	dc.l 0
01:000009B4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009B8 00000000        	     1R 	dc.l 0
01:000009BC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009C0 00000000        	     1R 	dc.l 0
01:000009C4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009C8 00000000        	     1R 	dc.l 0
01:000009CC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009D0 00000000        	     1R 	dc.l 0
01:000009D4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009D8 00000000        	     1R 	dc.l 0
01:000009DC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009E0 00000000        	     1R 	dc.l 0
01:000009E4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009E8 00000000        	     1R 	dc.l 0
01:000009EC 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009F0 00000000        	     1R 	dc.l 0
01:000009F4 00000000        	     2R 	dc.l 0
                            	     3R 	
01:000009F8 00000000        	     1R 	dc.l 0
01:000009FC 00000000        	     2R 	dc.l 0
                            	     3R 	
                            	   309: 
                            	   310: 	org			$A00
                            	   311: 
                            	   312: ;-------------------------------------------------------------------------------
                            	   313: ;-------------------------------------------------------------------------------
                            	   314: 
                            	   315: ; BIOS variables which must be local (not shared) to each core
                            	   316: 
                            	   317: CursorRow	equ		$40000
                            	   318: CursorCol	equ		$40001
                            	   319: TextPos		equ		$40002
                            	   320: TextCurpos	equ	$40002
                            	   321: TextScr			equ	$40004
                            	   322: S19StartAddress	equ	$40008
                            	   323: KeybdEcho		equ	$4000C
                            	   324: KeybdWaitFlag	equ	$4000D
                            	   325: CmdBuf			equ $40040
                            	   326: CmdBufEnd		equ	$40080
                            	   327: fgColor			equ	$40084
                            	   328: bkColor			equ	$40088
                            	   329: TextRows		equ	$4008C
                            	   330: TextCols		equ	$4008D
                            	   331: _fpTextIncr	equ $40094
                            	   332: _canary			equ $40098
                            	   333: tickcnt			equ $4009C
                            	   334: IRQFlag			equ $400A0
                            	   335: InputDevice	equ $400A4
                            	   336: OutputDevice	equ $400A8
                            	   337: Regsave			equ	$40100
                            	   338: numBreakpoints	equ		8
                            	   339: BreakpointFlag	equ		$40200
                            	   340: NumSetBreakpoints	equ	$40202	; to $40203
                            	   341: Breakpoints			equ		$40220	; to $40240
                            	   342: BreakpointWords	equ		$40280	; to $402A0
                            	   343: fpBuf       equ $402C0
                            	   344: ;RunningTCB  equ $40300
                            	   345: _exp equ $40500
                            	   346: _digit equ $40504
                            	   347: _width equ $40508
                            	   348: _E equ $4050C
                            	   349: _digits_before_decpt equ $40510
                            	   350: _precision equ $40514
                            	   351: _fpBuf equ $40520	; to $40560
                            	   352: _fpWork equ $40600
                            	   353: _dasmbuf	equ	$40800
                            	   354: OFFSET equ $40880
                            	   355: pen_color equ $40890
                            	   356: gr_x equ $40894
                            	   357: gr_y equ $40898
                            	   358: gr_width equ $4089C
                            	   359: gr_height equ $408A0
                            	   360: gr_bitmap_screen equ $408A4
                            	   361: gr_raster_op equ $408A8
                            	   362: gr_double_buffer equ $408AC
                            	   363: gr_bitmap_buffer equ $408B0
                            	   364: sys_switches equ $408B8
                            	   365: EightPixels equ $40100000	; to $40200020
                            	   366: 
                            	   367: null_dcb equ $0040A00		; 0
                            	   368: keybd_dcb equ null_dcb+DCB_SIZE	; 1
                            	   369: textvid_dcb equ keybd_dcb+DCB_SIZE	; 2
                            	   370: err_dcb equ textvid_dcb+DCB_SIZE		; 3
                            	   371: serial_dcb equ err_dcb+DCB_SIZE*2		; 5
                            	   372: framebuf_dcb equ serial_dcb+DCB_SIZE	; 6
                            	   373: gfxaccel_dcb equ framebuf_dcb+DCB_SIZE	; 7
                            	   374: 
                            	   375: TimerStack	equ	$41BFC
                            	   376: 
                            	   377: ; Keyboard buffer is in shared memory
                            	   378: IOFocus			EQU	$00100000
                            	   379: memend			equ $00100004
                            	   380: KeybdLEDs		equ	$0010000E
                            	   381: _KeyState1	equ	$0010000F
                            	   382: _KeyState2	equ	$00100010
                            	   383: _KeybdHead	equ	$00100011
                            	   384: _KeybdTail	equ	$00100012
                            	   385: _KeybdCnt		equ	$00100013
                            	   386: KeybdID			equ	$00100018
                            	   387: _Keybd_tick	equ $0001001C
                            	   388: _KeybdBuf		equ	$00100020
                            	   389: _KeybdOBuf	equ	$00100080
                            	   390: S19Checksum	equ	$00100150
                            	   391: SerTailRcv	equ	$00100160
                            	   392: SerHeadRcv	equ	$00100162
                            	   393: SerRcvXon		equ	$00100164
                            	   394: SerRcvXoff	equ	$00100165
                            	   395: SerTailXmit	equ	$00100166
                            	   396: SerHeadXmit	equ	$00100168
                            	   397: SerXmitXoff	equ	$0010016A
                            	   398: SerRcvBuf		equ	$00101000
                            	   399: SerXmitBuf	equ	$00102000
                            	   400: RTCBuf			equ $00100200	; to $0010023F
                            	   401: 
                            	   402: 	code
                            	   403: 	align		2
                            	   404: start:
                            	   405: ;	fadd (a0)+,fp2
00:000003B8 46FC2700        	   406: 	move.w #$2700,sr					; enable level 6 and higher interrupts
00:000003BC 7000            	   407: 	moveq #0,d0								; set address space zero
00:000003BE 4E7B0003        	   408: 	movec d0,asid
                            	   409: 	; Setup circuit select signals
00:000003C2 203CFDC00000    	   410: 	move.l #MMU,d0
00:000003C8 4E7B0014        	   411: 	movec d0,mmus
                            	   412: 	if HAS_MMU
                            	   413: 		move.l #$01F00000,d0			; set virtual address for iop bitmap
                            	   414: 		movec d0,iops
                            	   415: 		move.l #$01E00000,d0			; set virtual address for io block
                            	   416: 		movec d0,ios
                            	   417: 	else
00:000003CC 203CFD100000    	   418: 		move.l #$FD100000,d0			; set virtual address for iop bitmap
00:000003D2 4E7B0016        	   419: 		movec d0,iops
00:000003D6 203CFD000000    	   420: 		move.l #$FD000000,d0			; set virtual address for io block
00:000003DC 4E7B0015        	   421: 		movec d0,ios
                            	   422: 	endif
                            	   423: ;	move.l $4000000C,d0
00:000003E0 4E7A0FE0        	   424: 	movec coreno,d0							; set initial value of thread register
00:000003E4 4840            	   425: 	swap d0											; coreno in high eight bits
00:000003E6 E188            	   426: 	lsl.l #8,d0
00:000003E8 4E7B0012        	   427: 	movec d0,tr
                            	   428: 	; Prepare local variable storage
00:000003EC 303C03FF        	   429: 	move.w #1023,d0						; 1024 longs to clear
00:000003F0 41F900040000    	   430: 	lea	$40000,a0							; non shared local memory address
                            	   431: .0111:
00:000003F6 4298            	   432: 	clr.l	(a0)+								; clear the memory area
00:000003F8 51C8FFFC        	   433: 	dbra d0,.0111
00:000003FC 610000E0        	   434: 	bsr setup_null
00:00000400 6100010E        	   435: 	bsr setup_keybd
00:00000404 61000B46        	   436: 	bsr setup_textvid
00:00000408 610010D6        	   437: 	bsr setup_serial
00:0000040C 13FC0001000400A4	   438: 	move.b #1,InputDevice			; select keyboard input
00:00000414 13FC0002000400A8	   439: 	move.b #2,OutputDevice		; select text screen output
00:0000041C 4E7A0FE0        	   440: 	movec.l	coreno,d0					; get core number
00:00000420 0C000002        	   441: 	cmpi.b #2,d0
00:00000424 6600008C        	   442: 	bne	start_other
00:00000428 610013F6        	   443: 	bsr setup_framebuf
00:0000042C 42B9000408B8    	   444: 	clr.l sys_switches
00:00000432 4E7A0FE0        	   445: 	movec.l	coreno,d0					; get core number
00:00000436 13C000100000    	   446: 	move.b d0,IOFocus					; Set the IO focus in global memory
                            	   447: 	if HAS_MMU
                            	   448: 		bsr InitMMU							; Can't access anything till this is done'
                            	   449: 	endif
00:0000043C 61001AB4        	   450: 	bsr	InitIOPBitmap					; not going to get far without this
00:00000440 61001BA2        	   451: 	bsr	InitSemaphores
00:00000444 61001AF8        	   452: 	bsr	InitRand
00:00000448 61001B34        	   453: 	bsr RandGetNum
00:0000044C 0281FFFFFF00    	   454: 	andi.l #$FFFFFF00,d1
00:00000452 23C100040098    	   455: 	move.l d1,_canary
00:00000458 4E7B1020        	   456: 	movec d1,canary
00:0000045C 61001C42        	   457: 	bsr	Delay3s						; give devices time to reset
00:00000460 7E02            	   458: 	moveq #2,d7					; device 2
00:00000462 7C0C            	   459: 	moveq #DEV_CLEAR,d6	; clear
00:00000464 4E40            	   460: 	trap #0
                            	   461: ;	bsr	textvid_clear
                            	   462: 
00:00000466 610001E0        	   463: 	bsr	_KeybdInit
                            	   464: ;	bsr	InitIRQ
00:0000046A 61001122        	   465: 	bsr	SerialInit
                            	   466: ;	bsr init_i2c
                            	   467: ;	bsr rtc_read
                            	   468: 
                            	   469: 	; Write startup message to screen
                            	   470: 
00:0000046E 43F90000915E    	   471: 	lea	msg_start,a1
00:00000474 61006E22        	   472: 	bsr	DisplayString
                            	   473: ;	bsr	FemtikiInit
00:00000478 4E7A0FE0        	   474: 	movec	coreno,d0
00:0000047C 4840            	   475: 	swap d0
00:0000047E 7201            	   476: 	moveq	#1,d1
00:00000480 61001BC4        	   477: 	bsr	UnlockSemaphore	; allow another cpu access
00:00000484 7200            	   478: 	moveq	#0,d1
00:00000486 61001BBE        	   479: 	bsr	UnlockSemaphore	; allow other cpus to proceed
00:0000048A 33FCA4A4FD0FFF00	   480: 	move.w #$A4A4,leds			; diagnostics
00:00000492 610072FC        	   481: 	bsr	init_plic				; initialize platform level interrupt controller
00:00000496 600073E6        	   482: 	bra	StartMon
00:0000049A 61001C44        	   483: 	bsr	cpu_test
                            	   484: ;	lea	brdisp_trap,a0	; set brdisp trap vector
                            	   485: ;	move.l	a0,64*4
                            	   486: 
                            	   487: loop2:
00:0000049E 70FF            	   488: 	move.l	#-1,d0
                            	   489: loop1:
00:000004A0 2200            	   490: 	move.l	d0,d1
00:000004A2 E089            	   491: 	lsr.l		#8,d1
00:000004A4 E089            	   492: 	lsr.l		#8,d1
00:000004A6 13C1FD0FFF00    	   493: 	move.b	d1,leds
00:000004AC 51C8FFF2        	   494: 	dbra		d0,loop1
00:000004B0 60EC            	   495: 	bra			loop2
                            	   496: 
                            	   497: start_other:
00:000004B2 61001C10        	   498: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:000004B6 61001C0C        	   499: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:000004BA 61001C08        	   500: 	bsr			Delay3s2						; need time for system setup (io_bitmap etc.)
00:000004BE 7E02            	   501: 	move.l #2,d7
00:000004C0 7C0C            	   502: 	move.l #DEV_CLEAR,d6
00:000004C2 4E40            	   503: 	trap #0
00:000004C4 4E7A1FE0        	   504: 	movec		coreno,d1
00:000004C8 4EB900008830    	   505: 	bsr			DisplayByte
00:000004CE 43F900009185    	   506: 	lea			msg_core_start,a1
00:000004D4 61006DC2        	   507: 	bsr			DisplayString
                            	   508: ;	bsr			FemtikiInitIRQ
                            	   509: do_nothing:	
00:000004D8 600073A4        	   510: 	bra			StartMon
00:000004DC 60FA            	   511: 	bra			do_nothing
                            	   512: 
                            	   513: ;------------------------------------------------------------------------------
                            	   514: ; Initialize the MMU to allow thread #0 access to IO
                            	   515: ;------------------------------------------------------------------------------
                            	   516: 	if HAS_MMU
                            	   517: 	align 2
                            	   518: mmu_adrtbl:	; virtual address[24:16], physical address[31:16] bytes reversed!
                            	   519: 	dc.l	$0010,$10000300	; global scratch pad
                            	   520: 	dc.l	$01E0,$00FD0300	
                            	   521: 	dc.l	$01E1,$01FD0300
                            	   522: 	dc.l	$01E2,$02FD0300
                            	   523: 	dc.l  $01E3,$03FD0300
                            	   524: 	dc.l	$01E5,$05FD0300
                            	   525: 	dc.l	$01E6,$06FD0300
                            	   526: 	dc.l	$01E9,$09FD0300
                            	   527: 	dc.l	$01EF,$0FFD0300
                            	   528: 	dc.l	$01F0,$10FD0300
                            	   529: 	dc.l  $01FF,$FFFF0300	; all ones output for IRQ ack needed
                            	   530: 
                            	   531: 	even
                            	   532: InitMMU:
                            	   533: 	lea MMU+8,a0				; first 128kB is local RAM
                            	   534: 	move.l #$32000,d2		; map all pages to DRAM
                            	   535: 	move.l #510,d0			; then override for IO later
                            	   536: .0002
                            	   537: 	move.l d2,d1
                            	   538: 	bsr rbo
                            	   539: 	move.l d1,(a0)+
                            	   540: 	addi.w #1,d2				; increment DRAM page number
                            	   541: 	dbra d0,.0002
                            	   542: 	lea MMU,a0					; now program IO access
                            	   543: 	lea mmu_adrtbl,a1
                            	   544: 	moveq #10,d0
                            	   545: .0001
                            	   546: 	move.l (a1)+,d2
                            	   547: 	lsl.l #2,d2
                            	   548: 	move.l (a1)+,(a0,d2.w)
                            	   549: 	dbra d0,.0001
                            	   550: 	rts	
                            	   551: 	endif
                            	   552: 
                            	   553: ;------------------------------------------------------------------------------
                            	   554: ; Device drivers
                            	   555: ;------------------------------------------------------------------------------
                            	   556: 
                            	   557: 	include "null.x68"

Source: "null.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Setup the NULL device
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 
                            	    43: setup_null:
                            	    44: null_init:
00:000004DE 7020            	    45: 	moveq #32,d0
00:000004E0 41F900040A00    	    46: 	lea.l null_dcb,a0
                            	    47: .0001:
00:000004E6 4298            	    48: 	clr.l (a0)+
00:000004E8 51C8FFFC        	    49: 	dbra d0,.0001
00:000004EC 23FC204243440004	    50: 	move.l #$20424344,null_dcb+DCB_MAGIC				; 'DCB'
00:000004F4 0A00
00:000004F6 23FC4C4C554E0004	    51: 	move.l #$4C4C554E,null_dcb+DCB_NAME					; 'NULL'
00:000004FE 0A04
00:00000500 23FC0000050C0004	    52: 	move.l #null_cmdproc,null_dcb+DCB_CMDPROC
00:00000508 0A18
                            	    53: null_ret:
00:0000050A 4E75            	    54: 	rts
                            	    55: 
                            	    56: null_cmdproc:
00:0000050C 7000            	    57: 	moveq #E_Ok,d0
00:0000050E 4E75            	    58: 	rts
                            	    59: 
                            	    60: 

Source: "boot.x68"
                            	   558: 	include "keybd.x68"

Source: "keybd.x68"
                            	     1: ;==============================================================================
                            	     2: ; Keyboard stuff
                            	     3: ;
                            	     4: ; KeyState2_
                            	     5: ; 876543210
                            	     6: ; ||||||||+ = shift
                            	     7: ; |||||||+- = alt
                            	     8: ; ||||||+-- = control
                            	     9: ; |||||+--- = numlock
                            	    10: ; ||||+---- = capslock
                            	    11: ; |||+----- = scrolllock
                            	    12: ; ||+------ =
                            	    13: ; |+------- = 
                            	    14: ; +-------- = extended
                            	    15: ;
                            	    16: ;==============================================================================
                            	    17: 
                            	    18: ;------------------------------------------------------------------------------
                            	    19: ; Setup the Keyboard device
                            	    20: ;------------------------------------------------------------------------------
                            	    21: setup_keybd:
                            	    22: keybd_init:
00:00000510 7020            	    23: 	moveq #32,d0
00:00000512 41F900040A84    	    24: 	lea.l keybd_dcb,a0
                            	    25: .0001:
00:00000518 4298            	    26: 	clr.l (a0)+
00:0000051A 51C8FFFC        	    27: 	dbra d0,.0001
00:0000051E 23FC204243440004	    28: 	move.l #$20424344,keybd_dcb+DCB_MAGIC				; 'DCB'
00:00000526 0A84
00:00000528 23FC2044424B0004	    29: 	move.l #$2044424B,keybd_dcb+DCB_NAME				; 'KBD'
00:00000530 0A88
00:00000532 23FC000005A00004	    30: 	move.l #keybd_cmdproc,textvid_dcb+DCB_CMDPROC
00:0000053A 0B20
00:0000053C 23FC001000200004	    31: 	move.l #_KeybdBuf,keybd_dcb+DCB_INBUFPTR
00:00000544 0ABC
00:00000546 23FC001000800004	    32: 	move.l #_KeybdOBuf,keybd_dcb+DCB_OUTBUFPTR
00:0000054E 0AC0
00:00000550 23FC000000200004	    33: 	move.l #32,keybd_dcb+DCB_INBUFSIZE
00:00000558 0AC4
00:0000055A 23FC000000200004	    34: 	move.l #32,keybd_dcb+DCB_OUTBUFSIZE
00:00000562 0AC8
00:00000564 423900040AD8    	    35: 	clr.b keybd_dcb+DCB_OUTDIMX	; set rows and columns
00:0000056A 423900040ADC    	    36: 	clr.b keybd_dcb+DCB_OUTDIMY
00:00000570 423900040ACC    	    37: 	clr.b keybd_dcb+DCB_INDIMX		; set rows and columns
00:00000576 423900040AD0    	    38: 	clr.b keybd_dcb+DCB_INDIMY
                            	    39: ;	bsr KeybdInit
00:0000057C 4E75            	    40: 	rts
                            	    41: 
                            	    42: 	align 2
                            	    43: KBD_CMDTBL:
00:00000580 00000510        	    44: 	dc.l keybd_init				; 0
00:00000584 000005C2        	    45: 	dc.l keybd_stat
00:00000588 000005CA        	    46: 	dc.l keybd_putchar
00:0000058C 000005DA        	    47: 	dc.l keybd_putbuf
00:00000590 000005D2        	    48: 	dc.l keybd_getchar
00:00000594 000005DA        	    49: 	dc.l keybd_getbuf
00:00000598 000005DA        	    50: 	dc.l keybd_set_inpos
00:0000059C 000005DA        	    51: 	dc.l keybd_set_outpos
                            	    52: 
                            	    53: keybd_cmdproc:
00:000005A0 0C060008        	    54: 	cmpi.b #8,d6
00:000005A4 6418            	    55: 	bhs.s .0001
00:000005A6 48E70280        	    56: 	movem.l d6/a0,-(a7)
00:000005AA E506            	    57: 	asl.b #2,d6
00:000005AC 4886            	    58: 	ext.w d6
00:000005AE 41FAFFD0        	    59: 	lea KBD_CMDTBL,a0
00:000005B2 20706000        	    60: 	move.l (a0,d6.w),a0
00:000005B6 4E90            	    61: 	jsr (a0)
00:000005B8 4CDF0140        	    62: 	movem.l (a7)+,d6/a0
00:000005BC 4E75            	    63: 	rts
                            	    64: .0001:
00:000005BE 7002            	    65: 	moveq #E_Func,d0
00:000005C0 4E75            	    66: 	rts
                            	    67: 
                            	    68: keybd_stat:
00:000005C2 61000196        	    69: 	bsr _KeybdGetStatus
00:000005C6 7000            	    70: 	moveq #E_Ok,d0
00:000005C8 4E75            	    71: 	rts
                            	    72: 
                            	    73: keybd_putchar:
00:000005CA 61000502        	    74: 	bsr KeybdSendByte
00:000005CE 7000            	    75: 	moveq #E_Ok,d0
00:000005D0 4E75            	    76: 	rts
                            	    77: 
                            	    78: keybd_getchar:
00:000005D2 61000234        	    79: 	bsr GetKey
00:000005D6 7000            	    80: 	moveq #E_Ok,d0
00:000005D8 4E75            	    81: 	rts
                            	    82: 
                            	    83: keybd_putbuf:
                            	    84: keybd_getbuf:
                            	    85: keybd_set_inpos:
                            	    86: keybd_set_outpos:
00:000005DA 700A            	    87: 	moveq #E_NotSupported,d0
00:000005DC 4E75            	    88: 	rts
                            	    89: 
                            	    90: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	    91: ; Get ID - get the keyboards identifier code.
                            	    92: ;
                            	    93: ; Parameters: none
                            	    94: ; Returns: d = $AB83, $00 on fail
                            	    95: ; Modifies: d, KeybdID updated
                            	    96: ; Stack Space: 2 words
                            	    97: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	    98: 
                            	    99: KeybdGetID:
00:000005DE 323C00F2        	   100: 	move.w	#$F2,d1
00:000005E2 610004EA        	   101: 	bsr			KeybdSendByte
00:000005E6 610001E6        	   102: 	bsr			KeybdWaitTx
00:000005EA 610001C0        	   103: 	bsr			KeybdRecvByte
00:000005EE 08010007        	   104: 	btst		#7,d1
00:000005F2 6624            	   105: 	bne			kgnotKbd
00:000005F4 0C0100AB        	   106: 	cmpi.b	#$AB,d1
00:000005F8 661E            	   107: 	bne			kgnotKbd
00:000005FA 610001B0        	   108: 	bsr			KeybdRecvByte
00:000005FE 08010007        	   109: 	btst		#7,d1
00:00000602 6614            	   110: 	bne			kgnotKbd
00:00000604 0C010083        	   111: 	cmpi.b	#$83,d1
00:00000608 660E            	   112: 	bne			kgnotKbd
00:0000060A 223C0000AB83    	   113: 	move.l	#$AB83,d1
                            	   114: kgid1:
00:00000610 33C100100018    	   115: 	move.w	d1,KeybdID
00:00000616 4E75            	   116: 	rts
                            	   117: kgnotKbd:
00:00000618 7200            	   118: 	moveq		#0,d1
00:0000061A 60F4            	   119: 	bra			kgid1
                            	   120: 
                            	   121: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   122: ; Set the LEDs on the keyboard.
                            	   123: ;
                            	   124: ; Parameters:
                            	   125: ;		d1.b = LED state
                            	   126: ;	Modifies:
                            	   127: ;		none
                            	   128: ; Returns:
                            	   129: ;		none
                            	   130: ; Stack Space:
                            	   131: ;		1 long word
                            	   132: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   133: 
                            	   134: KeybdSetLED:
00:0000061C 2F01            	   135: 	move.l	d1,-(a7)
00:0000061E 123C00ED        	   136: 	move.b	#$ED,d1
00:00000622 610004AA        	   137: 	bsr			KeybdSendByte
00:00000626 610001A6        	   138: 	bsr			KeybdWaitTx
00:0000062A 61000180        	   139: 	bsr			KeybdRecvByte
00:0000062E 4A01            	   140: 	tst.b		d1
00:00000630 6B12            	   141: 	bmi			.0001
00:00000632 0C0100FA        	   142: 	cmpi.b	#$FA,d1
00:00000636 2217            	   143: 	move.l	(a7),d1
00:00000638 61000494        	   144: 	bsr			KeybdSendByte
00:0000063C 61000190        	   145: 	bsr			KeybdWaitTx
00:00000640 6100016A        	   146: 	bsr			KeybdRecvByte
                            	   147: .0001:
00:00000644 221F            	   148: 	move.l	(a7)+,d1
00:00000646 4E75            	   149: 	rts
                            	   150: 
                            	   151: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   152: ; Initialize the keyboard.
                            	   153: ;
                            	   154: ; Parameters:
                            	   155: ;		none
                            	   156: ;	Modifies:
                            	   157: ;		none
                            	   158: ; Returns:
                            	   159: ;		none
                            	   160: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   161: 
                            	   162: _KeybdInit:
                            	   163: KeybdInit:
                            	   164: ;	movem.l	d0/d1/d3/a1,-(a7)
00:00000648 42390010000F    	   165: 	clr.b	_KeyState1		; records key up/down state
00:0000064E 423900100010    	   166: 	clr.b	_KeyState2		; records shift,ctrl,alt state
00:00000654 4E75            	   167: 	rts
                            	   168: 
00:00000656 6100049A        	   169: 	bsr			Wait300ms
00:0000065A 610000FE        	   170: 	bsr			_KeybdGetStatus	; wait for response from keyboard
00:0000065E 4A01            	   171: 	tst.b		d1
00:00000660 6A10            	   172: 	bpl			.0001					; is input buffer full ? no, branch
00:00000662 61000114        	   173: 	bsr	_KeybdGetScancode
00:00000666 6100012E        	   174: 	bsr _KeybdClearIRQ
00:0000066A 0C0100AA        	   175: 	cmpi.b	#$AA,d1				; keyboard Okay
00:0000066E 67000098        	   176: 	beq			kbdi0005
                            	   177: .0001:
00:00000672 760A            	   178: 	moveq		#10,d3
                            	   179: kbdi0002:
00:00000674 61000460        	   180: 	bsr			Wait10ms
00:00000678 4239FD0FFE01    	   181: 	clr.b		KEYBD+1				; clear receive register (write $00 to status reg)
00:0000067E 6100186E        	   182: 	bsr net_delay
00:00000682 72FF            	   183: 	moveq		#-1,d1				; send reset code to keyboard
00:00000684 13C1FD0FFE01    	   184: 	move.b	d1,KEYBD+1		; write $FF to status reg to clear TX state
00:0000068A 61001862        	   185: 	bsr net_delay
00:0000068E 6100043E        	   186: 	bsr			KeybdSendByte	; now write ($FF) to transmit register for reset
00:00000692 6100013A        	   187: 	bsr			KeybdWaitTx		; wait until no longer busy
00:00000696 4A81            	   188: 	tst.l		d1
00:00000698 6B000088        	   189: 	bmi			kbdiXmitBusy
00:0000069C 6100010E        	   190: 	bsr			KeybdRecvByte	; look for an ACK ($FA)
00:000006A0 0C0100FA        	   191: 	cmpi.b	#$FA,d1
00:000006A4 6604            	   192: 	bne			.0001
00:000006A6 61000104        	   193: 	bsr			KeybdRecvByte	; look for BAT completion code ($AA)
                            	   194: .0001:
00:000006AA 0C0100FC        	   195: 	cmpi.b	#$FC,d1				; reset error ?
00:000006AE 672E            	   196: 	beq			kbdiTryAgain
00:000006B0 0C0100AA        	   197: 	cmpi.b	#$AA,d1				; reset complete okay ?
00:000006B4 6628            	   198: 	bne			kbdiTryAgain
                            	   199: 
                            	   200: 	; After a reset, scan code set #2 should be active
                            	   201: .config:
00:000006B6 323C00F0        	   202: 	move.w	#$F0,d1			; send scan code select
00:000006BA 13C1FD0FFF00    	   203: 	move.b	d1,leds
00:000006C0 6100182C        	   204: 	bsr net_delay
00:000006C4 61000408        	   205: 	bsr			KeybdSendByte
00:000006C8 61000104        	   206: 	bsr			KeybdWaitTx
00:000006CC 4A81            	   207: 	tst.l		d1
00:000006CE 6B52            	   208: 	bmi			kbdiXmitBusy
00:000006D0 610000DA        	   209: 	bsr			KeybdRecvByte	; wait for response from keyboard
00:000006D4 4A41            	   210: 	tst.w		d1
00:000006D6 6B06            	   211: 	bmi			kbdiTryAgain
00:000006D8 0C0100FA        	   212: 	cmpi.b	#$FA,d1				; ACK
00:000006DC 670E            	   213: 	beq			kbdi0004
                            	   214: kbdiTryAgain:
00:000006DE 51CBFF94        	   215: 	dbra		d3,kbdi0002
                            	   216: .keybdErr:
00:000006E2 43FA004C        	   217: 	lea			msgBadKeybd,a1
00:000006E6 61006BC6        	   218: 	bsr			DisplayStringCRLF
00:000006EA 6020            	   219: 	bra			ledxit
                            	   220: kbdi0004:
00:000006EC 7202            	   221: 	moveq		#2,d1			; select scan code set #2
00:000006EE 610003DE        	   222: 	bsr			KeybdSendByte
00:000006F2 610000DA        	   223: 	bsr			KeybdWaitTx
00:000006F6 4A81            	   224: 	tst.l		d1
00:000006F8 6B28            	   225: 	bmi			kbdiXmitBusy
00:000006FA 610000B0        	   226: 	bsr			KeybdRecvByte	; wait for response from keyboard
00:000006FE 4A41            	   227: 	tst.w		d1
00:00000700 6BDC            	   228: 	bmi			kbdiTryAgain
00:00000702 0C0100FA        	   229: 	cmpi.b	#$FA,d1
00:00000706 66D6            	   230: 	bne			kbdiTryAgain
                            	   231: kbdi0005:
00:00000708 6100FED4        	   232: 	bsr			KeybdGetID
                            	   233: ledxit:
00:0000070C 7207            	   234: 	moveq		#$07,d1
00:0000070E 6100FF0C        	   235: 	bsr			KeybdSetLED
00:00000712 610003DE        	   236: 	bsr			Wait300ms
00:00000716 7200            	   237: 	moveq		#$00,d1
00:00000718 6100FF02        	   238: 	bsr			KeybdSetLED
00:0000071C 4CDF020B        	   239: 	movem.l	(a7)+,d0/d1/d3/a1
00:00000720 4E75            	   240: 	rts
                            	   241: kbdiXmitBusy:
00:00000722 43FA001B        	   242: 	lea			msgXmitBusy,a1
00:00000726 61006B86        	   243: 	bsr			DisplayStringCRLF
00:0000072A 4CDF020B        	   244: 	movem.l	(a7)+,d0/d1/d3/a1
00:0000072E 4E75            	   245: 	rts
                            	   246: 	
                            	   247: msgBadKeybd:
00:00000730 4B6579626F617264	   248: 	dc.b		"Keyboard error",0
00:00000738 206572726F72
00:0000073E 00
                            	   249: msgXmitBusy:
00:0000073F 4B6579626F617264	   250: 	dc.b		"Keyboard transmitter stuck",0
00:00000747 207472616E736D69
00:0000074F 7474657220737475
00:00000757 636B
00:00000759 00
                            	   251: 
                            	   252: 	even
                            	   253: _KeybdGetStatus:
00:0000075A 4E7A1FE0        	   254: 	movec coreno,d1
00:0000075E 0C010002        	   255: 	cmpi.b #2,d1
00:00000762 660A            	   256: 	bne .0001
00:00000764 7200            	   257: 	moveq	#0,d1
00:00000766 1239FD0FFE01    	   258: 	move.b KEYBD+1,d1
00:0000076C 4E75            	   259: 	rts
                            	   260: .0001:
00:0000076E 7200            	   261: 	moveq #0,d1
00:00000770 1239FD0FFE03    	   262: 	move.b KEYBD+3,d1
00:00000776 4E75            	   263: 	rts
                            	   264: 
                            	   265: ; Get the scancode from the keyboard port
                            	   266: 
                            	   267: _KeybdGetScancode:
00:00000778 4E7A1FE0        	   268: 	movec coreno,d1
00:0000077C 0C010002        	   269: 	cmpi.b #2,d1
00:00000780 660A            	   270: 	bne .0001
00:00000782 7200            	   271: 	moveq		#0,d1
00:00000784 1239FD0FFE00    	   272: 	move.b	KEYBD,d1				; get the scan code
00:0000078A 4E75            	   273: 	rts
                            	   274: .0001:
00:0000078C 7200            	   275: 	moveq #0,d1
00:0000078E 1239FD0FFE02    	   276: 	move.b KEYBD+2,d1
00:00000794 4E75            	   277: 	rts
                            	   278: 
                            	   279: _KeybdClearIRQ:
00:00000796 2F01            	   280: 	move.l d1,-(a7)
00:00000798 4E7A1FE0        	   281: 	movec coreno,d1
00:0000079C 0C010002        	   282: 	cmpi.b #2,d1
00:000007A0 6606            	   283: 	bne .0001
00:000007A2 4239FD0FFE01    	   284: 	move.b	#0,KEYBD+1			; clear receive register
                            	   285: .0001:
00:000007A8 221F            	   286: 	move.l (a7)+,d1
00:000007AA 4E75            	   287: 	rts
                            	   288: 
                            	   289: ; Recieve a byte from the keyboard, used after a command is sent to the
                            	   290: ; keyboard in order to wait for a response.
                            	   291: ;
                            	   292: KeybdRecvByte:
00:000007AC 2F03            	   293: 	move.l	d3,-(a7)
00:000007AE 363C0064        	   294: 	move.w	#100,d3		; wait up to 1s
                            	   295: .0003:
00:000007B2 61A6            	   296: 	bsr			_KeybdGetStatus	; wait for response from keyboard
00:000007B4 4A01            	   297: 	tst.b		d1
00:000007B6 6B0E            	   298: 	bmi			.0004			; is input buffer full ? yes, branch
00:000007B8 6100031C        	   299: 	bsr			Wait10ms	; wait a bit
00:000007BC 51CBFFF4        	   300: 	dbra		d3,.0003	; go back and try again
00:000007C0 261F            	   301: 	move.l	(a7)+,d3
00:000007C2 72FF            	   302: 	moveq		#-1,d1		; return -1
00:000007C4 4E75            	   303: 	rts
                            	   304: .0004:
00:000007C6 61B0            	   305: 	bsr	_KeybdGetScancode
00:000007C8 61CC            	   306: 	bsr _KeybdClearIRQ
00:000007CA 261F            	   307: 	move.l	(a7)+,d3
00:000007CC 4E75            	   308: 	rts
                            	   309: 
                            	   310: 
                            	   311: ; Wait until the keyboard transmit is complete
                            	   312: ; Returns -1 if timedout, 0 if transmit completed
                            	   313: ;
                            	   314: KeybdWaitTx:
00:000007CE 48E73000        	   315: 	movem.l	d2/d3,-(a7)
00:000007D2 7664            	   316: 	moveq		#100,d3		; wait a max of 1s
                            	   317: .0001:
00:000007D4 6184            	   318: 	bsr	_KeybdGetStatus
00:000007D6 08010006        	   319: 	btst #6,d1				; check for transmit complete bit
00:000007DA 6610            	   320: 	bne	.0002					; branch if bit set
00:000007DC 610002F8        	   321: 	bsr	Wait10ms			; delay a little bit
00:000007E0 51CBFFF2        	   322: 	dbra d3,.0001			; go back and try again
00:000007E4 4CDF000C        	   323: 	movem.l	(a7)+,d2/d3
00:000007E8 72FF            	   324: 	moveq	#-1,d1			; return -1
00:000007EA 4E75            	   325: 	rts
                            	   326: .0002:
00:000007EC 4CDF000C        	   327: 	movem.l	(a7)+,d2/d3
00:000007F0 7200            	   328: 	moveq	#0,d1		; return 0
00:000007F2 4E75            	   329: 	rts
                            	   330: 
                            	   331: ;------------------------------------------------------------------------------
                            	   332: ; d1.b 0=echo off, non-zero = echo on
                            	   333: ;------------------------------------------------------------------------------
                            	   334: 
                            	   335: SetKeyboardEcho:
00:000007F4 13C10004000C    	   336: 	move.b	d1,KeybdEcho
00:000007FA 4E75            	   337: 	rts
                            	   338: 
                            	   339: ;------------------------------------------------------------------------------
                            	   340: ; Get key pending status into d1.b
                            	   341: ;
                            	   342: ; Returns:
                            	   343: ;		d1.b = 1 if a key is available, otherwise zero.
                            	   344: ;------------------------------------------------------------------------------
                            	   345: 
                            	   346: CheckForKey:
00:000007FC 7200            	   347: 	moveq.l	#0,d1					; clear high order bits
                            	   348: ;	move.b	KEYBD+1,d1		; get keyboard port status
                            	   349: ;	smi.b		d1						; set true/false
                            	   350: ;	andi.b	#1,d1					; return true (1) if key available, 0 otherwise
00:000007FE 4A3900100013    	   351: 	tst.b	_KeybdCnt
00:00000804 56C1            	   352: 	sne.b	d1
00:00000806 4E75            	   353: 	rts
                            	   354: 
                            	   355: ;------------------------------------------------------------------------------
                            	   356: ; GetKey
                            	   357: ; 	Get a character from the keyboard. 
                            	   358: ;
                            	   359: ; Modifies:
                            	   360: ;		d1
                            	   361: ; Returns:
                            	   362: ;		d1 = -1 if no key available or not in focus, otherwise key
                            	   363: ;------------------------------------------------------------------------------
                            	   364: 
                            	   365: GetKey:
00:00000808 2F00            	   366: 	move.l	d0,-(a7)					; push d0
00:0000080A 123900100000    	   367: 	move.b	IOFocus,d1				; Check if the core has the IO focus
00:00000810 4E7A0FE0        	   368: 	movec.l	coreno,d0
00:00000814 B200            	   369: 	cmp.b	d0,d1
00:00000816 6624            	   370: 	bne.s	.0004								; go return no key available, if not in focus
00:00000818 6138            	   371: 	bsr	KeybdGetCharNoWait		; get a character
00:0000081A 4A81            	   372: 	tst.l	d1									; was a key available?
00:0000081C 6B1E            	   373: 	bmi.s	.0004
00:0000081E 4A390004000C    	   374: 	tst.b	KeybdEcho						; is keyboard echo on ?
00:00000824 6712            	   375: 	beq.s	.0003								; no echo, just return the key
00:00000826 0C01000D        	   376: 	cmpi.b #CR,d1							; convert CR keystroke into CRLF
00:0000082A 6606            	   377: 	bne.s	.0005
00:0000082C 61006A50        	   378: 	bsr	CRLF
00:00000830 6006            	   379: 	bra.s	.0003
                            	   380: .0005:
00:00000832 4EB900008FEA    	   381: 	bsr	OutputChar
                            	   382: .0003:
00:00000838 201F            	   383: 	move.l (a7)+,d0						; pop d0
00:0000083A 4E75            	   384: 	rts												; return key
                            	   385: ; Return -1 indicating no char was available
                            	   386: .0004:
00:0000083C 201F            	   387: 	move.l (a7)+,d0						; pop d0
00:0000083E 72FF            	   388: 	moveq	#-1,d1							; return no key available
00:00000840 4E75            	   389: 	rts
                            	   390: 
                            	   391: ;------------------------------------------------------------------------------
                            	   392: ; Check for the cntrl-C keyboard sequence. Abort running routine and drop
                            	   393: ; back into the monitor.
                            	   394: ;------------------------------------------------------------------------------
                            	   395: 
                            	   396: CheckForCtrlC:
00:00000842 2F01            	   397: 	move.l d1,-(a7)
00:00000844 610C            	   398: 	bsr	KeybdGetCharNoWait
00:00000846 0C010003        	   399: 	cmpi.b #CTRLC,d1
00:0000084A 6700703C        	   400: 	beq	Monitor
00:0000084E 221F            	   401: 	move.l (a7)+,d1
00:00000850 4E75            	   402: 	rts
                            	   403: 
                            	   404: ;------------------------------------------------------------------------------
                            	   405: ;------------------------------------------------------------------------------
                            	   406: 
                            	   407: KeybdGetCharNoWait:
00:00000852 42390004000D    	   408: 	clr.b	KeybdWaitFlag
00:00000858 6008            	   409: 	bra	KeybdGetChar
                            	   410: 
                            	   411: KeybdGetCharWait:
00:0000085A 13FC00FF0004000D	   412: 	move.b #-1,KeybdWaitFlag
                            	   413: 
                            	   414: KeybdGetChar:
00:00000862 48E7B080        	   415: 	movem.l	d0/d2/d3/a0,-(a7)
                            	   416: .0003:
00:00000866 4E7A0FE0        	   417: 	movec	coreno,d0
00:0000086A 4840            	   418: 	swap d0
00:0000086C 7203            	   419: 	moveq	#KEYBD_SEMA,d1
00:0000086E 6100179A        	   420: 	bsr	LockSemaphore
00:00000872 143900100013    	   421: 	move.b	_KeybdCnt,d2		; get count of buffered scan codes
00:00000878 673E            	   422: 	beq.s		.0015						;
00:0000087A 143900100011    	   423: 	move.b	_KeybdHead,d2		; d2 = buffer head
00:00000880 4882            	   424: 	ext.w		d2
00:00000882 41F900100020    	   425: 	lea			_KeybdBuf,a0		; a0 = pointer to keyboard buffer
00:00000888 7200            	   426: 	clr.l		d1
00:0000088A 12302000        	   427: 	move.b	(a0,d2.w),d1		; d1 = scan code from buffer
00:0000088E 5202            	   428: 	addi.b	#1,d2						; increment keyboard head index
00:00000890 0202001F        	   429: 	andi.b	#31,d2					; and wrap around at buffer size
00:00000894 13C200100011    	   430: 	move.b	d2,_KeybdHead
00:0000089A 533900100013    	   431: 	subi.b	#1,_KeybdCnt		; decrement count of scan codes in buffer
00:000008A0 C342            	   432: 	exg			d1,d2						; save scancode value in d2
00:000008A2 4E7A0FE0        	   433: 	movec		coreno,d0
00:000008A6 4840            	   434: 	swap		d0
00:000008A8 7203            	   435: 	moveq		#KEYBD_SEMA,d1
00:000008AA 6100179A        	   436: 	bsr			UnlockSemaphore
00:000008AE C541            	   437: 	exg			d2,d1						; restore scancode value
00:000008B0 602A            	   438: 	bra			.0001						; go process scan code
                            	   439: .0014:
00:000008B2 6100FEA6        	   440: 	bsr		_KeybdGetStatus		; check keyboard status for key available
00:000008B6 6B1C            	   441: 	bmi		.0006							; yes, go process
                            	   442: .0015:
00:000008B8 4E7A0FE0        	   443: 	movec		coreno,d0
00:000008BC 4840            	   444: 	swap		d0
00:000008BE 7203            	   445: 	moveq		#KEYBD_SEMA,d1
00:000008C0 61001784        	   446: 	bsr			UnlockSemaphore
00:000008C4 4A390004000D    	   447: 	tst.b		KeybdWaitFlag			; are we willing to wait for a key ?
00:000008CA 6B9A            	   448: 	bmi			.0003							; yes, branch back
00:000008CC 4CDF010D        	   449: 	movem.l	(a7)+,d0/d2/d3/a0
00:000008D0 72FF            	   450: 	moveq		#-1,d1						; flag no char available
00:000008D2 4E75            	   451: 	rts
                            	   452: .0006:
00:000008D4 6100FEA2        	   453: 	bsr	_KeybdGetScancode
00:000008D8 6100FEBC        	   454: 	bsr _KeybdClearIRQ
                            	   455: .0001:
00:000008DC 33FC0001FD0FFF00	   456: 	move.w	#1,leds
00:000008E4 B23C00F0        	   457: 	cmp.b	#SC_KEYUP,d1
00:000008E8 670000C0        	   458: 	beq		.doKeyup
00:000008EC B23C00E0        	   459: 	cmp.b	#SC_EXTEND,d1
00:000008F0 670000C4        	   460: 	beq		.doExtend
00:000008F4 B23C0014        	   461: 	cmp.b	#SC_CTRL,d1
00:000008F8 670000C8        	   462: 	beq		.doCtrl
00:000008FC B23C0012        	   463: 	cmp.b	#SC_LSHIFT,d1
00:00000900 6700012A        	   464: 	beq		.doShift
00:00000904 B23C0059        	   465: 	cmp.b	#SC_RSHIFT,d1
00:00000908 67000122        	   466: 	beq		.doShift
00:0000090C B23C0077        	   467: 	cmp.b	#SC_NUMLOCK,d1
00:00000910 67000142        	   468: 	beq		.doNumLock
00:00000914 B23C0058        	   469: 	cmp.b	#SC_CAPSLOCK,d1
00:00000918 67000148        	   470: 	beq		.doCapsLock
00:0000091C B23C007E        	   471: 	cmp.b	#SC_SCROLLLOCK,d1
00:00000920 6700014E        	   472: 	beq		.doScrollLock
00:00000924 B23C0011        	   473: 	cmp.b   #SC_ALT,d1
00:00000928 670000C0        	   474: 	beq     .doAlt
00:0000092C 14390010000F    	   475: 	move.b	_KeyState1,d2			; check key up/down
00:00000932 42390010000F    	   476: 	move.b	#0,_KeyState1			; clear keyup status
00:00000938 4A02            	   477: 	tst.b	d2
00:0000093A 6600FF2A        	   478: 	bne	    .0003					; ignore key up
00:0000093E B23C000D        	   479: 	cmp.b   #SC_TAB,d1
00:00000942 670000CE        	   480: 	beq     .doTab
                            	   481: .0013:
00:00000946 143900100010    	   482: 	move.b	_KeyState2,d2
00:0000094C 6A1A            	   483: 	bpl		.0010					; is it extended code ?
00:0000094E C43C007F        	   484: 	and.b	#$7F,d2					; clear extended bit
00:00000952 13C200100010    	   485: 	move.b	d2,_KeyState2
00:00000958 42390010000F    	   486: 	move.b	#0,_KeyState1			; clear keyup
00:0000095E 41FA04E4        	   487: 	lea		_keybdExtendedCodes,a0
00:00000962 12301000        	   488: 	move.b	(a0,d1.w),d1
00:00000966 6034            	   489: 	bra		.0008
                            	   490: .0010:
00:00000968 08020002        	   491: 	btst	#2,d2					; is it CTRL code ?
00:0000096C 670E            	   492: 	beq		.0009
00:0000096E C27C007F        	   493: 	and.w	#$7F,d1
00:00000972 41FA0450        	   494: 	lea		_keybdControlCodes,a0
00:00000976 12301000        	   495: 	move.b	(a0,d1.w),d1
00:0000097A 6020            	   496: 	bra		.0008
                            	   497: .0009:
00:0000097C 08020000        	   498: 	btst	#0,d2					; is it shift down ?
00:00000980 670A            	   499: 	beq  	.0007
00:00000982 41FA0340        	   500: 	lea		_shiftedScanCodes,a0
00:00000986 12301000        	   501: 	move.b	(a0,d1.w),d1
00:0000098A 6010            	   502: 	bra		.0008
                            	   503: .0007:
00:0000098C 41FA0236        	   504: 	lea		_unshiftedScanCodes,a0
00:00000990 12301000        	   505: 	move.b	(a0,d1.w),d1
00:00000994 33FC0202FD0FFF00	   506: 	move.w	#$0202,leds
                            	   507: .0008:
00:0000099C 33FC0303FD0FFF00	   508: 	move.w	#$0303,leds
00:000009A4 4CDF010D        	   509: 	movem.l	(a7)+,d0/d2/d3/a0
00:000009A8 4E75            	   510: 	rts
                            	   511: .doKeyup:
00:000009AA 13FC00FF0010000F	   512: 	move.b	#-1,_KeyState1
00:000009B2 6000FEB2        	   513: 	bra		.0003
                            	   514: .doExtend:
00:000009B6 0039008000100010	   515: 	or.b	#$80,_KeyState2
00:000009BE 6000FEA6        	   516: 	bra		.0003
                            	   517: .doCtrl:
00:000009C2 12390010000F    	   518: 	move.b	_KeyState1,d1
00:000009C8 42390010000F    	   519: 	clr.b	_KeyState1
00:000009CE 4A01            	   520: 	tst.b	d1
00:000009D0 6A0C            	   521: 	bpl.s	.0004
00:000009D2 08B9000200100010	   522: 	bclr	#2,_KeyState2
00:000009DA 6000FE8A        	   523: 	bra		.0003
                            	   524: .0004:
00:000009DE 08F9000200100010	   525: 	bset	#2,_KeyState2
00:000009E6 6000FE7E        	   526: 	bra		.0003
                            	   527: .doAlt:
00:000009EA 12390010000F    	   528: 	move.b	_KeyState1,d1
00:000009F0 42390010000F    	   529: 	clr.b	_KeyState1
00:000009F6 4A01            	   530: 	tst.b	d1
00:000009F8 6A0C            	   531: 	bpl		.0011
00:000009FA 08B9000100100010	   532: 	bclr	#1,_KeyState2
00:00000A02 6000FE62        	   533: 	bra		.0003
                            	   534: .0011:
00:00000A06 08F9000100100010	   535: 	bset	#1,_KeyState2
00:00000A0E 6000FE56        	   536: 	bra		.0003
                            	   537: .doTab:
00:00000A12 2F01            	   538: 	move.l	d1,-(a7)
00:00000A14 123900100010    	   539:   move.b  _KeyState2,d1
00:00000A1A 08010001        	   540:   btst	#1,d1                 ; is ALT down ?
00:00000A1E 6706            	   541:   beq     .0012
                            	   542: ;    	inc     _iof_switch
00:00000A20 221F            	   543:   move.l	(a7)+,d1
00:00000A22 6000FE42        	   544:   bra     .0003
                            	   545: .0012:
00:00000A26 221F            	   546:   move.l	(a7)+,d1
00:00000A28 6000FF1C        	   547:   bra     .0013
                            	   548: .doShift:
00:00000A2C 12390010000F    	   549: 	move.b	_KeyState1,d1
00:00000A32 42390010000F    	   550: 	clr.b	_KeyState1
00:00000A38 4A01            	   551: 	tst.b	d1
00:00000A3A 6A0C            	   552: 	bpl.s	.0005
00:00000A3C 08B9000000100010	   553: 	bclr	#0,_KeyState2
00:00000A44 6000FE20        	   554: 	bra		.0003
                            	   555: .0005:
00:00000A48 08F9000000100010	   556: 	bset	#0,_KeyState2
00:00000A50 6000FE14        	   557: 	bra		.0003
                            	   558: .doNumLock:
00:00000A54 0879000400100010	   559: 	bchg	#4,_KeyState2
00:00000A5C 6120            	   560: 	bsr		KeybdSetLEDStatus
00:00000A5E 6000FE06        	   561: 	bra		.0003
                            	   562: .doCapsLock:
00:00000A62 0879000500100010	   563: 	bchg	#5,_KeyState2
00:00000A6A 6112            	   564: 	bsr		KeybdSetLEDStatus
00:00000A6C 6000FDF8        	   565: 	bra		.0003
                            	   566: .doScrollLock:
00:00000A70 0879000600100010	   567: 	bchg	#6,_KeyState2
00:00000A78 6104            	   568: 	bsr		KeybdSetLEDStatus
00:00000A7A 6000FDEA        	   569: 	bra		.0003
                            	   570: 
                            	   571: KeybdSetLEDStatus:
00:00000A7E 48E73000        	   572: 	movem.l	d2/d3,-(a7)
00:00000A82 42390010000E    	   573: 	clr.b		KeybdLEDs
00:00000A88 0839000400100010	   574: 	btst		#4,_KeyState2
00:00000A90 6708            	   575: 	beq.s		.0002
00:00000A92 13FC00020010000E	   576: 	move.b	#2,KeybdLEDs
                            	   577: .0002:
00:00000A9A 0839000500100010	   578: 	btst		#5,_KeyState2
00:00000AA2 6708            	   579: 	beq.s		.0003
00:00000AA4 08F900020010000E	   580: 	bset		#2,KeybdLEDs
                            	   581: .0003:
00:00000AAC 0839000600100010	   582: 	btst		#6,_KeyState2
00:00000AB4 6708            	   583: 	beq.s		.0004
00:00000AB6 08F900000010000E	   584: 	bset		#0,KeybdLEDs
                            	   585: .0004:
00:00000ABE 12390010000E    	   586: 	move.b	KeybdLEDs,d1
00:00000AC4 6100FB56        	   587: 	bsr			KeybdSetLED
00:00000AC8 4CDF000C        	   588: 	movem.l	(a7)+,d2/d3
00:00000ACC 4E75            	   589: 	rts
                            	   590: 
                            	   591: KeybdSendByte:
00:00000ACE 13C1FD0FFE00    	   592: 	move.b d1,KEYBD
00:00000AD4 4E75            	   593: 	rts
                            	   594: 	
                            	   595: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   596: ; Wait for 10 ms
                            	   597: ;
                            	   598: ; Parameters: none
                            	   599: ; Returns: none
                            	   600: ; Modifies: none
                            	   601: ; Stack Space: 2 long words
                            	   602: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   603: 
                            	   604: Wait10ms:
00:00000AD6 48E7C000        	   605: 	movem.l	d0/d1,-(a7)
00:00000ADA 4E7A0FF0        	   606: 	movec	tick,d0
00:00000ADE 068000061A80    	   607: 	addi.l #400000,d0			; 400,000 cycles at 40MHz
                            	   608: .0001:
00:00000AE4 4E7A1FF0        	   609: 	movec	tick,d1
00:00000AE8 B081            	   610: 	cmp.l	d1,d0
00:00000AEA 62F8            	   611: 	bhi	.0001
00:00000AEC 4CDF0003        	   612: 	movem.l	(a7)+,d0/d1
00:00000AF0 4E75            	   613: 	rts
                            	   614: 
                            	   615: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   616: ; Wait for 300 ms
                            	   617: ;
                            	   618: ; Parameters: none
                            	   619: ; Returns: none
                            	   620: ; Modifies: none
                            	   621: ; Stack Space: 2 long words
                            	   622: ; - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
                            	   623: 
                            	   624: Wait300ms:
00:00000AF2 48E7C000        	   625: 	movem.l	d0/d1,-(a7)
00:00000AF6 4E7A0FF0        	   626: 	movec		tick,d0
00:00000AFA 068000B71B00    	   627: 	addi.l	#12000000,d0			; 12,000,000 cycles at 40MHz
                            	   628: .0001:
00:00000B00 4E7A1FF0        	   629: 	movec		tick,d1
00:00000B04 B081            	   630: 	cmp.l		d1,d0
00:00000B06 62F8            	   631: 	bhi			.0001
00:00000B08 4CDF0003        	   632: 	movem.l	(a7)+,d0/d1
00:00000B0C 4E75            	   633: 	rts
                            	   634: 
                            	   635: ;--------------------------------------------------------------------------
                            	   636: ; Keyboard IRQ routine.
                            	   637: ; - only core 2 processes keyboard interrupts.
                            	   638: ; - the keyboard buffer is in shared global scratchpad space.
                            	   639: ;
                            	   640: ; Returns:
                            	   641: ; 	d1 = -1 if keyboard routine handled interrupt, otherwise positive.
                            	   642: ;--------------------------------------------------------------------------
                            	   643: 
                            	   644: KeybdIRQ:
00:00000B0E 46FC2600        	   645: 	move.w #$2600,sr					; disable lower interrupts
00:00000B12 48E7C080        	   646: 	movem.l	d0/d1/a0,-(a7)
00:00000B16 46B9FD000000    	   647: 	eori.l #-1,$FD000000
00:00000B1C 7200            	   648: 	moveq	#0,d1								; check if keyboard IRQ
00:00000B1E 1239FD0FFE01    	   649: 	move.b KEYBD+1,d1					; get status reg
00:00000B24 4A01            	   650: 	tst.b	d1
00:00000B26 6A000096        	   651: 	bpl	.0001									; branch if not keyboard
00:00000B2A 4E7A0FE0        	   652: 	movec	coreno,d0
00:00000B2E 4840            	   653: 	swap d0
00:00000B30 7203            	   654: 	moveq	#KEYBD_SEMA,d1
00:00000B32 610014D6        	   655: 	bsr LockSemaphore
00:00000B36 1239FD0FFE00    	   656: 	move.b KEYBD,d1						; get scan code
00:00000B3C 4239FD0FFE01    	   657: 	clr.b KEYBD+1							; clear status register (clears IRQ AND scancode)
00:00000B42 0839000100100010	   658: 	btst #1,_KeyState2				; Is Alt down?
00:00000B4A 6738            	   659: 	beq.s	.0003
00:00000B4C 0C01000D        	   660: 	cmpi.b #SC_TAB,d1					; is Alt-Tab?
00:00000B50 6632            	   661: 	bne.s	.0003
00:00000B52 4E7A0FF0        	   662: 	movec tick,d0
00:00000B56 90B90001001C    	   663: 	sub.l _Keybd_tick,d0
00:00000B5C B0BC0000000A    	   664: 	cmp.l #10,d0							; has it been 10 or more ticks?
                            	   665: ;	blo.s .0002
00:00000B62 4E7A0FF0        	   666: 	movec tick,d0							; update tick of last ALT-Tab
00:00000B66 23C00001001C    	   667: 	move.l d0,_Keybd_tick
00:00000B6C 61006BF2        	   668: 	bsr	rotate_iofocus
00:00000B70 423900100011    	   669: 	clr.b	_KeybdHead					; clear keyboard buffer
00:00000B76 423900100012    	   670: 	clr.b	_KeybdTail
00:00000B7C 423900100013    	   671: 	clr.b	_KeybdCnt
00:00000B82 602E            	   672: 	bra	.0002									; do not store Alt-Tab
                            	   673: .0003:
                            	   674: 	; Insert keyboard scan code into raw keyboard buffer
00:00000B84 0C39002000100013	   675: 	cmpi.b #32,_KeybdCnt			; see if keyboard buffer full
00:00000B8C 6424            	   676: 	bhs.s	.0002
00:00000B8E 103900100012    	   677: 	move.b _KeybdTail,d0			; keyboard buffer not full, add to tail
00:00000B94 4880            	   678: 	ext.w	d0
00:00000B96 41F900100020    	   679: 	lea	_KeybdBuf,a0					; a0 = pointer to buffer
00:00000B9C 11810000        	   680: 	move.b d1,(a0,d0.w)				; put scancode in buffer
00:00000BA0 5200            	   681: 	addi.b #1,d0							; increment tail index
00:00000BA2 0200001F        	   682: 	andi.b #31,d0							; wrap at buffer limit
00:00000BA6 13C000100012    	   683: 	move.b d0,_KeybdTail			; update tail index
00:00000BAC 523900100013    	   684: 	addi.b #1,_KeybdCnt				; increment buffer count
                            	   685: .0002:
00:00000BB2 4E7A0FE0        	   686: 	movec	coreno,d0
00:00000BB6 4840            	   687: 	swap d0
00:00000BB8 7203            	   688: 	moveq	#KEYBD_SEMA,d1
00:00000BBA 6100148A        	   689: 	bsr	UnlockSemaphore
                            	   690: .0001:
00:00000BBE 4CDF0103        	   691: 	movem.l	(a7)+,d0/d1/a0		; return
00:00000BC2 4E73            	   692: 	rte
                            	   693: 
                            	   694: ;--------------------------------------------------------------------------
                            	   695: ; PS2 scan codes to ascii conversion tables.
                            	   696: ;--------------------------------------------------------------------------
                            	   697: ;
                            	   698: _unshiftedScanCodes:
00:00000BC4 2E              	   699: 	dc.b	$2e,$a9,$2e,$a5,$a3,$a1,$a2,$ac
00:00000BC5 A9
00:00000BC6 2E
00:00000BC7 A5
00:00000BC8 A3
00:00000BC9 A1
00:00000BCA A2
00:00000BCB AC
00:00000BCC 2E              	   700: 	dc.b	$2e,$aa,$a8,$a6,$a4,$09,$60,$2e
00:00000BCD AA
00:00000BCE A8
00:00000BCF A6
00:00000BD0 A4
00:00000BD1 09
00:00000BD2 60
00:00000BD3 2E
00:00000BD4 2E              	   701: 	dc.b	$2e,$2e,$2e,$2e,$2e,$71,$31,$2e
00:00000BD5 2E
00:00000BD6 2E
00:00000BD7 2E
00:00000BD8 2E
00:00000BD9 71
00:00000BDA 31
00:00000BDB 2E
00:00000BDC 2E              	   702: 	dc.b	$2e,$2e,$7a,$73,$61,$77,$32,$2e
00:00000BDD 2E
00:00000BDE 7A
00:00000BDF 73
00:00000BE0 61
00:00000BE1 77
00:00000BE2 32
00:00000BE3 2E
00:00000BE4 2E              	   703: 	dc.b	$2e,$63,$78,$64,$65,$34,$33,$2e
00:00000BE5 63
00:00000BE6 78
00:00000BE7 64
00:00000BE8 65
00:00000BE9 34
00:00000BEA 33
00:00000BEB 2E
00:00000BEC 2E              	   704: 	dc.b	$2e,$20,$76,$66,$74,$72,$35,$2e
00:00000BED 20
00:00000BEE 76
00:00000BEF 66
00:00000BF0 74
00:00000BF1 72
00:00000BF2 35
00:00000BF3 2E
00:00000BF4 2E              	   705: 	dc.b	$2e,$6e,$62,$68,$67,$79,$36,$2e
00:00000BF5 6E
00:00000BF6 62
00:00000BF7 68
00:00000BF8 67
00:00000BF9 79
00:00000BFA 36
00:00000BFB 2E
00:00000BFC 2E              	   706: 	dc.b	$2e,$2e,$6d,$6a,$75,$37,$38,$2e
00:00000BFD 2E
00:00000BFE 6D
00:00000BFF 6A
00:00000C00 75
00:00000C01 37
00:00000C02 38
00:00000C03 2E
00:00000C04 2E              	   707: 	dc.b	$2e,$2c,$6b,$69,$6f,$30,$39,$2e
00:00000C05 2C
00:00000C06 6B
00:00000C07 69
00:00000C08 6F
00:00000C09 30
00:00000C0A 39
00:00000C0B 2E
00:00000C0C 2E              	   708: 	dc.b	$2e,$2e,$2f,$6c,$3b,$70,$2d,$2e
00:00000C0D 2E
00:00000C0E 2F
00:00000C0F 6C
00:00000C10 3B
00:00000C11 70
00:00000C12 2D
00:00000C13 2E
00:00000C14 2E              	   709: 	dc.b	$2e,$2e,$27,$2e,$5b,$3d,$2e,$2e
00:00000C15 2E
00:00000C16 27
00:00000C17 2E
00:00000C18 5B
00:00000C19 3D
00:00000C1A 2E
00:00000C1B 2E
00:00000C1C AD              	   710: 	dc.b	$ad,$2e,$0d,$5d,$2e,$5c,$2e,$2e
00:00000C1D 2E
00:00000C1E 0D
00:00000C1F 5D
00:00000C20 2E
00:00000C21 5C
00:00000C22 2E
00:00000C23 2E
00:00000C24 2E              	   711: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000C25 2E
00:00000C26 2E
00:00000C27 2E
00:00000C28 2E
00:00000C29 2E
00:00000C2A 08
00:00000C2B 2E
00:00000C2C 2E              	   712: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
00:00000C2D 95
00:00000C2E 2E
00:00000C2F 93
00:00000C30 94
00:00000C31 2E
00:00000C32 2E
00:00000C33 2E
00:00000C34 98              	   713: 	dc.b	$98,$7f,$92,$2e,$91,$90,$1b,$af
00:00000C35 7F
00:00000C36 92
00:00000C37 2E
00:00000C38 91
00:00000C39 90
00:00000C3A 1B
00:00000C3B AF
00:00000C3C AB              	   714: 	dc.b	$ab,$2e,$97,$2e,$2e,$96,$ae,$2e
00:00000C3D 2E
00:00000C3E 97
00:00000C3F 2E
00:00000C40 2E
00:00000C41 96
00:00000C42 AE
00:00000C43 2E
                            	   715: 
00:00000C44 2E              	   716: 	dc.b	$2e,$2e,$2e,$a7,$2e,$2e,$2e,$2e
00:00000C45 2E
00:00000C46 2E
00:00000C47 A7
00:00000C48 2E
00:00000C49 2E
00:00000C4A 2E
00:00000C4B 2E
00:00000C4C 2E              	   717: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C4D 2E
00:00000C4E 2E
00:00000C4F 2E
00:00000C50 2E
00:00000C51 2E
00:00000C52 2E
00:00000C53 2E
00:00000C54 2E              	   718: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C55 2E
00:00000C56 2E
00:00000C57 2E
00:00000C58 2E
00:00000C59 2E
00:00000C5A 2E
00:00000C5B 2E
00:00000C5C 2E              	   719: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C5D 2E
00:00000C5E 2E
00:00000C5F 2E
00:00000C60 2E
00:00000C61 2E
00:00000C62 2E
00:00000C63 2E
00:00000C64 2E              	   720: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C65 2E
00:00000C66 2E
00:00000C67 2E
00:00000C68 2E
00:00000C69 2E
00:00000C6A 2E
00:00000C6B 2E
00:00000C6C 2E              	   721: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C6D 2E
00:00000C6E 2E
00:00000C6F 2E
00:00000C70 2E
00:00000C71 2E
00:00000C72 2E
00:00000C73 2E
00:00000C74 2E              	   722: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C75 2E
00:00000C76 2E
00:00000C77 2E
00:00000C78 2E
00:00000C79 2E
00:00000C7A 2E
00:00000C7B 2E
00:00000C7C 2E              	   723: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C7D 2E
00:00000C7E 2E
00:00000C7F 2E
00:00000C80 2E
00:00000C81 2E
00:00000C82 2E
00:00000C83 2E
00:00000C84 2E              	   724: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C85 2E
00:00000C86 2E
00:00000C87 2E
00:00000C88 2E
00:00000C89 2E
00:00000C8A 2E
00:00000C8B 2E
00:00000C8C 2E              	   725: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C8D 2E
00:00000C8E 2E
00:00000C8F 2E
00:00000C90 2E
00:00000C91 2E
00:00000C92 2E
00:00000C93 2E
00:00000C94 2E              	   726: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C95 2E
00:00000C96 2E
00:00000C97 2E
00:00000C98 2E
00:00000C99 2E
00:00000C9A 2E
00:00000C9B 2E
00:00000C9C 2E              	   727: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000C9D 2E
00:00000C9E 2E
00:00000C9F 2E
00:00000CA0 2E
00:00000CA1 2E
00:00000CA2 2E
00:00000CA3 2E
00:00000CA4 2E              	   728: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CA5 2E
00:00000CA6 2E
00:00000CA7 2E
00:00000CA8 2E
00:00000CA9 2E
00:00000CAA 2E
00:00000CAB 2E
00:00000CAC 2E              	   729: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CAD 2E
00:00000CAE 2E
00:00000CAF 2E
00:00000CB0 2E
00:00000CB1 2E
00:00000CB2 2E
00:00000CB3 2E
00:00000CB4 2E              	   730: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CB5 2E
00:00000CB6 2E
00:00000CB7 2E
00:00000CB8 2E
00:00000CB9 2E
00:00000CBA 2E
00:00000CBB 2E
00:00000CBC 2E              	   731: 	dc.b	$2e,$2e,$fa,$2e,$2e,$2e,$2e,$2e
00:00000CBD 2E
00:00000CBE FA
00:00000CBF 2E
00:00000CC0 2E
00:00000CC1 2E
00:00000CC2 2E
00:00000CC3 2E
                            	   732: 
                            	   733: _shiftedScanCodes:
00:00000CC4 2E              	   734: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000CC5 2E
00:00000CC6 2E
00:00000CC7 2E
00:00000CC8 2E
00:00000CC9 2E
00:00000CCA 2E
00:00000CCB 2E
00:00000CCC 2E              	   735: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
00:00000CCD 2E
00:00000CCE 2E
00:00000CCF 2E
00:00000CD0 2E
00:00000CD1 09
00:00000CD2 7E
00:00000CD3 2E
00:00000CD4 2E              	   736: 	dc.b	$2e,$2e,$2e,$2e,$2e,$51,$21,$2e
00:00000CD5 2E
00:00000CD6 2E
00:00000CD7 2E
00:00000CD8 2E
00:00000CD9 51
00:00000CDA 21
00:00000CDB 2E
00:00000CDC 2E              	   737: 	dc.b	$2e,$2e,$5a,$53,$41,$57,$40,$2e
00:00000CDD 2E
00:00000CDE 5A
00:00000CDF 53
00:00000CE0 41
00:00000CE1 57
00:00000CE2 40
00:00000CE3 2E
00:00000CE4 2E              	   738: 	dc.b	$2e,$43,$58,$44,$45,$24,$23,$2e
00:00000CE5 43
00:00000CE6 58
00:00000CE7 44
00:00000CE8 45
00:00000CE9 24
00:00000CEA 23
00:00000CEB 2E
00:00000CEC 2E              	   739: 	dc.b	$2e,$20,$56,$46,$54,$52,$25,$2e
00:00000CED 20
00:00000CEE 56
00:00000CEF 46
00:00000CF0 54
00:00000CF1 52
00:00000CF2 25
00:00000CF3 2E
00:00000CF4 2E              	   740: 	dc.b	$2e,$4e,$42,$48,$47,$59,$5e,$2e
00:00000CF5 4E
00:00000CF6 42
00:00000CF7 48
00:00000CF8 47
00:00000CF9 59
00:00000CFA 5E
00:00000CFB 2E
00:00000CFC 2E              	   741: 	dc.b	$2e,$2e,$4d,$4a,$55,$26,$2a,$2e
00:00000CFD 2E
00:00000CFE 4D
00:00000CFF 4A
00:00000D00 55
00:00000D01 26
00:00000D02 2A
00:00000D03 2E
00:00000D04 2E              	   742: 	dc.b	$2e,$3c,$4b,$49,$4f,$29,$28,$2e
00:00000D05 3C
00:00000D06 4B
00:00000D07 49
00:00000D08 4F
00:00000D09 29
00:00000D0A 28
00:00000D0B 2E
00:00000D0C 2E              	   743: 	dc.b	$2e,$3e,$3f,$4c,$3a,$50,$5f,$2e
00:00000D0D 3E
00:00000D0E 3F
00:00000D0F 4C
00:00000D10 3A
00:00000D11 50
00:00000D12 5F
00:00000D13 2E
00:00000D14 2E              	   744: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
00:00000D15 2E
00:00000D16 22
00:00000D17 2E
00:00000D18 7B
00:00000D19 2B
00:00000D1A 2E
00:00000D1B 2E
00:00000D1C 2E              	   745: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
00:00000D1D 2E
00:00000D1E 0D
00:00000D1F 7D
00:00000D20 2E
00:00000D21 7C
00:00000D22 2E
00:00000D23 2E
00:00000D24 2E              	   746: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000D25 2E
00:00000D26 2E
00:00000D27 2E
00:00000D28 2E
00:00000D29 2E
00:00000D2A 08
00:00000D2B 2E
00:00000D2C 2E              	   747: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D2D 2E
00:00000D2E 2E
00:00000D2F 2E
00:00000D30 2E
00:00000D31 2E
00:00000D32 2E
00:00000D33 2E
00:00000D34 2E              	   748: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
00:00000D35 7F
00:00000D36 2E
00:00000D37 2E
00:00000D38 2E
00:00000D39 2E
00:00000D3A 1B
00:00000D3B 2E
00:00000D3C 2E              	   749: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D3D 2E
00:00000D3E 2E
00:00000D3F 2E
00:00000D40 2E
00:00000D41 2E
00:00000D42 2E
00:00000D43 2E
                            	   750: 
00:00000D44 2E              	   751: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D45 2E
00:00000D46 2E
00:00000D47 2E
00:00000D48 2E
00:00000D49 2E
00:00000D4A 2E
00:00000D4B 2E
00:00000D4C 2E              	   752: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D4D 2E
00:00000D4E 2E
00:00000D4F 2E
00:00000D50 2E
00:00000D51 2E
00:00000D52 2E
00:00000D53 2E
00:00000D54 2E              	   753: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D55 2E
00:00000D56 2E
00:00000D57 2E
00:00000D58 2E
00:00000D59 2E
00:00000D5A 2E
00:00000D5B 2E
00:00000D5C 2E              	   754: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D5D 2E
00:00000D5E 2E
00:00000D5F 2E
00:00000D60 2E
00:00000D61 2E
00:00000D62 2E
00:00000D63 2E
00:00000D64 2E              	   755: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D65 2E
00:00000D66 2E
00:00000D67 2E
00:00000D68 2E
00:00000D69 2E
00:00000D6A 2E
00:00000D6B 2E
00:00000D6C 2E              	   756: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D6D 2E
00:00000D6E 2E
00:00000D6F 2E
00:00000D70 2E
00:00000D71 2E
00:00000D72 2E
00:00000D73 2E
00:00000D74 2E              	   757: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D75 2E
00:00000D76 2E
00:00000D77 2E
00:00000D78 2E
00:00000D79 2E
00:00000D7A 2E
00:00000D7B 2E
00:00000D7C 2E              	   758: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D7D 2E
00:00000D7E 2E
00:00000D7F 2E
00:00000D80 2E
00:00000D81 2E
00:00000D82 2E
00:00000D83 2E
00:00000D84 2E              	   759: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D85 2E
00:00000D86 2E
00:00000D87 2E
00:00000D88 2E
00:00000D89 2E
00:00000D8A 2E
00:00000D8B 2E
00:00000D8C 2E              	   760: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D8D 2E
00:00000D8E 2E
00:00000D8F 2E
00:00000D90 2E
00:00000D91 2E
00:00000D92 2E
00:00000D93 2E
00:00000D94 2E              	   761: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D95 2E
00:00000D96 2E
00:00000D97 2E
00:00000D98 2E
00:00000D99 2E
00:00000D9A 2E
00:00000D9B 2E
00:00000D9C 2E              	   762: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000D9D 2E
00:00000D9E 2E
00:00000D9F 2E
00:00000DA0 2E
00:00000DA1 2E
00:00000DA2 2E
00:00000DA3 2E
00:00000DA4 2E              	   763: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DA5 2E
00:00000DA6 2E
00:00000DA7 2E
00:00000DA8 2E
00:00000DA9 2E
00:00000DAA 2E
00:00000DAB 2E
00:00000DAC 2E              	   764: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DAD 2E
00:00000DAE 2E
00:00000DAF 2E
00:00000DB0 2E
00:00000DB1 2E
00:00000DB2 2E
00:00000DB3 2E
00:00000DB4 2E              	   765: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DB5 2E
00:00000DB6 2E
00:00000DB7 2E
00:00000DB8 2E
00:00000DB9 2E
00:00000DBA 2E
00:00000DBB 2E
00:00000DBC 2E              	   766: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DBD 2E
00:00000DBE 2E
00:00000DBF 2E
00:00000DC0 2E
00:00000DC1 2E
00:00000DC2 2E
00:00000DC3 2E
                            	   767: 
                            	   768: ; control
                            	   769: _keybdControlCodes:
00:00000DC4 2E              	   770: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000DC5 2E
00:00000DC6 2E
00:00000DC7 2E
00:00000DC8 2E
00:00000DC9 2E
00:00000DCA 2E
00:00000DCB 2E
00:00000DCC 2E              	   771: 	dc.b	$2e,$2e,$2e,$2e,$2e,$09,$7e,$2e
00:00000DCD 2E
00:00000DCE 2E
00:00000DCF 2E
00:00000DD0 2E
00:00000DD1 09
00:00000DD2 7E
00:00000DD3 2E
00:00000DD4 2E              	   772: 	dc.b	$2e,$2e,$2e,$2e,$2e,$11,$21,$2e
00:00000DD5 2E
00:00000DD6 2E
00:00000DD7 2E
00:00000DD8 2E
00:00000DD9 11
00:00000DDA 21
00:00000DDB 2E
00:00000DDC 2E              	   773: 	dc.b	$2e,$2e,$1a,$13,$01,$17,$40,$2e
00:00000DDD 2E
00:00000DDE 1A
00:00000DDF 13
00:00000DE0 01
00:00000DE1 17
00:00000DE2 40
00:00000DE3 2E
00:00000DE4 2E              	   774: 	dc.b	$2e,$03,$18,$04,$05,$24,$23,$2e
00:00000DE5 03
00:00000DE6 18
00:00000DE7 04
00:00000DE8 05
00:00000DE9 24
00:00000DEA 23
00:00000DEB 2E
00:00000DEC 2E              	   775: 	dc.b	$2e,$20,$16,$06,$14,$12,$25,$2e
00:00000DED 20
00:00000DEE 16
00:00000DEF 06
00:00000DF0 14
00:00000DF1 12
00:00000DF2 25
00:00000DF3 2E
00:00000DF4 2E              	   776: 	dc.b	$2e,$0e,$02,$08,$07,$19,$5e,$2e
00:00000DF5 0E
00:00000DF6 02
00:00000DF7 08
00:00000DF8 07
00:00000DF9 19
00:00000DFA 5E
00:00000DFB 2E
00:00000DFC 2E              	   777: 	dc.b	$2e,$2e,$0d,$0a,$15,$26,$2a,$2e
00:00000DFD 2E
00:00000DFE 0D
00:00000DFF 0A
00:00000E00 15
00:00000E01 26
00:00000E02 2A
00:00000E03 2E
00:00000E04 2E              	   778: 	dc.b	$2e,$3c,$0b,$09,$0f,$29,$28,$2e
00:00000E05 3C
00:00000E06 0B
00:00000E07 09
00:00000E08 0F
00:00000E09 29
00:00000E0A 28
00:00000E0B 2E
00:00000E0C 2E              	   779: 	dc.b	$2e,$3e,$3f,$0c,$3a,$10,$5f,$2e
00:00000E0D 3E
00:00000E0E 3F
00:00000E0F 0C
00:00000E10 3A
00:00000E11 10
00:00000E12 5F
00:00000E13 2E
00:00000E14 2E              	   780: 	dc.b	$2e,$2e,$22,$2e,$7b,$2b,$2e,$2e
00:00000E15 2E
00:00000E16 22
00:00000E17 2E
00:00000E18 7B
00:00000E19 2B
00:00000E1A 2E
00:00000E1B 2E
00:00000E1C 2E              	   781: 	dc.b	$2e,$2e,$0d,$7d,$2e,$7c,$2e,$2e
00:00000E1D 2E
00:00000E1E 0D
00:00000E1F 7D
00:00000E20 2E
00:00000E21 7C
00:00000E22 2E
00:00000E23 2E
00:00000E24 2E              	   782: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$08,$2e
00:00000E25 2E
00:00000E26 2E
00:00000E27 2E
00:00000E28 2E
00:00000E29 2E
00:00000E2A 08
00:00000E2B 2E
00:00000E2C 2E              	   783: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E2D 2E
00:00000E2E 2E
00:00000E2F 2E
00:00000E30 2E
00:00000E31 2E
00:00000E32 2E
00:00000E33 2E
00:00000E34 2E              	   784: 	dc.b	$2e,$7f,$2e,$2e,$2e,$2e,$1b,$2e
00:00000E35 7F
00:00000E36 2E
00:00000E37 2E
00:00000E38 2E
00:00000E39 2E
00:00000E3A 1B
00:00000E3B 2E
00:00000E3C 2E              	   785: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E3D 2E
00:00000E3E 2E
00:00000E3F 2E
00:00000E40 2E
00:00000E41 2E
00:00000E42 2E
00:00000E43 2E
                            	   786: 
                            	   787: _keybdExtendedCodes:
00:00000E44 2E              	   788: 	dc.b	$2e,$2e,$2e,$2e,$a3,$a1,$a2,$2e
00:00000E45 2E
00:00000E46 2E
00:00000E47 2E
00:00000E48 A3
00:00000E49 A1
00:00000E4A A2
00:00000E4B 2E
00:00000E4C 2E              	   789: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E4D 2E
00:00000E4E 2E
00:00000E4F 2E
00:00000E50 2E
00:00000E51 2E
00:00000E52 2E
00:00000E53 2E
00:00000E54 2E              	   790: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E55 2E
00:00000E56 2E
00:00000E57 2E
00:00000E58 2E
00:00000E59 2E
00:00000E5A 2E
00:00000E5B 2E
00:00000E5C 2E              	   791: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E5D 2E
00:00000E5E 2E
00:00000E5F 2E
00:00000E60 2E
00:00000E61 2E
00:00000E62 2E
00:00000E63 2E
00:00000E64 2E              	   792: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E65 2E
00:00000E66 2E
00:00000E67 2E
00:00000E68 2E
00:00000E69 2E
00:00000E6A 2E
00:00000E6B 2E
00:00000E6C 2E              	   793: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E6D 2E
00:00000E6E 2E
00:00000E6F 2E
00:00000E70 2E
00:00000E71 2E
00:00000E72 2E
00:00000E73 2E
00:00000E74 2E              	   794: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E75 2E
00:00000E76 2E
00:00000E77 2E
00:00000E78 2E
00:00000E79 2E
00:00000E7A 2E
00:00000E7B 2E
00:00000E7C 2E              	   795: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E7D 2E
00:00000E7E 2E
00:00000E7F 2E
00:00000E80 2E
00:00000E81 2E
00:00000E82 2E
00:00000E83 2E
00:00000E84 2E              	   796: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E85 2E
00:00000E86 2E
00:00000E87 2E
00:00000E88 2E
00:00000E89 2E
00:00000E8A 2E
00:00000E8B 2E
00:00000E8C 2E              	   797: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E8D 2E
00:00000E8E 2E
00:00000E8F 2E
00:00000E90 2E
00:00000E91 2E
00:00000E92 2E
00:00000E93 2E
00:00000E94 2E              	   798: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E95 2E
00:00000E96 2E
00:00000E97 2E
00:00000E98 2E
00:00000E99 2E
00:00000E9A 2E
00:00000E9B 2E
00:00000E9C 2E              	   799: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000E9D 2E
00:00000E9E 2E
00:00000E9F 2E
00:00000EA0 2E
00:00000EA1 2E
00:00000EA2 2E
00:00000EA3 2E
00:00000EA4 2E              	   800: 	dc.b	$2e,$2e,$2e,$2e,$2e,$2e,$2e,$2e
00:00000EA5 2E
00:00000EA6 2E
00:00000EA7 2E
00:00000EA8 2E
00:00000EA9 2E
00:00000EAA 2E
00:00000EAB 2E
00:00000EAC 2E              	   801: 	dc.b	$2e,$95,$2e,$93,$94,$2e,$2e,$2e
00:00000EAD 95
00:00000EAE 2E
00:00000EAF 93
00:00000EB0 94
00:00000EB1 2E
00:00000EB2 2E
00:00000EB3 2E
00:00000EB4 98              	   802: 	dc.b	$98,$99,$92,$2e,$91,$90,$2e,$2e
00:00000EB5 99
00:00000EB6 92
00:00000EB7 2E
00:00000EB8 91
00:00000EB9 90
00:00000EBA 2E
00:00000EBB 2E
00:00000EBC 2E              	   803: 	dc.b	$2e,$2e,$97,$2e,$2e,$96,$2e,$2e
00:00000EBD 2E
00:00000EBE 97
00:00000EBF 2E
00:00000EC0 2E
00:00000EC1 96
00:00000EC2 2E
00:00000EC3 2E
                            	   804: 
                            	   805: 

Source: "boot.x68"
                            	   559: 	include "textvid.x68"

Source: "textvid.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Setup the text video device
                            	    40: ; stdout = text screen controller
                            	    41: ;------------------------------------------------------------------------------
                            	    42: ;------------------------------------------------------------------------------
                            	    43: 
                            	    44: TBLE macro arg1
                            	    45: 	dc.l (\1)
                            	    46: endm
                            	    47: 
                            	    48: 	code
                            	    49: 	even
                            	    50: 
                            	    51: 	align 2
                            	    52: TEXTVID_CMDTBL:
                            	    53: 	TBLE textvid_init					; 0
00:00000EC4 00000F8A        	     1M 	dc.l (textvid_init)
                            	    54: 	TBLE textvid_stat
00:00000EC8 00001032        	     1M 	dc.l (textvid_stat)
                            	    55: 	TBLE textvid_putchar
00:00000ECC 000011CE        	     1M 	dc.l (textvid_putchar)
                            	    56: 	TBLE textvid_putbuf
00:00000ED0 0000103E        	     1M 	dc.l (textvid_putbuf)
                            	    57: 	TBLE textvid_getchar
00:00000ED4 00001036        	     1M 	dc.l (textvid_getchar)
                            	    58: 	TBLE textvid_getbuf
00:00000ED8 0000103E        	     1M 	dc.l (textvid_getbuf)
                            	    59: 	TBLE textvid_set_inpos
00:00000EDC 00001058        	     1M 	dc.l (textvid_set_inpos)
                            	    60: 	TBLE textvid_set_outpos
00:00000EE0 0000106E        	     1M 	dc.l (textvid_set_outpos)
                            	    61: 	TBLE textvid_stub
00:00000EE4 0000103E        	     1M 	dc.l (textvid_stub)
                            	    62: 	TBLE textvid_stub
00:00000EE8 0000103E        	     1M 	dc.l (textvid_stub)
                            	    63: 	TBLE textvid_stub				; 10
00:00000EEC 0000103E        	     1M 	dc.l (textvid_stub)
                            	    64: 	TBLE textvid_stub
00:00000EF0 0000103E        	     1M 	dc.l (textvid_stub)
                            	    65: 	TBLE textvid_clear
00:00000EF4 0000111A        	     1M 	dc.l (textvid_clear)
                            	    66: 	TBLE textvid_stub
00:00000EF8 0000103E        	     1M 	dc.l (textvid_stub)
                            	    67: 	TBLE textvid_stub
00:00000EFC 0000103E        	     1M 	dc.l (textvid_stub)
                            	    68: 	TBLE textvid_stub
00:00000F00 0000103E        	     1M 	dc.l (textvid_stub)
                            	    69: 	TBLE textvid_getbuf1
00:00000F04 000010D0        	     1M 	dc.l (textvid_getbuf1)
                            	    70: 	TBLE textvid_stub
00:00000F08 0000103E        	     1M 	dc.l (textvid_stub)
                            	    71: 	TBLE textvid_stub
00:00000F0C 0000103E        	     1M 	dc.l (textvid_stub)
                            	    72: 	TBLE textvid_set_unit
00:00000F10 000010E0        	     1M 	dc.l (textvid_set_unit)
                            	    73: 	TBLE textvid_get_dimen	; 20
00:00000F14 000010EA        	     1M 	dc.l (textvid_get_dimen)
                            	    74: 	TBLE textvid_get_color
00:00000F18 000010C0        	     1M 	dc.l (textvid_get_color)
                            	    75: 	TBLE textvid_get_inpos
00:00000F1C 00001042        	     1M 	dc.l (textvid_get_inpos)
                            	    76: 	TBLE textvid_get_outpos
00:00000F20 00001084        	     1M 	dc.l (textvid_get_outpos)
                            	    77: 	TBLE textvid_get_outptr
00:00000F24 0000109A        	     1M 	dc.l (textvid_get_outptr)
                            	    78: 
                            	    79: 	code
                            	    80: 	even
                            	    81: textvid_cmdproc:
00:00000F28 0C060019        	    82: 	cmpi.b #25,d6
00:00000F2C 641A            	    83: 	bhs.s .0001
00:00000F2E 48E70280        	    84: 	movem.l d6/a0,-(a7)
00:00000F32 4886            	    85: 	ext.w d6
00:00000F34 48C6            	    86: 	ext.l d6
00:00000F36 E54E            	    87: 	lsl.w #2,d6
00:00000F38 41FAFF8A        	    88: 	lea TEXTVID_CMDTBL,a0
00:00000F3C 20706000        	    89: 	move.l (a0,d6.w),a0
00:00000F40 4E90            	    90: 	jsr (a0)
00:00000F42 4CDF0140        	    91: 	movem.l (a7)+,d6/a0
00:00000F46 4E75            	    92: 	rts
                            	    93: .0001:
00:00000F48 7002            	    94: 	moveq #E_Func,d0
00:00000F4A 4E75            	    95: 	rts
                            	    96: 
                            	    97: setup_textvid:
00:00000F4C 48E78080        	    98: 	movem.l d0/a0,-(a7)
00:00000F50 7020            	    99: 	moveq #32,d0
00:00000F52 41F900040B08    	   100: 	lea.l textvid_dcb,a0
                            	   101: .0001:
00:00000F58 4298            	   102: 	clr.l (a0)+
00:00000F5A 51C8FFFC        	   103: 	dbra d0,.0001
00:00000F5E 23FC204243440004	   104: 	move.l #$20424344,textvid_dcb+DCB_MAGIC				; 'DCB'
00:00000F66 0B08
00:00000F68 23FC545845540004	   105: 	move.l #$54584554,textvid_dcb+DCB_NAME				; 'TEXTVID'
00:00000F70 0B0C
00:00000F72 23FC004449560004	   106: 	move.l #$00444956,textvid_dcb+DCB_NAME+4			;
00:00000F7A 0B10
00:00000F7C 23FC00000F280004	   107: 	move.l #textvid_cmdproc,textvid_dcb+DCB_CMDPROC
00:00000F84 0B20
00:00000F86 4CDF0101        	   108: 	movem.l (a7)+,d0/a0
                            	   109: 
                            	   110: textvid_init:
00:00000F8A 2F00            	   111: 	move.l d0,-(a7)
                            	   112: 	if (SCREEN_FORMAT==1)
00:00000F8C 23FC000000FF0004	   113: 		move.l #$0000ff,fgColor		; set foreground / background color (white)
00:00000F94 0084
00:00000F96 23FC000000020004	   114: 		move.l #$000002,bkColor		; medium blue
00:00000F9E 0088
00:00000FA0 23FC000000FF0004	   115: 		move.l #$0000ff,textvid_dcb+DCB_FGCOLOR
00:00000FA8 0B6C
00:00000FAA 23FC000000020004	   116: 		move.l #$000002,textvid_dcb+DCB_BKCOLOR		; medium blue
00:00000FB2 0B68
                            	   117: 	else
                            	   118: 		move.l #$1fffff,fgColor		; set foreground / background color (white)
                            	   119: 		move.l #$00003f,bkColor		; medium blue
                            	   120: 		move.l #$1fffff,textvid_dcb+DCB_FGCOLOR		; set foreground / background color (white)
                            	   121: 		move.l #$00003f,textvid_dcb+DCB_BKCOLOR		; medium blue
                            	   122: 	endif
00:00000FB4 4E7A0FE0        	   123: 	movec.l	coreno,d0					; get core number (2 to 9)
00:00000FB8 5500            	   124: 	subi.b #2,d0							; adjust (0 to 7)
                            	   125: 	if (SCREEN_FORMAT==1)
00:00000FBA C0FC2000        	   126: 		mulu #8192,d0						; compute screen location
                            	   127: 	else
                            	   128: 		mulu #16384,d0						; compute screen location
                            	   129: 	endif
                            	   130: 	if HAS_MMU
                            	   131: 		addi.l #$01E00000,d0
                            	   132: 	else
00:00000FBE 0680FD000000    	   133: 		addi.l #$FD000000,d0
                            	   134: 	endif
00:00000FC4 23C000040B40    	   135: 	move.l d0,textvid_dcb+DCB_INBUFPTR
00:00000FCA 23C000040B44    	   136: 	move.l d0,textvid_dcb+DCB_OUTBUFPTR
00:00000FD0 23C000040004    	   137: 	move.l d0,TextScr
                            	   138: 	if (SCREEN_FORMAT==1)
00:00000FD6 23FC000020000004	   139: 		move.l #8192,textvid_dcb+DCB_INBUFSIZE
00:00000FDE 0B48
00:00000FE0 23FC000020000004	   140: 		move.l #8192,textvid_dcb+DCB_OUTBUFSIZE
00:00000FE8 0B4C
                            	   141: 	else
                            	   142: 		move.l #16384,textvid_dcb+DCB_INBUFSIZE
                            	   143: 		move.l #16384,textvid_dcb+DCB_OUTBUFSIZE
                            	   144: 	endif
00:00000FEA 23FC000000400004	   145: 	move.l #TEXTCOL,textvid_dcb+DCB_OUTDIMX	; set rows and columns
00:00000FF2 0B5C
00:00000FF4 23FC000000200004	   146: 	move.l #TEXTROW,textvid_dcb+DCB_OUTDIMY
00:00000FFC 0B60
00:00000FFE 23FC000000400004	   147: 	move.l #TEXTCOL,textvid_dcb+DCB_INDIMX		; set rows and columns
00:00001006 0B50
00:00001008 23FC000000200004	   148: 	move.l #TEXTROW,textvid_dcb+DCB_INDIMY
00:00001010 0B54
00:00001012 13FC00400004008D	   149: 	move.b #TEXTCOL,TextCols				; set rows and columns
00:0000101A 13FC00200004008C	   150: 	move.b #TEXTROW,TextRows
00:00001022 42B900040B28    	   151: 	clr.l textvid_dcb+DCB_OUTPOSX
00:00001028 42B900040B2C    	   152: 	clr.l textvid_dcb+DCB_OUTPOSY
00:0000102E 201F            	   153: 	move.l (a7)+,d0
00:00001030 4E75            	   154: 	rts
                            	   155: 
                            	   156: textvid_stat:
00:00001032 7000            	   157: 	moveq #E_Ok,d0
00:00001034 4E75            	   158: 	rts
                            	   159: 
                            	   160: textvid_getchar:
00:00001036 6100683C        	   161: 	bsr FromScreen
00:0000103A 7000            	   162: 	moveq #E_Ok,d0
00:0000103C 4E75            	   163: 	rts
                            	   164: 
                            	   165: textvid_putbuf:
                            	   166: textvid_getbuf:
                            	   167: textvid_stub:
00:0000103E 700A            	   168: 	moveq #E_NotSupported,d0
00:00001040 4E75            	   169: 	rts
                            	   170: 
                            	   171: textvid_get_inpos:
00:00001042 223900040B34    	   172: 	move.l textvid_dcb+DCB_INPOSX,d1
00:00001048 243900040B38    	   173: 	move.l textvid_dcb+DCB_INPOSY,d2
00:0000104E 263900040B3C    	   174: 	move.l textvid_dcb+DCB_INPOSZ,d3
00:00001054 7000            	   175: 	move.l #E_Ok,d0
00:00001056 4E75            	   176: 	rts
                            	   177: 
                            	   178: textvid_set_inpos:
00:00001058 23C100040B34    	   179: 	move.l d1,textvid_dcb+DCB_INPOSX
00:0000105E 23C200040B38    	   180: 	move.l d2,textvid_dcb+DCB_INPOSY
00:00001064 23C300040B3C    	   181: 	move.l d3,textvid_dcb+DCB_INPOSZ
00:0000106A 7000            	   182: 	move.l #E_Ok,d0
00:0000106C 4E75            	   183: 	rts
                            	   184: 
                            	   185: textvid_set_outpos:
00:0000106E 23C100040B28    	   186: 	move.l d1,textvid_dcb+DCB_OUTPOSX
00:00001074 23C200040B2C    	   187: 	move.l d2,textvid_dcb+DCB_OUTPOSY
00:0000107A 23C300040B30    	   188: 	move.l d3,textvid_dcb+DCB_OUTPOSZ
00:00001080 7000            	   189: 	move.l #E_Ok,d0
00:00001082 4E75            	   190: 	rts
                            	   191: 
                            	   192: textvid_get_outpos:
00:00001084 223900040B28    	   193: 	move.l textvid_dcb+DCB_OUTPOSX,d1
00:0000108A 243900040B2C    	   194: 	move.l textvid_dcb+DCB_OUTPOSY,d2
00:00001090 263900040B30    	   195: 	move.l textvid_dcb+DCB_OUTPOSZ,d3
00:00001096 7000            	   196: 	move.l #E_Ok,d0
00:00001098 4E75            	   197: 	rts
                            	   198: 
                            	   199: textvid_get_outptr:
00:0000109A 2F02            	   200: 	move.l d2,-(a7)
00:0000109C 223900040B28    	   201: 	move.l textvid_dcb+DCB_OUTPOSX,d1
00:000010A2 203900040B2C    	   202: 	move.l textvid_dcb+DCB_OUTPOSY,d0
00:000010A8 243900040B5C    	   203: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:000010AE C0C2            	   204: 	mulu d2,d0
00:000010B0 D280            	   205: 	add.l d0,d1
                            	   206: 	if (SCREEN_FORMAT==1)
00:000010B2 E589            	   207: 		lsl.l #2,d1
                            	   208: 	else
                            	   209: 		lsl.l #3,d1
                            	   210: 	endif
00:000010B4 D2B900040B44    	   211: 	add.l textvid_dcb+DCB_OUTBUFPTR,d1
00:000010BA 241F            	   212: 	move.l (a7)+,d2
00:000010BC 7000            	   213: 	move.l #E_Ok,d0
00:000010BE 4E75            	   214: 	rts
                            	   215: 
                            	   216: textvid_get_color:
00:000010C0 223900040B6C    	   217: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:000010C6 243900040B68    	   218: 	move.l textvid_dcb+DCB_BKCOLOR,d2
00:000010CC 7000            	   219: 	move.l #E_Ok,d0
00:000010CE 4E75            	   220: 	rts
                            	   221: 
                            	   222: textvid_getbuf1:
00:000010D0 223900040B44    	   223: 	move.l textvid_dcb+DCB_OUTBUFPTR,d1
00:000010D6 243900040B4C    	   224: 	move.l textvid_dcb+DCB_OUTBUFSIZE,d2
00:000010DC 7000            	   225: 	move.l #E_Ok,d0
00:000010DE 4E75            	   226: 	rts
                            	   227: 
                            	   228: textvid_set_unit:
00:000010E0 23C100040B88    	   229: 	move.l d1,textvid_dcb+DCB_UNIT
00:000010E6 7000            	   230: 	move.l #E_Ok,d0
00:000010E8 4E75            	   231: 	rts
                            	   232: 
                            	   233: textvid_get_dimen:
00:000010EA 4A00            	   234: 	cmpi.b #0,d0
00:000010EC 6616            	   235: 	bne.s .0001
00:000010EE 223900040B5C    	   236: 	move.l textvid_dcb+DCB_OUTDIMX,d1
00:000010F4 243900040B60    	   237: 	move.l textvid_dcb+DCB_OUTDIMY,d2
00:000010FA 263900040B64    	   238: 	move.l textvid_dcb+DCB_OUTDIMZ,d3
00:00001100 7000            	   239: 	move.l #E_Ok,d0
00:00001102 4E75            	   240: 	rts
                            	   241: .0001:
00:00001104 223900040B50    	   242: 	move.l textvid_dcb+DCB_INDIMX,d1
00:0000110A 243900040B54    	   243: 	move.l textvid_dcb+DCB_INDIMY,d2
00:00001110 263900040B58    	   244: 	move.l textvid_dcb+DCB_INDIMZ,d3
00:00001116 7000            	   245: 	move.l #E_Ok,d0
00:00001118 4E75            	   246: 	rts
                            	   247: 
                            	   248: ; -----------------------------------------------------------------------------
                            	   249: ; -----------------------------------------------------------------------------
                            	   250: 
                            	   251: textvid_clear:
00:0000111A 23FCFFFFFFFFFD0F	   252: 	move.l #$FFFFFFFF,leds
00:00001122 FF00
00:00001124 48E77880        	   253: 	movem.l	d1/d2/d3/d4/a0,-(a7)
00:00001128 4E7A0FE0        	   254: 	movec	coreno,d0
00:0000112C 4840            	   255: 	swap d0	
                            	   256: ;	moveq		#SCREEN_SEMA,d1
                            	   257: ;	bsr			LockSemaphore
00:0000112E 7E02            	   258: 	moveq #2,d7									; device 2
00:00001130 7C10            	   259: 	moveq #DEV_GETBUF1,d6
00:00001132 4E40            	   260: 	trap #0
00:00001134 23FCFEFEFEFEFD0F	   261: 	move.l #$FEFEFEFE,leds
00:0000113C FF00
00:0000113E 2041            	   262: 	move.l d1,a0								; a0 = pointer to screen area
00:00001140 2802            	   263: 	move.l d2,d4
                            	   264: 	if (SCREEN_FORMAT==1)
00:00001142 E48C            	   265: 		lsr.l #2,d4									; number of cells to clear
                            	   266: 	else
                            	   267: 		lsr.l #3,d4									; number of cells to clear
                            	   268: 	endif
00:00001144 7C15            	   269: 	move.l #DEV_GET_COLOR,d6
00:00001146 4E40            	   270: 	trap #0
00:00001148 23FCFDFDFDFDFD0F	   271: 	move.l #$FDFDFDFD,leds
00:00001150 FF00
                            	   272: ;	bsr	get_screen_color				; get the color bits
                            	   273: 	if (SCREEN_FORMAT==1)
00:00001152 48C1            	   274: 		ext.l d1
00:00001154 E189            	   275: 		lsl.l #8,d1
00:00001156 48C2            	   276: 		ext.l d2									; clear high order bits
00:00001158 8481            	   277: 		or.l d1,d2								; forground color in bits 24 to 31
00:0000115A 4842            	   278: 		swap d2										; color in bits 16 to 23
00:0000115C 00420020        	   279: 		ori.w #32,d2							; insert character to display (space)
00:00001160 E15A            	   280: 		rol.w #8,d2								; reverse byte order
00:00001162 4842            	   281: 		swap d2
00:00001164 E15A            	   282: 		rol.w #8,d2
                            	   283: loop3:
00:00001166 20C2            	   284: 		move.l d2,(a0)+						; copy to cell
                            	   285: 	else
                            	   286: 		lsl.l #5,d1								; high order background color bits go in bits 0 to 4
                            	   287: 		move.l d2,d3
                            	   288: 		swap d3
                            	   289: 		andi.l #$1f,d3
                            	   290: 		or.l d3,d1
                            	   291: 		; we want bkcolor in bits 16 to 32
                            	   292: 		; char in bits 0 to 15
                            	   293: 		swap d2										; color in bits 16 to 32
                            	   294: 		move.w #32,d2							; load space character
                            	   295: 		rol.w	#8,d2								; swap endian, text controller expects little endian
                            	   296: 		swap d2
                            	   297: 		rol.w	#8,d2
                            	   298: 		rol.w	#8,d0								; swap endian
                            	   299: 		swap d0
                            	   300: 		rol.w	#8,d0
                            	   301: loop3:
                            	   302: 		move.l d2,(a0)+						; copy char plus bkcolor to cell
                            	   303: 		move.l d1,(a0)+						; copy fgcolor to cell
                            	   304: 	endif
00:00001168 51CCFFFC        	   305: 	dbra d4,loop3
00:0000116C 4E7A0FE0        	   306: 	movec coreno,d0
00:00001170 4840            	   307: 	swap d0	
                            	   308: ;	moveq #SCREEN_SEMA,d1
                            	   309: ;	bsr UnlockSemaphore
00:00001172 23FCFCFCFCFCFD0F	   310: 	move.l #$FCFCFCFC,leds
00:0000117A FF00
00:0000117C 4CDF011E        	   311: 	movem.l (a7)+,d1/d2/d3/d4/a0
00:00001180 7000            	   312: 	move.l #E_Ok,d0
00:00001182 4E75            	   313: 	rts
                            	   314: 
                            	   315: ; -----------------------------------------------------------------------------
                            	   316: ; Gets the screen color in d0 and d1. Setup already to be able to insert
                            	   317: ; character code.
                            	   318: ; -----------------------------------------------------------------------------
                            	   319: 
                            	   320: get_screen_color:
00:00001184 2F02            	   321: 	move.l d2,-(a7)
00:00001186 223900040B6C    	   322: 	move.l textvid_dcb+DCB_FGCOLOR,d1
00:0000118C 243900040B68    	   323: 	move.l textvid_dcb+DCB_BKCOLOR,d2
                            	   324: 	if (SCREEN_FORMAT==1)
00:00001192 E189            	   325: 		lsl.l #8,d1							; foreground color in bits 8 to 15
00:00001194 024200FF        	   326: 		andi.w #$ff,d2
00:00001198 8242            	   327: 		or.w d2,d1							; background color in bits 0 to 7
00:0000119A 4841            	   328: 		swap d1									; foreground color in bits 24 to 31, bk in 16 to 23
00:0000119C 4241            	   329: 		move.w #0,d1						; clear character
00:0000119E 2001            	   330: 		move.l d1,d0
                            	   331: 	else
                            	   332: 		asl.l	#5,d1							; shift into position
                            	   333: 		ori.l	#$40000000,d1			; set priority
                            	   334: 		move.l d2,d0
                            	   335: 		lsr.l	#8,d2
                            	   336: 		lsr.l	#8,d2
                            	   337: 		andi.l #31,d2						; mask off extra bits
                            	   338: 		or.l d2,d1							; set background color bits in upper long word
                            	   339: 		asl.l	#8,d0							; shift into position for display ram
                            	   340: 		asl.l	#8,d0
                            	   341: 	endif
00:000011A0 241F            	   342: 	move.l (a7)+,d2
00:000011A2 4E75            	   343: 	rts
                            	   344: 
                            	   345: ;------------------------------------------------------------------------------
                            	   346: ; Calculate screen memory location from CursorRow,CursorCol.
                            	   347: ; Destroys d0,d2,a0
                            	   348: ;------------------------------------------------------------------------------
                            	   349: 
                            	   350: CalcScreenLoc:
00:000011A4 48E7C400        	   351: 	movem.l d0/d1/d5,-(a7)
00:000011A8 203900040B28    	   352: 	move.l textvid_dcb+DCB_OUTPOSX,d0
00:000011AE 2A3900040B2C    	   353: 	move.l textvid_dcb+DCB_OUTPOSY,d5
00:000011B4 223900040B5C    	   354: 	move.l textvid_dcb+DCB_OUTDIMX,d1
00:000011BA CAC1            	   355: 	mulu d1,d5							; y * num cols
00:000011BC D085            	   356: 	add.l d5,d0							; plus x
                            	   357: 	if (SCREEN_FORMAT==1)
00:000011BE E580            	   358: 		asl.l #2,d0							; 4 bytes per char
                            	   359: 	else
                            	   360: 		asl.l	#3,d0							; 8 bytes per char
                            	   361: 	endif
00:000011C0 207900040B44    	   362: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:000011C6 D1C0            	   363: 	add.l	d0,a0								; a0 = screen location
00:000011C8 4CDF0023        	   364: 	movem.l (a7)+,d0/d1/d5
00:000011CC 4E75            	   365: 	rts
                            	   366: 
                            	   367: ;------------------------------------------------------------------------------
                            	   368: ; Display a character on the screen
                            	   369: ; Parameters:
                            	   370: ; 	d1.b = char to display
                            	   371: ;------------------------------------------------------------------------------
                            	   372: 
                            	   373: textvid_putchar:
00:000011CE 48E77000        	   374: 	movem.l	d1/d2/d3,-(a7)
00:000011D2 4E7A2FE0        	   375: 	movec	coreno,d2
00:000011D6 0C020002        	   376: 	cmpi.b #2,d2
                            	   377: ;	bne.s		.0001
                            	   378: ;	bsr			SerialPutChar
                            	   379: .0001:
00:000011DA 0281000000FF    	   380: 	andi.l #$ff,d1				; zero out upper bytes of d1
00:000011E0 0C01000D        	   381: 	cmpi.b #13,d1				; carriage return ?
00:000011E4 6612            	   382: 	bne.s	dccr
00:000011E6 42B900040B28    	   383: 	clr.l	textvid_dcb+DCB_OUTPOSX	; just set cursor column to zero on a CR
                            	   384: dcx14:
00:000011EC 6100024E        	   385: 	bsr	SyncCursor				; set position in text controller
                            	   386: dcx7:
00:000011F0 4CDF000E        	   387: 	movem.l	(a7)+,d1/d2/d3
00:000011F4 7000            	   388: 	moveq #E_Ok,d0
00:000011F6 4E75            	   389: 	rts
                            	   390: dccr:
00:000011F8 0C010091        	   391: 	cmpi.b #$91,d1			; cursor right ?
00:000011FC 6618            	   392: 	bne.s dcx6
00:000011FE 243900040B5C    	   393: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:00001204 5382            	   394: 	subq.l #1,d2
00:00001206 94B900040B28    	   395: 	sub.l	textvid_dcb+DCB_OUTPOSX,d2
00:0000120C 67E2            	   396: 	beq.s	dcx7
00:0000120E 52B900040B28    	   397: 	addq.l #1,textvid_dcb+DCB_OUTPOSX
00:00001214 60D6            	   398: 	bra.s dcx14
                            	   399: dcx6:
00:00001216 0C010090        	   400: 	cmpi.b #$90,d1			; cursor up ?
00:0000121A 6610            	   401: 	bne.s	dcx8
00:0000121C 4AB900040B2C    	   402: 	tst.l textvid_dcb+DCB_OUTPOSY
00:00001222 67CC            	   403: 	beq.s	dcx7
00:00001224 53B900040B2C    	   404: 	subq.l #1,textvid_dcb+DCB_OUTPOSY
00:0000122A 60C0            	   405: 	bra.s	dcx14
                            	   406: dcx8:
00:0000122C 0C010093        	   407: 	cmpi.b #$93,d1			; cursor left?
00:00001230 6610            	   408: 	bne.s	dcx9
00:00001232 4AB900040B28    	   409: 	tst.l textvid_dcb+DCB_OUTPOSX
00:00001238 67B6            	   410: 	beq.s	dcx7
00:0000123A 53B900040B28    	   411: 	subq.l #1,textvid_dcb+DCB_OUTPOSX
00:00001240 60AA            	   412: 	bra.s	dcx14
                            	   413: dcx9:
00:00001242 0C010092        	   414: 	cmpi.b #$92,d1			; cursor down ?
00:00001246 6618            	   415: 	bne.s	dcx10
00:00001248 243900040B60    	   416: 	move.l textvid_dcb+DCB_OUTDIMY,d2
00:0000124E 5382            	   417: 	subq.l #1,d2
00:00001250 B4B900040B2C    	   418: 	cmp.l	textvid_dcb+DCB_OUTPOSY,d2
00:00001256 6798            	   419: 	beq.s	dcx7
00:00001258 52B900040B2C    	   420: 	addq.l #1,textvid_dcb+DCB_OUTPOSY
00:0000125E 608C            	   421: 	bra.s	dcx14
                            	   422: dcx10:
00:00001260 0C010094        	   423: 	cmpi.b #$94,d1			; cursor home ?
00:00001264 661C            	   424: 	bne.s	dcx11
00:00001266 4AB900040B28    	   425: 	tst.l	textvid_dcb+DCB_OUTPOSX
00:0000126C 670A            	   426: 	beq.s	dcx12
00:0000126E 42B900040B28    	   427: 	clr.l	textvid_dcb+DCB_OUTPOSX
00:00001274 6000FF76        	   428: 	bra	dcx14
                            	   429: dcx12:
00:00001278 42B900040B2C    	   430: 	clr.l	textvid_dcb+DCB_OUTPOSY
00:0000127E 6000FF6C        	   431: 	bra	dcx14
                            	   432: dcx11:
00:00001282 48E70080        	   433: 	movem.l	a0,-(a7)
00:00001286 0C010099        	   434: 	cmpi.b #$99,d1				; delete ?
00:0000128A 6760            	   435: 	beq.s	doDelete
00:0000128C 0C010008        	   436: 	cmpi.b #CTRLH,d1			; backspace ?
00:00001290 674C            	   437: 	beq.s doBackspace
00:00001292 0C010018        	   438: 	cmpi.b #CTRLX,d1			; delete line ?
00:00001296 6700008A        	   439: 	beq	doCtrlX
00:0000129A 0C01000A        	   440: 	cmpi.b #10,d1					; linefeed ?
00:0000129E 672C            	   441: 	beq.s dclf
                            	   442: 
                            	   443: 	; regular char
00:000012A0 23FCFFFFFFFFFD0F	   444: 	move.l #$FFFFFFFF,leds
00:000012A8 FF00
00:000012AA 6100FEF8        	   445: 	bsr	CalcScreenLoc			; a0 = screen location
00:000012AE 23FCFFFFFFFEFD0F	   446: 	move.l #$FFFFFFFE,leds
00:000012B6 FF00
00:000012B8 2401            	   447: 	move.l d1,d2					; d2 = char
00:000012BA 6100FEC8        	   448: 	bsr get_screen_color	; d0,d1 = color
00:000012BE 8082            	   449: 	or.l d2,d0						; d0 = char + color
00:000012C0 E158            	   450: 	rol.w	#8,d0						; swap bytes - text controller expects little endian data
00:000012C2 4840            	   451: 	swap d0								; swap halfs
00:000012C4 E158            	   452: 	rol.w	#8,d0						; swap remaining bytes
                            	   453: 	if (SCREEN_FORMAT==1)
00:000012C6 20C0            	   454: 		move.l d0,(a0)+
                            	   455: 	else
                            	   456: 		move.l d0,(a0)+
                            	   457: 		rol.w	#8,d1					; swap bytes
                            	   458: 		swap d1							; swap halfs
                            	   459: 		rol.w	#8,d1					; swap remaining bytes
                            	   460: 		move.l d1,(a0)
                            	   461: 	endif
00:000012C8 617C            	   462: 	bsr	IncCursorPos
00:000012CA 6004            	   463: 	bra	dcx16
                            	   464: dclf:
00:000012CC 61000092        	   465: 	bsr IncCursorRow
                            	   466: dcx16:
00:000012D0 6100016A        	   467: 	bsr	SyncCursor
                            	   468: dcx4:
00:000012D4 205F            	   469: 	movem.l	(a7)+,a0			; get back a0
00:000012D6 4CDF000E        	   470: 	movem.l	(a7)+,d1/d2/d3
00:000012DA 7000            	   471: 	moveq #E_Ok,d0
00:000012DC 4E75            	   472: 	rts
                            	   473: 
                            	   474: 	;---------------------------
                            	   475: 	; CTRL-H: backspace
                            	   476: 	;---------------------------
                            	   477: doBackspace:
00:000012DE 4AB900040B28    	   478: 	tst.l	textvid_dcb+DCB_OUTPOSX		; if already at start of line
00:000012E4 67EE            	   479: 	beq.s dcx4						; nothing to do
00:000012E6 53B900040B28    	   480: 	subq.l #1,textvid_dcb+DCB_OUTPOSX		; decrement column
                            	   481: 
                            	   482: 	;---------------------------
                            	   483: 	; Delete key
                            	   484: 	;---------------------------
                            	   485: doDelete:
00:000012EC 48E7C080        	   486: 	movem.l	d0/d1/a0,-(a7)	; save off screen location
00:000012F0 6100FEB2        	   487: 	bsr	CalcScreenLoc				; a0 = screen location
00:000012F4 203900040B28    	   488: 	move.l textvid_dcb+DCB_OUTPOSX,d0
                            	   489: .0001:
                            	   490: 	if (SCREEN_FORMAT==1)
00:000012FA 20A80004        	   491: 		move.l 4(a0),(a0)				; pull remaining characters on line over 1
00:000012FE 5888            	   492: 		adda.l #4,a0
                            	   493: 	else
                            	   494: 		move.l 8(a0),(a0)				; pull remaining characters on line over 1
                            	   495: 		move.l 12(a0),4(a0)
                            	   496: 		adda.l #8,a0
                            	   497: 	endif
00:00001300 5280            	   498: 	addq.l #1,d0
00:00001302 B0B900040B5C    	   499: 	cmp.l	textvid_dcb+DCB_OUTDIMX,d0
00:00001308 65F0            	   500: 	blo.s	.0001
00:0000130A 6100FE78        	   501: 	bsr	get_screen_color
                            	   502: 	if (SCREEN_FORMAT==1)
00:0000130E 303C0020        	   503: 		move.w #' ',d0
00:00001312 E158            	   504: 		rol.w	#8,d0
00:00001314 4840            	   505: 		swap d0
00:00001316 E158            	   506: 		rol.w	#8,d0
00:00001318 2140FFFC        	   507: 		move.l d0,-4(a0)
                            	   508: 	else
                            	   509: 		move.w #' ',d0					; terminate line with a space
                            	   510: 		rol.w	#8,d0
                            	   511: 		swap d0
                            	   512: 		rol.w	#8,d0
                            	   513: 		move.l d0,-8(a0)
                            	   514: 	endif
00:0000131C 4CDF0103        	   515: 	movem.l	(a7)+,d0/d1/a0
00:00001320 60AE            	   516: 	bra.s		dcx16				; finished
                            	   517: 
                            	   518: 	;---------------------------
                            	   519: 	; CTRL-X: erase line
                            	   520: 	;---------------------------
                            	   521: doCtrlX:
00:00001322 42B900040B28    	   522: 	clr.l	textvid_dcb+DCB_OUTPOSX			; Reset cursor to start of line
00:00001328 203900040B5C    	   523: 	move.l textvid_dcb+DCB_OUTDIMX,d0	; and display TextCols number of spaces
00:0000132E 4880            	   524: 	ext.w	d0
00:00001330 48C0            	   525: 	ext.l	d0
00:00001332 123C0020        	   526: 	move.b #' ',d1			; d1 = space char
                            	   527: .0001:
                            	   528: 	; textvid_putchar is called recursively here
                            	   529: 	; It's safe to do because we know it won't recurse again due to the
                            	   530: 	; fact we know the character being displayed is a space char
00:00001336 6100FE96        	   531: 	bsr	textvid_putchar
00:0000133A 5340            	   532: 	subq #1,d0
00:0000133C 66F8            	   533: 	bne.s	.0001
00:0000133E 42B900040B28    	   534: 	clr.l	textvid_dcb+DCB_OUTPOSX			; now really go back to start of line
00:00001344 608A            	   535: 	bra	dcx16						; we're done
                            	   536: 
                            	   537: ;------------------------------------------------------------------------------
                            	   538: ; Increment the cursor position, scroll the screen if needed.
                            	   539: ;------------------------------------------------------------------------------
                            	   540: 
                            	   541: IncCursorPos:
00:00001346 52B900040B28    	   542: 	addq.l #1,textvid_dcb+DCB_OUTPOSX
00:0000134C 203900040B5C    	   543: 	move.l textvid_dcb+DCB_OUTDIMX,d0
00:00001352 B0B900040B28    	   544: 	cmp.l	textvid_dcb+DCB_OUTPOSX,d0
00:00001358 642E            	   545: 	bhs.s	icc1
00:0000135A 42B900040B28    	   546: 	clr.l textvid_dcb+DCB_OUTPOSX
                            	   547: IncCursorRow:
00:00001360 52B900040B2C    	   548: 	addq.l #1,textvid_dcb+DCB_OUTPOSY
00:00001366 203900040B60    	   549: 	move.l textvid_dcb+DCB_OUTDIMY,d0
00:0000136C B0B900040B2C    	   550: 	cmp.l textvid_dcb+DCB_OUTPOSY,d0
00:00001372 6214            	   551: 	bhi.s	icc1
00:00001374 203900040B60    	   552: 	move.l textvid_dcb+DCB_OUTDIMY,d0
00:0000137A 23C000040B2C    	   553: 	move.l d0,textvid_dcb+DCB_OUTPOSY		; in case CursorRow is way over
00:00001380 53B900040B2C    	   554: 	subq.l #1,textvid_dcb+DCB_OUTPOSY
00:00001386 6102            	   555: 	bsr	ScrollUp
                            	   556: icc1:
00:00001388 4E75            	   557: 	rts
                            	   558: 
                            	   559: ;------------------------------------------------------------------------------
                            	   560: ; Scroll screen up.
                            	   561: ;------------------------------------------------------------------------------
                            	   562: 
                            	   563: ScrollUp:
00:0000138A 48E7C084        	   564: 	movem.l	d0/d1/a0/a5,-(a7)		; save off some regs
00:0000138E 4E7A0FE0        	   565: 	movec	coreno,d0
00:00001392 4840            	   566: 	swap d0	
00:00001394 7205            	   567: 	moveq	#SCREEN_SEMA,d1
00:00001396 61000C72        	   568: 	bsr	LockSemaphore
00:0000139A 207900040B44    	   569: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:000013A0 2A48            	   570: 	move.l a0,a5								; a5 = pointer to text screen
                            	   571: .0003:								
00:000013A2 203900040B5C    	   572: 	move.l textvid_dcb+DCB_OUTDIMX,d0					; d0 = columns
00:000013A8 223900040B60    	   573: 	move.l textvid_dcb+DCB_OUTDIMY,d1					; d1 = rows
                            	   574: 	if (SCREEN_FORMAT==1)
00:000013AE E580            	   575: 		asl.l	#2,d0								; make into cell index
                            	   576: 	else
                            	   577: 		asl.l	#3,d0								; make into cell index
                            	   578: 	endif
00:000013B0 41F50800        	   579: 	lea	0(a5,d0.l),a0						; a0 = pointer to second row of text screen
                            	   580: 	if (SCREEN_FORMAT==1)
00:000013B4 E488            	   581: 		lsr.l	#2,d0								; get back d0
                            	   582: 	else
                            	   583: 		lsr.l	#3,d0								; get back d0
                            	   584: 	endif
00:000013B6 5381            	   585: 	subq.l #1,d1									; number of rows-1
00:000013B8 C0C1            	   586: 	mulu d1,d0									; d0 = count of characters to move
                            	   587: 	if (SCREEN_FORMAT==1)
                            	   588: 	else
                            	   589: 		add.l d0,d0									; d0*2 2 longs per char
                            	   590: 	endif
                            	   591: .0001:
00:000013BA 2AD8            	   592: 	move.l (a0)+,(a5)+
00:000013BC 51C8FFFC        	   593: 	dbra d0,.0001
00:000013C0 4E7A0FE0        	   594: 	movec coreno,d0
00:000013C4 4840            	   595: 	swap d0	
00:000013C6 7205            	   596: 	moveq #SCREEN_SEMA,d1
00:000013C8 61000C7C        	   597: 	bsr UnlockSemaphore
00:000013CC 4CDF2103        	   598: 	movem.l (a7)+,d0/d1/a0/a5
                            	   599: 	; Fall through into blanking out last line
                            	   600: 
                            	   601: ;------------------------------------------------------------------------------
                            	   602: ; Blank out the last line on the screen.
                            	   603: ;------------------------------------------------------------------------------
                            	   604: 
                            	   605: BlankLastLine:
00:000013D0 48E7E080        	   606: 	movem.l	d0/d1/d2/a0,-(a7)
00:000013D4 4E7A0FE0        	   607: 	movec	coreno,d0
00:000013D8 4840            	   608: 	swap d0	
00:000013DA 7205            	   609: 	moveq	#SCREEN_SEMA,d1
00:000013DC 61000C2C        	   610: 	bsr	LockSemaphore
00:000013E0 207900040B44    	   611: 	move.l textvid_dcb+DCB_OUTBUFPTR,a0
00:000013E6 203900040B5C    	   612: 	move.l textvid_dcb+DCB_OUTDIMX,d0					; d0 = columns
00:000013EC 223900040B60    	   613: 	move.l textvid_dcb+DCB_OUTDIMY,d1					; d1 = rows
00:000013F2 5341            	   614: 	subq #1,d1									; last row = #rows-1
00:000013F4 C0C1            	   615: 	mulu d1,d0									; d0 = index of last line
                            	   616: 	if (SCREEN_FORMAT==1)
00:000013F6 E588            	   617: 		lsl.l	#2,d0								; *4 bytes per char
                            	   618: 	else
                            	   619: 		lsl.l	#3,d0								; *8 bytes per char
                            	   620: 	endif
00:000013F8 41F00800        	   621: 	lea	(a0,d0.l),a0						; point a0 to last row
00:000013FC 243900040B5C    	   622: 	move.l textvid_dcb+DCB_OUTDIMX,d2					; number of text cells to clear
00:00001402 5382            	   623: 	subq.l #1,d2								; count must be one less than desired
00:00001404 6100FD7E        	   624: 	bsr	get_screen_color				; d0,d1 = screen color
                            	   625: 	if (SCREEN_FORMAT==1)
00:00001408 303C0020        	   626: 		move.w #32,d0
                            	   627: 	else
                            	   628: 		move.w #32,d0								; set the character for display in low 16 bits
                            	   629: 	endif
00:0000140C E158            	   630: 	rol.w	#8,d0
00:0000140E 4840            	   631: 	swap d0
00:00001410 E158            	   632: 	rol.w	#8,d0
                            	   633: .0001:
                            	   634: 	if (SCREEN_FORMAT==1)
00:00001412 20C0            	   635: 		move.l d0,(a0)+
                            	   636: 	else
                            	   637: 		move.l d0,(a0)+
                            	   638: 		bsr rbo
                            	   639: 		move.l d1,(a0)+
                            	   640: 	endif
00:00001414 51CAFFFC        	   641: 	dbra d2,.0001
00:00001418 4E7A0FE0        	   642: 	movec	coreno,d0
00:0000141C 4840            	   643: 	swap d0	
00:0000141E 7205            	   644: 	moveq #SCREEN_SEMA,d1
00:00001420 61000C24        	   645: 	bsr UnlockSemaphore
00:00001424 4CDF0107        	   646: 	movem.l	(a7)+,d0/d1/d2/a0
00:00001428 4E75            	   647: 	rts
                            	   648: 
                            	   649: ;------------------------------------------------------------------------------
                            	   650: ; Set cursor position to top left of screen.
                            	   651: ;
                            	   652: ; Parameters:
                            	   653: ;		<none>
                            	   654: ; Returns:
                            	   655: ;		<none>
                            	   656: ; Registers Affected:
                            	   657: ;		<none>
                            	   658: ;------------------------------------------------------------------------------
                            	   659: 
                            	   660: HomeCursor:
00:0000142A 42B900040B28    	   661: 	clr.l textvid_dcb+DCB_OUTPOSX
00:00001430 42B900040B2C    	   662: 	clr.l textvid_dcb+DCB_OUTPOSY
00:00001436 42B900040B30    	   663: 	clr.l textvid_dcb+DCB_OUTPOSZ
                            	   664: 	; fall through
                            	   665: 
                            	   666: ;------------------------------------------------------------------------------
                            	   667: ; SyncCursor:
                            	   668: ;
                            	   669: ; Sync the hardware cursor's position to the text cursor position but only for
                            	   670: ; the core with the IO focus.
                            	   671: ;
                            	   672: ; Parameters:
                            	   673: ;		<none>
                            	   674: ; Returns:
                            	   675: ;		<none>
                            	   676: ; Registers Affected:
                            	   677: ;		<none>
                            	   678: ;------------------------------------------------------------------------------
                            	   679: 
                            	   680: SyncCursor:
00:0000143C 23FCFFFFFFFDFD0F	   681: 	move.l #$FFFFFFFD,leds
00:00001444 FF00
00:00001446 48E7E000        	   682: 	movem.l	d0/d1/d2,-(a7)
00:0000144A 4E7A0FE0        	   683: 	movec	coreno,d0
00:0000144E B03900100000    	   684: 	cmp.b	IOFocus,d0
00:00001454 6622            	   685: 	bne.s .0001
00:00001456 203900040B28    	   686: 	move.l textvid_dcb+DCB_OUTPOSX,d0
00:0000145C 223900040B2C    	   687: 	move.l textvid_dcb+DCB_OUTPOSY,d1
00:00001462 243900040B5C    	   688: 	move.l textvid_dcb+DCB_OUTDIMX,d2
00:00001468 C4C1            	   689: 	mulu d1,d2
00:0000146A D480            	   690: 	add.l d0,d2
00:0000146C E15A            	   691: 	rol.w	#8,d2					; swap byte order
00:0000146E 4842            	   692: 	swap d2
00:00001470 E15A            	   693: 	rol.w #8,d2
00:00001472 23C2FD080024    	   694: 	move.l d2,TEXTREG+$24
                            	   695: .0001:	
00:00001478 4CDF0007        	   696: 	movem.l	(a7)+,d0/d1/d2
00:0000147C 4E75            	   697: 	rts
                            	   698: 
                            	   699: 

Source: "boot.x68"
                            	   560: 	include "err.x68"

Source: "err.x68"
                            	     1: ;------------------------------------------------------------------------------
                            	     2: ;------------------------------------------------------------------------------
                            	     3: ; Setup the err device
                            	     4: ;------------------------------------------------------------------------------
                            	     5: ;------------------------------------------------------------------------------
                            	     6: 
                            	     7: setup_err:
                            	     8: err_init:
00:0000147E 7020            	     9: 	moveq #32,d0
00:00001480 41F900040B8C    	    10: 	lea.l err_dcb,a0
                            	    11: .0001:
00:00001486 4298            	    12: 	clr.l (a0)+
00:00001488 51C8FFFC        	    13: 	dbra d0,.0001
00:0000148C 23FC204243440004	    14: 	move.l #$20424344,err_dcb+DCB_MAGIC				; 'DCB'
00:00001494 0B8C
00:00001496 23FC4C4C554E0004	    15: 	move.l #$4C4C554E,err_dcb+DCB_NAME					; 'err'
00:0000149E 0B90
00:000014A0 23FC000014AC0004	    16: 	move.l #err_cmdproc,err_dcb+DCB_CMDPROC
00:000014A8 0BA4
                            	    17: err_ret:
00:000014AA 4E75            	    18: 	rts
                            	    19: 
                            	    20: err_cmdproc:
00:000014AC 7000            	    21: 	moveq #E_Ok,d0
00:000014AE 4E75            	    22: 	rts
                            	    23: 
                            	    24: 

Source: "boot.x68"
                            	   561: 	include "serial.x68"

Source: "serial.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;==============================================================================
                            	    38: ; Serial I/O routines
                            	    39: ;==============================================================================
                            	    40: 
                            	    41: 	code
                            	    42: 	align 2
                            	    43: COM_CMDTBL:
00:000014B0 000014E0        	    44: 	dc.l serial_init
00:000014B4 00001558        	    45: 	dc.l serial_stat
00:000014B8 0000155C        	    46: 	dc.l serial_putchar
00:000014BC 0000158A        	    47: 	dc.l serial_putbuf
00:000014C0 00001564        	    48: 	dc.l serial_getchar
00:000014C4 0000158A        	    49: 	dc.l serial_getbuf
00:000014C8 0000158A        	    50: 	dc.l serial_set_inpos
00:000014CC 0000158A        	    51: 	dc.l serial_set_outpos
00:000014D0 0000156A        	    52: 	dc.l serial_getchar_direct
00:000014D4 00001572        	    53: 	dc.l serial_peek_char
00:000014D8 0000157A        	    54: 	dc.l serial_peek_char_direct
00:000014DC 00001582        	    55: 	dc.l serial_putchar_direct
                            	    56: 
                            	    57: ;------------------------------------------------------------------------------
                            	    58: ; Setup the console device
                            	    59: ; stdout = text screen controller
                            	    60: ;------------------------------------------------------------------------------
                            	    61: 	even
                            	    62: 
                            	    63: serial_init:
                            	    64: setup_serial:
00:000014E0 48E78080        	    65: 	movem.l d0/a0,-(a7)
00:000014E4 701F            	    66: 	moveq #31,d0
00:000014E6 41F900040C94    	    67: 	lea.l serial_dcb,a0
                            	    68: .0001:
00:000014EC 4298            	    69: 	clr.l (a0)+
00:000014EE 51C8FFFC        	    70: 	dbra d0,.0001
00:000014F2 23FC204243440004	    71: 	move.l #$20424344,serial_dcb+DCB_MAGIC				; 'DCB'
00:000014FA 0C94
00:000014FC 23FC204F4F430004	    72: 	move.l #$204F4F43,serial_dcb+DCB_NAME				; 'COM'
00:00001504 0C98
00:00001506 23FC000015360004	    73: 	move.l #serial_cmdproc,serial_dcb+DCB_CMDPROC
00:0000150E 0CAC
00:00001510 23FC001010000004	    74: 	move.l #SerRcvBuf,serial_dcb+DCB_INBUFPTR
00:00001518 0CCC
00:0000151A 23FC001020000004	    75: 	move.l #SerXmitBuf,serial_dcb+DCB_OUTBUFPTR
00:00001522 0CD0
00:00001524 23FC000010000004	    76: 	move.l #4096,serial_dcb+DCB_INBUFSIZE
00:0000152C 0CD4
00:0000152E 615E            	    77: 	bsr SerialInit
00:00001530 4CDF0101        	    78: 	movem.l (a7)+,d0/a0
00:00001534 4E75            	    79: 	rts
                            	    80: 
                            	    81: serial_cmdproc:
00:00001536 0C06000C        	    82: 	cmpi.b #12,d6
00:0000153A 6418            	    83: 	bhs.s .0001
00:0000153C 48E70280        	    84: 	movem.l d6/a0,-(a7)
00:00001540 4886            	    85: 	ext.w d6
00:00001542 E54E            	    86: 	lsl.w #2,d6
00:00001544 41FAFF6A        	    87: 	lea COM_CMDTBL,a0
00:00001548 20706000        	    88: 	move.l (a0,d6.w),a0
00:0000154C 4E90            	    89: 	jsr (a0)
00:0000154E 4CDF0140        	    90: 	movem.l (a7)+,d6/a0
00:00001552 4E75            	    91: 	rts
                            	    92: .0001:
00:00001554 7002            	    93: 	moveq #E_Func,d0
00:00001556 4E75            	    94: 	rts
                            	    95: 
                            	    96: serial_stat:
00:00001558 7000            	    97: 	moveq #E_Ok,d0
00:0000155A 4E75            	    98: 	rts
                            	    99: 
                            	   100: serial_putchar:
00:0000155C 6100013C        	   101: 	bsr SerialPutChar
00:00001560 7000            	   102: 	moveq #E_Ok,d0
00:00001562 4E75            	   103: 	rts
                            	   104: 
                            	   105: serial_getchar:
00:00001564 6166            	   106: 	bsr SerialGetChar
00:00001566 7000            	   107: 	moveq #E_Ok,d0
00:00001568 4E75            	   108: 	rts
                            	   109: 
                            	   110: serial_getchar_direct:
00:0000156A 61000114        	   111: 	bsr SerialPeekCharDirect
00:0000156E 7000            	   112: 	moveq #E_Ok,d0
00:00001570 4E75            	   113: 	rts
                            	   114: 
                            	   115: serial_peek_char:
00:00001572 610000D0        	   116: 	bsr SerialPeekChar
00:00001576 7000            	   117: 	moveq #E_Ok,d0
00:00001578 4E75            	   118: 	rts
                            	   119: 
                            	   120: serial_peek_char_direct:
00:0000157A 61000104        	   121: 	bsr SerialPeekCharDirect
00:0000157E 7000            	   122: 	moveq #E_Ok,d0
00:00001580 4E75            	   123: 	rts
                            	   124: 
                            	   125: serial_putchar_direct:
00:00001582 6100017A        	   126: 	bsr SerialPutCharDirect
00:00001586 7000            	   127: 	moveq #E_Ok,d0
00:00001588 4E75            	   128: 	rts
                            	   129: 
                            	   130: serial_putbuf:
                            	   131: serial_getbuf:
                            	   132: serial_set_inpos:
                            	   133: serial_set_outpos:
00:0000158A 700A            	   134: 	moveq #E_NotSupported,d0
00:0000158C 4E75            	   135: 	rts
                            	   136: 
                            	   137: ;------------------------------------------------------------------------------
                            	   138: ; Initialize the serial port an enhanced 6551 circuit.
                            	   139: ;
                            	   140: ; Select internal baud rate clock divider for 9600 baud
                            	   141: ; Reset fifos, set threshold to 3/4 full on transmit and 3/4 empty on receive
                            	   142: ; Note that the byte order is swapped.
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: SerialInit:
00:0000158E 427900100162    	   146: 	clr.w		SerHeadRcv					; clear receive buffer indexes
00:00001594 427900100160    	   147: 	clr.w		SerTailRcv
00:0000159A 427900100168    	   148: 	clr.w		SerHeadXmit					; clear transmit buffer indexes
00:000015A0 427900100166    	   149: 	clr.w		SerTailXmit
00:000015A6 423900100164    	   150: 	clr.b		SerRcvXon						; and Xon,Xoff flags
00:000015AC 423900100165    	   151: 	clr.b		SerRcvXoff
00:000015B2 203C09000000    	   152: 	move.l	#$09000000,d0				; dtr,rts active, rxint enabled, no parity
00:000015B8 23C0FD060008    	   153: 	move.l	d0,ACIA+ACIA_CMD
                            	   154: ;	move.l	#$1E00F700,d0				; fifos enabled
00:000015BE 203C1E000000    	   155: 	move.l	#$1E000000,d0				; fifos disabled
00:000015C4 23C0FD06000C    	   156: 	move.l	d0,ACIA+ACIA_CTRL
00:000015CA 4E75            	   157: 	rts
                            	   158: ;	move.l	#$0F000000,d0				; transmit a break for a while
                            	   159: ;	move.l	d0,ACIA+ACIA_CMD
                            	   160: ;	move.l	#300000,d2					; wait 100 ms
                            	   161: ;	bra			.0001
                            	   162: ;.0003:
                            	   163: ;	swap		d2
                            	   164: ;.0001:
                            	   165: ;	nop
                            	   166: ;	dbra		d2,.0001
                            	   167: ;.0002:
                            	   168: ;	swap		d2
                            	   169: ;	dbra		d2,.0003
                            	   170: ;	move.l	#$07000000,d0				; clear break
                            	   171: ;	move.l	d0,ACIA+ACIA_CMD
                            	   172: ;	rts
                            	   173: 	
                            	   174: ;------------------------------------------------------------------------------
                            	   175: ; SerialGetChar
                            	   176: ;
                            	   177: ; Check the serial port buffer to see if there's a char available. If there's
                            	   178: ; a char available then return it. If the buffer is almost empty then send an
                            	   179: ; XON.
                            	   180: ;
                            	   181: ; Stack Space:
                            	   182: ;		2 long words
                            	   183: ; Parameters:
                            	   184: ;		none
                            	   185: ; Modifies:
                            	   186: ;		d0,a0
                            	   187: ; Returns:
                            	   188: ;		d1 = character or -1
                            	   189: ;------------------------------------------------------------------------------
                            	   190: 
                            	   191: SerialGetChar:
00:000015CC 2F02            	   192: 	move.l		d2,-(a7)
00:000015CE 4E7A0FE0        	   193: 	movec			coreno,d0
00:000015D2 4840            	   194: 	swap			d0
00:000015D4 7202            	   195: 	moveq			#SERIAL_SEMA,d1
00:000015D6 61000A32        	   196: 	bsr				LockSemaphore
00:000015DA 61000146        	   197: 	bsr				SerialRcvCount			; check number of chars in receive buffer
00:000015DE 0C400008        	   198: 	cmpi.w		#8,d0								; less than 8?
00:000015E2 621C            	   199: 	bhi				.sgc2
00:000015E4 4A3900100164    	   200: 	tst.b			SerRcvXon						; skip sending XON if already sent
00:000015EA 6614            	   201: 	bne	  		.sgc2            		; XON already sent?
00:000015EC 123C0011        	   202: 	move.b		#XON,d1							; if <8 send an XON
00:000015F0 423900100165    	   203: 	clr.b			SerRcvXoff					; clear XOFF status
00:000015F6 13C100100164    	   204: 	move.b		d1,SerRcvXon				; flag so we don't send it multiple times
00:000015FC 6100009C        	   205: 	bsr				SerialPutChar				; send it
                            	   206: .sgc2:
00:00001600 323900100162    	   207: 	move.w		SerHeadRcv,d1				; check if anything is in buffer
00:00001606 B27900100160    	   208: 	cmp.w			SerTailRcv,d1
00:0000160C 6720            	   209: 	beq				.NoChars						; no?
00:0000160E 41F900101000    	   210: 	lea				SerRcvBuf,a0
00:00001614 12301000        	   211: 	move.b		(a0,d1.w),d1				; get byte from buffer
00:00001618 527900100162    	   212: 	addi.w		#1,SerHeadRcv
00:0000161E 02790FFF00100162	   213: 	andi.w		#$FFF,SerHeadRcv		; 4k wrap around
00:00001626 0281000000FF    	   214: 	andi.l		#$FF,d1
00:0000162C 6002            	   215: 	bra				.Xit
                            	   216: .NoChars:
00:0000162E 72FF            	   217: 	moveq			#-1,d1
                            	   218: .Xit:
00:00001630 C342            	   219: 	exg				d1,d2
00:00001632 4E7A0FE0        	   220: 	movec			coreno,d0
00:00001636 4840            	   221: 	swap			d0
00:00001638 7202            	   222: 	moveq			#SERIAL_SEMA,d1
00:0000163A 61000A0A        	   223: 	bsr				UnlockSemaphore
00:0000163E C541            	   224: 	exg				d2,d1
00:00001640 241F            	   225: 	move.l		(a7)+,d2
00:00001642 4E75            	   226: 	rts
                            	   227: 
                            	   228: ;------------------------------------------------------------------------------
                            	   229: ; SerialPeekChar
                            	   230: ;
                            	   231: ; Check the serial port buffer to see if there's a char available. If there's
                            	   232: ; a char available then return it. But don't update the buffer indexes. No need
                            	   233: ; to send an XON here.
                            	   234: ;
                            	   235: ; Stack Space:
                            	   236: ;		1 long word
                            	   237: ; Parameters:
                            	   238: ;		none
                            	   239: ; Modifies:
                            	   240: ;		d0,a0
                            	   241: ; Returns:
                            	   242: ;		d1 = character or -1
                            	   243: ;------------------------------------------------------------------------------
                            	   244: 
                            	   245: SerialPeekChar:
00:00001644 2F02            	   246: 	move.l d2,-(a7)
00:00001646 4E7A0FE0        	   247: 	movec	coreno,d0
00:0000164A 4840            	   248: 	swap d0
00:0000164C 7202            	   249: 	moveq	#SERIAL_SEMA,d1
00:0000164E 610009BA        	   250: 	bsr	LockSemaphore
00:00001652 343900100162    	   251: 	move.w SerHeadRcv,d2		; check if anything is in buffer
00:00001658 B47900100160    	   252: 	cmp.w	SerTailRcv,d2
00:0000165E 670C            	   253: 	beq	.NoChars				; no?
00:00001660 41F900101000    	   254: 	lea	SerRcvBuf,a0
00:00001666 14302000        	   255: 	move.b (a0,d2.w),d2		; get byte from buffer
00:0000166A 6002            	   256: 	bra	.Xit
                            	   257: .NoChars:
00:0000166C 74FF            	   258: 	moveq	#-1,d2
                            	   259: .Xit:
00:0000166E 4E7A0FE0        	   260: 	movec	coreno,d0
00:00001672 4840            	   261: 	swap d0
00:00001674 7202            	   262: 	moveq	#SERIAL_SEMA,d1
00:00001676 610009CE        	   263: 	bsr	UnlockSemaphore
00:0000167A 2202            	   264: 	move.l	d2,d1
00:0000167C 241F            	   265: 	move.l (a7)+,d2
00:0000167E 4E75            	   266: 	rts
                            	   267: 
                            	   268: ;------------------------------------------------------------------------------
                            	   269: ; SerialPeekChar
                            	   270: ;		Get a character directly from the I/O port. This bypasses the input
                            	   271: ; buffer.
                            	   272: ;
                            	   273: ; Stack Space:
                            	   274: ;		0 words
                            	   275: ; Parameters:
                            	   276: ;		none
                            	   277: ; Modifies:
                            	   278: ;		d
                            	   279: ; Returns:
                            	   280: ;		d1 = character or -1
                            	   281: ;------------------------------------------------------------------------------
                            	   282: 
                            	   283: SerialPeekCharDirect:
00:00001680 1239FD060004    	   284: 	move.b	ACIA+ACIA_STAT,d1	; get serial status
00:00001686 08010003        	   285: 	btst		#3,d1							; look for Rx not empty
00:0000168A 670A            	   286: 	beq.s		.0001
00:0000168C 7200            	   287: 	moveq.l	#0,d1							; clear upper bits of return value
00:0000168E 1239FD060000    	   288: 	move.b	ACIA+ACIA_RX,d1		; get data from ACIA
00:00001694 4E75            	   289: 	rts												; return
                            	   290: .0001:
00:00001696 72FF            	   291: 	moveq		#-1,d1
00:00001698 4E75            	   292: 	rts
                            	   293: 
                            	   294: ;------------------------------------------------------------------------------
                            	   295: ; SerialPutChar
                            	   296: ;		If there is a transmit buffer, adds the character to the transmit buffer
                            	   297: ; if it can, otherwise will wait for a byte to be freed up in the transmit
                            	   298: ; buffer (blocks).
                            	   299: ;		If there is no transmit buffer, put a character to the directly to the
                            	   300: ; serial transmitter. This routine blocks until the transmitter is empty. 
                            	   301: ;
                            	   302: ; Stack Space
                            	   303: ;		4 long words
                            	   304: ; Parameters:
                            	   305: ;		d1.b = character to put
                            	   306: ; Modifies:
                            	   307: ;		none
                            	   308: ;------------------------------------------------------------------------------
                            	   309: 
                            	   310: SerialPutChar:
                            	   311: .0004:
00:0000169A 4A7900040CD8    	   312: 	tst.w serial_dcb+DCB_OUTBUFSIZE	; buffered output?
00:000016A0 675C            	   313: 	beq.s SerialPutCharDirect
00:000016A2 48E7E080        	   314: 	movem.l d0/d1/d2/a0,-(a7)
00:000016A6 4E7A0FE0        	   315: 	movec	coreno,d0
00:000016AA 4840            	   316: 	swap d0
00:000016AC 7202            	   317: 	moveq	#SERIAL_SEMA,d1
00:000016AE 6100095A        	   318: 	bsr	LockSemaphore
00:000016B2 303900100166    	   319: 	move.w SerTailXmit,d0
00:000016B8 3400            	   320: 	move.w d0,d2
00:000016BA 5240            	   321: 	addi.w #1,d0
00:000016BC B07900040CD8    	   322: 	cmp.w serial_dcb+DCB_OUTBUFSIZE,d0
00:000016C2 6502            	   323: 	blo.s .0002
00:000016C4 4240            	   324: 	clr.w d0
                            	   325: .0002:
00:000016C6 B07900100168    	   326: 	cmp.w SerHeadXmit,d0			; Is Xmit buffer full?
00:000016CC 660E            	   327: 	bne.s .0003
00:000016CE 4E7A0FE0        	   328: 	movec	coreno,d0						; buffer full, unlock semaphore and wait
00:000016D2 4840            	   329: 	swap d0
00:000016D4 7202            	   330: 	moveq	#SERIAL_SEMA,d1
00:000016D6 6100096E        	   331: 	bsr	UnlockSemaphore
00:000016DA 60BE            	   332: 	bra.s .0004
                            	   333: .0003:
00:000016DC 33C000100166    	   334: 	move.w d0,SerTailXmit			; update tail pointer
00:000016E2 41F900102000    	   335: 	lea SerXmitBuf,a0
00:000016E8 11812000        	   336: 	move.b d1,(a0,d2.w)				; store byte in Xmit buffer
00:000016EC 4E7A0FE0        	   337: 	movec	coreno,d0						; unlock semaphore
00:000016F0 4840            	   338: 	swap d0
00:000016F2 7202            	   339: 	moveq	#SERIAL_SEMA,d1
00:000016F4 61000950        	   340: 	bsr	UnlockSemaphore
00:000016F8 4CDF0107        	   341: 	movem.l (a7)+,d0/d1/d2/a0
00:000016FC 4E75            	   342: 	rts
                            	   343: 
                            	   344: SerialPutCharDirect:
00:000016FE 48E7C000        	   345: 	movem.l	d0/d1,-(a7)							; push d0,d1
                            	   346: .0001:
00:00001702 1039FD060004    	   347: 	move.b ACIA+ACIA_STAT,d0	; wait until the uart indicates tx empty
00:00001708 08000004        	   348: 	btst #4,d0								; bit #4 of the status reg
00:0000170C 67F4            	   349: 	beq.s	.0001			    			; branch if transmitter is not empty
00:0000170E 13C1FD060000    	   350: 	move.b d1,ACIA+ACIA_TX		; send the byte
00:00001714 4CDF0003        	   351: 	movem.l	(a7)+,d0/d1				; pop d0,d1
00:00001718 4E75            	   352: 	rts
                            	   353: 	
                            	   354: ;------------------------------------------------------------------------------
                            	   355: ; Reverse the order of bytes in d1.
                            	   356: ;------------------------------------------------------------------------------
                            	   357: 
                            	   358: SerialRbo:
00:0000171A E159            	   359: 	rol.w		#8,d1
00:0000171C 4841            	   360: 	swap		d1
00:0000171E E159            	   361: 	rol.w		#8,d1
00:00001720 4E75            	   362: 	rts
                            	   363: 
                            	   364: ;------------------------------------------------------------------------------
                            	   365: ; Calculate number of character in input buffer
                            	   366: ;
                            	   367: ; Returns:
                            	   368: ;		d0 = number of bytes in buffer.
                            	   369: ;------------------------------------------------------------------------------
                            	   370: 
                            	   371: SerialRcvCount:
00:00001722 303900100160    	   372: 	move.w	SerTailRcv,d0
00:00001728 907900100162    	   373: 	sub.w		SerHeadRcv,d0
00:0000172E 6C10            	   374: 	bge			.0001
00:00001730 303C1000        	   375: 	move.w	#$1000,d0
00:00001734 907900100162    	   376: 	sub.w		SerHeadRcv,d0
00:0000173A D07900100160    	   377: 	add.w		SerTailRcv,d0
                            	   378: .0001:
00:00001740 4E75            	   379: 	rts
                            	   380: 
                            	   381: ;------------------------------------------------------------------------------
                            	   382: ; Serial IRQ routine
                            	   383: ;
                            	   384: ; Keeps looping as long as it finds characters in the ACIA recieve buffer/fifo.
                            	   385: ; Received characters are buffered. If the buffer becomes full, new characters
                            	   386: ; will be lost.
                            	   387: ;
                            	   388: ; Parameters:
                            	   389: ;		none
                            	   390: ; Modifies:
                            	   391: ;		none
                            	   392: ; Returns:
                            	   393: ;		d1 = -1 if IRQ handled, otherwise zero
                            	   394: ;------------------------------------------------------------------------------
                            	   395: 
                            	   396: SerialIRQ:
00:00001742 46FC2300        	   397: 	move.w	#$2300,sr						; disable lower level IRQs
00:00001746 48E7E080        	   398: 	movem.l	d0/d1/d2/a0,-(a7)
00:0000174A 4E7A0FE0        	   399: 	movec	coreno,d0
00:0000174E 4840            	   400: 	swap d0
00:00001750 7202            	   401: 	moveq	#SERIAL_SEMA,d1
00:00001752 610008B6        	   402: 	bsr	LockSemaphore
                            	   403: sirqNxtByte:
00:00001756 1239FD060004    	   404: 	move.b ACIA+ACIA_STAT,d1		; check the status
00:0000175C 08010003        	   405: 	btst #3,d1									; bit 3 = rx full
00:00001760 6756            	   406: 	beq	notRxInt
00:00001762 1239FD060000    	   407: 	move.b ACIA+ACIA_RX,d1
                            	   408: sirq0001:
00:00001768 303900100160    	   409: 	move.w SerTailRcv,d0				; check if recieve buffer full
00:0000176E 5240            	   410: 	addi.w #1,d0
00:00001770 02400FFF        	   411: 	andi.w #$FFF,d0
00:00001774 B07900100162    	   412: 	cmp.w	SerHeadRcv,d0
00:0000177A 673C            	   413: 	beq	sirqRxFull
00:0000177C 33C000100160    	   414: 	move.w d0,SerTailRcv				; update tail pointer
00:00001782 5340            	   415: 	subi.w #1,d0								; backup
00:00001784 02400FFF        	   416: 	andi.w #$FFF,d0
00:00001788 41F900101000    	   417: 	lea	SerRcvBuf,a0						; a0 = buffer address
00:0000178E 11810000        	   418: 	move.b d1,(a0,d0.w)					; store recieved byte in buffer
00:00001792 4A3900100165    	   419: 	tst.b	SerRcvXoff						; check if xoff already sent
00:00001798 66BC            	   420: 	bne	sirqNxtByte
00:0000179A 6186            	   421: 	bsr	SerialRcvCount					; if more than 4080 chars in buffer
00:0000179C 0C400FF0        	   422: 	cmpi.w #4080,d0
00:000017A0 65B4            	   423: 	blo	sirqNxtByte
00:000017A2 123C0013        	   424: 	move.b #XOFF,d1							; send an XOFF
00:000017A6 423900100164    	   425: 	clr.b	SerRcvXon							; clear XON status
00:000017AC 13C100100165    	   426: 	move.b d1,SerRcvXoff				; set XOFF status
00:000017B2 6100FEE6        	   427: 	bsr	SerialPutChar						; send XOFF
00:000017B6 609E            	   428: 	bra	sirqNxtByte     				; check the status for another byte
                            	   429: sirqRxFull:
                            	   430: notRxInt:
00:000017B8 08010004        	   431: 	btst #4,d1									; TX empty?
00:000017BC 6748            	   432: 	beq.s notTxInt
00:000017BE 4A390010016A    	   433: 	tst.b SerXmitXoff						; and allowed to send?
00:000017C4 6640            	   434: 	bne.s sirqXmitOff
00:000017C6 4AB900040CD8    	   435: 	tst.l serial_dcb+DCB_OUTBUFSIZE	; Is there a buffer being transmitted?
00:000017CC 6738            	   436: 	beq.s notTxInt
00:000017CE 303900100168    	   437: 	move.w SerHeadXmit,d0
00:000017D4 B07900100166    	   438: 	cmp.w SerTailXmit,d0
00:000017DA 672A            	   439: 	beq.s sirqTxEmpty
00:000017DC 41F900102000    	   440: 	lea SerXmitBuf,a0
00:000017E2 12300000        	   441: 	move.b (a0,d0.w),d1
00:000017E6 13C1FD060000    	   442: 	move.b d1,ACIA+ACIA_TX			; transmit character
00:000017EC 527900100168    	   443: 	addi.w #1,SerHeadXmit				; advance head index
00:000017F2 303900040CD8    	   444: 	move.w serial_dcb+DCB_OUTBUFSIZE,d0
00:000017F8 B07900100168    	   445: 	cmp.w SerHeadXmit,d0
00:000017FE 6206            	   446: 	bhi.s sirq0002
00:00001800 427900100168    	   447: 	clr.w SerHeadXmit						; wrap around
                            	   448: sirq0002:
                            	   449: sirqXmitOff:
                            	   450: sirqTxEmpty:
                            	   451: notTxInt:
00:00001806 4E7A0FE0        	   452: 	movec	coreno,d0
00:0000180A 4840            	   453: 	swap d0
00:0000180C 7202            	   454: 	moveq	#SERIAL_SEMA,d1
00:0000180E 61000836        	   455: 	bsr	UnlockSemaphore
00:00001812 4CDF0107        	   456: 	movem.l	(a7)+,d0/d1/d2/a0
00:00001816 4E73            	   457: 	rte
                            	   458: 
                            	   459: nmeSerial:
00:00001818 53657269616C    	   460: 	dc.b		"Serial",0
00:0000181E 00
                            	   461: 
                            	   462: 

Source: "boot.x68"
                            	   562: 	include "framebuf.x68"

Source: "framebuf.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Video frame buffer
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 	code
                            	    43: 	even
                            	    44: setup_framebuf:
00:00001820 48E78080        	    45: 	movem.l d0/a0,-(a7)
00:00001824 7020            	    46: 	moveq #32,d0
00:00001826 41F900040D18    	    47: 	lea.l framebuf_dcb,a0
                            	    48: .0001:
00:0000182C 4298            	    49: 	clr.l (a0)+
00:0000182E 51C8FFFC        	    50: 	dbra d0,.0001
00:00001832 23FC204243440004	    51: 	move.l #$20424344,framebuf_dcb+DCB_MAGIC			; 'DCB'
00:0000183A 0D18
00:0000183C 23FC4D4152460004	    52: 	move.l #$4D415246,framebuf_dcb+DCB_NAME				; 'FRAMEBUF'
00:00001844 0D1C
00:00001846 23FC004655420004	    53: 	move.l #$00465542,framebuf_dcb+DCB_NAME+4
00:0000184E 0D20
00:00001850 23FC0000198C0004	    54: 	move.l #framebuf_cmdproc,framebuf_dcb+DCB_CMDPROC
00:00001858 0D30
00:0000185A 203C40000000    	    55: 	move.l #$40000000,d0
00:00001860 23C000040D50    	    56: 	move.l d0,framebuf_dcb+DCB_INBUFPTR
00:00001866 23C000040D54    	    57: 	move.l d0,framebuf_dcb+DCB_OUTBUFPTR
00:0000186C 23FC004000000004	    58: 	move.l #$00400000,framebuf_dcb+DCB_INBUFSIZE
00:00001874 0D58
00:00001876 23FC004000000004	    59: 	move.l #$00400000,framebuf_dcb+DCB_OUTBUFSIZE
00:0000187E 0D5C
00:00001880 4CDF0101        	    60: 	movem.l (a7)+,d0/a0
                            	    61: 	; fall through
                            	    62: 
                            	    63: framebuf_init:
00:00001884 13FC0001FD200000	    64: 	move.b #1,FRAMEBUF+0		; turn on frame buffer
00:0000188C 13FC0001FD200001	    65: 	move.b #1,FRAMEBUF+1		; color depth 16 BPP
00:00001894 13FC0011FD200002	    66: 	move.b #$11,FRAMEBUF+2	; hres 1:1 vres 1:1
00:0000189C 13FC003BFD200004	    67: 	move.b #59,FRAMEBUF+4		; burst length
00:000018A4 23FC0000FF3F0004	    68: 	move.l #$ff3f,framebuf_dcb+DCB_FGCOLOR	; white
00:000018AC 0D7C
00:000018AE 23FC0000000F0004	    69: 	move.l #$000f,framebuf_dcb+DCB_BKCOLOR	; medium blue
00:000018B6 0D78
00:000018B8 42B900040D38    	    70: 	clr.l framebuf_dcb+DCB_OUTPOSX
00:000018BE 42B900040D3C    	    71: 	clr.l framebuf_dcb+DCB_OUTPOSY
00:000018C4 42B900040D44    	    72: 	clr.l framebuf_dcb+DCB_INPOSX
00:000018CA 42B900040D48    	    73: 	clr.l framebuf_dcb+DCB_INPOSY
00:000018D0 13FC000100040D80	    74: 	move.b #1,framebuf_dcb+DCB_OPCODE	; raster op = copy
00:000018D8 33FC078000040D6C	    75: 	move.w #1920,framebuf_dcb+DCB_OUTDIMX		; set rows and columns
00:000018E0 33FC043800040D70	    76: 	move.w #1080,framebuf_dcb+DCB_OUTDIMY
00:000018E8 33FC078000040D60	    77: 	move.w #1920,framebuf_dcb+DCB_INDIMX			; set rows and columns
00:000018F0 33FC043800040D64	    78: 	move.w #1080,framebuf_dcb+DCB_INDIMY
00:000018F8 23FC400000000004	    79: 	move.l #$40000000,framebuf_dcb+DCB_INBUFPTR
00:00001900 0D50
00:00001902 23FC404000000004	    80: 	move.l #$40400000,framebuf_dcb+DCB_INBUFPTR2
00:0000190A 0D88
00:0000190C 23FC400000000004	    81: 	move.l #$40000000,framebuf_dcb+DCB_OUTBUFPTR
00:00001914 0D54
00:00001916 23FC404000000004	    82: 	move.l #$40400000,framebuf_dcb+DCB_OUTBUFPTR2
00:0000191E 0D8C
00:00001920 42B9FD200010    	    83: 	move.l #$00000000,FRAMEBUF+16	; base addr 1
00:00001926 23FC00004000FD20	    84: 	move.l #$00004000,FRAMEBUF+24	; base addr 2
00:0000192E 0018
00:00001930 4E75            	    85: 	rts
                            	    86: 
                            	    87: 	align 2
                            	    88: FRAMEBUF_CMDTBL:
00:00001934 00001884        	    89: 	dc.l framebuf_init				; 0
00:00001938 000019AE        	    90: 	dc.l framebuf_stat
00:0000193C 000019AE        	    91: 	dc.l framebuf_putchar
00:00001940 00001A5A        	    92: 	dc.l framebuf_putbuf
00:00001944 000019AE        	    93: 	dc.l framebuf_getchar
00:00001948 00001A5A        	    94: 	dc.l framebuf_getbuf
00:0000194C 000019B0        	    95: 	dc.l framebuf_set_inpos
00:00001950 000019BE        	    96: 	dc.l framebuf_set_outpos
00:00001954 00001A5A        	    97: 	dc.l framebuf_stub
00:00001958 00001A5A        	    98: 	dc.l framebuf_stub
00:0000195C 00001A5A        	    99: 	dc.l framebuf_stub				; 10
00:00001960 00001A5A        	   100: 	dc.l framebuf_stub
00:00001964 00001B98        	   101: 	dc.l framebuf_clear
00:00001968 000019F8        	   102: 	dc.l framebuf_swapbuf
00:0000196C 000019DC        	   103: 	dc.l framebuf_setbuf1
00:00001970 000019EA        	   104: 	dc.l framebuf_setbuf2
00:00001974 000019CC        	   105: 	dc.l framebuf_getbuf1
00:00001978 000019D4        	   106: 	dc.l framebuf_getbuf2
00:0000197C 00001A9E        	   107: 	dc.l framebuf_writeat
00:00001980 00001A50        	   108: 	dc.l framebuf_set_unit
00:00001984 00001A6E        	   109: 	dc.l framebuf_get_dimen	; 20
00:00001988 00001A5E        	   110: 	dc.l framebuf_get_color
                            	   111: 
                            	   112: framebuf_cmdproc:
00:0000198C 0C060016        	   113: 	cmpi.b #22,d6
00:00001990 6418            	   114: 	bhs.s .0001
00:00001992 48E70280        	   115: 	movem.l d6/a0,-(a7)
00:00001996 4886            	   116: 	ext.w d6
00:00001998 E546            	   117: 	asl.w #2,d6
00:0000199A 41FAFF98        	   118: 	lea FRAMEBUF_CMDTBL,a0
00:0000199E 20706000        	   119: 	move.l (a0,d6.w),a0
00:000019A2 4E90            	   120: 	jsr (a0)
00:000019A4 4CDF0140        	   121: 	movem.l (a7)+,d6/a0
00:000019A8 4E75            	   122: 	rts
                            	   123: .0001:
00:000019AA 7002            	   124: 	moveq #E_Func,d0
00:000019AC 4E75            	   125: 	rts
                            	   126: 
                            	   127: framebuf_stat:
                            	   128: framebuf_putchar:
                            	   129: framebuf_getchar:
00:000019AE 4E75            	   130: 	rts
                            	   131: 
                            	   132: framebuf_set_inpos:
00:000019B0 23C100040D44    	   133: 	move.l d1,framebuf_dcb+DCB_INPOSX
00:000019B6 23C200040D48    	   134: 	move.l d2,framebuf_dcb+DCB_INPOSY
00:000019BC 4E75            	   135: 	rts
                            	   136: framebuf_set_outpos:
00:000019BE 23C100040D38    	   137: 	move.l d1,framebuf_dcb+DCB_OUTPOSX
00:000019C4 23C200040D3C    	   138: 	move.l d2,framebuf_dcb+DCB_OUTPOSY
00:000019CA 4E75            	   139: 	rts
                            	   140: 
                            	   141: framebuf_getbuf1:
00:000019CC 223900040D54    	   142: 	move.l framebuf_dcb+DCB_OUTBUFPTR,d1
00:000019D2 4E75            	   143: 	rts
                            	   144: framebuf_getbuf2:
00:000019D4 223900040D8C    	   145: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,d1
00:000019DA 4E75            	   146: 	rts
                            	   147: framebuf_setbuf1:
00:000019DC 23C100040D54    	   148: 	move.l d1,framebuf_dcb+DCB_OUTBUFPTR
00:000019E2 23C200040D5C    	   149: 	move.l d2,framebuf_dcb+DCB_OUTBUFSIZE
00:000019E8 4E75            	   150: 	rts
                            	   151: framebuf_setbuf2:
00:000019EA 23C100040D8C    	   152: 	move.l d1,framebuf_dcb+DCB_OUTBUFPTR2
00:000019F0 23C200040D94    	   153: 	move.l d2,framebuf_dcb+DCB_OUTBUFSIZE2
00:000019F6 4E75            	   154: 	rts
                            	   155: 
                            	   156: framebuf_swapbuf:
00:000019F8 48E76000        	   157: 	movem.l d1/d2,-(a7)
00:000019FC 1239FD200003    	   158: 	move.b FRAMEBUF+3,d1
00:00001A02 0A010001        	   159: 	eor.b #1,d1
00:00001A06 13C1FD200003    	   160: 	move.b d1,FRAMEBUF+3					; page flip
00:00001A0C 243900040D54    	   161: 	move.l framebuf_dcb+DCB_OUTBUFPTR,d2
00:00001A12 203900040D8C    	   162: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,d0
00:00001A18 23C200040D8C    	   163: 	move.l d2,framebuf_dcb+DCB_OUTBUFPTR2
00:00001A1E 23C000040D54    	   164: 	move.l d0,framebuf_dcb+DCB_OUTBUFPTR
00:00001A24 90BC40000000    	   165: 	sub.l #$40000000,d0
00:00001A2A 23C0FD300010    	   166: 	move.l d0,GFXACCEL+16
00:00001A30 243900040D50    	   167: 	move.l framebuf_dcb+DCB_INBUFPTR,d2
00:00001A36 203900040D88    	   168: 	move.l framebuf_dcb+DCB_INBUFPTR2,d0
00:00001A3C 23C200040D88    	   169: 	move.l d2,framebuf_dcb+DCB_INBUFPTR2
00:00001A42 23C000040D50    	   170: 	move.l d0,framebuf_dcb+DCB_INBUFPTR
00:00001A48 4CDF0006        	   171: 	movem.l (a7)+,d1/d2
00:00001A4C 7000            	   172: 	move.l #E_Ok,d0
00:00001A4E 4E75            	   173: 	rts
                            	   174: 
                            	   175: framebuf_set_unit:
00:00001A50 23C100040D98    	   176: 	move.l d1,framebuf_dcb+DCB_UNIT
00:00001A56 7000            	   177: 	move.l #E_Ok,d0
00:00001A58 4E75            	   178: 	rts
                            	   179: 
                            	   180: framebuf_getbuf:
                            	   181: framebuf_putbuf:
                            	   182: framebuf_stub:
00:00001A5A 700A            	   183: 	moveq #E_NotSupported,d0
00:00001A5C 4E75            	   184: 	rts
                            	   185: 
                            	   186: framebuf_get_color:
00:00001A5E 223900040D7C    	   187: 	move.l framebuf_dcb+DCB_FGCOLOR,d1
00:00001A64 243900040D78    	   188: 	move.l framebuf_dcb+DCB_BKCOLOR,d2
00:00001A6A 7000            	   189: 	move.l #E_Ok,d0
00:00001A6C 4E75            	   190: 	rts
                            	   191: 
                            	   192: framebuf_get_dimen:
00:00001A6E 4A00            	   193: 	cmpi.b #0,d0
00:00001A70 6616            	   194: 	bne.s .0001
00:00001A72 223900040D6C    	   195: 	move.l framebuf_dcb+DCB_OUTDIMX,d1
00:00001A78 243900040D70    	   196: 	move.l framebuf_dcb+DCB_OUTDIMY,d2
00:00001A7E 263900040D74    	   197: 	move.l framebuf_dcb+DCB_OUTDIMZ,d3
00:00001A84 7000            	   198: 	move.l #E_Ok,d0
00:00001A86 4E75            	   199: 	rts
                            	   200: .0001:
00:00001A88 223900040D60    	   201: 	move.l framebuf_dcb+DCB_INDIMX,d1
00:00001A8E 243900040D64    	   202: 	move.l framebuf_dcb+DCB_INDIMY,d2
00:00001A94 263900040D68    	   203: 	move.l framebuf_dcb+DCB_INDIMZ,d3
00:00001A9A 7000            	   204: 	move.l #E_Ok,d0
00:00001A9C 4E75            	   205: 	rts
                            	   206: 
                            	   207: ;---------------------------------------------------------------------
                            	   208: ; The following uses point plot hardware built into the frame buffer.
                            	   209: ; It is assumed that previous commands have finished already.
                            	   210: ; It may take a few dozen clocks for a command to complete. As long
                            	   211: ; as this routine is not called to fast in succession it should be
                            	   212: ; okay.
                            	   213: ;---------------------------------------------------------------------
                            	   214: 
                            	   215: framebuf_writeat:
                            	   216: plot:
00:00001A9E 6070            	   217: 	bra plot_sw
00:00001AA0 48E76080        	   218: 	movem.l d1/d2/a0,-(a7)
00:00001AA4 207CFD200000    	   219: 	move.l #FRAMEBUF,a0
                            	   220: .0001:
                            	   221: ;	tst.b 40(a0)				; wait for any previous command to finish
                            	   222: ;	bne.s .0001										; Then set:
00:00001AAA E159            	   223: 	rol.w #8,d1										; reverse byte order
00:00001AAC 31410020        	   224: 	move.w d1,32(a0)							; pixel x co-ord
00:00001AB0 E15A            	   225: 	rol.w #8,d2										; reverse byte order
00:00001AB2 31420022        	   226: 	move.w d2,34(a0)							; pixel y co-ord
00:00001AB6 317900040D7C002C	   227: 	move.w framebuf_dcb+DCB_FGCOLOR,44(a0)	; pixel color
00:00001ABE 117900040D800029	   228: 	move.b framebuf_dcb+DCB_OPCODE,41(a0)	; set raster operation
00:00001AC6 117C00020028    	   229: 	move.b #2,40(a0)							; point plot command
00:00001ACC 4CDF0106        	   230: 	movem.l (a7)+,d1/d2/a0
00:00001AD0 4E75            	   231: 	rts
                            	   232: 
                            	   233: ;-------------------------------------------
                            	   234: ; In case of lacking hardware plot
                            	   235: ;-------------------------------------------
                            	   236: 	align 2
                            	   237: plottbl:
00:00001AD4 00001B82        	   238: 	dc.l plot_black
00:00001AD8 00001B74        	   239: 	dc.l plot_copy
00:00001ADC 00001B74        	   240: 	dc.l plot_copy
00:00001AE0 00001B60        	   241: 	dc.l plot_and
00:00001AE4 00001B36        	   242: 	dc.l plot_or
00:00001AE8 00001B4A        	   243: 	dc.l plot_xor
00:00001AEC 00001B74        	   244: 	dc.l plot_copy
00:00001AF0 00001B74        	   245: 	dc.l plot_copy
00:00001AF4 00001B74        	   246: 	dc.l plot_copy
00:00001AF8 00001B74        	   247: 	dc.l plot_copy
00:00001AFC 00001B74        	   248: 	dc.l plot_copy
00:00001B00 00001B74        	   249: 	dc.l plot_copy
00:00001B04 00001B74        	   250: 	dc.l plot_copy
00:00001B08 00001B74        	   251: 	dc.l plot_copy
00:00001B0C 00001B8C        	   252: 	dc.l plot_white
                            	   253: 
                            	   254: plot_sw:
00:00001B10 48E778C0        	   255: 	movem.l d1/d2/d3/d4/a0/a1,-(a7)
00:00001B14 C4F900040D6C    	   256: 	mulu framebuf_dcb+DCB_OUTDIMX,d2	; multiply y by screen width
                            	   257: ;	move.l d1,d3
                            	   258: ;	andi.l #30,d3
                            	   259: ;	moveq #30,d4
                            	   260: ;	sub.l d4,d3
                            	   261: ;	andi.l #$FFFFFFE0,d1
                            	   262: ;	or.l d3,d1
00:00001B1A 48C1            	   263: 	ext.l d1											; clear high-order word of x
00:00001B1C D481            	   264: 	add.l d1,d2										; add in x co-ord
00:00001B1E D482            	   265: 	add.l d2,d2										; *2 for 16 BPP
00:00001B20 207900040D8C    	   266: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,a0		; where the draw occurs
00:00001B26 163900040D80    	   267: 	move.b framebuf_dcb+DCB_OPCODE,d3				; raster operation
00:00001B2C 4883            	   268: 	ext.w d3
00:00001B2E E54B            	   269: 	lsl.w #2,d3
00:00001B30 227B30A2        	   270: 	move.l plottbl(pc,d3.w),a1
00:00001B34 4ED1            	   271: 	jmp (a1)
                            	   272: plot_or:
00:00001B36 38302800        	   273: 	move.w (a0,d2.l),d4	
00:00001B3A 887900040D7C    	   274: 	or.w framebuf_dcb+DCB_FGCOLOR,d4
00:00001B40 31842800        	   275: 	move.w d4,(a0,d2.l)
00:00001B44 4CDF031E        	   276: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B48 4E75            	   277: 	rts
                            	   278: plot_xor:
00:00001B4A 38302800        	   279: 	move.w (a0,d2.l),d4
00:00001B4E 363900040D7C    	   280: 	move.w framebuf_dcb+DCB_FGCOLOR,d3	
00:00001B54 B744            	   281: 	eor.w d3,d4
00:00001B56 31842800        	   282: 	move.w d4,(a0,d2.l)
00:00001B5A 4CDF031E        	   283: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B5E 4E75            	   284: 	rts
                            	   285: plot_and:
00:00001B60 38302800        	   286: 	move.w (a0,d2.l),d4	
00:00001B64 C87900040D7C    	   287: 	and.w framebuf_dcb+DCB_FGCOLOR,d4
00:00001B6A 31842800        	   288: 	move.w d4,(a0,d2.l)
00:00001B6E 4CDF031E        	   289: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B72 4E75            	   290: 	rts
                            	   291: plot_copy:
00:00001B74 31B900040D7C2800	   292: 	move.w framebuf_dcb+DCB_FGCOLOR,(a0,d2.l)
00:00001B7C 4CDF031E        	   293: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B80 4E75            	   294: 	rts
                            	   295: plot_black:
00:00001B82 42702800        	   296: 	clr.w (a0,d2.l)
00:00001B86 4CDF031E        	   297: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B8A 4E75            	   298: 	rts
                            	   299: plot_white:
00:00001B8C 31BCFF7F2800    	   300: 	move.w #$FF7F,(a0,d2.l)
00:00001B92 4CDF031E        	   301: 	movem.l (a7)+,d1/d2/d3/d4/a0/a1
00:00001B96 4E75            	   302: 	rts
                            	   303: 
                            	   304: 
                            	   305: framebuf_clear:
00:00001B98 48E76880        	   306: 	movem.l d1/d2/d4/a0,-(a7)
00:00001B9C 243900040D78    	   307: 	move.l framebuf_dcb+DCB_BKCOLOR,d2
00:00001BA2 2202            	   308: 	move.l d2,d1
00:00001BA4 E15A            	   309: 	rol.w #8,d2							; d2 = background color
00:00001BA6 4842            	   310: 	swap d2									; high bits = background color
00:00001BA8 3401            	   311: 	move.w d1,d2						; low bits = background color
00:00001BAA E15A            	   312: 	rol.w #8,d2
00:00001BAC 2802            	   313: 	move.l d2,d4						; save for later
00:00001BAE 207900040D8C    	   314: 	move.l framebuf_dcb+DCB_OUTBUFPTR2,a0		; where the draw occurs
00:00001BB4 42B97FFFFFF8    	   315: 	move.l #0,$7FFFFFF8			; set burst length zero
00:00001BBA 223900040D6C    	   316: 	move.l framebuf_dcb+DCB_OUTDIMX,d1
00:00001BC0 243900040D70    	   317: 	move.l framebuf_dcb+DCB_OUTDIMY,d2
00:00001BC6 C2C2            	   318: 	mulu d2,d1							; X dimen * Y dimen
00:00001BC8 E888            	   319: 	lsr.l #4,d0							; moving 16 pixels per iteration
00:00001BCA 6002            	   320: 	bra.s .loop
                            	   321: .loop2:
00:00001BCC 4840            	   322: 	swap d0
                            	   323: .loop:
00:00001BCE 2208            	   324: 	move.l a0,d1
00:00001BD0 61006FB2        	   325: 	bsr rbo
00:00001BD4 23C17FFFFFF4    	   326: 	move.l d1,$7FFFFFF4			; set destination address
00:00001BDA 23C47FFFFFFC    	   327: 	move.l d4,$7FFFFFFC			; write value (color) to use and trigger write op
00:00001BE0 41E80020        	   328: 	add.l #32,a0						; advance pointer
00:00001BE4 51C8FFE8        	   329: 	dbra d0,.loop
00:00001BE8 4840            	   330: 	swap d0
00:00001BEA 51C8FFE0        	   331: 	dbra d0,.loop2
00:00001BEE 4CDF0116        	   332: 	movem.l (a7)+,d1/d2/d4/a0
00:00001BF2 7000            	   333: 	move.l #E_Ok,d0
00:00001BF4 4E75            	   334: 	rts
                            	   335: 
                            	   336: ; The following code using bursts of 1k pixels did not work (hardware).
                            	   337: ;
                            	   338: ;clear_bitmap_screen2:
                            	   339: ;	move.l gr_bitmap_screen,a0
                            	   340: ;clear_bitmap_screen3:
                            	   341: ;	movem.l d0/d2/a0,-(a7)
                            	   342: ;	move.l #$3F3F3F3F,$BFFFFFF4	; 32x64 byte burst
                            	   343: ;	move.w pen_color,d0
                            	   344: ;	swap d0
                            	   345: ;	move.w pen_color,d0
                            	   346: ;	move.w gr_width,d2		; calc. number of pixels on screen
                            	   347: ;	mulu gr_height,d2
                            	   348: ;	add.l #1023,d2				; rounding up
                            	   349: ;	lsr.l #8,d2						; divide by 1024 pixel update
                            	   350: ;	lsr.l #2,d2
                            	   351: ;.0001:
                            	   352: ;	move.l a0,$BFFFFFF8		; write update address
                            	   353: ;	add.l #2048,a0				; update pointer
                            	   354: ;	move.l d0,$BFFFFFFC		; trigger burst write of 2048 bytes
                            	   355: ;	dbra d2,.0001
                            	   356: ;	movem.l (a7)+,d0/d2/a0
                            	   357: ;	rts
                            	   358: 
                            	   359: ; More conventional but slow way of clearing the screen.
                            	   360: ;
                            	   361: ;clear_bitmap_screen:
                            	   362: ;	move.l gr_bitmap_screen,a0
                            	   363: ;clear_bitmap_screen1:
                            	   364: ;	movem.l d0/d2/a0,-(a7)
                            	   365: ;	move.w pen_color,d0
                            	   366: ;	swap d0
                            	   367: ;	move.w pen_color,d0
                            	   368: ;	move.w gr_width,d2		; calc. number of pixels on screen
                            	   369: ;	mulu gr_height,d2			; 800x600 = 480000
                            	   370: ;	bra.s .0001
                            	   371: ;.0002:
                            	   372: ;	swap d2
                            	   373: ;.0001:
                            	   374: ;	move.l d0,(a0)+
                            	   375: ;	dbra d2,.0001
                            	   376: ;	swap d2
                            	   377: ;	dbra d2,.0002
                            	   378: ;	movem.l (a7)+,d0/d2/a0
                            	   379: ;	rts
                            	   380: 
                            	   381: 

Source: "boot.x68"
                            	   563: 	include "gfxaccel.x68"

Source: "gfxaccel.x68"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2025  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: 
                            	    37: ;------------------------------------------------------------------------------
                            	    38: ;------------------------------------------------------------------------------
                            	    39: ; Graphics accelerator
                            	    40: ;------------------------------------------------------------------------------
                            	    41: ;------------------------------------------------------------------------------
                            	    42: 	align 2
                            	    43: GFXACCEL_CMDTBL:
00:00001BF8 00001C74        	    44: 	dc.l gfxaccel_init				; 0
00:00001BFC 00001CCE        	    45: 	dc.l gfxaccel_stat
00:00001C00 00001CDC        	    46: 	dc.l gfxaccel_putchar
00:00001C04 00001CDC        	    47: 	dc.l gfxaccel_putbuf
00:00001C08 00001CDC        	    48: 	dc.l gfxaccel_getchar
00:00001C0C 00001CDC        	    49: 	dc.l gfxaccel_getbuf
00:00001C10 00001CDC        	    50: 	dc.l gfxaccel_set_inpos
00:00001C14 00001CDC        	    51: 	dc.l gfxaccel_set_outpos
00:00001C18 00001CDC        	    52: 	dc.l gfxaccel_stub
00:00001C1C 00001CDC        	    53: 	dc.l gfxaccel_stub
00:00001C20 00001CDC        	    54: 	dc.l gfxaccel_stub				; 10
00:00001C24 00001CDC        	    55: 	dc.l gfxaccel_stub
00:00001C28 00001CD8        	    56: 	dc.l gfxaccel_clear
00:00001C2C 00001CDC        	    57: 	dc.l gfxaccel_swapbuf
00:00001C30 00001CDC        	    58: 	dc.l gfxaccel_setbuf1
00:00001C34 00001CDC        	    59: 	dc.l gfxaccel_setbuf2
00:00001C38 00001CDC        	    60: 	dc.l gfxaccel_getbuf1
00:00001C3C 00001CDC        	    61: 	dc.l gfxaccel_getbuf2
00:00001C40 00001CDC        	    62: 	dc.l gfxaccel_writeat
00:00001C44 00001CDC        	    63: 	dc.l gfxaccel_set_unit
00:00001C48 00001CDC        	    64: 	dc.l gfxaccel_get_dimen	; 20
00:00001C4C 00001CE0        	    65: 	dc.l gfxaccel_get_color
00:00001C50 00001CDC        	    66: 	dc.l gfxaccel_get_inpos
00:00001C54 00001CDC        	    67: 	dc.l gfxaccel_get_outpos
00:00001C58 00001CDC        	    68: 	dc.l gfxaccel_get_outptr
00:00001C5C 00001CEA        	    69: 	dc.l gfxaccel_set_color
00:00001C60 00001D08        	    70: 	dc.l gfxaccel_set_color123
00:00001C64 00001CDC        	    71: 	dc.l gfxaccel_plot_point
00:00001C68 00001D32        	    72: 	dc.l gfxaccel_draw_line
00:00001C6C 00001E12        	    73: 	dc.l gfxaccel_draw_triangle
00:00001C70 00001DA2        	    74: 	dc.l gfxaccel_draw_rectangle
                            	    75: 
                            	    76: 	code
                            	    77: 	even
                            	    78: setup_gfxaccel:
                            	    79: gfxaccel_init:
00:00001C74 23FC00000001FD30	    80: 	move.l #1,GFXACCEL							; select 16bpp color
00:00001C7C 0000
00:00001C7E 7200            	    81: 	move.l #$00000000,d1
00:00001C80 61006F02        	    82: 	bsr rbo
00:00001C84 23C1FD300010    	    83: 	move.l d1,GFXACCEL+$10	; base draw address
00:00001C8A 223C00000780    	    84: 	move.l #1920,d1
00:00001C90 61006EF2        	    85: 	bsr rbo
00:00001C94 23C1FD300014    	    86: 	move.l d1,GFXACCEL+$14				; render target x dimension
00:00001C9A 223C00000438    	    87: 	move.l #1080,d1
00:00001CA0 61006EE2        	    88: 	bsr rbo
00:00001CA4 23C1FD300018    	    89: 	move.l d1,GFXACCEL+$18				; render target y dimension
00:00001CAA 4E75            	    90: 	rts
                            	    91: 
                            	    92: gfxaccel_cmdproc:
00:00001CAC 0C06001B        	    93: 	cmpi.b #27,d6
00:00001CB0 6418            	    94: 	bhs.s .0001
00:00001CB2 48E70280        	    95: 	movem.l d6/a0,-(a7)
00:00001CB6 4886            	    96: 	ext.w d6
00:00001CB8 E54E            	    97: 	lsl.w #2,d6
00:00001CBA 41FAFF3C        	    98: 	lea GFXACCEL_CMDTBL,a0
00:00001CBE 20706000        	    99: 	move.l (a0,d6.w),a0
00:00001CC2 4E90            	   100: 	jsr (a0)
00:00001CC4 4CDF0140        	   101: 	movem.l (a7)+,d6/a0
00:00001CC8 4E75            	   102: 	rts
                            	   103: .0001:
00:00001CCA 7002            	   104: 	moveq #E_Func,d0
00:00001CCC 4E75            	   105: 	rts
                            	   106: 
                            	   107: gfxaccel_stat:
00:00001CCE 2239FD300004    	   108: 	move.l GFXACCEL+4,d1
00:00001CD4 7000            	   109: 	moveq #E_Ok,d0
00:00001CD6 4E75            	   110: 	rts
                            	   111: 	
                            	   112: gfxaccel_clear:
00:00001CD8 7000            	   113: 	moveq #E_Ok,d0
00:00001CDA 4E75            	   114: 	rts
                            	   115: 
                            	   116: gfxaccel_putchar:
                            	   117: gfxaccel_getchar:
                            	   118: gfxaccel_putbuf:
                            	   119: gfxaccel_getbuf:
                            	   120: gfxaccel_set_inpos:
                            	   121: gfxaccel_set_outpos:
                            	   122: gfxaccel_stub:
                            	   123: gfxaccel_swapbuf:
                            	   124: gfxaccel_setbuf1:
                            	   125: gfxaccel_setbuf2:
                            	   126: gfxaccel_getbuf1:
                            	   127: gfxaccel_getbuf2:
                            	   128: gfxaccel_writeat:
                            	   129: gfxaccel_set_unit:
                            	   130: gfxaccel_get_dimen:
                            	   131: gfxaccel_get_inpos:
                            	   132: gfxaccel_get_outpos:
                            	   133: gfxaccel_get_outptr:
                            	   134: gfxaccel_plot_point:
00:00001CDC 700A            	   135: 	move.l #E_NotSupported,d0
00:00001CDE 4E75            	   136: 	rts
                            	   137: 
                            	   138: gfxaccel_get_color:
00:00001CE0 2239FD300084    	   139: 	move.l GFXACCEL+$84,d1
00:00001CE6 7000            	   140: 	moveq #E_Ok,d0
00:00001CE8 4E75            	   141: 	rts
                            	   142: 
                            	   143: gfxaccel_set_color:
00:00001CEA 48E75000        	   144: 	movem.l d1/d3,-(a7)
00:00001CEE 61006E94        	   145: 	bsr rbo
00:00001CF2 2601            	   146: 	move.l d1,d3
00:00001CF4 7201            	   147: 	move.l #1,d1
00:00001CF6 610001BE        	   148: 	bsr gfxaccel_wait
00:00001CFA 23C3FD300084    	   149: 	move.l d3,GFXACCEL+$84
00:00001D00 4CDF000A        	   150: 	movem.l (a7)+,d1/d3
00:00001D04 7000            	   151: 	moveq #E_Ok,d0
00:00001D06 4E75            	   152: 	rts
                            	   153: 
                            	   154: gfxaccel_set_color123:
00:00001D08 48E74800        	   155: 	movem.l d1/d4,-(a7)
00:00001D0C 61006E76        	   156: 	bsr rbo
00:00001D10 2801            	   157: 	move.l d1,d4
00:00001D12 7203            	   158: 	move.l #3,d1
00:00001D14 610001A0        	   159: 	bsr gfxaccel_wait
00:00001D18 23C4FD300084    	   160: 	move.l d4,GFXACCEL+$84
00:00001D1E 23C2FD300088    	   161: 	move.l d2,GFXACCEL+$88
00:00001D24 23C3FD30008C    	   162: 	move.l d3,GFXACCEL+$8C
00:00001D2A 4CDF0012        	   163: 	movem.l (a7)+,d1/d4
00:00001D2E 7000            	   164: 	moveq #E_Ok,d0
00:00001D30 4E75            	   165: 	rts
                            	   166: 
                            	   167: gfxaccel_draw_line:
00:00001D32 48E76000        	   168: 	movem.l d1/d2,-(a7)
00:00001D36 7207            	   169: 	moveq #7,d1
00:00001D38 6100017C        	   170: 	bsr gfxaccel_wait
00:00001D3C 4CDF0006        	   171: 	movem.l (a7)+,d1/d2
00:00001D40 61006E42        	   172: 	bsr rbo
00:00001D44 23C1FD300038    	   173: 	move.l d1,GFXACCEL+$38					; p0 x
00:00001D4A 2202            	   174: 	move.l d2,d1
00:00001D4C 61006E36        	   175: 	bsr rbo
00:00001D50 23C1FD30003C    	   176: 	move.l d1,GFXACCEL+$3C					; p0 y
00:00001D56 223C00040001    	   177: 	move.l #$00040001,d1						; set active point 0
00:00001D5C 61006E26        	   178: 	bsr rbo
00:00001D60 23C1FD300000    	   179: 	move.l d1,GFXACCEL
00:00001D66 2203            	   180: 	move.l d3,d1
00:00001D68 61006E1A        	   181: 	bsr rbo
00:00001D6C 23C1FD300038    	   182: 	move.l d1,GFXACCEL+$38
00:00001D72 2204            	   183: 	move.l d4,d1
00:00001D74 61006E0E        	   184: 	bsr rbo
00:00001D78 23C1FD30003C    	   185: 	move.l d1,GFXACCEL+$3C
00:00001D7E 223C00050001    	   186: 	move.l #$00050001,d1						; set active point 1
00:00001D84 61006DFE        	   187: 	bsr rbo
00:00001D88 23C1FD300000    	   188: 	move.l d1,GFXACCEL
00:00001D8E 223C00000201    	   189: 	move.l #$00000201,d1
00:00001D94 61006DEE        	   190: 	bsr rbo
00:00001D98 23C1FD300000    	   191: 	move.l d1,GFXACCEL
00:00001D9E 7000            	   192: 	moveq #E_Ok,d0
00:00001DA0 4E75            	   193: 	rts
                            	   194: 
                            	   195: ; Draw a rectangle in the currently selected color
                            	   196: ;
                            	   197: ; Parameters:
                            	   198: ;		d1 	- x0 pos
                            	   199: ;		d2	- y0 pos
                            	   200: ;		d3	- x1 pos
                            	   201: ;		d4	- y1 pos
                            	   202: 
                            	   203: gfxaccel_draw_rectangle:
00:00001DA2 48E76000        	   204: 	movem.l d1/d2,-(a7)
00:00001DA6 7207            	   205: 	moveq #7,d1
00:00001DA8 6100010C        	   206: 	bsr gfxaccel_wait
00:00001DAC 4CDF0006        	   207: 	movem.l (a7)+,d1/d2
00:00001DB0 61006DD2        	   208: 	bsr rbo
00:00001DB4 23C1FD300038    	   209: 	move.l d1,GFXACCEL+$38					; p0 x
00:00001DBA 2202            	   210: 	move.l d2,d1
00:00001DBC 61006DC6        	   211: 	bsr rbo
00:00001DC0 23C1FD30003C    	   212: 	move.l d1,GFXACCEL+$3C					; p0 y
00:00001DC6 223C00040001    	   213: 	move.l #$00040001,d1						; set active point 0
00:00001DCC 61006DB6        	   214: 	bsr rbo
00:00001DD0 23C1FD300000    	   215: 	move.l d1,GFXACCEL
00:00001DD6 2203            	   216: 	move.l d3,d1
00:00001DD8 61006DAA        	   217: 	bsr rbo
00:00001DDC 23C1FD300038    	   218: 	move.l d1,GFXACCEL+$38
00:00001DE2 2204            	   219: 	move.l d4,d1
00:00001DE4 61006D9E        	   220: 	bsr rbo
00:00001DE8 23C1FD30003C    	   221: 	move.l d1,GFXACCEL+$3C
00:00001DEE 223C00050001    	   222: 	move.l #$00050001,d1						; set active point 1
00:00001DF4 61006D8E        	   223: 	bsr rbo
00:00001DF8 23C1FD300000    	   224: 	move.l d1,GFXACCEL
00:00001DFE 223C00000101    	   225: 	move.l #$00000101,d1
00:00001E04 61006D7E        	   226: 	bsr rbo
00:00001E08 23C1FD300000    	   227: 	move.l d1,GFXACCEL
00:00001E0E 7000            	   228: 	moveq #E_Ok,d0
00:00001E10 4E75            	   229: 	rts
                            	   230: 
                            	   231: ; Draw a triangle in the currently selected color
                            	   232: ;
                            	   233: ; Parameters:
                            	   234: ;		d1 	- x0 pos
                            	   235: ;		d2	- y0 pos
                            	   236: ;		d3	- x1 pos
                            	   237: ;		d4	- y1 pos
                            	   238: ;	  d5	- x2 pos
                            	   239: ;		d6	- y2 pos
                            	   240: 
                            	   241: gfxaccel_draw_triangle:
00:00001E12 48E76000        	   242: 	movem.l d1/d2,-(a7)
00:00001E16 720D            	   243: 	moveq #13,d1
00:00001E18 6100009C        	   244: 	bsr gfxaccel_wait
00:00001E1C 4CDF0006        	   245: 	movem.l (a7)+,d1/d2
00:00001E20 61006D62        	   246: 	bsr rbo
00:00001E24 23C1FD300038    	   247: 	move.l d1,GFXACCEL+$38					; p0 x
00:00001E2A 2202            	   248: 	move.l d2,d1
00:00001E2C 61006D56        	   249: 	bsr rbo
00:00001E30 23C1FD30003C    	   250: 	move.l d1,GFXACCEL+$3C					; p0 y
00:00001E36 223C00040001    	   251: 	move.l #$00040001,d1						; set active point 0
00:00001E3C 61006D46        	   252: 	bsr rbo
00:00001E40 23C1FD300000    	   253: 	move.l d1,GFXACCEL
00:00001E46 2203            	   254: 	move.l d3,d1
00:00001E48 61006D3A        	   255: 	bsr rbo
00:00001E4C 23C1FD300038    	   256: 	move.l d1,GFXACCEL+$38
00:00001E52 2204            	   257: 	move.l d4,d1
00:00001E54 61006D2E        	   258: 	bsr rbo
00:00001E58 23C1FD30003C    	   259: 	move.l d1,GFXACCEL+$3C
00:00001E5E 223C00050001    	   260: 	move.l #$00050001,d1						; set active point 1
00:00001E64 61006D1E        	   261: 	bsr rbo
00:00001E68 23C1FD300000    	   262: 	move.l d1,GFXACCEL
00:00001E6E 223C00000101    	   263: 	move.l #$00000101,d1
00:00001E74 23C1FD300000    	   264: 	move.l d1,GFXACCEL
00:00001E7A 2205            	   265: 	move.l d5,d1
00:00001E7C 61006D06        	   266: 	bsr rbo
00:00001E80 23C5FD300038    	   267: 	move.l d5,GFXACCEL+$38
00:00001E86 2206            	   268: 	move.l d6,d1
00:00001E88 61006CFA        	   269: 	bsr rbo
00:00001E8C 23C6FD30003C    	   270: 	move.l d6,GFXACCEL+$3C
00:00001E92 223C00060001    	   271: 	move.l #$00060001,d1						; set active point 2
00:00001E98 61006CEA        	   272: 	bsr rbo
00:00001E9C 23C1FD300000    	   273: 	move.l d1,GFXACCEL
00:00001EA2 223C00000401    	   274: 	move.l #$00000401,d1						; write triangle
00:00001EA8 61006CDA        	   275: 	bsr rbo
00:00001EAC 23C1FD300000    	   276: 	move.l d1,GFXACCEL
00:00001EB2 7000            	   277: 	moveq #E_Ok,d0
00:00001EB4 4E75            	   278: 	rts
                            	   279: 
                            	   280: ; Waits until the specified number of queue slots are available.
                            	   281: ;
                            	   282: ; Parameters:
                            	   283: ;		d1 = number of queue slots required
                            	   284: 
                            	   285: gfxaccel_wait:
00:00001EB6 48E77000        	   286: 	movem.l d1/d2/d3,-(a7)
00:00001EBA 2401            	   287: 	move.l d1,d2
00:00001EBC 2601            	   288: 	move.l d1,d3
                            	   289: .0001:
00:00001EBE 2239FD300004    	   290: 	move.l GFXACCEL+$04,d1
00:00001EC4 61006CBE        	   291: 	bsr rbo
00:00001EC8 08010000        	   292: 	btst.l #0,d1			; first check busy bit
00:00001ECC 66F0            	   293: 	bne.s .0001
00:00001ECE 4841            	   294: 	swap d1
00:00001ED0 48C1            	   295: 	ext.l d1
00:00001ED2 2403            	   296: 	move.l d3,d2
00:00001ED4 D481            	   297: 	add.l d1,d2
00:00001ED6 0C82000003FC    	   298: 	cmpi.l #1020,d2
00:00001EDC 62E0            	   299: 	bhi.s .0001
00:00001EDE 4CDF000E        	   300: 	movem.l (a7)+,d1/d2/d3
00:00001EE2 4E75            	   301: 	rts
                            	   302: 

Source: "boot.x68"
                            	   564: 
                            	   565: ;------------------------------------------------------------------------------
                            	   566: ;------------------------------------------------------------------------------
                            	   567: ;------------------------------------------------------------------------------
                            	   568: 
                            	   569: GlobalReadLong:
00:00001EE4 2210            	   570: 		move.l (a0),d1
00:00001EE6 4E75            	   571: 		rts
00:00001EE8 6004            	   572: 		bra nd1
                            	   573: GlobalWriteLong:
00:00001EEA 2081            	   574: 		move.l d1,(a0)
00:00001EEC 4E75            	   575: 		rts
                            	   576: net_delay:
                            	   577: 		bra nd1
                            	   578: nd1	bra nd2
                            	   579: nd2 bra nd3
                            	   580: nd3 bra nd4
00:00001EEE 4E71            	   581: nd4	nop
00:00001EF0 4E75            	   582: 		rts
                            	   583: 	
                            	   584: 
                            	   585: ;------------------------------------------------------------------------------
                            	   586: ; The IO bitmap needs to be initialized to allow access to IO.
                            	   587: ;------------------------------------------------------------------------------
                            	   588: 
                            	   589: InitIOPBitmap:
00:00001EF2 7600            	   590: 	moveq #0,d3				; d3 = asid value
00:00001EF4 303C003F        	   591: 	move.w #63,d0			; 64 bitmaps to setup
00:00001EF8 4E7A8016        	   592: 	movec iops,a0			; a0 = IOP bitmap address
00:00001EFC 2248            	   593: 	movea.l a0,a1			; a1 = table address
                            	   594: .0004
00:00001EFE 4A03            	   595: 	tst.b d3
00:00001F00 57C1            	   596: 	seq d1						; set entire bitmap for asid 0, otherwise clear entire bitmap
00:00001F02 4881            	   597: 	ext.w	d1					; make into a long value
00:00001F04 48C1            	   598: 	ext.l d1
00:00001F06 383C007F        	   599: 	move.w #127,d4
                            	   600: .0001
00:00001F0A 22C1            	   601: 	move.l d1,(a1)+		; set or clear entire table
00:00001F0C 51CCFFFC        	   602: 	dbra d4,.0001
00:00001F10 72FF            	   603: 	moveq #-1,d1
00:00001F12 214100A0        	   604: 	move.l d1,160(a0)	; all io address spaces have access to semaphores
00:00001F16 214100A4        	   605: 	move.l d1,164(a0)
00:00001F1A 214100A8        	   606: 	move.l d1,168(a0)
00:00001F1E 214100AC        	   607: 	move.l d1,172(a0)
00:00001F22 214101FC        	   608: 	move.l d1,508(a0)	; all io address spaces access random # generator
00:00001F26 4840            	   609: 	swap d0
00:00001F28 303C001F        	   610: 	move.w #31,d0			; 32 long words for the screen area per bitmap
                            	   611: .0003
00:00001F2C 20C1            	   612: 	move.l d1,(a0)+		; all cores have access to a screen
00:00001F2E 51C8FFFC        	   613: 	dbra d0,.0003
00:00001F32 4840            	   614: 	swap d0
00:00001F34 5203            	   615: 	addi.b #1,d3			; do next address space
00:00001F36 2049            	   616: 	movea.l a1,a0			; a0 points to area for next address space
00:00001F38 51C8FFC4        	   617: 	dbra d0,.0004
00:00001F3C 4E75            	   618: 	rts	
                            	   619: 	
                            	   620: ;------------------------------------------------------------------------------
                            	   621: ; RandInit
                            	   622: ; 	Initialize random number generator.
                            	   623: ;
                            	   624: ; Modifies:
                            	   625: ;		none
                            	   626: ; Parameters:
                            	   627: ;		none
                            	   628: ;	Returns:
                            	   629: ;		none
                            	   630: ;------------------------------------------------------------------------------
                            	   631: 
                            	   632: InitRand:
                            	   633: RandInit:
00:00001F3E 48E7C000        	   634: 	movem.l	d0/d1,-(a7)
00:00001F42 7025            	   635: 	moveq #37,d0								; lock semaphore
00:00001F44 7204            	   636: 	moveq	#RAND_SEMA,d1
00:00001F46 4E4F            	   637: 	trap #15
00:00001F48 4E7A0FE0        	   638: 	movec coreno,d0							; d0 = core number
00:00001F4C ED88            	   639: 	lsl.l	#6,d0									; allow 64 streams per core
00:00001F4E 23C0FD0FFD04    	   640: 	move.l d0,RAND_STRM					; select the stream
00:00001F54 23FC12345678FD0F	   641: 	move.l #$12345678,RAND_MZ		; initialize to some value
00:00001F5C FD08
00:00001F5E 23FC98765432FD0F	   642: 	move.l #$98765432,RAND_MW
00:00001F66 FD0C
00:00001F68 23FC2E5BF271FD0F	   643: 	move.l #777777777,RAND_NUM	; generate first number
00:00001F70 FD00
00:00001F72 7026            	   644: 	moveq #38,d0								; unlock semaphore
00:00001F74 7204            	   645: 	moveq	#RAND_SEMA,d1
00:00001F76 4E4F            	   646: 	trap #15
00:00001F78 4CDF0003        	   647: 	movem.l	(a7)+,d0/d1
00:00001F7C 4E75            	   648: 	rts
                            	   649: 
                            	   650: ;------------------------------------------------------------------------------
                            	   651: ; Returns
                            	   652: ;		d1 = random integer
                            	   653: ;------------------------------------------------------------------------------
                            	   654: 
                            	   655: RandGetNum:
00:00001F7E 48E7A000        	   656: 	movem.l	d0/d2,-(a7)
00:00001F82 7204            	   657: 	moveq #RAND_SEMA,d1
00:00001F84 610000DC        	   658: 	bsr T15LockSemaphore
00:00001F88 4E7A0FE0        	   659: 	movec	coreno,d0
00:00001F8C ED88            	   660: 	lsl.l	#6,d0
00:00001F8E 23C0FD0FFD04    	   661: 	move.l d0,RAND_STRM					; select the stream
00:00001F94 2439FD0FFD00    	   662: 	move.l RAND_NUM,d2					; d2 = random number
00:00001F9A 42B9FD0FFD00    	   663: 	clr.l	RAND_NUM							; generate next number
00:00001FA0 610000C6        	   664: 	bsr T15UnlockSemaphore
00:00001FA4 2202            	   665: 	move.l d2,d1
00:00001FA6 4CDF0005        	   666: 	movem.l	(a7)+,d0/d2
00:00001FAA 4E75            	   667: 	rts
                            	   668: 
                            	   669: ;------------------------------------------------------------------------------
                            	   670: ; Modifies:
                            	   671: ;		none
                            	   672: ; Returns
                            	   673: ;		fp0 = random float between 0 and 1.
                            	   674: ;------------------------------------------------------------------------------
                            	   675: 
                            	   676: _GetRand:
00:00001FAC 2F01            	   677: 	move.l d1,-(sp)
00:00001FAE F2276880        	   678: 	fmove.x fp1,-(sp)
00:00001FB2 61CA            	   679: 	bsr RandGetNum
00:00001FB4 E289            	   680: 	lsr.l #1,d1									; make number between 0 and 2^31
00:00001FB6 F2014000        	   681: 	fmove.l d1,fp0
00:00001FBA F23C40807FFFFFFF	   682: 	fmove.l #$7FFFFFFF,fp1			; divide by 2^31
00:00001FC2 F2000420        	   683: 	fdiv fp1,fp0
00:00001FC6 F21F4880        	   684: 	fmove.x (sp)+,fp1
00:00001FCA 221F            	   685: 	move.l (sp)+,d1
00:00001FCC 4E75            	   686: 	rts
                            	   687: 
                            	   688: ;------------------------------------------------------------------------------
                            	   689: ; RandWait
                            	   690: ;    Wait some random number of clock cycles before returning.
                            	   691: ;------------------------------------------------------------------------------
                            	   692: 
                            	   693: RandWait:
00:00001FCE 48E7C000        	   694: 	movem.l	d0/d1,-(a7)
00:00001FD2 61AA            	   695: 	bsr			RandGetNum
00:00001FD4 0241000F        	   696: 	andi.w	#15,d1
                            	   697: .0001:
00:00001FD8 4E71            	   698: 	nop
00:00001FDA 51C9FFFC        	   699: 	dbra		d1,.0001
00:00001FDE 4CDF0003        	   700: 	movem.l	(a7)+,d0/d1
00:00001FE2 4E75            	   701: 	rts
                            	   702: 
                            	   703: ;------------------------------------------------------------------------------
                            	   704: ; Initialize semaphores
                            	   705: ; - all semaphores are set to unlocked except the first one, which is locked
                            	   706: ; for core #2.
                            	   707: ;
                            	   708: ; Parameters:
                            	   709: ;		<none>
                            	   710: ; Modifies:
                            	   711: ;		<none>
                            	   712: ; Returns:
                            	   713: ;		<none>
                            	   714: ;------------------------------------------------------------------------------
                            	   715: 
                            	   716: InitSemaphores:
00:00001FE4 48E74080        	   717: 	movem.l	d1/a0,-(a7)
00:00001FE8 41F9FD050000    	   718: 	lea			semamem,a0
00:00001FEE 217C000200002000	   719: 	move.l	#$20000,$2000(a0)	; lock the first semaphore for core #2, thread #0
00:00001FF6 323C00FE        	   720: 	move.w	#254,d1
                            	   721: .0001:
00:00001FFA 5888            	   722: 	lea			4(a0),a0
00:00001FFC 42A82000        	   723: 	clr.l		$2000(a0)					; write zeros to unlock
00:00002000 51C9FFF8        	   724: 	dbra		d1,.0001
00:00002004 4CDF0102        	   725: 	movem.l	(a7)+,d1/a0
00:00002008 4E75            	   726: 	rts
                            	   727: 
                            	   728: ; -----------------------------------------------------------------------------
                            	   729: ; Parameters:
                            	   730: ;		d1 semaphore number
                            	   731: ;
                            	   732: ; Side Effects:
                            	   733: ;		increments semaphore, saturates at 255
                            	   734: ;
                            	   735: ; Returns:	
                            	   736: ; 	z flag set if semaphore was zero
                            	   737: ; -----------------------------------------------------------------------------
                            	   738: 
                            	   739: ;IncrementSemaphore:
                            	   740: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   741: ;	lea			semamem,a0			; point to semaphore memory
                            	   742: ;	ext.w		d1							; make d1 word value
                            	   743: ;	asl.w		#4,d1						; align to memory
                            	   744: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   745: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   746: ;	rts
                            	   747: 	
                            	   748: ; -----------------------------------------------------------------------------
                            	   749: ; Parameters:
                            	   750: ;		d1 semaphore number
                            	   751: ;
                            	   752: ; Side Effects:
                            	   753: ;		decrements semaphore, saturates at zero
                            	   754: ;
                            	   755: ; Returns:	
                            	   756: ; 	z flag set if semaphore was zero
                            	   757: ; -----------------------------------------------------------------------------
                            	   758: 
                            	   759: ;DecrementSemaphore:
                            	   760: ;	movem.l	d1/a0,-(a7)			; save registers
                            	   761: ;	lea			semamem,a0			; point to semaphore memory
                            	   762: ;	andi.w	#255,d1					; make d1 word value
                            	   763: ;	asl.w		#4,d1						; align to memory
                            	   764: ;	tst.b		1(a0,d1.w)			; read (test) value for zero
                            	   765: ;	movem.l	(a7)+,a0/d1			; restore regs
                            	   766: ;	rts
                            	   767: 
                            	   768: ; -----------------------------------------------------------------------------
                            	   769: ; Lock a semaphore
                            	   770: ;
                            	   771: ; Parameters:
                            	   772: ;		d0 = key
                            	   773: ;		d1 = semaphore number
                            	   774: ; -----------------------------------------------------------------------------
                            	   775: 
                            	   776: LockSemaphore:
00:0000200A 4E75            	   777: 	rts
00:0000200C 48E74080        	   778: 	movem.l	d1/a0,-(a7)			; save registers
00:00002010 41F9FD050000    	   779: 	lea			semamem,a0			; point to semaphore memory lock area
00:00002016 024100FF        	   780: 	andi.w	#255,d1					; make d1 word value
00:0000201A E549            	   781: 	lsl.w		#2,d1						; align to memory
                            	   782: .0001
00:0000201C 21801000        	   783: 	move.l	d0,(a0,d1.w)		; try and write the semaphore
00:00002020 B0B01000        	   784: 	cmp.l		(a0,d1.w),d0		; did it lock?
00:00002024 66F6            	   785: 	bne.s		.0001						; no, try again
00:00002026 4CDF0102        	   786: 	movem.l	(a7)+,a0/d1			; restore regs
00:0000202A 4E75            	   787: 	rts
                            	   788: 	
                            	   789: ; -----------------------------------------------------------------------------
                            	   790: ; Unlocks a semaphore even if not the owner.
                            	   791: ;
                            	   792: ; Parameters:
                            	   793: ;		d1 semaphore number
                            	   794: ; -----------------------------------------------------------------------------
                            	   795: 
                            	   796: ForceUnlockSemaphore:
00:0000202C 48E74080        	   797: 	movem.l	d1/a0,-(a7)				; save registers
00:00002030 41F9FD053000    	   798: 	lea			semamem+$3000,a0	; point to semaphore memory read/write area
00:00002036 024100FF        	   799: 	andi.w	#255,d1						; make d1 word value
00:0000203A E549            	   800: 	lsl.w		#2,d1							; align to memory
00:0000203C 42B01000        	   801: 	clr.l		(a0,d1.w)					; write zero to unlock
00:00002040 4CDF0102        	   802: 	movem.l	(a7)+,a0/d1				; restore regs
00:00002044 4E75            	   803: 	rts
                            	   804: 
                            	   805: ; -----------------------------------------------------------------------------
                            	   806: ; Unlocks a semaphore. Must be the owner to have effect.
                            	   807: ; Three cases:
                            	   808: ;	1) the owner, the semaphore will be reset to zero
                            	   809: ;	2) not the owner, the write will be ignored
                            	   810: ; 3) already unlocked, the write will be ignored
                            	   811: ;
                            	   812: ; Parameters:
                            	   813: ;		d0 = key
                            	   814: ;		d1 = semaphore number
                            	   815: ; -----------------------------------------------------------------------------
                            	   816: 
                            	   817: UnlockSemaphore:
00:00002046 60E4            	   818: 	bra ForceUnlockSemaphore
00:00002048 48E74080        	   819: 	movem.l	d1/a0,-(a7)				; save registers
00:0000204C 41F9FD051000    	   820: 	lea			semamem+$1000,a0	; point to semaphore memory unlock area
00:00002052 024100FF        	   821: 	andi.w	#255,d1						; make d1 word value
00:00002056 E549            	   822: 	lsl.w		#2,d1							; align to memory
00:00002058 21801000        	   823: 	move.l	d0,(a0,d1.w)			; write matching value to unlock
00:0000205C 4CDF0102        	   824: 	movem.l	(a7)+,a0/d1				; restore regs
00:00002060 4E75            	   825: 	rts
                            	   826: 
                            	   827: ; -----------------------------------------------------------------------------
                            	   828: ; Parameters:
                            	   829: ;		d1 = semaphore to lock / unlock
                            	   830: ; -----------------------------------------------------------------------------
                            	   831: 
                            	   832: T15LockSemaphore:	
00:00002062 4E7A0012        	   833: 	movec tr,d0
00:00002066 60A2            	   834: 	bra LockSemaphore
                            	   835: 
                            	   836: T15UnlockSemaphore:
00:00002068 4E7A0012        	   837: 	movec tr,d0
00:0000206C 60D8            	   838: 	bra UnlockSemaphore
                            	   839: 
                            	   840: T15GetFloat:
00:0000206E 2049            	   841: 	move.l a1,a0
00:00002070 2001            	   842: 	move.l d1,d0
00:00002072 610066E4        	   843: 	bsr _GetFloat
00:00002076 2248            	   844: 	move.l a0,a1
00:00002078 2200            	   845: 	move.l d0,d1
00:0000207A 4E75            	   846: 	rts
                            	   847: 
                            	   848: T15Abort:
00:0000207C 610067B2        	   849: 	bsr DisplayByte
00:00002080 43FA717E        	   850: 	lea msgStackCanary,a1
00:00002084 61005228        	   851: 	bsr DisplayStringCRLF
00:00002088 600057FE        	   852: 	bra Monitor
                            	   853: 
                            	   854: chk_exception:
00:0000208C 222F0002        	   855: 	move.l 2(sp),d1
00:00002090 61006792        	   856: 	bsr DisplayTetra
00:00002094 43FA715C        	   857: 	lea msgChk,a1
00:00002098 61005214        	   858: 	bsr DisplayStringCRLF
00:0000209C 600057EA        	   859: 	bra Monitor
                            	   860: 
                            	   861: ; -----------------------------------------------------------------------------
                            	   862: ; Delay for a few seconds to allow some I/O reset operations to take place.
                            	   863: ; -----------------------------------------------------------------------------
                            	   864: 
                            	   865: Delay3s:
00:000020A0 203C002DC6C0    	   866: 	move.l	#3000000,d0		; this should take a few seconds to loop
00:000020A6 41F9FD0FFF00    	   867: 	lea			leds,a0				; a0 = address of LED output register
00:000020AC 6002            	   868: 	bra			dly3s1				; branch to the loop
                            	   869: dly3s2:	
00:000020AE 4840            	   870: 	swap		d0						; loop is larger than 16-bits
                            	   871: dly3s1:
00:000020B0 2200            	   872: 	move.l	d0,d1					; the counter cycles fast, so use upper bits for display
00:000020B2 E199            	   873: 	rol.l		#8,d1					; could use swap here, but lets test rol
00:000020B4 E199            	   874: 	rol.l		#8,d1
00:000020B6 1081            	   875: 	move.b	d1,(a0)				; set the LEDs
00:000020B8 51C8FFF6        	   876: 	dbra		d0,dly3s1			; decrement and branch back
00:000020BC 4840            	   877: 	swap		d0
00:000020BE 51C8FFEE        	   878: 	dbra		d0,dly3s2
00:000020C2 4E75            	   879: 	rts
                            	   880: 
                            	   881: Delay3s2:
00:000020C4 4E7A0FE0        	   882: 	movec		coreno,d0			; vary delay by core to stagger startup
00:000020C8 E188            	   883: 	lsl.l		#8,d0
00:000020CA 0680002DC6C0    	   884: 	addi.l	#3000000,d0		; this should take a few seconds to loop
00:000020D0 6002            	   885: 	bra			.0001					; branch to the loop
                            	   886: .0002	
00:000020D2 4840            	   887: 	swap		d0						; loop is larger than 16-bits
                            	   888: .0001
00:000020D4 51C8FFFE        	   889: 	dbra		d0,.0001			; decrement and branch back
00:000020D8 4840            	   890: 	swap		d0
00:000020DA 51C8FFF6        	   891: 	dbra		d0,.0002
00:000020DE 4E75            	   892: 	rts
                            	   893: 
                            	   894: 	include "cputest.x68"

Source: "cputest.x68"
                            	     1: ;; @name cputest.s Tests 68000 cpu
                            	     2: ;
                            	     3: ; Based on https://github.com/MicroCoreLabs/Projects/blob/master/MCL68/MC68000_Test_Code/MC68000_test_all_opcodes.X68
                            	     4: ;
                            	     5: ; Converted into a CD-i system ROM image by CD-i Fan:
                            	     6: ; - comment lines must start in first column
                            	     7: ; - replaced org instructions by suitable rept
                            	     8: ; - copy vectors to low memory at startup
                            	     9: ; - replaced jsr/jmp by bsr/bra for position independence
                            	    10: ; - replaced move.l by moveq whenever possible
                            	    11: ; - converted branches to short form whenever possible (e.g. beq => beq.s)
                            	    12: ; - added immediate suffix to opcodes where required (e.g. and => andi)
                            	    13: ; The last three modifications are required to make the test work;
                            	    14: ; apparently the original assembler was somewhat smarter then
                            	    15: ; the Microware OS-9 assembler and did this automatically.
                            	    16: ;
                            	    17: ; In some cases the opcodes of the test are used as test data!
                            	    18: ;
                            	    19: ; Original file header follows.
                            	    20: ;
                            	    21: ;  File Name   :  MCL68 Opcode Tests
                            	    22: ;  Used on     :
                            	    23: ;  Author      :  Ted Fried, MicroCore Labs
                            	    24: ;  Creation    :  7/14/2020
                            	    25: ;
                            	    26: ;   Description:
                            	    27: ;   ============
                            	    28: ;
                            	    29: ;  Program to test all of the Motorola 68000's opcodes.
                            	    30: ;
                            	    31: ;  If failures are detected, the code will immediately loop on itself.
                            	    32: ;  All addressing modes, data sizes, and opcode combinations are tested.
                            	    33: ;
                            	    34: ;  This code was developed using the Easy68K simulator where all tests passed!
                            	    35: ;
                            	    36: ;------------------------------------------------------------------------
                            	    37: ;
                            	    38: ; Modification History:
                            	    39: ; =====================
                            	    40: ;
                            	    41: ; Revision 1 7/14/2020
                            	    42: ; Initial revision
                            	    43: ;
                            	    44: ;
                            	    45: ;------------------------------------------------------------------------
                            	    46: ;
                            	    47: ; Copyright (c) 2020 Ted Fried
                            	    48: ;
                            	    49: ; Permission is hereby granted, free of charge, to any person obtaining a copy
                            	    50: ; of this software and associated documentation files (the "Software"), to deal
                            	    51: ; in the Software without restriction, including without limitation the rights
                            	    52: ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                            	    53: ; copies of the Software, and to permit persons to whom the Software is
                            	    54: ; furnished to do so, subject to the following conditions:
                            	    55: ;
                            	    56: ; The above copyright notice and this permission notice shall be included in all
                            	    57: ; copies or substantial portions of the Software.
                            	    58: ;
                            	    59: ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                            	    60: ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                            	    61: ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                            	    62: ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                            	    63: ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                            	    64: ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                            	    65: ; SOFTWARE.
                            	    66: 
                            	    67: ; Modified for rf68000 project (c) 2022 Robert Finch
                            	    68: 
                            	    69: ;	data
                            	    70: ;	dc.l		$0001FFFC						; top of local ram area
                            	    71: ;	dc.l		start
                            	    72: 
                            	    73: ;    org $1000												; code starts at $400 in local ram
                            	    74: *start:
                            	    75: ;	move.l	$FFFFFFE0,d0		; get core number
                            	    76: ;	cmpi.b	#2,d0
                            	    77: ;	bne			do_nothing
                            	    78: 
                            	    79: ;	lea			EXCEPTION_6,a0	; check exception vector
                            	    80: ;	move.l	a0,6*4
                            	    81: ;	lea			EXCEPTION_7,a0	; TRAPV exception vector
                            	    82: ;	move.l	a0,7*4
                            	    83: 
                            	    84: cpu_test:
00:000020E0 610000F6        	    85: 	bsr	op_ORI_TO_CCR
00:000020E4 61000114        	    86: 	bsr	op_ORI_TO_SR
00:000020E8 61000132        	    87: 	bsr	op_EORI_TO_CCR
00:000020EC 61000154        	    88: 	bsr	op_EORI_TO_SR
00:000020F0 61000176        	    89: 	bsr	op_ANDI_TO_CCR
00:000020F4 61000198        	    90: 	bsr	op_ANDI_TO_SR
00:000020F8 610001BA        	    91: 	bsr	op_BTST
00:000020FC 61000560        	    92: 	bsr	op_BCHG
00:00002100 610008C4        	    93: 	bsr	op_BCLR
00:00002104 61000C0E        	    94: 	bsr	op_BSET
00:00002108 61000F52        	    95: 	bsr op_MOVEP
00:0000210C 61000FDA        	    96: 	bsr op_BOOL_I
00:00002110 610011BE        	    97: 	bsr op_CMP_I
00:00002114 610013A2        	    98: 	bsr op_ADD_I
00:00002118 61001524        	    99: 	bsr op_SUB_I
00:0000211C 610016A6        	   100: 	bsr op_MOVE
00:00002120 610018AE        	   101: 	bsr op_MOVE_xxx_FLAGS
00:00002124 61001A9E        	   102: 	bsr op_EXT
00:00002128 61001AC6        	   103: 	bsr op_SWAP
00:0000212C 61001AD8        	   104: 	bsr op_LEAPEA
00:00002130 61001B80        	   105: 	bsr op_TAS
00:00002134 61001BA2        	   106: 	bsr op_TST
00:00002138 61001BDC        	   107: 	bsr op_LINKS
00:0000213C 61001BF6        	   108: 	bsr op_MOVE_USP
00:00002140 61001C02        	   109: 	bsr op_CHK
00:00002144 61001C48        	   110: 	bsr op_NEGS
00:00002148 61001FD2        	   111: 	bsr op_MOVEM
                            	   112: ;	bsr op_ABCD
                            	   113: ;	bsr op_SBCD
                            	   114: ;	bsr op_NBCD
00:0000214C 6100256E        	   115: 	bsr op_TRAPV
00:00002150 61002586        	   116: 	bsr op_RTR
00:00002154 61001144        	   117: 	bsr op_BSR
00:00002158 610025A0        	   118: 	bsr op_BCC
00:0000215C 6100261C        	   119: 	bsr op_DBCC
00:00002160 6100263E        	   120: 	bsr op_SCC
00:00002164 6100266A        	   121: 	bsr op_ADDQ
00:00002168 61002720        	   122: 	bsr op_SUBQ
00:0000216C 610027D6        	   123: 	bsr op_MOVEQ
                            	   124: ;	bsr op_DIVU
                            	   125: ;	bsr op_DIVS
00:00002170 61002892        	   126: 	bsr op_OR
00:00002174 61002978        	   127: 	bsr op_AND
00:00002178 61002A5E        	   128: 	bsr op_EOR
00:0000217C 61002AD0        	   129: 	bsr op_CMP
00:00002180 61002B42        	   130: 	bsr op_CMPA
00:00002184 61002BA4        	   131: 	bsr op_CMPM
00:00002188 61002C46        	   132: 	bsr op_ADD
00:0000218C 61002D2C        	   133: 	bsr op_SUB
00:00002190 61002E12        	   134: 	bsr op_ADDA
00:00002194 61002E5A        	   135: 	bsr op_SUBA
00:00002198 61002EA2        	   136: 	bsr op_ADDX	
00:0000219C 61002FAE        	   137: 	bsr op_SUBX
00:000021A0 610030BA        	   138: 	bsr op_MULU
00:000021A4 61003102        	   139: 	bsr op_MULS
00:000021A8 6100314A        	   140: 	bsr op_EXG
00:000021AC 610031B4        	   141: 	bsr op_ROx
00:000021B0 610033E6        	   142: 	bsr op_ROXx
00:000021B4 61003618        	   143: 	bsr op_SHIFTS
00:000021B8 61003856        	   144: 	bsr op_SHIFTS2
                            	   145: 
00:000021BC 4E75            	   146: 	rts
                            	   147: 	bra ALL_DONE
                            	   148: 
                            	   149: * Loop here when all tests pass
                            	   150: *
                            	   151: 
00:000021BE 60FE            	   152: ALL_DONE: bra.s ALL_DONE
                            	   153: 
00:000021C0 263C33333333    	   154: BSR_FAR1:       move.l #$33333333,d3
00:000021C6 4E75            	   155:                 rts
                            	   156: 
                            	   157: ;	moveq		#-1,d0
                            	   158: ;	move.l	d0,$FD0FFF00
                            	   159: ;do_nothing:
                            	   160: ;	bra			*		
                            	   161: 
                            	   162: 
                            	   163: ;' Exception Vector = 6   CHK Instruction
                            	   164: ;
                            	   165: ;	align	4
                            	   166: EXCEPTION_6:
00:000021C8 2C3CEEEE0006    	   167: 	move.l #$EEEE0006,d6      * Set d6 to the exception vector
00:000021CE 4E73            	   168: 	rte
                            	   169: 
                            	   170: ; Exception Vector = 7   TRAPV Instruction
                            	   171: ;
                            	   172: ;	align	4
                            	   173: EXCEPTION_7:
00:000021D0 203C12345678    	   174: 	move.l #$12345678,d0      * Set d6 to the exception vector
00:000021D6 4E73            	   175: 	rte
                            	   176: 
                            	   177: ;-----------------------------------------------------------
                            	   178: ;-----------------------------------------------------------
                            	   179: ; OPCODE : ORI_TO_CCR
                            	   180: ;-----------------------------------------------------------
                            	   181: ;-----------------------------------------------------------
                            	   182: op_ORI_TO_CCR:
                            	   183: 
00:000021D8 003C00FF        	   184:     ori.b #$FF,CCR
00:000021DC 6AFE            	   185:     bpl.s *                   ; branch if Z clear
00:000021DE 66FE            	   186:     bne.s *                   ; branch if N clear
00:000021E0 68FE            	   187:     bvc.s *                   ; branch if V clear
00:000021E2 64FE            	   188:     bcc.s *                   ; branch if C clear
                            	   189: 
00:000021E4 44FC0000        	   190:     move #$00,CCR
00:000021E8 003C0000        	   191:     ori.b #$00,CCR
00:000021EC 67FE            	   192:     beq.s *                   ; branch if Z set
00:000021EE 6BFE            	   193:     bmi.s *                   ; branch if N set
00:000021F0 69FE            	   194:     bvs.s *                   ; branch if V set
00:000021F2 65FE            	   195:     bcs.s *                   ; branch if C set
                            	   196: 
00:000021F4 46FC2700        	   197:     move.w #$2700,SR          ; Put flags back to initial value
                            	   198: 
00:000021F8 4E75            	   199:     rts
                            	   200: 
                            	   201: ;-----------------------------------------------------------
                            	   202: ;-----------------------------------------------------------
                            	   203: ; OPCODE : ORI_TO_SR
                            	   204: ;-----------------------------------------------------------
                            	   205: ;-----------------------------------------------------------
                            	   206: 
                            	   207: op_ORI_TO_SR:
                            	   208: 
00:000021FA 007C2FFF        	   209:     ori.w #$2FFF,SR
00:000021FE 6AFE            	   210:     bpl.s *                   * branch if Z clear
00:00002200 66FE            	   211:     bne.s *                   * branch if N clear
00:00002202 68FE            	   212:     bvc.s *                   * branch if V clear
00:00002204 64FE            	   213:     bcc.s *                   * branch if C clear
                            	   214: 
00:00002206 46FC2000        	   215:     move.w #$2000,SR
00:0000220A 007C0000        	   216:     ori.w #$0000,SR
00:0000220E 67FE            	   217:     beq.s *                   * branch if Z set
00:00002210 6BFE            	   218:     bmi.s *                   * branch if N set
00:00002212 69FE            	   219:     bvs.s *                   * branch if V set
00:00002214 65FE            	   220:     bcs.s *                   * branch if C set
                            	   221: 
00:00002216 46FC2700        	   222:     move.w #$2700,sr         * Put flags back to initial value
                            	   223: 
00:0000221A 4E75            	   224:     rts
                            	   225: ; 
                            	   226: ;-----------------------------------------------------------
                            	   227: ;-----------------------------------------------------------
                            	   228: ; OPCODE : EORI_TO_CCR
                            	   229: ;-----------------------------------------------------------
                            	   230: ;-----------------------------------------------------------
                            	   231: op_EORI_TO_CCR:
                            	   232: 
00:0000221C 44FC0000        	   233:     move #$00,CCR
00:00002220 0A3C00FF        	   234:     eori.b #$FF,CCR
00:00002224 6AFE            	   235:     bpl.s *                   ; branch if Z clear
00:00002226 66FE            	   236:     bne.s *                   ; branch if N clear
00:00002228 68FE            	   237:     bvc.s *                   ; branch if V clear
00:0000222A 64FE            	   238:     bcc.s *                   ; branch if C clear
                            	   239: 
00:0000222C 44FC0000        	   240:     move #$00,CCR
00:00002230 0A3C0000        	   241:     eori.b #$00,CCR
00:00002234 67FE            	   242:     beq.s *                   ; branch if Z set
00:00002236 6BFE            	   243:     bmi.s *                   ; branch if N set
00:00002238 69FE            	   244:     bvs.s *                   ; branch if V set
00:0000223A 65FE            	   245:     bcs.s *                   ; branch if C set
                            	   246: 
00:0000223C 46FC2700        	   247:     move.w #$2700,sr           ; Put flags back to initial value
                            	   248: 
00:00002240 4E75            	   249:     rts
                            	   250: 
                            	   251: 
                            	   252: 
                            	   253: *-----------------------------------------------------------
                            	   254: *-----------------------------------------------------------
                            	   255: * OPCODE : EORI_TO_SR
                            	   256: *-----------------------------------------------------------
                            	   257: *-----------------------------------------------------------
                            	   258: op_EORI_TO_SR:
                            	   259: 
00:00002242 46FC2000        	   260:     move.w #$2000,SR
00:00002246 0A7C0FFF        	   261:     eori.w #$0FFF,SR
00:0000224A 6AFE            	   262:     bpl.s *                   * branch if Z clear
00:0000224C 66FE            	   263:     bne.s *                   * branch if N clear
00:0000224E 68FE            	   264:     bvc.s *                   * branch if V clear
00:00002250 64FE            	   265:     bcc.s *                   * branch if C clear
                            	   266: 
00:00002252 46FC2000        	   267:     move.w #$2000,SR
00:00002256 0A7C0000        	   268:     eori.w #$0000,SR
00:0000225A 67FE            	   269:     beq.s *                   * branch if Z set
00:0000225C 6BFE            	   270:     bmi.s *                   * branch if N set
00:0000225E 69FE            	   271:     bvs.s *                   * branch if V set
00:00002260 65FE            	   272:     bcs.s *                   * branch if C set
                            	   273: 
00:00002262 46FC2700        	   274:     move.w #$2700,sr          * Put flags back to initial value
                            	   275: 
00:00002266 4E75            	   276:     rts
                            	   277: 
                            	   278: 
                            	   279: 
                            	   280: *-----------------------------------------------------------
                            	   281: *-----------------------------------------------------------
                            	   282: * OPCODE : ANDI_TO_CCR
                            	   283: *-----------------------------------------------------------
                            	   284: *-----------------------------------------------------------
                            	   285: op_ANDI_TO_CCR:
                            	   286: 
00:00002268 44FC00FF        	   287:     move #$FF,CCR
00:0000226C 023C00FF        	   288:     andi.b #$FF,CCR
00:00002270 6AFE            	   289:     bpl.s *                   * branch if Z clear
00:00002272 66FE            	   290:     bne.s *                   * branch if N clear
00:00002274 68FE            	   291:     bvc.s *                   * branch if V clear
00:00002276 64FE            	   292:     bcc.s *                   * branch if C clear
                            	   293: 
00:00002278 44FC00FF        	   294:     move #$FF,CCR
00:0000227C 023C0000        	   295:     andi.b #$00,CCR
00:00002280 67FE            	   296:     beq.s *                   * branch if Z set
00:00002282 6BFE            	   297:     bmi.s *                   * branch if N set
00:00002284 69FE            	   298:     bvs.s *                   * branch if V set
00:00002286 65FE            	   299:     bcs.s *                   * branch if C set
                            	   300: 
00:00002288 46FC2700        	   301:     move #$2700,SR           * Put flags back to initial value
                            	   302: 
00:0000228C 4E75            	   303:     rts
                            	   304: 
                            	   305: 
                            	   306: 
                            	   307: *-----------------------------------------------------------
                            	   308: *-----------------------------------------------------------
                            	   309: * OPCODE : ANDI_TO_SR
                            	   310: *-----------------------------------------------------------
                            	   311: *-----------------------------------------------------------
                            	   312: op_ANDI_TO_SR:
00:0000228E 46FC20FF        	   313:     move.w #$20FF,SR
00:00002292 027CFFFF        	   314:     andi.w #$FFFF,SR
00:00002296 6AFE            	   315:     bpl.s *                   * branch if Z clear
00:00002298 66FE            	   316:     bne.s *                   * branch if N clear
00:0000229A 68FE            	   317:     bvc.s *                   * branch if V clear
00:0000229C 64FE            	   318:     bcc.s *                   * branch if C clear
                            	   319: 
00:0000229E 46FC20FF        	   320:     move.w #$20FF,SR
00:000022A2 027CFF00        	   321:     andi.w #$FF00,SR
00:000022A6 67FE            	   322:     beq.s *                   * branch if Z set
00:000022A8 6BFE            	   323:     bmi.s *                   * branch if N set
00:000022AA 69FE            	   324:     bvs.s *                   * branch if V set
00:000022AC 65FE            	   325:     bcs.s *                   * branch if C set
                            	   326: 
00:000022AE 46FC2700        	   327:     move.w #$2700,sr           * Put flags back to initial value
                            	   328: 
00:000022B2 4E75            	   329:     rts
                            	   330: 
                            	   331: 
                            	   332: *-----------------------------------------------------------
                            	   333: *-----------------------------------------------------------
                            	   334: * OPCODE : BTST
                            	   335: *-----------------------------------------------------------
                            	   336: *-----------------------------------------------------------
                            	   337: op_BTST:
                            	   338: 
                            	   339: *  Bit Number.s Static
                            	   340: 
                            	   341: *             EA = Dn  - LONG only
00:000022B4 203C80000001    	   342:             move.l #$80000001,d0      * populate test data
00:000022BA 08000000        	   343:             btst.l #0,d0
00:000022BE 67FE            	   344:             beq.s *               * branch if Z set
00:000022C0 08000001        	   345:             btst.l #1,d0              *
00:000022C4 66FE            	   346:             bne.s *               * branch if Z clear
00:000022C6 0800001F        	   347:             btst.l #31,d0             *
00:000022CA 67FE            	   348:             beq.s *               * branch if Z set
                            	   349: 
                            	   350: 
                            	   351: *             EA = (An)  - BYTE only
00:000022CC 307C0100        	   352:             move.l #$00000100,a0      * point to memory to address 0x100
00:000022D0 10BC0081        	   353:             move.b #$81,(a0)          * populate test data
00:000022D4 1210            	   354:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000022D6 08100000        	   355:             btst.b #0,(a0)
00:000022DA 67FE            	   356:             beq.s *               * branch if Z set
00:000022DC 08100001        	   357:             btst.b #1,(a0)            *
00:000022E0 66FE            	   358:             bne.s *               * branch if Z clear
00:000022E2 08100007        	   359:             btst.b #7,(a0)            *
00:000022E6 67FE            	   360:             beq.s *               * branch if Z set
                            	   361: 
                            	   362: 
                            	   363: *             EA = (An)+  - BYTE only
00:000022E8 307C0100        	   364:             move.l #$00000100,a0      * point to memory to address 0x100
00:000022EC 10FC0001        	   365:             move.b #$01,(a0)+         * populate test data
00:000022F0 10FC00FC        	   366:             move.b #$FC,(a0)+         * populate test data
00:000022F4 10FC0080        	   367:             move.b #$80,(a0)+         * populate test data
00:000022F8 307C0100        	   368:             move.l #$00000100,a0      * point to memory to address 0x100
00:000022FC 08180000        	   369:             btst.b #0,(a0)+
00:00002300 67FE            	   370:             beq.s *               * branch if Z set
00:00002302 08180001        	   371:             btst.b #1,(a0)+           *
00:00002306 66FE            	   372:             bne.s *               * branch if Z clear
00:00002308 08180007        	   373:             btst.b #7,(a0)+           *
00:0000230C 67FE            	   374:             beq.s *               * branch if Z set
                            	   375: 
                            	   376: 
                            	   377: *             EA = -(An)  - BYTE only
00:0000230E 307C0100        	   378:             move.l #$00000100,a0      * point to memory to address
00:00002312 10FC0080        	   379:             move.b #$80,(a0)+         * populate test data
00:00002316 10FC00FC        	   380:             move.b #$FC,(a0)+         * populate test data
00:0000231A 10FC0001        	   381:             move.b #$01,(a0)+         * populate test data
00:0000231E 307C0103        	   382:             move.l #$00000103,a0      * point to memory to address
00:00002322 08200000        	   383:             btst.b #0,-(a0)
00:00002326 67FE            	   384:             beq.s *               * branch if Z set
00:00002328 08200001        	   385:             btst.b #1,-(a0)           *
00:0000232C 66FE            	   386:             bne.s *               * branch if Z clear
00:0000232E 08200007        	   387:             btst.b #7,-(a0)           *
00:00002332 67FE            	   388:             beq.s *               * branch if Z set
                            	   389: 
                            	   390: 
                            	   391: *             EA = n(An)  - BYTE only
00:00002334 307C0100        	   392:             move.l #$00000100,a0      * point to memory to address
00:00002338 10FC0001        	   393:             move.b #$01,(a0)+         * populate test data
00:0000233C 10FC00FC        	   394:             move.b #$FC,(a0)+         * populate test data
00:00002340 10FC0080        	   395:             move.b #$80,(a0)+         * populate test data
00:00002344 307C0100        	   396:             move.l #$00000100,a0      * point to memory to address
00:00002348 08100000        	   397:             btst.b #0,0(a0)
00:0000234C 67FE            	   398:             beq.s *               * branch if Z set
00:0000234E 082800010001    	   399:             btst.b #1,1(a0)           *
00:00002354 66FE            	   400:             bne.s *               * branch if Z clear
00:00002356 082800070002    	   401:             btst.b #7,2(a0)           *
00:0000235C 67FE            	   402:             beq.s *               * branch if Z set
                            	   403: 
                            	   404: 
                            	   405: *             EA = n(An,R.W)  - BYTE only
00:0000235E 307C0100        	   406:             move.l #$00000100,a0      * point to memory to address
00:00002362 93C9            	   407:             move.l #$00000000,a1      * point to memory to address
00:00002364 347C0001        	   408:             move.l #$00000001,a2      * point to memory to address
00:00002368 7000            	   409:             moveq  #$00000000,d0      * point to memory to address
00:0000236A 7201            	   410:             moveq  #$00000001,d1      * point to memory to address
00:0000236C 083000000000    	   411:             btst.b #0,0(a0,d0.w)
00:00002372 67FE            	   412:             beq.s *               * branch if Z set
00:00002374 083000011000    	   413:             btst.b #1,0(a0,d1.w)      *
00:0000237A 66FE            	   414:             bne.s *               * branch if Z clear
00:0000237C 083000071001    	   415:             btst.b #7,1(a0,d1.w)      *
00:00002382 67FE            	   416:             beq.s *               * branch if Z set
                            	   417: *             EA = n(An,R.L)  - BYTE only
00:00002384 083000000800    	   418:             btst.b #0,0(a0,d0.l)
00:0000238A 67FE            	   419:             beq.s *               * branch if Z set
00:0000238C 083000011800    	   420:             btst.b #1,0(a0,d1.l)      *
00:00002392 66FE            	   421:             bne.s *               * branch if Z clear
00:00002394 083000071801    	   422:             btst.b #7,1(a0,d1.l)      *
00:0000239A 67FE            	   423:             beq.s *               * branch if Z set
                            	   424: *             EA = n(An,A.W)  - BYTE only
00:0000239C 083000009000    	   425:             btst.b #0,0(a0,a1.w)
00:000023A2 67FE            	   426:             beq.s *               * branch if Z set
00:000023A4 08300001A000    	   427:             btst.b #1,0(a0,a2.w)      *
00:000023AA 66FE            	   428:             bne.s *               * branch if Z clear
00:000023AC 08300007A001    	   429:             btst.b #7,1(a0,a2.w)      *
00:000023B2 67FE            	   430:             beq.s *               * branch if Z set
                            	   431: *             EA = n(An,A.L)  - BYTE only
00:000023B4 083000009800    	   432:             btst.b #0,0(a0,a1.l)
00:000023BA 67FE            	   433:             beq.s *               * branch if Z set
00:000023BC 08300001A800    	   434:             btst.b #1,0(a0,a2.l)      *
00:000023C2 66FE            	   435:             bne.s *               * branch if Z clear
00:000023C4 08300007A801    	   436:             btst.b #7,1(a0,a2.l)      *
00:000023CA 67FE            	   437:             beq.s *               * branch if Z set
                            	   438: 
                            	   439: 
                            	   440: *             EA = x.W  - BYTE only
00:000023CC 083800000100    	   441:             btst.b #0,$0100
00:000023D2 67FE            	   442:             beq.s *               * branch if Z set
00:000023D4 083800010101    	   443:             btst.b #1,$0101           *
00:000023DA 66FE            	   444:             bne.s *               * branch if Z clear
00:000023DC 083800070102    	   445:             btst.b #7,$0102           *
00:000023E2 67FE            	   446:             beq.s *               * branch if Z set
                            	   447: 
                            	   448: 
                            	   449: *             EA = x.L  - BYTE only
00:000023E4 207C0000F100    	   450:             move.l #$F100,a0      * point to memory to address 0x100
00:000023EA 10FC0001        	   451:             move.b #$01,(a0)+         * populate test data
00:000023EE 10FC00FC        	   452:             move.b #$FC,(a0)+         * populate test data
00:000023F2 10FC0080        	   453:             move.b #$80,(a0)+         * populate test data
00:000023F6 083900000000F100	   454:             btst.b #0,$F100
00:000023FE 67FE            	   455:             beq.s *               * branch if Z set
00:00002400 083900010000F101	   456:             btst.b #1,$F101       *
00:00002408 66FE            	   457:             bne.s *               * branch if Z clear
00:0000240A 083900070000F102	   458:             btst.b #7,$F102       *
00:00002412 67FE            	   459:             beq.s *               * branch if Z set
                            	   460: 
                            	   461: 
                            	   462: *             EA = x(PC)  - BYTE only
00:00002414 4BFAFE9E        	   463:             lea op_BTST(pc),a5
00:00002418 083A0000FE98    	   464:             btst.b #0,op_BTST(pc)
00:0000241E 66FE            	   465:             bne.s *               * branch if Z clear
00:00002420 083A0003001A    	   466:             btst.b #3,op_BTST0(pc)     *
00:00002426 67FE            	   467:             beq.s *               * branch if Z set
00:00002428 083A00060074    	   468:             btst.b #6,op_BTST12(pc)    *
00:0000242E 67FE            	   469:             beq.s *               * branch if Z set
                            	   470: 
                            	   471: 
                            	   472: *             EA = n(PC,R.W)  - BYTE only
00:00002430 307C0100        	   473:             move.l #$00000100,a0      * point to memory to address
00:00002434 93C9            	   474:             move.l #$00000000,a1      * point to memory to address
00:00002436 347C0001        	   475:             move.l #$00000001,a2      * point to memory to address
00:0000243A 7000            	   476:             moveq  #$00000000,d0      * point to memory to address
00:0000243C 7201            	   477:             moveq  #$00000001,d1      * point to memory to address
                            	   478: 
00:0000243E 083B000000FC    	   479: op_BTST0:   btst.b #0,op_BTST0(pc,d0.w)
00:00002444 66FE            	   480:             bne.s *               * branch if Z clear
                            	   481: 
00:00002446 4BFB1002        	   482:             lea op_BTST1(pc,d1.w),a5
00:0000244A 083B000110FC    	   483: op_BTST1:   btst.b #1,op_BTST1(pc,d1.w)      *
00:00002450 67FE            	   484:             beq.s *               * branch if Z set
00:00002452 083B000710FC    	   485: op_BTST2:   btst.b #7,op_BTST2(pc,d1.w)      *
00:00002458 66FE            	   486:             bne.s *               * branch if Z clear
                            	   487: *             EA = n(PC,R.L)  - BYTE only
00:0000245A 083B000008FC    	   488: op_BTST3:   btst.b #0,op_BTST3(pc,d0.l)
00:00002460 66FE            	   489:             bne.s *               * branch if Z clear
00:00002462 083B000118FC    	   490: op_BTST4:   btst.b #1,op_BTST4(pc,d1.l)      *
00:00002468 67FE            	   491:             beq.s *               * branch if Z set
00:0000246A 083B000718FC    	   492: op_BTST5:   btst.b #7,op_BTST5(pc,d1.l)      *
00:00002470 66FE            	   493:             bne.s *               * branch if Z clear
                            	   494: *             EA = n(PC,A.W)  - BYTE only
00:00002472 083B000090FC    	   495: op_BTST6    btst.b #0,op_BTST6(pc,a1.w)
00:00002478 66FE            	   496:             bne.s *               * branch if Z clear
00:0000247A 083B0001A0FC    	   497: op_BTST7:   btst.b #1,op_BTST7(pc,a2.w)      *
00:00002480 67FE            	   498:             beq.s *               * branch if Z set
00:00002482 083B0007A0FC    	   499: op_BTST8:   btst.b #7,op_BTST8(pc,a2.w)      *
00:00002488 66FE            	   500:             bne.s *               * branch if Z clear
                            	   501: *             EA = n(PC,A.L)  - BYTE only
00:0000248A 083B000098FC    	   502: op_BTST9:   btst.b #0,op_BTST9(pc,a1.l)
00:00002490 66FE            	   503:             bne.s *               * branch if Z clear
00:00002492 083B0001A8FC    	   504: op_BTST10:  btst.b #1,op_BTST10(pc,a2.l)      *
00:00002498 67FE            	   505:             beq.s *               * branch if Z set
00:0000249A 083B0007A8FC    	   506: op_BTST11:  btst.b #7,op_BTST11(pc,a2.l)      *
00:000024A0 66FE            	   507: op_BTST12:  bne.s *               * branch if Z clear
                            	   508: 
                            	   509: 
                            	   510: 
                            	   511: * Bit Number.s Dynamic
                            	   512: 
                            	   513: *             EA = Dn  - LONG only
00:000024A2 203C80000001    	   514:             move.l #$80000001,d0      * populate test data
00:000024A8 7A00            	   515:             move.l #0,d5              * populate bit.s number to test
00:000024AA 7C01            	   516:             move.l #1,d6              * populate bit.s number to test
00:000024AC 7E1F            	   517:             move.l #31,d7              * populate bit.s number to test
                            	   518: 
00:000024AE 0B00            	   519:             btst.l d5,d0
00:000024B0 67FE            	   520:             beq.s *               * branch if Z set
00:000024B2 0D00            	   521:             btst.l d6,d0              *
00:000024B4 66FE            	   522:             bne.s *               * branch if Z clear
00:000024B6 0F00            	   523:             btst.l d7,d0             *
00:000024B8 67FE            	   524:             beq.s *               * branch if Z set
                            	   525: 
                            	   526: 
                            	   527: *             EA = (An)  - BYTE only
00:000024BA 7A00            	   528:             move.l #0,d5              * populate bit.s number to test
00:000024BC 7C01            	   529:             move.l #1,d6              * populate bit.s number to test
00:000024BE 7E07            	   530:             move.l #7,d7              * populate bit.s number to test
00:000024C0 307C0100        	   531:             move.l #$00000100,a0      * point to memory to address 0x100
00:000024C4 10BC0081        	   532:             move.b #$81,(a0)          * populate test data
00:000024C8 1210            	   533:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:000024CA 0B10            	   534:             btst.b d5,(a0)
00:000024CC 67FE            	   535:             beq.s *               * branch if Z set
00:000024CE 0D10            	   536:             btst.b d6,(a0)            *
00:000024D0 66FE            	   537:             bne.s *               * branch if Z clear
00:000024D2 0F10            	   538:             btst.b d7,(a0)            *
00:000024D4 67FE            	   539:             beq.s *               * branch if Z set
                            	   540: 
                            	   541: * ---
                            	   542: 
                            	   543: 
                            	   544: *             EA = (An)+  - BYTE only
00:000024D6 307C0100        	   545:             move.l #$00000100,a0      * point to memory to address 0x100
00:000024DA 10FC0001        	   546:             move.b #$01,(a0)+         * populate test data
00:000024DE 10FC00FC        	   547:             move.b #$FC,(a0)+         * populate test data
00:000024E2 10FC0080        	   548:             move.b #$80,(a0)+         * populate test data
00:000024E6 307C0100        	   549:             move.l #$00000100,a0      * point to memory to address 0x100
00:000024EA 0B18            	   550:             btst.b d5,(a0)+
00:000024EC 67FE            	   551:             beq.s *               * branch if Z set
00:000024EE 0D18            	   552:             btst.b d6,(a0)+           *
00:000024F0 66FE            	   553:             bne.s *               * branch if Z clear
00:000024F2 0F18            	   554:             btst.b d7,(a0)+           *
00:000024F4 67FE            	   555:             beq.s *               * branch if Z set
                            	   556: 
                            	   557: 
                            	   558: *             EA = -(An)  - BYTE only
00:000024F6 307C0100        	   559:             move.l #$00000100,a0      * point to memory to address
00:000024FA 10FC0080        	   560:             move.b #$80,(a0)+         * populate test data
00:000024FE 10FC00FC        	   561:             move.b #$FC,(a0)+         * populate test data
00:00002502 10FC0001        	   562:             move.b #$01,(a0)+         * populate test data
00:00002506 307C0103        	   563:             move.l #$00000103,a0      * point to memory to address
00:0000250A 0B20            	   564:             btst.b d5,-(a0)
00:0000250C 67FE            	   565:             beq.s *               * branch if Z set
00:0000250E 0D20            	   566:             btst.b d6,-(a0)           *
00:00002510 66FE            	   567:             bne.s *               * branch if Z clear
00:00002512 0F20            	   568:             btst.b d7,-(a0)           *
00:00002514 67FE            	   569:             beq.s *               * branch if Z set
                            	   570: 
                            	   571: 
                            	   572: *             EA = n(An)  - BYTE only
00:00002516 307C0100        	   573:             move.l #$00000100,a0      * point to memory to address
00:0000251A 10FC0001        	   574:             move.b #$01,(a0)+         * populate test data
00:0000251E 10FC00FC        	   575:             move.b #$FC,(a0)+         * populate test data
00:00002522 10FC0080        	   576:             move.b #$80,(a0)+         * populate test data
00:00002526 307C0100        	   577:             move.l #$00000100,a0      * point to memory to address
00:0000252A 0B10            	   578:             btst.b d5,0(a0)
00:0000252C 67FE            	   579:             beq.s *               * branch if Z set
00:0000252E 0D280001        	   580:             btst.b d6,1(a0)           *
00:00002532 66FE            	   581:             bne.s *               * branch if Z clear
00:00002534 0F280002        	   582:             btst.b d7,2(a0)           *
00:00002538 67FE            	   583:             beq.s *               * branch if Z set
                            	   584: 
                            	   585: 
                            	   586: *             EA = n(An,R.W)  - BYTE only
00:0000253A 307C0100        	   587:             move.l #$00000100,a0      * point to memory to address
00:0000253E 93C9            	   588:             move.l #$00000000,a1      * point to memory to address
00:00002540 347C0001        	   589:             move.l #$00000001,a2      * point to memory to address
00:00002544 7000            	   590:             moveq  #$00000000,d0      * point to memory to address
00:00002546 7201            	   591:             moveq  #$00000001,d1      * point to memory to address
00:00002548 0B300000        	   592:             btst.b d5,0(a0,d0.w)
00:0000254C 67FE            	   593:             beq.s *               * branch if Z set
00:0000254E 0D301000        	   594:             btst.b d6,0(a0,d1.w)      *
00:00002552 66FE            	   595:             bne.s *               * branch if Z clear
00:00002554 0F301001        	   596:             btst.b d7,1(a0,d1.w)      *
00:00002558 67FE            	   597:             beq.s *               * branch if Z set
                            	   598: *             EA = n(An,R.L)  - BYTE only
00:0000255A 0B300800        	   599:             btst.b d5,0(a0,d0.l)
00:0000255E 67FE            	   600:             beq.s *               * branch if Z set
00:00002560 0D301800        	   601:             btst.b d6,0(a0,d1.l)      *
00:00002564 66FE            	   602:             bne.s *               * branch if Z clear
00:00002566 0F301801        	   603:             btst.b d7,1(a0,d1.l)      *
00:0000256A 67FE            	   604:             beq.s *               * branch if Z set
                            	   605: *             EA = n(An,A.W)  - BYTE only
00:0000256C 0B309000        	   606:             btst.b d5,0(a0,a1.w)
00:00002570 67FE            	   607:             beq.s *               * branch if Z set
00:00002572 0D30A000        	   608:             btst.b d6,0(a0,a2.w)      *
00:00002576 66FE            	   609:             bne.s *               * branch if Z clear
00:00002578 0F30A001        	   610:             btst.b d7,1(a0,a2.w)      *
00:0000257C 67FE            	   611:             beq.s *               * branch if Z set
                            	   612: *             EA = n(An,A.L)  - BYTE only
00:0000257E 0B309800        	   613:             btst.b d5,0(a0,a1.l)
00:00002582 67FE            	   614:             beq.s *               * branch if Z set
00:00002584 0D30A800        	   615:             btst.b d6,0(a0,a2.l)      *
00:00002588 66FE            	   616:             bne.s *               * branch if Z clear
00:0000258A 0F30A801        	   617:             btst.b d7,1(a0,a2.l)      *
00:0000258E 67FE            	   618:             beq.s *               * branch if Z set
                            	   619: 
                            	   620: 
                            	   621: *             EA = x.W  - BYTE only
00:00002590 0B380100        	   622:             btst.b d5,$0100
00:00002594 67FE            	   623:             beq.s *               * branch if Z set
00:00002596 0D380101        	   624:             btst.b d6,$0101           *
00:0000259A 66FE            	   625:             bne.s *               * branch if Z clear
00:0000259C 0F380102        	   626:             btst.b d7,$0102           *
00:000025A0 67FE            	   627:             beq.s *               * branch if Z set
                            	   628: 
                            	   629: 
                            	   630: *             EA = x.L  - BYTE only
00:000025A2 207C0000F100    	   631:             move.l #$F100,a0      * point to memory to address 0x100
00:000025A8 10FC0001        	   632:             move.b #$01,(a0)+         * populate test data
00:000025AC 10FC00FC        	   633:             move.b #$FC,(a0)+         * populate test data
00:000025B0 10FC0080        	   634:             move.b #$80,(a0)+         * populate test data
00:000025B4 0B390000F100    	   635:             btst.b d5,$F100
00:000025BA 67FE            	   636:             beq.s *               * branch if Z set
00:000025BC 0D390000F101    	   637:             btst.b d6,$F101       *
00:000025C2 66FE            	   638:             bne.s *               * branch if Z clear
00:000025C4 0F390000F102    	   639:             btst.b d7,$F102       *
00:000025CA 67FE            	   640:             beq.s *               * branch if Z set
                            	   641: 
                            	   642: 
                            	   643: *             EA = x(PC)  - BYTE only
00:000025CC 7C03            	   644:             move.l #3,d6              * populate bit.s number to test
00:000025CE 7E06            	   645:             move.l #6,d7              * populate bit.s number to test
00:000025D0 4BFAFCE2        	   646:             lea op_BTST(pc),a5
00:000025D4 0B3AFCDE        	   647:             btst.b d5,op_BTST(pc)
00:000025D8 66FE            	   648:             bne.s *               * branch if Z clear
00:000025DA 0D3AFE62        	   649:             btst.b d6,op_BTST0(pc)     *
00:000025DE 67FE            	   650:             beq.s *               * branch if Z set
00:000025E0 0F3AFEBE        	   651:             btst.b d7,op_BTST12(pc)    *
00:000025E4 67FE            	   652:             beq.s *               * branch if Z set
                            	   653: 
                            	   654: 
                            	   655: *             EA = n(PC,R.W)  - BYTE only
00:000025E6 307C0100        	   656:             move.l #$00000100,a0      * point to memory to address
00:000025EA 93C9            	   657:             move.l #$00000000,a1      * point to memory to address
00:000025EC 347C0001        	   658:             move.l #$00000001,a2      * point to memory to address
00:000025F0 7000            	   659:             moveq  #$00000000,d0      * point to memory to address
00:000025F2 7201            	   660:             moveq  #$00000001,d1      * point to memory to address
00:000025F4 7C01            	   661:             move.l #1,d6              * populate bit.s number to test
00:000025F6 7E07            	   662:             move.l #7,d7              * populate bit.s number to test
                            	   663: 
00:000025F8 0B3B00FE        	   664: op_BTST20:  btst.b d5,op_BTST20(pc,d0.w)
00:000025FC 67FE            	   665:             beq.s *               * branch if Z set
00:000025FE 4BFB1002        	   666:             lea op_BTST21(pc,d1.w),a5
00:00002602 0D3B10FE        	   667: op_BTST21:  btst.b d6,op_BTST21(pc,d1.w)      *
00:00002606 67FE            	   668:             beq.s *               * branch if Z set
00:00002608 0F3B10FE        	   669: op_BTST22:  btst.b d7,op_BTST22(pc,d1.w)      *
00:0000260C 66FE            	   670:             bne.s *               * branch if Z clear
                            	   671: *             EA = n(PC,R.L)  - BYTE only
00:0000260E 0B3B08FE        	   672: op_BTST23:  btst.b d5,op_BTST23(pc,d0.l)
00:00002612 67FE            	   673:             beq.s *               * branch if Z set
00:00002614 0D3B18FE        	   674: op_BTST24: btst.b d6,op_BTST24(pc,d1.l)      *
00:00002618 67FE            	   675:             beq.s *               * branch if Z set
00:0000261A 0F3B18FE        	   676: op_BTST25  btst.b d7,op_BTST25(pc,d1.l)      *
00:0000261E 66FE            	   677:             bne.s *               * branch if Z clear
                            	   678: *             EA = n(PC,A.W)  - BYTE only
00:00002620 0B3B90FE        	   679: op_BTST26   btst.b d5,op_BTST26(pc,a1.w)
00:00002624 67FE            	   680:             beq.s *               * branch if Z set
00:00002626 0D3BA0FE        	   681: op_BTST27:  btst.b d6,op_BTST27(pc,a2.w)      *
00:0000262A 67FE            	   682:             beq.s *               * branch if Z set
00:0000262C 0F3BA0FE        	   683: op_BTST28:  btst.b d7,op_BTST28(pc,a2.w)      *
00:00002630 66FE            	   684:             bne.s *               * branch if Z clear
                            	   685: *             EA = n(PC,A.L)  - BYTE only
00:00002632 0B3B98FE        	   686: op_BTST29:  btst.b d5,op_BTST29(pc,a1.l)
00:00002636 67FE            	   687:             beq.s *               * branch if Z set
00:00002638 0D3BA8FE        	   688: op_BTST30:  btst.b d6,op_BTST30(pc,a2.l)      *
00:0000263C 67FE            	   689:             beq.s *               * branch if Z set
00:0000263E 0F3BA8FE        	   690: op_BTST31:  btst.b d7,op_BTST31(pc,a2.l)      *
00:00002642 66FE            	   691: op_BTST32:  bne.s *               * branch if Z clear
                            	   692: 
                            	   693: *             EA = #x  - BYTE only
                            	   694: 
00:00002644 7A00            	   695:             move.l #0,d5              * populate bit.s number to test
00:00002646 7C03            	   696:             move.l #3,d6              * populate bit.s number to test
00:00002648 7E07            	   697:             move.l #7,d7              * populate bit.s number to test
                            	   698: 
00:0000264A 0B3C0088        	   699:             btst.b d5,#$88
00:0000264E 66FE            	   700:             bne.s *               * branch if Z clear
00:00002650 0D3C0088        	   701:             btst.b d6,#$88
00:00002654 67FE            	   702:             beq.s *               * branch if Z set
00:00002656 0F3C0088        	   703:             btst.b d7,#$88
00:0000265A 67FE            	   704:             beq.s *               * branch if Z set
                            	   705: 
                            	   706: 
00:0000265C 4E75            	   707:     rts
                            	   708: 
                            	   709: *-----------------------------------------------------------
                            	   710: *-----------------------------------------------------------
                            	   711: * OPCODE : BCHG
                            	   712: *-----------------------------------------------------------
                            	   713: *-----------------------------------------------------------
                            	   714: op_BCHG:
                            	   715: 
                            	   716: 
                            	   717: *  Bit Number.s Static
                            	   718: 
                            	   719: *             EA = Dn  - LONG only
00:0000265E 203C80000001    	   720:             move.l #$80000001,d0      * populate test data
00:00002664 08400000        	   721:             bchg.l #0,d0
00:00002668 67FE            	   722:             beq.s *               * branch if Z set
00:0000266A 08400001        	   723:             bchg.l #1,d0              *
00:0000266E 66FE            	   724:             bne.s *               * branch if Z clear
00:00002670 0840001F        	   725:             bchg.l #31,d0             *
00:00002674 67FE            	   726:             beq.s *               * branch if Z set
00:00002676 0C8000000002    	   727:             cmpi.l #$00000002,d0
00:0000267C 66FE            	   728:             bne.s *               * branch if Z clear
                            	   729: 
                            	   730: 
                            	   731: *             EA = (An)  - BYTE only
00:0000267E 307C0100        	   732:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002682 10BC0081        	   733:             move.b #$81,(a0)          * populate test data
00:00002686 1210            	   734:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002688 08500000        	   735:             bchg.b #0,(a0)
00:0000268C 67FE            	   736:             beq.s *               * branch if Z set
00:0000268E 08500001        	   737:             bchg.b #1,(a0)            *
00:00002692 66FE            	   738:             bne.s *               * branch if Z clear
00:00002694 08500007        	   739:             bchg.b #7,(a0)            *
00:00002698 67FE            	   740:             beq.s *               * branch if Z set
00:0000269A 0C100002        	   741:             cmpi.b #$02,(a0)
00:0000269E 66FE            	   742:             bne.s *               * branch if Z clear
                            	   743: 
                            	   744: *             EA = (An)+  - BYTE only
00:000026A0 307C0100        	   745:             move.l #$00000100,a0      * point to memory to address 0x100
00:000026A4 10FC0001        	   746:             move.b #$01,(a0)+         * populate test data
00:000026A8 10FC00FC        	   747:             move.b #$FC,(a0)+         * populate test data
00:000026AC 10FC0080        	   748:             move.b #$80,(a0)+         * populate test data
00:000026B0 307C0100        	   749:             move.l #$00000100,a0      * point to memory to address 0x100
00:000026B4 08580000        	   750:             bchg.b #0,(a0)+
00:000026B8 67FE            	   751:             beq.s *               * branch if Z set
00:000026BA 08580001        	   752:             bchg.b #1,(a0)+           *
00:000026BE 66FE            	   753:             bne.s *               * branch if Z clear
00:000026C0 08580007        	   754:             bchg.b #7,(a0)+           *
00:000026C4 67FE            	   755:             beq.s *               * branch if Z set
00:000026C6 307C0100        	   756:             move.l #$00000100,a0      * point to memory to address 0x100
00:000026CA 4A18            	   757:             cmpi.b #$00,(a0)+
00:000026CC 66FE            	   758:             bne.s *               * branch if Z clear
00:000026CE 0C1800FE        	   759:             cmpi.b #$FE,(a0)+
00:000026D2 66FE            	   760:             bne.s *               * branch if Z clear
00:000026D4 4A18            	   761:             cmpi.b #$00,(a0)+
00:000026D6 66FE            	   762:             bne.s *               * branch if Z clear
                            	   763: 
                            	   764: *             EA = -(An)  - BYTE only
00:000026D8 307C0100        	   765:             move.l #$00000100,a0      * point to memory to address
00:000026DC 10FC0080        	   766:             move.b #$80,(a0)+         * populate test data
00:000026E0 10FC00FC        	   767:             move.b #$FC,(a0)+         * populate test data
00:000026E4 10FC0001        	   768:             move.b #$01,(a0)+         * populate test data
00:000026E8 307C0103        	   769:             move.l #$00000103,a0      * point to memory to address
00:000026EC 08600000        	   770:             bchg.b #0,-(a0)
00:000026F0 67FE            	   771:             beq.s *               * branch if Z set
00:000026F2 08600001        	   772:             bchg.b #1,-(a0)           *
00:000026F6 66FE            	   773:             bne.s *               * branch if Z clear
00:000026F8 08600007        	   774:             bchg.b #7,-(a0)           *
00:000026FC 67FE            	   775:             beq.s *               * branch if Z set
00:000026FE 307C0103        	   776:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002702 4A20            	   777:             cmpi.b #$00,-(a0)
00:00002704 66FE            	   778:             bne.s *               * branch if Z clear
00:00002706 0C2000FE        	   779:             cmpi.b #$FE,-(a0)
00:0000270A 66FE            	   780:             bne.s *               * branch if Z clear
00:0000270C 4A20            	   781:             cmpi.b #$00,-(a0)
00:0000270E 66FE            	   782:             bne.s *               * branch if Z clear
                            	   783: 
                            	   784: 
                            	   785: *             EA = n(An)  - BYTE only
00:00002710 307C0100        	   786:             move.l #$00000100,a0      * point to memory to address
00:00002714 10FC0001        	   787:             move.b #$01,(a0)+         * populate test data
00:00002718 10FC00FC        	   788:             move.b #$FC,(a0)+         * populate test data
00:0000271C 10FC0080        	   789:             move.b #$80,(a0)+         * populate test data
00:00002720 307C0100        	   790:             move.l #$00000100,a0      * point to memory to address
00:00002724 08500000        	   791:             bchg.b #0,0(a0)
00:00002728 67FE            	   792:             beq.s *               * branch if Z set
00:0000272A 086800010001    	   793:             bchg.b #1,1(a0)           *
00:00002730 66FE            	   794:             bne.s *               * branch if Z clear
00:00002732 086800070002    	   795:             bchg.b #7,2(a0)           *
00:00002738 67FE            	   796:             beq.s *               * branch if Z set
00:0000273A 307C0100        	   797:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000273E 4A18            	   798:             cmpi.b #$00,(a0)+
00:00002740 66FE            	   799:             bne.s *               * branch if Z clear
00:00002742 0C1800FE        	   800:             cmpi.b #$FE,(a0)+
00:00002746 66FE            	   801:             bne.s *               * branch if Z clear
00:00002748 4A18            	   802:             cmpi.b #$00,(a0)+
00:0000274A 66FE            	   803:             bne.s *               * branch if Z clear
                            	   804: 
                            	   805: 
                            	   806: *             EA = n(An,D.W)  - BYTE only
00:0000274C 307C0100        	   807:             move.l #$00000100,a0      * point to memory to address
00:00002750 93C9            	   808:             move.l #$00000000,a1      * point to memory to address
00:00002752 347C0001        	   809:             move.l #$00000001,a2      * point to memory to address
00:00002756 7000            	   810:             moveq  #$00000000,d0      * point to memory to address
00:00002758 7201            	   811:             moveq  #$00000001,d1      * point to memory to address
00:0000275A 087000000000    	   812:             bchg.b #0,0(a0,d0.w)
00:00002760 66FE            	   813:             bne.s *               * branch if Z clear
00:00002762 087000011000    	   814:             bchg.b #1,0(a0,d1.w)      *
00:00002768 67FE            	   815:             beq.s *               * branch if Z set
00:0000276A 087000071001    	   816:             bchg.b #7,1(a0,d1.w)      *
00:00002770 66FE            	   817:             bne.s *               * branch if Z clear
                            	   818: *             EA = n(An,D.L)  - BYTE only
00:00002772 087000000800    	   819:             bchg.b #0,0(a0,d0.l)
00:00002778 67FE            	   820:             beq.s *               * branch if Z set
00:0000277A 087000011800    	   821:             bchg.b #1,0(a0,d1.l)      *
00:00002780 66FE            	   822:             bne.s *               * branch if Z clear
00:00002782 087000071801    	   823:             bchg.b #7,1(a0,d1.l)      *
00:00002788 67FE            	   824:             beq.s *               * branch if Z set
                            	   825: *             EA = n(An,A.W)  - BYTE only
00:0000278A 087000009000    	   826:             bchg.b #0,0(a0,a1.w)
00:00002790 66FE            	   827:             bne.s *               * branch if Z clear
00:00002792 08700001A000    	   828:             bchg.b #1,0(a0,a2.w)      *
00:00002798 67FE            	   829:             beq.s *               * branch if Z set
00:0000279A 08700007A001    	   830:             bchg.b #7,1(a0,a2.w)      *
00:000027A0 66FE            	   831:             bne.s *               * branch if Z clear
                            	   832: *             EA = n(An,A.L)  - BYTE only
00:000027A2 087000009800    	   833:             bchg.b #0,0(a0,a1.l)
00:000027A8 67FE            	   834:             beq.s *               * branch if Z set
00:000027AA 08700001A800    	   835:             bchg.b #1,0(a0,a2.l)      *
00:000027B0 66FE            	   836:             bne.s *               * branch if Z clear
00:000027B2 08700007A801    	   837:             bchg.b #7,1(a0,a2.l)      *
00:000027B8 67FE            	   838:             beq.s *               * branch if Z set
00:000027BA 307C0100        	   839:             move.l #$00000100,a0      * point to memory to address 0x100
00:000027BE 4A18            	   840:             cmpi.b #$00,(a0)+
00:000027C0 66FE            	   841:             bne.s *               * branch if Z clear
00:000027C2 0C1800FE        	   842:             cmpi.b #$FE,(a0)+
00:000027C6 66FE            	   843:             bne.s *               * branch if Z clear
00:000027C8 4A18            	   844:             cmpi.b #$00,(a0)+
00:000027CA 66FE            	   845:             bne.s *               * branch if Z clear
                            	   846: 
                            	   847: 
                            	   848: *             EA = x.W  - BYTE only
00:000027CC 087800000100    	   849:             bchg.b #0,$0100
00:000027D2 66FE            	   850:             bne.s *               * branch if Z clear
00:000027D4 087800010101    	   851:             bchg.b #1,$0101           *
00:000027DA 67FE            	   852:             beq.s *               * branch if Z set
00:000027DC 087800070102    	   853:             bchg.b #7,$0102           *
00:000027E2 66FE            	   854:             bne.s *               * branch if Z clear
00:000027E4 307C0100        	   855:             move.l #$00000100,a0      * point to memory to address 0x100
00:000027E8 0C180001        	   856:             cmpi.b #$01,(a0)+
00:000027EC 66FE            	   857:             bne.s *               * branch if Z clear
00:000027EE 0C1800FC        	   858:             cmpi.b #$FC,(a0)+
00:000027F2 66FE            	   859:             bne.s *               * branch if Z clear
00:000027F4 0C180080        	   860:             cmpi.b #$80,(a0)+
00:000027F8 66FE            	   861:             bne.s *               * branch if Z clear
                            	   862: 
                            	   863: *             EA = x.L  - BYTE only
00:000027FA 207C0000F100    	   864:             move.l #$F100,a0      * point to memory to address 0x100
00:00002800 10FC0001        	   865:             move.b #$01,(a0)+         * populate test data
00:00002804 10FC00FC        	   866:             move.b #$FC,(a0)+         * populate test data
00:00002808 10FC0080        	   867:             move.b #$80,(a0)+         * populate test data
00:0000280C 087900000000F100	   868:             bchg.b #0,$F100
00:00002814 67FE            	   869:             beq.s *               * branch if Z set
00:00002816 087900010000F101	   870:             bchg.b #1,$F101       *
00:0000281E 66FE            	   871:             bne.s *               * branch if Z clear
00:00002820 087900070000F102	   872:             bchg.b #7,$F102       *
00:00002828 67FE            	   873:             beq.s *               * branch if Z set
00:0000282A 307C0100        	   874:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000282E 0C180001        	   875:             cmpi.b #$01,(a0)+
00:00002832 66FE            	   876:             bne.s *               * branch if Z clear
00:00002834 0C1800FC        	   877:             cmpi.b #$FC,(a0)+
00:00002838 66FE            	   878:             bne.s *               * branch if Z clear
00:0000283A 0C180080        	   879:             cmpi.b #$80,(a0)+
00:0000283E 66FE            	   880:             bne.s *               * branch if Z clear
                            	   881: 
                            	   882: 
                            	   883: * Bit Number.s Dynamic
                            	   884: 
                            	   885: *             EA = Dn  - LONG only
00:00002840 203C80000001    	   886:             move.l #$80000001,d0      * populate test data
00:00002846 7A00            	   887:             move.l #0,d5              * populate bit.s number to test
00:00002848 7C01            	   888:             move.l #1,d6              * populate bit.s number to test
00:0000284A 7E1F            	   889:             move.l #31,d7              * populate bit.s number to test
                            	   890: 
00:0000284C 0B40            	   891:             bchg.l d5,d0
00:0000284E 67FE            	   892:             beq.s *               * branch if Z set
00:00002850 0D40            	   893:             bchg.l d6,d0              *
00:00002852 66FE            	   894:             bne.s *               * branch if Z clear
00:00002854 0F40            	   895:             bchg.l d7,d0             *
00:00002856 67FE            	   896:             beq.s *               * branch if Z set
00:00002858 0C8000000002    	   897:             cmpi.l #$00000002,d0
00:0000285E 66FE            	   898:             bne.s *               * branch if Z clear
                            	   899: 
                            	   900: 
                            	   901: *             EA = (An)  - BYTE only
00:00002860 7A00            	   902:             move.l #0,d5              * populate bit.s number to test
00:00002862 7C01            	   903:             move.l #1,d6              * populate bit.s number to test
00:00002864 7E07            	   904:             move.l #7,d7              * populate bit.s number to test
00:00002866 307C0100        	   905:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000286A 10BC0081        	   906:             move.b #$81,(a0)          * populate test data
00:0000286E 1210            	   907:             move.b (a0),d1            * Check to see if data in memory is 0x81
00:00002870 0B50            	   908:             bchg.b d5,(a0)
00:00002872 67FE            	   909:             beq.s *               * branch if Z set
00:00002874 0D50            	   910:             bchg.b d6,(a0)            *
00:00002876 66FE            	   911:             bne.s *               * branch if Z clear
00:00002878 0F50            	   912:             bchg.b d7,(a0)            *
00:0000287A 67FE            	   913:             beq.s *               * branch if Z set
00:0000287C 0C100002        	   914:             cmpi.b #$02,(a0)
00:00002880 66FE            	   915:             bne.s *               * branch if Z clear
                            	   916: 
                            	   917: 
                            	   918: *             EA = (An)+  - BYTE only
00:00002882 307C0100        	   919:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002886 10FC0001        	   920:             move.b #$01,(a0)+         * populate test data
00:0000288A 10FC00FC        	   921:             move.b #$FC,(a0)+         * populate test data
00:0000288E 10FC0080        	   922:             move.b #$80,(a0)+         * populate test data
00:00002892 307C0100        	   923:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002896 0B58            	   924:             bchg.b d5,(a0)+
00:00002898 67FE            	   925:             beq.s *               * branch if Z set
00:0000289A 0D58            	   926:             bchg.b d6,(a0)+           *
00:0000289C 66FE            	   927:             bne.s *               * branch if Z clear
00:0000289E 0F58            	   928:             bchg.b d7,(a0)+           *
00:000028A0 67FE            	   929:             beq.s *               * branch if Z set
00:000028A2 307C0100        	   930:             move.l #$00000100,a0      * point to memory to address 0x100
00:000028A6 4A18            	   931:             cmpi.b #$00,(a0)+
00:000028A8 66FE            	   932:             bne.s *               * branch if Z clear
00:000028AA 0C1800FE        	   933:             cmpi.b #$FE,(a0)+
00:000028AE 66FE            	   934:             bne.s *               * branch if Z clear
00:000028B0 4A18            	   935:             cmpi.b #$00,(a0)+
00:000028B2 66FE            	   936:             bne.s *               * branch if Z clear
                            	   937: 
                            	   938: *             EA = -(An)  - BYTE only
00:000028B4 307C0100        	   939:             move.l #$00000100,a0      * point to memory to address
00:000028B8 10FC0080        	   940:             move.b #$80,(a0)+         * populate test data
00:000028BC 10FC00FC        	   941:             move.b #$FC,(a0)+         * populate test data
00:000028C0 10FC0001        	   942:             move.b #$01,(a0)+         * populate test data
00:000028C4 307C0103        	   943:             move.l #$00000103,a0      * point to memory to address
00:000028C8 0B60            	   944:             bchg.b d5,-(a0)
00:000028CA 67FE            	   945:             beq.s *               * branch if Z set
00:000028CC 0D60            	   946:             bchg.b d6,-(a0)           *
00:000028CE 66FE            	   947:             bne.s *               * branch if Z clear
00:000028D0 0F60            	   948:             bchg.b d7,-(a0)           *
00:000028D2 67FE            	   949:             beq.s *               * branch if Z set
00:000028D4 307C0103        	   950:             move.l #$00000103,a0      * point to memory to address 0x100
00:000028D8 4A20            	   951:             cmpi.b #$00,-(a0)
00:000028DA 66FE            	   952:             bne.s *               * branch if Z clear
00:000028DC 0C2000FE        	   953:             cmpi.b #$FE,-(a0)
00:000028E0 66FE            	   954:             bne.s *               * branch if Z clear
00:000028E2 4A20            	   955:             cmpi.b #$00,-(a0)
00:000028E4 66FE            	   956:             bne.s *               * branch if Z clear
                            	   957: 
                            	   958: *             EA = n(An)  - BYTE only
00:000028E6 307C0100        	   959:             move.l #$00000100,a0      * point to memory to address
00:000028EA 10FC0001        	   960:             move.b #$01,(a0)+         * populate test data
00:000028EE 10FC00FC        	   961:             move.b #$FC,(a0)+         * populate test data
00:000028F2 10FC0080        	   962:             move.b #$80,(a0)+         * populate test data
00:000028F6 307C0100        	   963:             move.l #$00000100,a0      * point to memory to address
00:000028FA 0B50            	   964:             bchg.b d5,0(a0)
00:000028FC 67FE            	   965:             beq.s *               * branch if Z set
00:000028FE 0D680001        	   966:             bchg.b d6,1(a0)           *
00:00002902 66FE            	   967:             bne.s *               * branch if Z clear
00:00002904 0F680002        	   968:             bchg.b d7,2(a0)           *
00:00002908 67FE            	   969:             beq.s *               * branch if Z set
00:0000290A 307C0100        	   970:             move.l #$00000100,a0      * point to memory to address 0x100
00:0000290E 4A18            	   971:             cmpi.b #$00,(a0)+
00:00002910 66FE            	   972:             bne.s *               * branch if Z clear
00:00002912 0C1800FE        	   973:             cmpi.b #$FE,(a0)+
00:00002916 66FE            	   974:             bne.s *               * branch if Z clear
00:00002918 4A18            	   975:             cmpi.b #$00,(a0)+
00:0000291A 66FE            	   976:             bne.s *               * branch if Z clear
                            	   977: 
                            	   978: *             EA = n(An,R.W)  - BYTE only
00:0000291C 307C0100        	   979:             move.l #$00000100,a0      * point to memory to address
00:00002920 93C9            	   980:             move.l #$00000000,a1      * point to memory to address
00:00002922 347C0001        	   981:             move.l #$00000001,a2      * point to memory to address
00:00002926 7000            	   982:             moveq  #$00000000,d0      * point to memory to address
00:00002928 7201            	   983:             moveq  #$00000001,d1      * point to memory to address
00:0000292A 0B700000        	   984:             bchg.b d5,0(a0,d0.w)
00:0000292E 66FE            	   985:             bne.s *               * branch if Z clear
00:00002930 0D701000        	   986:             bchg.b d6,0(a0,d1.w)      *
00:00002934 67FE            	   987:             beq.s *               * branch if Z set
00:00002936 0F701001        	   988:             bchg.b d7,1(a0,d1.w)      *
00:0000293A 66FE            	   989:             bne.s *               * branch if Z clear
                            	   990: *             EA = n(An,R.L)  - BYTE only
00:0000293C 0B700800        	   991:             bchg.b d5,0(a0,d0.l)
00:00002940 67FE            	   992:             beq.s *               * branch if Z set
00:00002942 0D701800        	   993:             bchg.b d6,0(a0,d1.l)      *
00:00002946 66FE            	   994:             bne.s *               * branch if Z clear
00:00002948 0F701801        	   995:             bchg.b d7,1(a0,d1.l)      *
00:0000294C 67FE            	   996:             beq.s *               * branch if Z set
                            	   997: *             EA = n(An,A.W)  - BYTE only
00:0000294E 0B709000        	   998:             bchg.b d5,0(a0,a1.w)
00:00002952 66FE            	   999:             bne.s *               * branch if Z clear
00:00002954 0D70A000        	  1000:             bchg.b d6,0(a0,a2.w)      *
00:00002958 67FE            	  1001:             beq.s *               * branch if Z set
00:0000295A 0F70A001        	  1002:             bchg.b d7,1(a0,a2.w)      *
00:0000295E 66FE            	  1003:             bne.s *               * branch if Z clear
                            	  1004: *             EA = n(An,A.L)  - BYTE only
00:00002960 0B709800        	  1005:             bchg.b d5,0(a0,a1.l)
00:00002964 67FE            	  1006:             beq.s *               * branch if Z set
00:00002966 0D70A800        	  1007:             bchg.b d6,0(a0,a2.l)      *
00:0000296A 66FE            	  1008:             bne.s *               * branch if Z clear
00:0000296C 0F70A801        	  1009:             bchg.b d7,1(a0,a2.l)      *
00:00002970 67FE            	  1010:             beq.s *               * branch if Z set
00:00002972 4A18            	  1011:             cmpi.b #$00,(a0)+
00:00002974 66FE            	  1012:             bne.s *               * branch if Z clear
                            	  1013: 
                            	  1014: *             EA = x.W  - BYTE only
00:00002976 0B780100        	  1015:             bchg.b d5,$0100
00:0000297A 66FE            	  1016:             bne.s *               * branch if Z clear
00:0000297C 0D780101        	  1017:             bchg.b d6,$0101           *
00:00002980 67FE            	  1018:             beq.s *               * branch if Z set
00:00002982 0F780102        	  1019:             bchg.b d7,$0102           *
00:00002986 66FE            	  1020:             bne.s *               * branch if Z clear
00:00002988 0C1800FC        	  1021:             cmpi.b #$FC,(a0)+
00:0000298C 66FE            	  1022:             bne.s *               * branch if Z clear
                            	  1023: 
                            	  1024: *             EA = x.L  - BYTE only
00:0000298E 207C0000F100    	  1025:             move.l #$F100,a0      * point to memory to address 0x100
00:00002994 10FC0001        	  1026:             move.b #$01,(a0)+         * populate test data
00:00002998 10FC00FC        	  1027:             move.b #$FC,(a0)+         * populate test data
00:0000299C 10FC0080        	  1028:             move.b #$80,(a0)+         * populate test data
00:000029A0 0B790000F100    	  1029:             bchg.b d5,$F100
00:000029A6 67FE            	  1030:             beq.s *               * branch if Z set
00:000029A8 0D790000F101    	  1031:             bchg.b d6,$F101       *
00:000029AE 66FE            	  1032:             bne.s *               * branch if Z clear
00:000029B0 0F790000F102    	  1033:             bchg.b d7,$F102       *
00:000029B6 67FE            	  1034:             beq.s *               * branch if Z set
00:000029B8 207C0000F101    	  1035:             move.l #$F101,a0      * point to memory to address 0x100
00:000029BE 0C1000FE        	  1036:             cmpi.b #$FE,(a0)
00:000029C2 66FE            	  1037:             bne.s *               * branch if Z clear
                            	  1038: 
                            	  1039: 
00:000029C4 4E75            	  1040:     rts
                            	  1041: 
                            	  1042: *-----------------------------------------------------------
                            	  1043: *-----------------------------------------------------------
                            	  1044: * OPCODE : BCLR
                            	  1045: *-----------------------------------------------------------
                            	  1046: *-----------------------------------------------------------
                            	  1047: op_BCLR:
                            	  1048: 
                            	  1049: 
                            	  1050: *  Bit Number.s Static
                            	  1051: 
                            	  1052: *             EA = Dn  - LONG only
00:000029C6 203CFF0000FF    	  1053:             move.l #$FF0000FF,d0      * populate test data
00:000029CC 08800000        	  1054:             bclr.l #0,d0
00:000029D0 67FE            	  1055:             beq.s *               * branch if Z set
00:000029D2 08800001        	  1056:             bclr.l #1,d0              *
00:000029D6 67FE            	  1057:             beq.s *               * branch if Z set
00:000029D8 0880000F        	  1058:             bclr.l #15,d0             *
00:000029DC 66FE            	  1059:             bne.s *               * branch if Z clear
00:000029DE 0880001F        	  1060:             bclr.l #31,d0             *
00:000029E2 67FE            	  1061:             beq.s *               * branch if Z set
00:000029E4 0C807F0000FC    	  1062:             cmpi.l #$7F0000FC,d0
00:000029EA 66FE            	  1063:             bne.s *               * branch if Z clear
                            	  1064: 
                            	  1065: 
                            	  1066: *             EA = (An)  - BYTE only
00:000029EC 307C0100        	  1067:             move.l #$00000100,a0      * point to memory to address 0x100
00:000029F0 10BC000F        	  1068:             move.b #$0F,(a0)          * populate test data
00:000029F4 08900000        	  1069:             bclr.b #0,(a0)
00:000029F8 67FE            	  1070:             beq.s *               * branch if Z set
00:000029FA 08900007        	  1071:             bclr.b #7,(a0)            *
00:000029FE 66FE            	  1072:             bne.s *               * branch if Z clear
00:00002A00 0C10000E        	  1073:             cmpi.b #$0E,(a0)
00:00002A04 66FE            	  1074:             bne.s *               * branch if Z clear
                            	  1075: 
                            	  1076: *             EA = (An)+  - BYTE only
00:00002A06 307C0100        	  1077:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A0A 10FC0001        	  1078:             move.b #$01,(a0)+         * populate test data
00:00002A0E 4218            	  1079:             move.b #$00,(a0)+         * populate test data
00:00002A10 307C0100        	  1080:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A14 08980000        	  1081:             bclr.b #0,(a0)+
00:00002A18 67FE            	  1082:             beq.s *               * branch if Z set
00:00002A1A 08980001        	  1083:             bclr.b #1,(a0)+           *
00:00002A1E 66FE            	  1084:             bne.s *               * branch if Z clear
00:00002A20 307C0100        	  1085:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A24 4A18            	  1086:             cmpi.b #$00,(a0)+
00:00002A26 66FE            	  1087:             bne.s *               * branch if Z clear
00:00002A28 4A18            	  1088:             cmpi.b #$00,(a0)+
00:00002A2A 66FE            	  1089:             bne.s *               * branch if Z clear
                            	  1090: 
                            	  1091: 
                            	  1092: *             EA = -(An)  - BYTE only
00:00002A2C 307C0100        	  1093:             move.l #$00000100,a0      * point to memory to address
00:00002A30 10FC0001        	  1094:             move.b #$01,(a0)+         * populate test data
00:00002A34 10FC0080        	  1095:             move.b #$80,(a0)+         * populate test data
00:00002A38 08A00007        	  1096:             bclr.b #7,-(a0)
00:00002A3C 67FE            	  1097:             beq.s *               * branch if Z set
00:00002A3E 08A00000        	  1098:             bclr.b #0,-(a0)           *
00:00002A42 67FE            	  1099:             beq.s *               * branch if Z set
00:00002A44 307C0102        	  1100:             move.l #$00000102,a0      * point to memory to address 0x100
00:00002A48 4A20            	  1101:             cmpi.b #$00,-(a0)
00:00002A4A 66FE            	  1102:             bne.s *               * branch if Z clear
00:00002A4C 4A20            	  1103:             cmpi.b #$00,-(a0)
00:00002A4E 66FE            	  1104:             bne.s *               * branch if Z clear
                            	  1105: 
                            	  1106: 
                            	  1107: *             EA = n(An)  - BYTE only
00:00002A50 307C0100        	  1108:             move.l #$00000100,a0      * point to memory to address
00:00002A54 10FC00FF        	  1109:             move.b #$FF,(a0)+         * populate test data
00:00002A58 10FC00FF        	  1110:             move.b #$FF,(a0)+         * populate test data
00:00002A5C 307C0100        	  1111:             move.l #$00000100,a0      * point to memory to address
00:00002A60 08900000        	  1112:             bclr.b #0,0(a0)
00:00002A64 67FE            	  1113:             beq.s *               * branch if Z set
00:00002A66 08A800040001    	  1114:             bclr.b #4,1(a0)           *
00:00002A6C 67FE            	  1115:             beq.s *               * branch if Z set
00:00002A6E 307C0100        	  1116:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002A72 0C1800FE        	  1117:             cmpi.b #$FE,(a0)+
00:00002A76 66FE            	  1118:             bne.s *               * branch if Z clear
00:00002A78 0C1800EF        	  1119:             cmpi.b #$EF,(a0)+
00:00002A7C 66FE            	  1120:             bne.s *               * branch if Z clear
                            	  1121: 
                            	  1122: 
                            	  1123: *             EA = n(An,D.W)  - BYTE only
00:00002A7E 307C0100        	  1124:             move.l #$00000100,a0      * point to memory to address
00:00002A82 93C9            	  1125:             move.l #$00000000,a1      * point to memory to address
00:00002A84 347C0001        	  1126:             move.l #$00000001,a2      * point to memory to address
00:00002A88 7000            	  1127:             moveq  #$00000000,d0      * point to memory to address
00:00002A8A 7201            	  1128:             moveq  #$00000001,d1      * point to memory to address
00:00002A8C 10FC00FF        	  1129:             move.b #$FF,(a0)+         * populate test data
00:00002A90 10FC00FF        	  1130:             move.b #$FF,(a0)+         * populate test data
00:00002A94 307C0100        	  1131:             move.l #$00000100,a0      * point to memory to address
00:00002A98 08B000000000    	  1132:             bclr.b #0,0(a0,d0.w)
00:00002A9E 67FE            	  1133:             beq.s *               * branch if Z set
00:00002AA0 08B000011000    	  1134:             bclr.b #1,0(a0,d1.w)      *
00:00002AA6 67FE            	  1135:             beq.s *               * branch if Z set
00:00002AA8 08B000021001    	  1136:             bclr.b #2,1(a0,d1.w)      *
00:00002AAE 66FE            	  1137:             bne.s *               * branch if Z clear
                            	  1138: *             EA = n(An,D.L)  - BYTE only
00:00002AB0 08B000030800    	  1139:             bclr.b #3,0(a0,d0.l)
00:00002AB6 67FE            	  1140:             beq.s *               * branch if Z set
00:00002AB8 08B000041800    	  1141:             bclr.b #4,0(a0,d1.l)      *
00:00002ABE 67FE            	  1142:             beq.s *               * branch if Z set
00:00002AC0 08B000051801    	  1143:             bclr.b #5,1(a0,d1.l)      *
00:00002AC6 66FE            	  1144:             bne.s *               * branch if Z clear
                            	  1145: *             EA = n(An,A.W)  - BYTE only
00:00002AC8 08B000069000    	  1146:             bclr.b #6,0(a0,a1.w)
00:00002ACE 67FE            	  1147:             beq.s *               * branch if Z set
00:00002AD0 08B00001A000    	  1148:             bclr.b #1,0(a0,a2.w)      *
00:00002AD6 66FE            	  1149:             bne.s *               * branch if Z clear
00:00002AD8 08B00007A001    	  1150:             bclr.b #7,1(a0,a2.w)      *
00:00002ADE 67FE            	  1151:             beq.s *               * branch if Z set
                            	  1152: *             EA = n(An,A.L)  - BYTE only
00:00002AE0 08B000009800    	  1153:             bclr.b #0,0(a0,a1.l)
00:00002AE6 66FE            	  1154:             bne.s *               * branch if Z clear
00:00002AE8 08B00000A800    	  1155:             bclr.b #0,0(a0,a2.l)      *
00:00002AEE 67FE            	  1156:             beq.s *               * branch if Z set
00:00002AF0 08B00001A801    	  1157:             bclr.b #1,1(a0,a2.l)      *
00:00002AF6 66FE            	  1158:             bne.s *               * branch if Z clear
00:00002AF8 307C0100        	  1159:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002AFC 0C1800B6        	  1160:             cmpi.b #$B6,(a0)+
00:00002B00 66FE            	  1161:             bne.s *               * branch if Z clear
00:00002B02 0C1800EC        	  1162:             cmpi.b #$EC,(a0)+
00:00002B06 66FE            	  1163:             bne.s *               * branch if Z clear
00:00002B08 0C180059        	  1164:             cmpi.b #$59,(a0)+
00:00002B0C 67FE            	  1165:             beq.s *               * branch if Z set
                            	  1166: 
                            	  1167: 
                            	  1168: *             EA = x.W  - BYTE only
00:00002B0E 307C0100        	  1169:             move.l #$00000100,a0      * point to memory to address
00:00002B12 10FC00FF        	  1170:             move.b #$FF,(a0)+         * populate test data
00:00002B16 08B800000100    	  1171:             bclr.b #0,$0100
00:00002B1C 67FE            	  1172:             beq.s *               * branch if Z set
00:00002B1E 08B800010100    	  1173:             bclr.b #1,$0100           *
00:00002B24 67FE            	  1174:             beq.s *               * branch if Z set
00:00002B26 307C0100        	  1175:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002B2A 0C1800FC        	  1176:             cmpi.b #$FC,(a0)+
00:00002B2E 66FE            	  1177:             bne.s *               * branch if Z clear
                            	  1178: 
                            	  1179: 
                            	  1180: *             EA = x.L  - BYTE only
00:00002B30 207C0000F100    	  1181:             move.l #$F100,a0      * point to memory to address 0x100
00:00002B36 10BC00FF        	  1182:             move.b #$FF,(a0)          * populate test data
00:00002B3A 08B900000000F100	  1183:             bclr.b #0,$F100
00:00002B42 67FE            	  1184:             beq.s *               * branch if Z set
00:00002B44 08B900010000F100	  1185:             bclr.b #1,$F100       *
00:00002B4C 67FE            	  1186:             beq.s *               * branch if Z set
00:00002B4E 08B900020000F100	  1187:             bclr.b #2,$F100       *
00:00002B56 67FE            	  1188:             beq.s *               * branch if Z set
00:00002B58 207C0000F100    	  1189:             move.l #$F100,a0      * point to memory to address 0x100
00:00002B5E 0C1800F8        	  1190:             cmpi.b #$F8,(a0)+
00:00002B62 66FE            	  1191:             bne.s *               * branch if Z clear
                            	  1192: 
                            	  1193: 
                            	  1194: * Bit Number.s Dynamic
                            	  1195: 
                            	  1196: *             EA = Dn  - LONG only
00:00002B64 203CFF00FF00    	  1197:             move.l #$FF00FF00,d0      * populate test data
00:00002B6A 7A00            	  1198:             move.l #0,d5              * populate bit.s number to test
00:00002B6C 7C01            	  1199:             move.l #1,d6              * populate bit.s number to test
00:00002B6E 7E1F            	  1200:             move.l #31,d7              * populate bit.s number to test
                            	  1201: 
00:00002B70 0B80            	  1202:             bclr.l d5,d0
00:00002B72 66FE            	  1203:             bne.s *               * branch if Z clear
00:00002B74 0D80            	  1204:             bclr.l d6,d0              *
00:00002B76 66FE            	  1205:             bne.s *               * branch if Z clear
00:00002B78 0F80            	  1206:             bclr.l d7,d0             *
00:00002B7A 67FE            	  1207:             beq.s *               * branch if Z set
00:00002B7C 0C807F00FF00    	  1208:             cmpi.l #$7F00FF00,d0
00:00002B82 66FE            	  1209:             bne.s *               * branch if Z clear
                            	  1210: 
                            	  1211: 
                            	  1212: *             EA = (An)  - BYTE only
00:00002B84 7A00            	  1213:             move.l #0,d5              * populate bit.s number to test
00:00002B86 7C01            	  1214:             move.l #1,d6              * populate bit.s number to test
00:00002B88 7E07            	  1215:             move.l #7,d7              * populate bit.s number to test
00:00002B8A 307C0100        	  1216:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002B8E 10BC0081        	  1217:             move.b #$81,(a0)          * populate test data
00:00002B92 0B90            	  1218:             bclr.b d5,(a0)
00:00002B94 67FE            	  1219:             beq.s *               * branch if Z set
00:00002B96 0D90            	  1220:             bclr.b d6,(a0)            *
00:00002B98 66FE            	  1221:             bne.s *               * branch if Z clear
00:00002B9A 0F90            	  1222:             bclr.b d7,(a0)            *
00:00002B9C 67FE            	  1223:             beq.s *               * branch if Z set
00:00002B9E 4A10            	  1224:             cmpi.b #$00,(a0)
00:00002BA0 66FE            	  1225:             bne.s *               * branch if Z clear
                            	  1226: 
                            	  1227: 
                            	  1228: *             EA = (An)+  - BYTE only
00:00002BA2 307C0100        	  1229:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002BA6 10FC0001        	  1230:             move.b #$01,(a0)+         * populate test data
00:00002BAA 10FC00FC        	  1231:             move.b #$FC,(a0)+         * populate test data
00:00002BAE 10FC0080        	  1232:             move.b #$80,(a0)+         * populate test data
00:00002BB2 307C0100        	  1233:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002BB6 0B98            	  1234:             bclr.b d5,(a0)+
00:00002BB8 67FE            	  1235:             beq.s *               * branch if Z set
00:00002BBA 0D98            	  1236:             bclr.b d6,(a0)+           *
00:00002BBC 66FE            	  1237:             bne.s *               * branch if Z clear
00:00002BBE 0F98            	  1238:             bclr.b d7,(a0)+           *
00:00002BC0 67FE            	  1239:             beq.s *               * branch if Z set
00:00002BC2 307C0100        	  1240:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002BC6 4A18            	  1241:             cmpi.b #$00,(a0)+
00:00002BC8 66FE            	  1242:             bne.s *               * branch if Z clear
00:00002BCA 0C1800FC        	  1243:             cmpi.b #$FC,(a0)+
00:00002BCE 66FE            	  1244:             bne.s *               * branch if Z clear
00:00002BD0 4A18            	  1245:             cmpi.b #$00,(a0)+
00:00002BD2 66FE            	  1246:             bne.s *               * branch if Z clear
                            	  1247: 
                            	  1248: *             EA = -(An)  - BYTE only
00:00002BD4 307C0100        	  1249:             move.l #$00000100,a0      * point to memory to address
00:00002BD8 10FC0080        	  1250:             move.b #$80,(a0)+         * populate test data
00:00002BDC 10FC00FC        	  1251:             move.b #$FC,(a0)+         * populate test data
00:00002BE0 10FC0001        	  1252:             move.b #$01,(a0)+         * populate test data
00:00002BE4 307C0103        	  1253:             move.l #$00000103,a0      * point to memory to address
00:00002BE8 0BA0            	  1254:             bclr.b d5,-(a0)
00:00002BEA 67FE            	  1255:             beq.s *               * branch if Z set
00:00002BEC 0DA0            	  1256:             bclr.b d6,-(a0)           *
00:00002BEE 66FE            	  1257:             bne.s *               * branch if Z clear
00:00002BF0 0FA0            	  1258:             bclr.b d7,-(a0)           *
00:00002BF2 67FE            	  1259:             beq.s *               * branch if Z set
00:00002BF4 307C0103        	  1260:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002BF8 4A20            	  1261:             cmpi.b #$00,-(a0)
00:00002BFA 66FE            	  1262:             bne.s *               * branch if Z clear
00:00002BFC 0C2000FC        	  1263:             cmpi.b #$FC,-(a0)
00:00002C00 66FE            	  1264:             bne.s *               * branch if Z clear
00:00002C02 4A20            	  1265:             cmpi.b #$00,-(a0)
00:00002C04 66FE            	  1266:             bne.s *               * branch if Z clear
                            	  1267: 
                            	  1268: *             EA = n(An)  - BYTE only
00:00002C06 307C0100        	  1269:             move.l #$00000100,a0      * point to memory to address
00:00002C0A 10FC0001        	  1270:             move.b #$01,(a0)+         * populate test data
00:00002C0E 10FC00FC        	  1271:             move.b #$FC,(a0)+         * populate test data
00:00002C12 10FC0080        	  1272:             move.b #$80,(a0)+         * populate test data
00:00002C16 307C0100        	  1273:             move.l #$00000100,a0      * point to memory to address
00:00002C1A 0B90            	  1274:             bclr.b d5,0(a0)
00:00002C1C 67FE            	  1275:             beq.s *               * branch if Z set
00:00002C1E 0DA80001        	  1276:             bclr.b d6,1(a0)           *
00:00002C22 66FE            	  1277:             bne.s *               * branch if Z clear
00:00002C24 0FA80002        	  1278:             bclr.b d7,2(a0)           *
00:00002C28 67FE            	  1279:             beq.s *               * branch if Z set
00:00002C2A 307C0100        	  1280:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002C2E 4A18            	  1281:             cmpi.b #$00,(a0)+
00:00002C30 66FE            	  1282:             bne.s *               * branch if Z clear
00:00002C32 0C1800FC        	  1283:             cmpi.b #$FC,(a0)+
00:00002C36 66FE            	  1284:             bne.s *               * branch if Z clear
00:00002C38 4A18            	  1285:             cmpi.b #$00,(a0)+
00:00002C3A 66FE            	  1286:             bne.s *               * branch if Z clear
                            	  1287: 
                            	  1288: *             EA = n(An,R.W)  - BYTE only
00:00002C3C 307C0100        	  1289:             move.l #$00000100,a0      * point to memory to address
00:00002C40 10FC00FF        	  1290:             move.b #$FF,(a0)+         * populate test data
00:00002C44 10FC00FF        	  1291:             move.b #$FF,(a0)+         * populate test data
00:00002C48 10FC00FF        	  1292:             move.b #$FF,(a0)+         * populate test data
00:00002C4C 307C0103        	  1293:             move.l #$00000103,a0      * point to memory to address
00:00002C50 307C0100        	  1294:             move.l #$00000100,a0      * point to memory to address
00:00002C54 93C9            	  1295:             move.l #$00000000,a1      * point to memory to address
00:00002C56 347C0001        	  1296:             move.l #$00000001,a2      * point to memory to address
00:00002C5A 7000            	  1297:             moveq  #$00000000,d0      * point to memory to address
00:00002C5C 7201            	  1298:             moveq  #$00000001,d1      * point to memory to address
00:00002C5E 0BB00000        	  1299:             bclr.b d5,0(a0,d0.w)
00:00002C62 67FE            	  1300:             beq.s *               * branch if Z set
00:00002C64 0DB01000        	  1301:             bclr.b d6,0(a0,d1.w)      *
00:00002C68 67FE            	  1302:             beq.s *               * branch if Z set
00:00002C6A 0FB01001        	  1303:             bclr.b d7,1(a0,d1.w)      *
00:00002C6E 67FE            	  1304:             beq.s *               * branch if Z set
                            	  1305: *             EA = n(An,R.L)  - BYTE only
00:00002C70 0BB00800        	  1306:             bclr.b d5,0(a0,d0.l)
00:00002C74 66FE            	  1307:             bne.s *               * branch if Z clear
00:00002C76 0DB01800        	  1308:             bclr.b d6,0(a0,d1.l)      *
00:00002C7A 66FE            	  1309:             bne.s *               * branch if Z clear
00:00002C7C 0FB01801        	  1310:             bclr.b d7,1(a0,d1.l)      *
00:00002C80 66FE            	  1311:             bne.s *               * branch if Z clear
                            	  1312: *             EA = n(An,A.W)  - BYTE only
00:00002C82 0BB09000        	  1313:             bclr.b d5,0(a0,a1.w)
00:00002C86 66FE            	  1314:             bne.s *               * branch if Z clear
00:00002C88 0DB0A000        	  1315:             bclr.b d6,0(a0,a2.w)      *
00:00002C8C 66FE            	  1316:             bne.s *               * branch if Z clear
00:00002C8E 0FB0A001        	  1317:             bclr.b d7,1(a0,a2.w)      *
00:00002C92 66FE            	  1318:             bne.s *               * branch if Z clear
                            	  1319: *             EA = n(An,A.L)  - BYTE only
00:00002C94 0BB09800        	  1320:             bclr.b d5,0(a0,a1.l)
00:00002C98 66FE            	  1321:             bne.s *               * branch if Z clear
00:00002C9A 0DB0A800        	  1322:             bclr.b d6,0(a0,a2.l)      *
00:00002C9E 66FE            	  1323:             bne.s *               * branch if Z clear
00:00002CA0 0FB0A801        	  1324:             bclr.b d7,1(a0,a2.l)      *
00:00002CA4 66FE            	  1325:             bne.s *               * branch if Z clear
00:00002CA6 307C0100        	  1326:             move.l #$00000100,a0      * point to memory to address
00:00002CAA 0C1000FE        	  1327:             cmpi.b #$FE,(a0)
00:00002CAE 66FE            	  1328:             bne.s *               * branch if Z clear
                            	  1329: 
                            	  1330: *             EA = x.W  - BYTE only
00:00002CB0 307C0100        	  1331:             move.l #$00000100,a0      * point to memory to address
00:00002CB4 10FC00FF        	  1332:             move.b #$FF,(a0)+         * populate test data
00:00002CB8 10FC00FF        	  1333:             move.b #$FF,(a0)+         * populate test data
00:00002CBC 10FC00FF        	  1334:             move.b #$FF,(a0)+         * populate test data
00:00002CC0 0BB80100        	  1335:             bclr.b d5,$0100
00:00002CC4 67FE            	  1336:             beq.s *               * branch if Z set
00:00002CC6 0DB80101        	  1337:             bclr.b d6,$0101           *
00:00002CCA 67FE            	  1338:             beq.s *               * branch if Z set
00:00002CCC 0FB80102        	  1339:             bclr.b d7,$0102           *
00:00002CD0 67FE            	  1340:             beq.s *               * branch if Z set
00:00002CD2 307C0100        	  1341:             move.l #$00000100,a0      * point to memory to address
00:00002CD6 0C1800FE        	  1342:             cmpi.b #$FE,(a0)+
00:00002CDA 66FE            	  1343:             bne.s *               * branch if Z clear
                            	  1344: 
                            	  1345: *             EA = x.L  - BYTE only
00:00002CDC 207C0000F100    	  1346:             move.l #$F100,a0      * point to memory to address 0x100
00:00002CE2 10FC0001        	  1347:             move.b #$01,(a0)+         * populate test data
00:00002CE6 10FC00FC        	  1348:             move.b #$FC,(a0)+         * populate test data
00:00002CEA 10FC0080        	  1349:             move.b #$80,(a0)+         * populate test data
00:00002CEE 0BB90000F100    	  1350:             bclr.b d5,$F100
00:00002CF4 67FE            	  1351:             beq.s *               * branch if Z set
00:00002CF6 0DB90000F101    	  1352:             bclr.b d6,$F101       *
00:00002CFC 66FE            	  1353:             bne.s *               * branch if Z clear
00:00002CFE 0FB90000F102    	  1354:             bclr.b d7,$F102       *
00:00002D04 67FE            	  1355:             beq.s *               * branch if Z set
00:00002D06 207C0000F101    	  1356:             move.l #$F101,a0      * point to memory to address 0x100
00:00002D0C 0C1000FC        	  1357:             cmpi.b #$FC,(a0)
00:00002D10 66FE            	  1358:             bne.s *               * branch if Z clear
                            	  1359: 
                            	  1360: 
                            	  1361: 
00:00002D12 4E75            	  1362:     rts
                            	  1363: 
                            	  1364: *-----------------------------------------------------------
                            	  1365: *-----------------------------------------------------------
                            	  1366: * OPCODE : BSET
                            	  1367: *-----------------------------------------------------------
                            	  1368: *-----------------------------------------------------------
                            	  1369: op_BSET:
                            	  1370: 
                            	  1371: 
                            	  1372: *  Bit Number.s Static
                            	  1373: 
                            	  1374: *             EA = Dn  - LONG only
00:00002D14 7000            	  1375:             moveq  #$00000000,d0      * populate test data
00:00002D16 08C00000        	  1376:             bset.l #0,d0
00:00002D1A 66FE            	  1377:             bne.s *               * branch if Z clear
00:00002D1C 08C00001        	  1378:             bset.l #1,d0              *
00:00002D20 66FE            	  1379:             bne.s *               * branch if Z clear
00:00002D22 08C0000F        	  1380:             bset.l #15,d0             *
00:00002D26 66FE            	  1381:             bne.s *               * branch if Z clear
00:00002D28 08C0001F        	  1382:             bset.l #31,d0             *
00:00002D2C 66FE            	  1383:             bne.s *               * branch if Z clear
00:00002D2E 0C8080008003    	  1384:             cmpi.l #$80008003,d0
00:00002D34 66FE            	  1385:             bne.s *               * branch if Z clear
                            	  1386: 
                            	  1387: 
                            	  1388: *             EA = (An)  - BYTE only
00:00002D36 307C0100        	  1389:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D3A 4210            	  1390:             move.b #$00,(a0)          * populate test data
00:00002D3C 08D00000        	  1391:             bset.b #0,(a0)
00:00002D40 66FE            	  1392:             bne.s *               * branch if Z clear
00:00002D42 08D00007        	  1393:             bset.b #7,(a0)            *
00:00002D46 66FE            	  1394:             bne.s *               * branch if Z clear
00:00002D48 0C100081        	  1395:             cmpi.b #$81,(a0)
00:00002D4C 66FE            	  1396:             bne.s *               * branch if Z clear
                            	  1397: 
                            	  1398: *             EA = (An)+  - BYTE only
00:00002D4E 307C0100        	  1399:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D52 4218            	  1400:             move.b #$00,(a0)+         * populate test data
00:00002D54 4218            	  1401:             move.b #$00,(a0)+         * populate test data
00:00002D56 307C0100        	  1402:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D5A 08D80000        	  1403:             bset.b #0,(a0)+
00:00002D5E 66FE            	  1404:             bne.s *               * branch if Z clear
00:00002D60 08D80001        	  1405:             bset.b #1,(a0)+           *
00:00002D64 66FE            	  1406:             bne.s *               * branch if Z clear
00:00002D66 307C0100        	  1407:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002D6A 0C180001        	  1408:             cmpi.b #$01,(a0)+
00:00002D6E 66FE            	  1409:             bne.s *               * branch if Z clear
00:00002D70 0C180002        	  1410:             cmpi.b #$02,(a0)+
00:00002D74 66FE            	  1411:             bne.s *               * branch if Z clear
                            	  1412: 
                            	  1413: 
                            	  1414: *             EA = -(An)  - BYTE only
00:00002D76 307C0100        	  1415:             move.l #$00000100,a0      * point to memory to address
00:00002D7A 4218            	  1416:             move.b #$00,(a0)+         * populate test data
00:00002D7C 4218            	  1417:             move.b #$00,(a0)+         * populate test data
00:00002D7E 08E00007        	  1418:             bset.b #7,-(a0)
00:00002D82 66FE            	  1419:             bne.s *               * branch if Z clear
00:00002D84 08E00000        	  1420:             bset.b #0,-(a0)           *
00:00002D88 66FE            	  1421:             bne.s *               * branch if Z clear
00:00002D8A 307C0102        	  1422:             move.l #$00000102,a0      * point to memory to address 0x100
00:00002D8E 0C200080        	  1423:             cmpi.b #$80,-(a0)
00:00002D92 66FE            	  1424:             bne.s *               * branch if Z clear
00:00002D94 0C200001        	  1425:             cmpi.b #$01,-(a0)
00:00002D98 66FE            	  1426:             bne.s *               * branch if Z clear
                            	  1427: 
                            	  1428: 
                            	  1429: *             EA = n(An)  - BYTE only
00:00002D9A 307C0100        	  1430:             move.l #$00000100,a0      * point to memory to address
00:00002D9E 4218            	  1431:             move.b #$00,(a0)+         * populate test data
00:00002DA0 4218            	  1432:             move.b #$00,(a0)+         * populate test data
00:00002DA2 307C0100        	  1433:             move.l #$00000100,a0      * point to memory to address
00:00002DA6 08D00000        	  1434:             bset.b #0,0(a0)
00:00002DAA 66FE            	  1435:             bne.s *               * branch if Z clear
00:00002DAC 08E800040001    	  1436:             bset.b #4,1(a0)           *
00:00002DB2 66FE            	  1437:             bne.s *               * branch if Z clear
00:00002DB4 307C0100        	  1438:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002DB8 0C180001        	  1439:             cmpi.b #$01,(a0)+
00:00002DBC 66FE            	  1440:             bne.s *               * branch if Z clear
00:00002DBE 0C180010        	  1441:             cmpi.b #$10,(a0)+
00:00002DC2 66FE            	  1442:             bne.s *               * branch if Z clear
                            	  1443: 
                            	  1444: 
                            	  1445: *             EA = n(An,D.W)  - BYTE only
00:00002DC4 307C0100        	  1446:             move.l #$00000100,a0      * point to memory to address
00:00002DC8 93C9            	  1447:             move.l #$00000000,a1      * point to memory to address
00:00002DCA 347C0004        	  1448:             move.l #$00000004,a2      * point to memory to address
00:00002DCE 7000            	  1449:             moveq  #$00000000,d0      * point to memory to address
00:00002DD0 7201            	  1450:             moveq  #$00000001,d1      * point to memory to address
00:00002DD2 4218            	  1451:             move.b #$00,(a0)+         * populate test data
00:00002DD4 4218            	  1452:             move.b #$00,(a0)+         * populate test data
00:00002DD6 4218            	  1453:             move.b #$00,(a0)+         * populate test data
00:00002DD8 4218            	  1454:             move.b #$00,(a0)+         * populate test data
00:00002DDA 4218            	  1455:             move.b #$00,(a0)+         * populate test data
00:00002DDC 4218            	  1456:             move.b #$00,(a0)+         * populate test data
00:00002DDE 4218            	  1457:             move.b #$00,(a0)+         * populate test data
00:00002DE0 4218            	  1458:             move.b #$00,(a0)+         * populate test data
00:00002DE2 4218            	  1459:             move.b #$00,(a0)+         * populate test data
00:00002DE4 4218            	  1460:             move.b #$00,(a0)+         * populate test data
00:00002DE6 307C0100        	  1461:             move.l #$00000100,a0      * point to memory to address
00:00002DEA 08F000000000    	  1462:             bset.b #0,0(a0,d0.w)
00:00002DF0 66FE            	  1463:             bne.s *               * branch if Z clear
00:00002DF2 08F000011000    	  1464:             bset.b #1,0(a0,d1.w)      *
00:00002DF8 66FE            	  1465:             bne.s *               * branch if Z clear
00:00002DFA 08F000021001    	  1466:             bset.b #2,1(a0,d1.w)      *
00:00002E00 66FE            	  1467:             bne.s *               * branch if Z clear
                            	  1468: *             EA = n(An,D.L)  - BYTE only
00:00002E02 08F000030802    	  1469:             bset.b #3,2(a0,d0.l)
00:00002E08 66FE            	  1470:             bne.s *               * branch if Z clear
00:00002E0A 08F000041800    	  1471:             bset.b #4,0(a0,d1.l)      *
00:00002E10 66FE            	  1472:             bne.s *               * branch if Z clear
00:00002E12 08F000051801    	  1473:             bset.b #5,1(a0,d1.l)      *
00:00002E18 66FE            	  1474:             bne.s *               * branch if Z clear
                            	  1475: *             EA = n(An,A.W)  - BYTE only
00:00002E1A 08F000069000    	  1476:             bset.b #6,0(a0,a1.w)
00:00002E20 66FE            	  1477:             bne.s *               * branch if Z clear
00:00002E22 08F00001A000    	  1478:             bset.b #1,0(a0,a2.w)      *
00:00002E28 66FE            	  1479:             bne.s *               * branch if Z clear
00:00002E2A 08F00007A001    	  1480:             bset.b #7,1(a0,a2.w)      *
00:00002E30 66FE            	  1481:             bne.s *               * branch if Z clear
                            	  1482: *             EA = n(An,A.L)  - BYTE only
00:00002E32 08F00000A802    	  1483:             bset.b #0,2(a0,a2.l)
00:00002E38 66FE            	  1484:             bne.s *               * branch if Z clear
00:00002E3A 08F00000A803    	  1485:             bset.b #0,3(a0,a2.l)      *
00:00002E40 66FE            	  1486:             bne.s *               * branch if Z clear
00:00002E42 08F00001A804    	  1487:             bset.b #1,4(a0,a2.l)      *
00:00002E48 66FE            	  1488:             bne.s *               * branch if Z clear
00:00002E4A 307C0100        	  1489:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E4E 0C9841122C00    	  1490:             cmpi.l #$41122C00,(a0)+
00:00002E54 66FE            	  1491:             bne.s *               * branch if Z clear
00:00002E56 0C9802800101    	  1492:             cmpi.l #$02800101,(a0)+
00:00002E5C 66FE            	  1493:             bne.s *
                            	  1494: 
                            	  1495: 
                            	  1496: 
                            	  1497: *             EA = x.W  - BYTE only
00:00002E5E 307C0100        	  1498:             move.l #$00000100,a0      * point to memory to address
00:00002E62 4218            	  1499:             move.b #$00,(a0)+         * populate test data
00:00002E64 08F800000100    	  1500:             bset.b #0,$0100
00:00002E6A 66FE            	  1501:             bne.s *               * branch if Z clear
00:00002E6C 08F800010100    	  1502:             bset.b #1,$0100           *
00:00002E72 66FE            	  1503:             bne.s *               * branch if Z clear
00:00002E74 307C0100        	  1504:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002E78 0C180003        	  1505:             cmpi.b #$03,(a0)+
00:00002E7C 66FE            	  1506:             bne.s *
                            	  1507: 
                            	  1508: 
                            	  1509: *             EA = x.L  - BYTE only
00:00002E7E 207C0000F100    	  1510:             move.l #$F100,a0      * point to memory to address 0x100
00:00002E84 4210            	  1511:             move.b #$00,(a0)          * populate test data
00:00002E86 08F900000000F100	  1512:             bset.b #0,$F100
00:00002E8E 66FE            	  1513:             bne.s *               * branch if Z clear
00:00002E90 08F900010000F100	  1514:             bset.b #1,$F100       *
00:00002E98 66FE            	  1515:             bne.s *               * branch if Z clear
00:00002E9A 08F900020000F100	  1516:             bset.b #2,$F100       *
00:00002EA2 66FE            	  1517:             bne.s *               * branch if Z clear
00:00002EA4 207C0000F100    	  1518:             move.l #$F100,a0      * point to memory to address 0x100
00:00002EAA 0C180007        	  1519:             cmpi.b #$07,(a0)+
00:00002EAE 66FE            	  1520:             bne.s *
                            	  1521: 
                            	  1522: 
                            	  1523: * Bit Number.s Dynamic
                            	  1524: 
                            	  1525: *             EA = Dn  - LONG only
00:00002EB0 7000            	  1526:             moveq  #$00000000,d0      * populate test data
00:00002EB2 7A00            	  1527:             move.l #0,d5              * populate bit.s number to test
00:00002EB4 7C01            	  1528:             move.l #1,d6              * populate bit.s number to test
00:00002EB6 7E1F            	  1529:             move.l #31,d7              * populate bit.s number to test
                            	  1530: 
00:00002EB8 0BC0            	  1531:             bset.l d5,d0
00:00002EBA 66FE            	  1532:             bne.s *               * branch if Z clear
00:00002EBC 0DC0            	  1533:             bset.l d6,d0              *
00:00002EBE 66FE            	  1534:             bne.s *               * branch if Z clear
00:00002EC0 0FC0            	  1535:             bset.l d7,d0             *
00:00002EC2 66FE            	  1536:             bne.s *               * branch if Z clear
00:00002EC4 0C8080000003    	  1537:             cmpi.l #$80000003,d0
00:00002ECA 66FE            	  1538:             bne.s *               * branch if Z clear
                            	  1539: 
                            	  1540: 
                            	  1541: *             EA = (An)  - BYTE only
00:00002ECC 7A00            	  1542:             move.l #0,d5              * populate bit.s number to test
00:00002ECE 7C01            	  1543:             move.l #1,d6              * populate bit.s number to test
00:00002ED0 7E07            	  1544:             move.l #7,d7              * populate bit.s number to test
00:00002ED2 307C0100        	  1545:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002ED6 4210            	  1546:             move.b #$00,(a0)          * populate test data
00:00002ED8 0BD0            	  1547:             bset.b d5,(a0)
00:00002EDA 66FE            	  1548:             bne.s *               * branch if Z clear
00:00002EDC 0DD0            	  1549:             bset.b d6,(a0)            *
00:00002EDE 66FE            	  1550:             bne.s *               * branch if Z clear
00:00002EE0 0FD0            	  1551:             bset.b d7,(a0)            *
00:00002EE2 66FE            	  1552:             bne.s *               * branch if Z clear
00:00002EE4 0C100083        	  1553:             cmpi.b #$83,(a0)
00:00002EE8 66FE            	  1554:             bne.s *               * branch if Z clear
                            	  1555: 
                            	  1556: 
                            	  1557: *             EA = (An)+  - BYTE only
00:00002EEA 307C0100        	  1558:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002EEE 4218            	  1559:             move.b #$00,(a0)+         * populate test data
00:00002EF0 4218            	  1560:             move.b #$00,(a0)+         * populate test data
00:00002EF2 4218            	  1561:             move.b #$00,(a0)+         * populate test data
00:00002EF4 307C0100        	  1562:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002EF8 0BD8            	  1563:             bset.b d5,(a0)+
00:00002EFA 66FE            	  1564:             bne.s *               * branch if Z clear
00:00002EFC 0DD8            	  1565:             bset.b d6,(a0)+           *
00:00002EFE 66FE            	  1566:             bne.s *               * branch if Z clear
00:00002F00 0FD8            	  1567:             bset.b d7,(a0)+           *
00:00002F02 66FE            	  1568:             bne.s *               * branch if Z clear
00:00002F04 307C0100        	  1569:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002F08 0C180001        	  1570:             cmpi.b #$01,(a0)+
00:00002F0C 66FE            	  1571:             bne.s *               * branch if Z clear
00:00002F0E 0C180002        	  1572:             cmpi.b #$02,(a0)+
00:00002F12 66FE            	  1573:             bne.s *               * branch if Z clear
00:00002F14 0C180080        	  1574:             cmpi.b #$80,(a0)+
00:00002F18 66FE            	  1575:             bne.s *               * branch if Z clear
                            	  1576: 
                            	  1577: *             EA = -(An)  - BYTE only
00:00002F1A 307C0100        	  1578:             move.l #$00000100,a0      * point to memory to address
00:00002F1E 4218            	  1579:             move.b #$00,(a0)+         * populate test data
00:00002F20 4218            	  1580:             move.b #$00,(a0)+         * populate test data
00:00002F22 4218            	  1581:             move.b #$00,(a0)+         * populate test data
00:00002F24 307C0103        	  1582:             move.l #$00000103,a0      * point to memory to address
00:00002F28 0BE0            	  1583:             bset.b d5,-(a0)
00:00002F2A 66FE            	  1584:             bne.s *               * branch if Z clear
00:00002F2C 0DE0            	  1585:             bset.b d6,-(a0)           *
00:00002F2E 66FE            	  1586:             bne.s *               * branch if Z clear
00:00002F30 0FE0            	  1587:             bset.b d7,-(a0)           *
00:00002F32 66FE            	  1588:             bne.s *               * branch if Z clear
00:00002F34 307C0103        	  1589:             move.l #$00000103,a0      * point to memory to address 0x100
00:00002F38 0C200001        	  1590:             cmpi.b #$01,-(a0)
00:00002F3C 66FE            	  1591:             bne.s *               * branch if Z clear
00:00002F3E 0C200002        	  1592:             cmpi.b #$02,-(a0)
00:00002F42 66FE            	  1593:             bne.s *               * branch if Z clear
00:00002F44 0C200080        	  1594:             cmpi.b #$80,-(a0)
00:00002F48 66FE            	  1595:             bne.s *               * branch if Z clear
                            	  1596: 
                            	  1597: *             EA = n(An)  - BYTE only
00:00002F4A 307C0100        	  1598:             move.l #$00000100,a0      * point to memory to address
00:00002F4E 4218            	  1599:             move.b #$00,(a0)+         * populate test data
00:00002F50 4218            	  1600:             move.b #$00,(a0)+         * populate test data
00:00002F52 4218            	  1601:             move.b #$00,(a0)+         * populate test data
00:00002F54 307C0100        	  1602:             move.l #$00000100,a0      * point to memory to address
00:00002F58 0BD0            	  1603:             bset.b d5,0(a0)
00:00002F5A 66FE            	  1604:             bne.s *               * branch if Z clear
00:00002F5C 0DE80001        	  1605:             bset.b d6,1(a0)           *
00:00002F60 66FE            	  1606:             bne.s *               * branch if Z clear
00:00002F62 0FE80002        	  1607:             bset.b d7,2(a0)           *
00:00002F66 66FE            	  1608:             bne.s *               * branch if Z clear
00:00002F68 307C0100        	  1609:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002F6C 0C180001        	  1610:             cmpi.b #$01,(a0)+
00:00002F70 66FE            	  1611:             bne.s *               * branch if Z clear
00:00002F72 0C180002        	  1612:             cmpi.b #$02,(a0)+
00:00002F76 66FE            	  1613:             bne.s *               * branch if Z clear
00:00002F78 0C180080        	  1614:             cmpi.b #$80,(a0)+
00:00002F7C 66FE            	  1615:             bne.s *               * branch if Z clear
                            	  1616: 
                            	  1617: *             EA = n(An,R.W)  - BYTE only
00:00002F7E 307C0100        	  1618:             move.l #$00000100,a0      * point to memory to address
00:00002F82 4218            	  1619:             move.b #$00,(a0)+         * populate test data
00:00002F84 4218            	  1620:             move.b #$00,(a0)+         * populate test data
00:00002F86 4218            	  1621:             move.b #$00,(a0)+         * populate test data
00:00002F88 4218            	  1622:             move.b #$00,(a0)+         * populate test data
00:00002F8A 4218            	  1623:             move.b #$00,(a0)+         * populate test data
00:00002F8C 4218            	  1624:             move.b #$00,(a0)+         * populate test data
00:00002F8E 4218            	  1625:             move.b #$00,(a0)+         * populate test data
00:00002F90 4218            	  1626:             move.b #$00,(a0)+         * populate test data
00:00002F92 4218            	  1627:             move.b #$00,(a0)+         * populate test data
00:00002F94 4218            	  1628:             move.b #$00,(a0)+         * populate test data
00:00002F96 4218            	  1629:             move.b #$00,(a0)+         * populate test data
00:00002F98 4218            	  1630:             move.b #$00,(a0)+         * populate test data
00:00002F9A 307C0100        	  1631:             move.l #$00000100,a0      * point to memory to address
00:00002F9E 93C9            	  1632:             move.l #$00000000,a1      * point to memory to address
00:00002FA0 347C0001        	  1633:             move.l #$00000001,a2      * point to memory to address
00:00002FA4 7000            	  1634:             moveq  #$00000000,d0      * point to memory to address
00:00002FA6 7201            	  1635:             moveq  #$00000001,d1      * point to memory to address
00:00002FA8 0BF00000        	  1636:             bset.b d5,0(a0,d0.w)
00:00002FAC 66FE            	  1637:             bne.s *               * branch if Z clear
00:00002FAE 0DF01000        	  1638:             bset.b d6,0(a0,d1.w)      *
00:00002FB2 66FE            	  1639:             bne.s *               * branch if Z clear
00:00002FB4 0FF01001        	  1640:             bset.b d7,1(a0,d1.w)      *
00:00002FB8 66FE            	  1641:             bne.s *               * branch if Z clear
                            	  1642: *             EA = n(An,R.L)  - BYTE only
00:00002FBA 0BF00802        	  1643:             bset.b d5,2(a0,d0.l)
00:00002FBE 66FE            	  1644:             bne.s *               * branch if Z clear
00:00002FC0 0DF01803        	  1645:             bset.b d6,3(a0,d1.l)      *
00:00002FC4 66FE            	  1646:             bne.s *               * branch if Z clear
00:00002FC6 0FF01804        	  1647:             bset.b d7,4(a0,d1.l)      *
00:00002FCA 66FE            	  1648:             bne.s *               * branch if Z clear
                            	  1649: *             EA = n(An,A.W)  - BYTE only
00:00002FCC 0BF09005        	  1650:             bset.b d5,5(a0,a1.w)
00:00002FD0 66FE            	  1651:             bne.s *               * branch if Z clear
00:00002FD2 0DF0A006        	  1652:             bset.b d6,6(a0,a2.w)      *
00:00002FD6 66FE            	  1653:             bne.s *               * branch if Z clear
00:00002FD8 0FF0A007        	  1654:             bset.b d7,7(a0,a2.w)      *
00:00002FDC 66FE            	  1655:             bne.s *               * branch if Z clear
                            	  1656: *             EA = n(An,A.L)  - BYTE only
00:00002FDE 0BF09808        	  1657:             bset.b d5,8(a0,a1.l)
00:00002FE2 66FE            	  1658:             bne.s *               * branch if Z clear
00:00002FE4 0DF0A809        	  1659:             bset.b d6,9(a0,a2.l)      *
00:00002FE8 66FE            	  1660:             bne.s *               * branch if Z clear
00:00002FEA 0FF0A80A        	  1661:             bset.b d7,10(a0,a2.l)      *
00:00002FEE 66FE            	  1662:             bne.s *               * branch if Z clear
00:00002FF0 307C0100        	  1663:             move.l #$00000100,a0      * point to memory to address 0x100
00:00002FF4 0C9801028100    	  1664:             cmpi.l #$01028100,(a0)+
00:00002FFA 66FE            	  1665:             bne.s *               * branch if Z clear
00:00002FFC 0C9802810002    	  1666:             cmpi.l #$02810002,(a0)+
00:00003002 66FE            	  1667:             bne.s *
                            	  1668: 
                            	  1669: 
                            	  1670: *             EA = x.W  - BYTE only
00:00003004 307C0100        	  1671:             move.l #$00000100,a0      * point to memory to address
00:00003008 4218            	  1672:             move.b #$00,(a0)+         * populate test data
00:0000300A 4218            	  1673:             move.b #$00,(a0)+         * populate test data
00:0000300C 4218            	  1674:             move.b #$00,(a0)+         * populate test data
00:0000300E 0BF80100        	  1675:             bset.b d5,$0100
00:00003012 66FE            	  1676:             bne.s *               * branch if Z clear
00:00003014 0DF80100        	  1677:             bset.b d6,$0100           *
00:00003018 66FE            	  1678:             bne.s *               * branch if Z clear
00:0000301A 0FF80100        	  1679:             bset.b d7,$0100           *
00:0000301E 66FE            	  1680:             bne.s *               * branch if Z clear
00:00003020 307C0100        	  1681:             move.l #$00000100,a0      * point to memory to address
00:00003024 0C180083        	  1682:             cmpi.b #$83,(a0)+
00:00003028 66FE            	  1683:             bne.s *               * branch if Z clear
                            	  1684: 
                            	  1685: *             EA = x.L  - BYTE only
00:0000302A 207C0000F100    	  1686:             move.l #$F100,a0      * point to memory to address 0x100
00:00003030 4218            	  1687:             move.b #$00,(a0)+         * populate test data
00:00003032 4218            	  1688:             move.b #$00,(a0)+         * populate test data
00:00003034 4218            	  1689:             move.b #$00,(a0)+         * populate test data
00:00003036 0BF90000F100    	  1690:             bset.b d5,$F100
00:0000303C 66FE            	  1691:             bne.s *               * branch if Z clear
00:0000303E 0DF90000F100    	  1692:             bset.b d6,$F100       *
00:00003044 66FE            	  1693:             bne.s *               * branch if Z clear
00:00003046 0FF90000F100    	  1694:             bset.b d7,$F100       *
00:0000304C 66FE            	  1695:             bne.s *               * branch if Z clear
00:0000304E 207C0000F100    	  1696:             move.l #$F100,a0      * point to memory to address 0x100
00:00003054 0C100083        	  1697:             cmpi.b #$83,(a0)
00:00003058 66FE            	  1698:             bne.s *               * branch if Z clear
                            	  1699: 
                            	  1700: 
00:0000305A 4E75            	  1701:     rts
                            	  1702: 
                            	  1703: *-----------------------------------------------------------
                            	  1704: *-----------------------------------------------------------
                            	  1705: * OPCODE : MOVEP
                            	  1706: *-----------------------------------------------------------
                            	  1707: *-----------------------------------------------------------
                            	  1708: op_MOVEP:
                            	  1709: 
                            	  1710: * Dn --> x(An)
00:0000305C 307C0100        	  1711:             move.l #$00000100,a0
00:00003060 203C12345678    	  1712:             move.l #$12345678,d0
00:00003066 223CAABBCCDD    	  1713:             move.l #$AABBCCDD,d1
00:0000306C 4290            	  1714:             move.l #0,(a0)
00:0000306E 42A80004        	  1715:             move.l #0,4(a0)
                            	  1716: 
00:00003072 01880000        	  1717:             movep.w d0,0(a0)      * even offset
00:00003076 03880001        	  1718:             movep.w d1,1(a0)      * odd offset
                            	  1719: 
00:0000307A 01C80004        	  1720:             movep.l d0,4(a0)      * even offset
00:0000307E 03C80005        	  1721:             movep.l d1,5(a0)      * odd offset
                            	  1722: 
00:00003082 0C9056CC78DD    	  1723:             cmpi.l #$56CC78DD,(a0)
00:00003088 66FE            	  1724:             bne.s *
00:0000308A 0CA812AA34BB0004	  1725:             cmpi.l #$12AA34BB,4(a0)
00:00003092 66FE            	  1726:             bne.s *
00:00003094 0CA856CC78DD0008	  1727:             cmpi.l #$56CC78DD,8(a0)
00:0000309C 66FE            	  1728:             bne.s *
                            	  1729: 
                            	  1730: 
                            	  1731: * x(An)--> Dn
00:0000309E 203C5A5A5A5A    	  1732:             move.l #$5a5a5a5a,d0
00:000030A4 223C5A5A5A5A    	  1733:             move.l #$5a5a5a5a,d1
00:000030AA 243C5A5A5A5A    	  1734:             move.l #$5a5a5a5a,d2
00:000030B0 263C5A5A5A5A    	  1735:             move.l #$5a5a5a5a,d3
                            	  1736: 
00:000030B6 01080000        	  1737:             movep.w 0(a0),d0      * even offset
00:000030BA 03080001        	  1738:             movep.w 1(a0),d1      * odd offset
                            	  1739: 
00:000030BE 05480004        	  1740:             movep.l 4(a0),d2      * even offset
00:000030C2 07480005        	  1741:             movep.l 5(a0),d3      * odd offset
                            	  1742: 
00:000030C6 0C805A5A5678    	  1743:             cmpi.l #$5a5a5678,d0
00:000030CC 66FE            	  1744:             bne.s *
00:000030CE 0C815A5ACCDD    	  1745:             cmpi.l #$5a5aCCDD,d1
00:000030D4 66FE            	  1746:             bne.s *
00:000030D6 0C8212345678    	  1747:             cmpi.l #$12345678,d2
00:000030DC 66FE            	  1748:             bne.s *
00:000030DE 0C83AABBCCDD    	  1749:             cmpi.l #$AABBCCDD,d3
00:000030E4 66FE            	  1750:             bne.s *
                            	  1751: 
00:000030E6 4E75            	  1752:             rts
                            	  1753: 
                            	  1754: 
                            	  1755: 
                            	  1756: *-----------------------------------------------------------
                            	  1757: *-----------------------------------------------------------
                            	  1758: * OPCODE : BOOL_I
                            	  1759: *-----------------------------------------------------------
                            	  1760: *-----------------------------------------------------------
                            	  1761: op_BOOL_I:
                            	  1762: 
                            	  1763: *     Dn -- BYTE
00:000030E8 203C12345678    	  1764:             move.l #$12345678,d0
00:000030EE 44FC000F        	  1765:             move.w #$000F,CCR          * pre-set Flags
00:000030F2 000000FF        	  1766:             ori.b  #$FF,d0
00:000030F6 0A00005A        	  1767:             eori.b #$5A,d0
00:000030FA 020000F0        	  1768:             andi.b #$F0,d0
00:000030FE 69FE            	  1769:             bvs.s *                       * Check V,C are cleared
00:00003100 65FE            	  1770:             bcs.s *
00:00003102 6AFE            	  1771:             bpl.s *                       * Verify if N flag is set
00:00003104 4200            	  1772:             andi.b #$00,d0
00:00003106 6BFE            	  1773:             bmi.s *                       * Verify if N flag is cleared
00:00003108 66FE            	  1774:             bne.s *                       * Verify if Z flag is set
                            	  1775: 
                            	  1776: *     Dn -- WORD
00:0000310A 223C12345678    	  1777:             move.l #$12345678,d1
00:00003110 44FC000F        	  1778:             move.w #$000F,CCR          * pre-set Flags
00:00003114 0041FFFF        	  1779:             ori.w  #$FFFF,d1
00:00003118 0A415A5A        	  1780:             eori.w #$5A5A,d1
00:0000311C 0241F0F0        	  1781:             andi.w #$F0F0,d1
00:00003120 69FE            	  1782:             bvs.s *                       * Check V,C are cleared
00:00003122 65FE            	  1783:             bcs.s *
00:00003124 6AFE            	  1784:             bpl.s *                       * Verify if N flag is set
00:00003126 4241            	  1785:             andi.w #$0000,d1
00:00003128 6BFE            	  1786:             bmi.s *                       * Verify if N flag is cleared
00:0000312A 66FE            	  1787:             bne.s *                       * Verify if Z flag is set
                            	  1788: 
                            	  1789: *     Dn -- LONG
00:0000312C 243C12345678    	  1790:             move.l #$12345678,d2
00:00003132 44FC000F        	  1791:             move.w #$000F,CCR          * pre-set Flags
00:00003136 0082FFFFFFFF    	  1792:             ori.l  #$FFFFFFFF,d2
00:0000313C 0A825A5A5A5A    	  1793:             eori.l #$5A5A5A5A,d2
00:00003142 0282F0F0F0F0    	  1794:             andi.l #$F0F0F0F0,d2
00:00003148 69FE            	  1795:             bvs.s *                       * Check V,C are cleared
00:0000314A 65FE            	  1796:             bcs.s *
00:0000314C 6AFE            	  1797:             bpl.s *                       * Verify if N flag is set
00:0000314E 4282            	  1798:             andi.l #$00000000,d2
00:00003150 6BFE            	  1799:             bmi.s *                       * Verify if N flag is cleared
00:00003152 66FE            	  1800:             bne.s *                       * Verify if Z flag is set
                            	  1801: 
                            	  1802: 
                            	  1803: *     (An) -- BYTE
00:00003154 307C0100        	  1804:             move.l #$00000100,a0
00:00003158 20BC12345678    	  1805:             move.l #$12345678,(a0)
00:0000315E 44FC000F        	  1806:             move.w #$000F,CCR          * pre-set Flags
00:00003162 001000FF        	  1807:             ori.b  #$FF,(a0)
00:00003166 0A10005A        	  1808:             eori.b #$5A,(a0)
00:0000316A 021000F0        	  1809:             andi.b #$F0,(a0)
00:0000316E 69FE            	  1810:             bvs.s *                       * Check V,C are cleared
00:00003170 65FE            	  1811:             bcs.s *
00:00003172 6AFE            	  1812:             bpl.s *                       * Verify if N flag is set
00:00003174 4210            	  1813:             andi.b #$00,(a0)
00:00003176 6BFE            	  1814:             bmi.s *                       * Verify if N flag is cleared
00:00003178 66FE            	  1815:             bne.s *                       * Verify if Z flag is set
00:0000317A 4A10            	  1816:             cmpi.b #$00,(a0)
00:0000317C 66FE            	  1817:             bne.s *                       * Verify if Z flag is set
                            	  1818: 
                            	  1819: *     (An) -- WORD
00:0000317E 20BC12345678    	  1820:             move.l #$12345678,(a0)
00:00003184 44FC000F        	  1821:             move.w #$000F,CCR          * pre-set Flags
00:00003188 0050FFFF        	  1822:             ori.w  #$FFFF,(a0)
00:0000318C 0A505A5A        	  1823:             eori.w #$5A5A,(a0)
00:00003190 0250F0F0        	  1824:             andi.w #$F0F0,(a0)
00:00003194 69FE            	  1825:             bvs.s *                       * Check V,C are cleared
00:00003196 65FE            	  1826:             bcs.s *
00:00003198 6AFE            	  1827:             bpl.s *                       * Verify if N flag is set
00:0000319A 4250            	  1828:             andi.w #$0000,(a0)
00:0000319C 6BFE            	  1829:             bmi.s *                       * Verify if N flag is cleared
00:0000319E 66FE            	  1830:             bne.s *                       * Verify if Z flag is set
00:000031A0 4A50            	  1831:             cmpi.w #$00,(a0)
00:000031A2 66FE            	  1832:             bne.s *                       * Verify if Z flag is set
                            	  1833: 
                            	  1834: *     (An) -- LONG
00:000031A4 20BC12345678    	  1835:             move.l #$12345678,(a0)
00:000031AA 44FC000F        	  1836:             move.w #$000F,CCR          * pre-set Flags
00:000031AE 0090FFFFFFFF    	  1837:             ori.l  #$FFFFFFFF,(a0)
00:000031B4 0A905A5A5A5A    	  1838:             eori.l #$5A5A5A5A,(a0)
00:000031BA 0290F0F0F0F0    	  1839:             andi.l #$F0F0F0F0,(a0)
00:000031C0 69FE            	  1840:             bvs.s *                       * Check V,C are cleared
00:000031C2 65FE            	  1841:             bcs.s *
00:000031C4 6AFE            	  1842:             bpl.s *                       * Verify if N flag is set
00:000031C6 4290            	  1843:             andi.l #$00000000,(a0)
00:000031C8 6BFE            	  1844:             bmi.s *                       * Verify if N flag is cleared
00:000031CA 66FE            	  1845:             bne.s *                       * Verify if Z flag is set
00:000031CC 4A90            	  1846:             cmpi.l #$00,(a0)
00:000031CE 66FE            	  1847:             bne.s *                       * Verify if Z flag is set
                            	  1848: 
                            	  1849: 
                            	  1850: 
                            	  1851: *     (An)+ -- BYTE
00:000031D0 307C0100        	  1852:             move.l #$00000100,a0
00:000031D4 20BC00A5FF88    	  1853:             move.l #$00A5FF88,(a0)
00:000031DA 44FC000F        	  1854:             move.w #$000F,CCR          * pre-set Flags
                            	  1855: 
00:000031DE 001800F5        	  1856:             ori.b  #$F5,(a0)+
00:000031E2 6AFE            	  1857:             bpl.s *                       * Verify if N flag is set
00:000031E4 67FE            	  1858:             beq.s *                       * Verify if Z flag is cleared
                            	  1859: 
00:000031E6 4618            	  1860:             eori.b #$FF,(a0)+
00:000031E8 6BFE            	  1861:             bmi.s *                       * Verify if N flag is cleared
00:000031EA 67FE            	  1862:             beq.s *                       * Verify if Z flag is cleared
                            	  1863: 
00:000031EC 021800AA        	  1864:             andi.b #$AA,(a0)+
00:000031F0 6AFE            	  1865:             bpl.s *                       * Verify if N flag is set
00:000031F2 67FE            	  1866:             beq.s *                       * Verify if Z flag is cleared
                            	  1867: 
00:000031F4 307C0100        	  1868:             move.l #$00000100,a0
00:000031F8 0C90F55AAA88    	  1869:             cmpi.l #$F55AAA88,(a0)
00:000031FE 66FE            	  1870:             bne.s *                       * Verify if Z flag is set
                            	  1871: 
                            	  1872: 
                            	  1873: *     (An)+ -- WORD
00:00003200 307C0100        	  1874:             move.l #$00000100,a0
00:00003204 327C0104        	  1875:             move.l #$00000104,a1
00:00003208 20BC00005A5A    	  1876:             move.l #$00005a5a,(a0)
00:0000320E 22BC12345678    	  1877:             move.l #$12345678,(a1)
00:00003214 44FC000F        	  1878:             move.w #$000F,CCR          * pre-set Flags
                            	  1879: 
00:00003218 00585678        	  1880:             ori.w  #$5678,(a0)+
00:0000321C 6BFE            	  1881:             bmi.s *                       * Verify if N flag is cleared
00:0000321E 67FE            	  1882:             beq.s *                       * Verify if Z flag is cleared
                            	  1883: 
00:00003220 4658            	  1884:             eori.w #$FFFF,(a0)+
00:00003222 6AFE            	  1885:             bpl.s *                       * Verify if N flag is set
00:00003224 67FE            	  1886:             beq.s *                       * Verify if Z flag is cleared
                            	  1887: 
00:00003226 0258A55A        	  1888:             andi.w #$A55A,(a0)+
00:0000322A 6BFE            	  1889:             bmi.s *                       * Verify if N flag is cleared
00:0000322C 67FE            	  1890:             beq.s *                       * Verify if Z flag is cleared
                            	  1891: 
00:0000322E 307C0100        	  1892:             move.l #$00000100,a0
00:00003232 0C905678A5A5    	  1893:             cmpi.l #$5678a5a5,(a0)
00:00003238 307C0104        	  1894:             move.l #$00000104,a0
00:0000323C 0C9000105678    	  1895:             cmpi.l #$00105678,(a0)
00:00003242 66FE            	  1896:             bne.s *                       * Verify if Z flag is set
                            	  1897: 
                            	  1898: *     (An)+ -- LONG
00:00003244 307C0100        	  1899:             move.l #$00000100,a0
00:00003248 4298            	  1900:             move.l #$00000000,(a0)+
00:0000324A 20FC5A5A5A5A    	  1901:             move.l #$5a5a5a5a,(a0)+
00:00003250 20FCFFFFFFFF    	  1902:             move.l #$FFFFFFFF,(a0)+
00:00003256 307C0100        	  1903:             move.l #$00000100,a0
00:0000325A 44FC000F        	  1904:             move.w #$000F,CCR          * pre-set Flags
                            	  1905: 
00:0000325E 009812345678    	  1906:             ori.l  #$12345678,(a0)+
00:00003264 6BFE            	  1907:             bmi.s *                       * Verify if N flag is cleared
00:00003266 67FE            	  1908:             beq.s *                       * Verify if Z flag is cleared
                            	  1909: 
00:00003268 4698            	  1910:             eori.l #$FFFFFFFF,(a0)+
00:0000326A 6AFE            	  1911:             bpl.s *                       * Verify if N flag is set
00:0000326C 67FE            	  1912:             beq.s *                       * Verify if Z flag is cleared
                            	  1913: 
00:0000326E 0298A5A5A55A    	  1914:             andi.l #$A5A5A55A,(a0)+
00:00003274 6AFE            	  1915:             bpl.s *                       * Verify if N flag is set
00:00003276 67FE            	  1916:             beq.s *                       * Verify if Z flag is cleared
                            	  1917: 
00:00003278 307C0100        	  1918:             move.l #$00000100,a0
00:0000327C 0C9812345678    	  1919:             cmpi.l #$12345678,(a0)+
00:00003282 0C98A5A5A5A5    	  1920:             cmpi.l #$a5a5a5a5,(a0)+
00:00003288 0C98A5A5A55A    	  1921:             cmpi.l #$a5a5a55a,(a0)+
00:0000328E 66FE            	  1922:             bne.s *                       * Verify if Z flag is set
                            	  1923: 
00:00003290 4E75            	  1924:             rts
                            	  1925: 
                            	  1926: 
                            	  1927: *-----------------------------------------------------------
                            	  1928: *-----------------------------------------------------------
                            	  1929: * OPCODE : BSR
                            	  1930: *-----------------------------------------------------------
                            	  1931: *-----------------------------------------------------------
                            	  1932: 
                            	  1933: 
00:00003292 223C11111111    	  1934: BSR_CLOSE1:     move.l #$11111111,d1
00:00003298 4E75            	  1935:                 rts
                            	  1936: 
                            	  1937: 
                            	  1938: 
00:0000329A 61F6            	  1939: op_BSR:         bsr BSR_CLOSE1        * Negative 8-bit.s displacement
00:0000329C 612A            	  1940:                 bsr BSR_CLOSE2        * Positive 8-bit.s displacement
00:0000329E 6100EF20        	  1941:                 bsr.w BSR_FAR1          * Negative 16-bit.s displacement
00:000032A2 6100144E        	  1942:                 bsr.w BSR_FAR2          * Positive 16-bit.s displacement
                            	  1943: 
00:000032A6 0C8111111111    	  1944:                 cmpi.l #$11111111,d1
00:000032AC 66FE            	  1945:                 bne.s *
00:000032AE 0C8222222222    	  1946:                 cmpi.l #$22222222,d2
00:000032B4 66FE            	  1947:                 bne.s *
00:000032B6 0C8333333333    	  1948:                 cmpi.l #$33333333,d3
00:000032BC 66FE            	  1949:                 bne.s *
00:000032BE 0C8444444444    	  1950:                 cmpi.l #$44444444,d4
00:000032C4 66FE            	  1951:                 bne.s *
                            	  1952: 
00:000032C6 4E75            	  1953:                 rts
                            	  1954: 
                            	  1955: 
00:000032C8 243C22222222    	  1956: BSR_CLOSE2:     move.l #$22222222,d2
00:000032CE 4E75            	  1957:                 rts
                            	  1958: 
                            	  1959: *-----------------------------------------------------------
                            	  1960: *-----------------------------------------------------------
                            	  1961: * OPCODE : op_CMP_I
                            	  1962: *-----------------------------------------------------------
                            	  1963: *-----------------------------------------------------------
                            	  1964: op_CMP_I:
                            	  1965: 
00:000032D0 307C0100        	  1966:             move.l #$00000100,a0
00:000032D4 20BC00000100    	  1967:             move.l #$00000100,(a0)
                            	  1968: 
                            	  1969: *     REGISTER - BYTE
00:000032DA 7080            	  1970:             move.l #$FFFFFF80,d0
00:000032DC 0C000080        	  1971:             cmpi.b #$80,d0
00:000032E0 66FE            	  1972:             bne.s *                       * Check Z Flag  beq/bne
00:000032E2 6BFE            	  1973:             bmi.s *                       * Check N Flag  bmi/bpl
00:000032E4 65FE            	  1974:             bcs.s *                       * Check C Flag  bcc/bcs
00:000032E6 69FE            	  1975:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1976: 
00:000032E8 223CFFFFF000    	  1977:             move.l #$FFFFF000,d1
00:000032EE 4A01            	  1978:             cmpi.b #$00,d1
00:000032F0 66FE            	  1979:             bne.s *                       * Check Z Flag  beq/bne
00:000032F2 6BFE            	  1980:             bmi.s *                       * Check N Flag  bmi/bpl
00:000032F4 65FE            	  1981:             bcs.s *                       * Check C Flag  bcc/bcs
00:000032F6 69FE            	  1982:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1983: 
00:000032F8 7481D442        	  1984:             move.l #$FFFFFF02,d2
00:000032FC 0C0200FF        	  1985:             cmpi.b #$FF,d2
00:00003300 67FE            	  1986:             beq.s *                       * Check Z Flag  beq/bne
00:00003302 6BFE            	  1987:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003304 64FE            	  1988:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003306 69FE            	  1989:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  1990: 
00:00003308 263CFFFFFF7F    	  1991:             move.l #$FFFFFF7F,d3
00:0000330E 0C0300FF        	  1992:             cmpi.b #$FF,d3
00:00003312 67FE            	  1993:             beq.s *                       * Check Z Flag  beq/bne
00:00003314 6AFE            	  1994:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003316 64FE            	  1995:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003318 68FE            	  1996:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  1997: 
                            	  1998: 
                            	  1999: *     REGISTER - WORD
00:0000331A 203CFFFF8000    	  2000:             move.l #$FFFF8000,d0
00:00003320 0C408000        	  2001:             cmpi.w #$8000,d0
00:00003324 66FE            	  2002:             bne.s *                       * Check Z Flag  beq/bne
00:00003326 6BFE            	  2003:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003328 65FE            	  2004:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000332A 69FE            	  2005:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2006: 
00:0000332C 223CFFF00000    	  2007:             move.l #$FFF00000,d1
00:00003332 4A41            	  2008:             cmpi.w #$0000,d1
00:00003334 66FE            	  2009:             bne.s *                       * Check Z Flag  beq/bne
00:00003336 6BFE            	  2010:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003338 65FE            	  2011:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000333A 69FE            	  2012:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2013: 
00:0000333C 243CFFFF0002    	  2014:             move.l #$FFFF0002,d2
00:00003342 0C42FFFF        	  2015:             cmpi.w #$FFFF,d2
00:00003346 67FE            	  2016:             beq.s *                       * Check Z Flag  beq/bne
00:00003348 6BFE            	  2017:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000334A 64FE            	  2018:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000334C 69FE            	  2019:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2020: 
00:0000334E 263CFFFF7FFF    	  2021:             move.l #$FFFF7FFF,d3
00:00003354 0C43FFFF        	  2022:             cmpi.w #$FFFF,d3
00:00003358 67FE            	  2023:             beq.s *                       * Check Z Flag  beq/bne
00:0000335A 6AFE            	  2024:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000335C 64FE            	  2025:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000335E 68FE            	  2026:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2027: 
                            	  2028: *     REGISTER - LONG
00:00003360 203C80000000    	  2029:             move.l #$80000000,d0
00:00003366 0C8080000000    	  2030:             cmpi.l #$80000000,d0
00:0000336C 66FE            	  2031:             bne.s *                       * Check Z Flag  beq/bne
00:0000336E 6BFE            	  2032:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003370 65FE            	  2033:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003372 69FE            	  2034:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2035: 
00:00003374 7200            	  2036:             moveq  #$00000000,d1
00:00003376 4A81            	  2037:             cmpi.l #$00000000,d1
00:00003378 66FE            	  2038:             bne.s *                       * Check Z Flag  beq/bne
00:0000337A 6BFE            	  2039:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000337C 65FE            	  2040:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000337E 69FE            	  2041:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2042: 
00:00003380 7402            	  2043:             moveq  #$00000002,d2
00:00003382 0C82FFFFFFFF    	  2044:             cmpi.l #$FFFFFFFF,d2
00:00003388 67FE            	  2045:             beq.s *                       * Check Z Flag  beq/bne
00:0000338A 6BFE            	  2046:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000338C 64FE            	  2047:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000338E 69FE            	  2048:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2049: 
00:00003390 263C7FFFFFFF    	  2050:             move.l #$7FFFFFFF,d3
00:00003396 0C83FFFFFFFF    	  2051:             cmpi.l #$FFFFFFFF,d3
00:0000339C 67FE            	  2052:             beq.s *                       * Check Z Flag  beq/bne
00:0000339E 6AFE            	  2053:             bpl.s *                       * Check N Flag  bmi/bpl
00:000033A0 64FE            	  2054:             bcc.s *                       * Check C Flag  bcc/bcs
00:000033A2 68FE            	  2055:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2056: 
                            	  2057: 
                            	  2058: 
                            	  2059: 
                            	  2060: *     EA=x(An,Dn) - BYTE
00:000033A4 307C0100        	  2061:             move.l #$00000100,a0
00:000033A8 7E04            	  2062:             moveq  #$00000004,d7
                            	  2063: 
00:000033AA 21BCFFFFFF80700C	  2064:             move.l #$FFFFFF80,12(a0,d7)
00:000033B2 21BCFFFFFF80700C	  2065:             move.l #$FFFFFF80,12(a0,d7)
00:000033BA 0C300080700F    	  2066:             cmpi.b #$80,15(a0,d7)
00:000033C0 66FE            	  2067:             bne.s *                       * Check Z Flag  beq/bne
00:000033C2 6BFE            	  2068:             bmi.s *                       * Check N Flag  bmi/bpl
00:000033C4 65FE            	  2069:             bcs.s *                       * Check C Flag  bcc/bcs
00:000033C6 69FE            	  2070:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2071: 
00:000033C8 21BCFFFFF000700C	  2072:             move.l #$FFFFF000,12(a0,d7)
00:000033D0 4A30700F        	  2073:             cmpi.b #$00,15(a0,d7)
00:000033D4 66FE            	  2074:             bne.s *                       * Check Z Flag  beq/bne
00:000033D6 6BFE            	  2075:             bmi.s *                       * Check N Flag  bmi/bpl
00:000033D8 65FE            	  2076:             bcs.s *                       * Check C Flag  bcc/bcs
00:000033DA 69FE            	  2077:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2078: 
00:000033DC 21BCFFFFFF02700C	  2079:             move.l #$FFFFFF02,12(a0,d7)
00:000033E4 0C3000FF700F    	  2080:             cmpi.b #$FF,15(a0,d7)
00:000033EA 67FE            	  2081:             beq.s *                       * Check Z Flag  beq/bne
00:000033EC 6BFE            	  2082:             bmi.s *                       * Check N Flag  bmi/bpl
00:000033EE 64FE            	  2083:             bcc.s *                       * Check C Flag  bcc/bcs
00:000033F0 69FE            	  2084:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2085: 
00:000033F2 21BCFFFFFF7F700C	  2086:             move.l #$FFFFFF7F,12(a0,d7)
00:000033FA 0C3000FF700F    	  2087:             cmpi.b #$FF,15(a0,d7)
00:00003400 67FE            	  2088:             beq.s *                       * Check Z Flag  beq/bne
00:00003402 6AFE            	  2089:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003404 64FE            	  2090:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003406 68FE            	  2091:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2092: 
                            	  2093: 
                            	  2094: *     EA=x(An,Dn) - WORD
00:00003408 21BCFFFF8000700C	  2095:             move.l #$FFFF8000,12(a0,d7)
00:00003410 0C708000700E    	  2096:             cmpi.w #$8000,14(a0,d7)
00:00003416 66FE            	  2097:             bne.s *                       * Check Z Flag  beq/bne
00:00003418 6BFE            	  2098:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000341A 65FE            	  2099:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000341C 69FE            	  2100:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2101: 
00:0000341E 21BCFFF00000700C	  2102:             move.l #$FFF00000,12(a0,d7)
00:00003426 4A70700E        	  2103:             cmpi.w #$0000,14(a0,d7)
00:0000342A 66FE            	  2104:             bne.s *                       * Check Z Flag  beq/bne
00:0000342C 6BFE            	  2105:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000342E 65FE            	  2106:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003430 69FE            	  2107:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2108: 
00:00003432 21BCFFFF0002700C	  2109:             move.l #$FFFF0002,12(a0,d7)
00:0000343A 0C70FFFF700E    	  2110:             cmpi.w #$FFFF,14(a0,d7)
00:00003440 67FE            	  2111:             beq.s *                       * Check Z Flag  beq/bne
00:00003442 6BFE            	  2112:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003444 64FE            	  2113:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003446 69FE            	  2114:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2115: 
00:00003448 21BCFFFF7FFF700C	  2116:             move.l #$FFFF7FFF,12(a0,d7)
00:00003450 0C70FFFF700E    	  2117:             cmpi.w #$FFFF,14(a0,d7)
00:00003456 67FE            	  2118:             beq.s *                       * Check Z Flag  beq/bne
00:00003458 6AFE            	  2119:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000345A 64FE            	  2120:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000345C 68FE            	  2121:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2122: 
                            	  2123: *     EA=x(An,Dn) - LONG
00:0000345E 21BC80000000700C	  2124:             move.l #$80000000,12(a0,d7)
00:00003466 0CB080000000700C	  2125:             cmpi.l #$80000000,12(a0,d7)
00:0000346E 66FE            	  2126:             bne.s *                       * Check Z Flag  beq/bne
00:00003470 6BFE            	  2127:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003472 65FE            	  2128:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003474 69FE            	  2129:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2130: 
00:00003476 42B0700C        	  2131:             move.l #$00000000,12(a0,d7)
00:0000347A 4AB0700C        	  2132:             cmpi.l #$00000000,12(a0,d7)
00:0000347E 66FE            	  2133:             bne.s *                       * Check Z Flag  beq/bne
00:00003480 6BFE            	  2134:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003482 65FE            	  2135:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003484 69FE            	  2136:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2137: 
00:00003486 21BC00000002700C	  2138:             move.l #$00000002,12(a0,d7)
00:0000348E 0CB0FFFFFFFF700C	  2139:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:00003496 67FE            	  2140:             beq.s *                       * Check Z Flag  beq/bne
00:00003498 6BFE            	  2141:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000349A 64FE            	  2142:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000349C 69FE            	  2143:             bvs.s *                       * Check V Flag  bvc/bvs
                            	  2144: 
00:0000349E 21BC7FFFFFFF700C	  2145:             move.l #$7FFFFFFF,12(a0,d7)
00:000034A6 0CB0FFFFFFFF700C	  2146:             cmpi.l #$FFFFFFFF,12(a0,d7)
00:000034AE 67FE            	  2147:             beq.s *                       * Check Z Flag  beq/bne
00:000034B0 6AFE            	  2148:             bpl.s *                       * Check N Flag  bmi/bpl
00:000034B2 64FE            	  2149:             bcc.s *                       * Check C Flag  bcc/bcs
00:000034B4 68FE            	  2150:             bvc.s *                       * Check V Flag  bvc/bvs
                            	  2151: 
                            	  2152: 
                            	  2153: 
                            	  2154: 
00:000034B6 4E75            	  2155:             rts
                            	  2156: 
                            	  2157: 
                            	  2158: 
                            	  2159: *-----------------------------------------------------------
                            	  2160: *-----------------------------------------------------------
                            	  2161: * OPCODE : ADD_I
                            	  2162: *-----------------------------------------------------------
                            	  2163: *-----------------------------------------------------------
                            	  2164: op_ADD_I:
                            	  2165: 
                            	  2166: *     EA = Dn  - Byte
00:000034B8 203C12345678    	  2167:             move.l #$12345678,d0      * populate test data
00:000034BE 06000000        	  2168:             addi.b #0,d0
00:000034C2 67FE            	  2169:             beq.s *                       * Check Z Flag  beq/bne
00:000034C4 6BFE            	  2170:             bmi.s *                       * Check N Flag  bmi/bpl
00:000034C6 65FE            	  2171:             bcs.s *                       * Check C Flag  bcc/bcs
00:000034C8 69FE            	  2172:             bvs.s *                       * Check V Flag  bvc/bvs
00:000034CA 06000010        	  2173:             addi.b #$10,d0
00:000034CE 67FE            	  2174:             beq.s *                       * Check Z Flag  beq/bne
00:000034D0 6AFE            	  2175:             bpl.s *                       * Check N Flag  bmi/bpl
00:000034D2 65FE            	  2176:             bcs.s *                       * Check C Flag  bcc/bcs
00:000034D4 68FE            	  2177:             bvc.s *                       * Check V Flag  bvc/bvs
00:000034D6 060000A5        	  2178:             addi.b #$A5,d0
00:000034DA 67FE            	  2179:             beq.s *                       * Check Z Flag  beq/bne
00:000034DC 6BFE            	  2180:             bmi.s *                       * Check N Flag  bmi/bpl
00:000034DE 64FE            	  2181:             bcc.s *                       * Check C Flag  bcc/bcs
00:000034E0 68FE            	  2182:             bvc.s *                       * Check V Flag  bvc/bvs
00:000034E2 0C00002D        	  2183:             cmpi.b #$2D,d0
00:000034E6 66FE            	  2184:             bne.s *                       * Check Z Flag  beq/bne
                            	  2185: 
                            	  2186: *     EA = Dn  - WORD
00:000034E8 203C12345678    	  2187:             move.l #$12345678,d0      * populate test data
00:000034EE 06400000        	  2188:             addi.w #0,d0
00:000034F2 67FE            	  2189:             beq.s *                       * Check Z Flag  beq/bne
00:000034F4 6BFE            	  2190:             bmi.s *                       * Check N Flag  bmi/bpl
00:000034F6 65FE            	  2191:             bcs.s *                       * Check C Flag  bcc/bcs
00:000034F8 69FE            	  2192:             bvs.s *                       * Check V Flag  bvc/bvs
00:000034FA 06407000        	  2193:             addi.w #$7000,d0
00:000034FE 67FE            	  2194:             beq.s *                       * Check Z Flag  beq/bne
00:00003500 6AFE            	  2195:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003502 65FE            	  2196:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003504 68FE            	  2197:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003506 0640A55A        	  2198:             addi.w #$A55A,d0
00:0000350A 67FE            	  2199:             beq.s *                       * Check Z Flag  beq/bne
00:0000350C 6BFE            	  2200:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000350E 64FE            	  2201:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003510 68FE            	  2202:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003512 0C406BD2        	  2203:             cmpi.w #$6BD2,d0
00:00003516 66FE            	  2204:             bne.s *                       * Check Z Flag  beq/bne
                            	  2205: 
                            	  2206: *     EA = Dn  - LONG
00:00003518 203C12345678    	  2207:             move.l #$12345678,d0      * populate test data
00:0000351E 068000000000    	  2208:             addi.l #0,d0
00:00003524 67FE            	  2209:             beq.s *                       * Check Z Flag  beq/bne
00:00003526 6BFE            	  2210:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003528 65FE            	  2211:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000352A 69FE            	  2212:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000352C 0680F0000000    	  2213:             addi.l #$F0000000,d0
00:00003532 67FE            	  2214:             beq.s *                       * Check Z Flag  beq/bne
00:00003534 6BFE            	  2215:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003536 64FE            	  2216:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003538 69FE            	  2217:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000353A 0680855AA55A    	  2218:             addi.l #$855AA55A,d0
00:00003540 67FE            	  2219:             beq.s *                       * Check Z Flag  beq/bne
00:00003542 6AFE            	  2220:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003544 65FE            	  2221:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003546 69FE            	  2222:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003548 0680A0000000    	  2223:             addi.l #$A0000000,d0
00:0000354E 68FE            	  2224:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003550 0C80278EFBD2    	  2225:             cmpi.l #$278EFBD2,d0
00:00003556 66FE            	  2226:             bne.s *                       * Check Z Flag  beq/bne
                            	  2227: 
                            	  2228: 
                            	  2229: 
                            	  2230: *     EA = x.L  - Byte
00:00003558 207C0000F100    	  2231:             move.l #$F100,a0      * populate test data
00:0000355E 20BC12345678    	  2232:             move.l #$12345678,(a0)     * populate test data
00:00003564 063900000000F103	  2233:             addi.b #0,$F103
00:0000356C 67FE            	  2234:             beq.s *                       * Check Z Flag  beq/bne
00:0000356E 6BFE            	  2235:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003570 65FE            	  2236:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003572 69FE            	  2237:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003574 063900100000F103	  2238:             addi.b #$10,$F103
00:0000357C 67FE            	  2239:             beq.s *                       * Check Z Flag  beq/bne
00:0000357E 6AFE            	  2240:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003580 65FE            	  2241:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003582 68FE            	  2242:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003584 063900A50000F103	  2243:             addi.b #$A5,$F103
00:0000358C 67FE            	  2244:             beq.s *                       * Check Z Flag  beq/bne
00:0000358E 6BFE            	  2245:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003590 64FE            	  2246:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003592 68FE            	  2247:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003594 0C39002D0000F103	  2248:             cmpi.b #$2D,$F103
00:0000359C 66FE            	  2249:             bne.s *                       * Check Z Flag  beq/bne
                            	  2250: 
                            	  2251: *     EA = x.L- WORD
00:0000359E 207C0000F100    	  2252:             move.l #$F100,a0      * populate test data
00:000035A4 20BC12345678    	  2253:             move.l #$12345678,(a0)     * populate test data
00:000035AA 067900000000F100	  2254:             addi.w #0,$F100
00:000035B2 67FE            	  2255:             beq.s *                       * Check Z Flag  beq/bne
00:000035B4 6BFE            	  2256:             bmi.s *                       * Check N Flag  bmi/bpl
00:000035B6 65FE            	  2257:             bcs.s *                       * Check C Flag  bcc/bcs
00:000035B8 69FE            	  2258:             bvs.s *                       * Check V Flag  bvc/bvs
00:000035BA 067970000000F100	  2259:             addi.w #$7000,$F100
00:000035C2 67FE            	  2260:             beq.s *                       * Check Z Flag  beq/bne
00:000035C4 6AFE            	  2261:             bpl.s *                       * Check N Flag  bmi/bpl
00:000035C6 65FE            	  2262:             bcs.s *                       * Check C Flag  bcc/bcs
00:000035C8 68FE            	  2263:             bvc.s *                       * Check V Flag  bvc/bvs
00:000035CA 0679A55A0000F100	  2264:             addi.w #$A55A,$F100
00:000035D2 67FE            	  2265:             beq.s *                       * Check Z Flag  beq/bne
00:000035D4 6BFE            	  2266:             bmi.s *                       * Check N Flag  bmi/bpl
00:000035D6 64FE            	  2267:             bcc.s *                       * Check C Flag  bcc/bcs
00:000035D8 68FE            	  2268:             bvc.s *                       * Check V Flag  bvc/bvs
00:000035DA 0C79278E0000F100	  2269:             cmpi.w #$278E,$F100
00:000035E2 66FE            	  2270:             bne.s *                       * Check Z Flag  beq/bne
                            	  2271: 
                            	  2272: *     EA = x.L- LONG
00:000035E4 23FC123456780000	  2273:             move.l #$12345678,$F100  * populate test data
00:000035EC F100
00:000035EE 06B9000000000000	  2274:             addi.l #0,$F100
00:000035F6 F100
00:000035F8 67FE            	  2275:             beq.s *                       * Check Z Flag  beq/bne
00:000035FA 6BFE            	  2276:             bmi.s *                       * Check N Flag  bmi/bpl
00:000035FC 65FE            	  2277:             bcs.s *                       * Check C Flag  bcc/bcs
00:000035FE 69FE            	  2278:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003600 06B9F00000000000	  2279:             addi.l #$F0000000,$F100
00:00003608 F100
00:0000360A 67FE            	  2280:             beq.s *                       * Check Z Flag  beq/bne
00:0000360C 6BFE            	  2281:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000360E 64FE            	  2282:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003610 69FE            	  2283:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003612 06B9855AA55A0000	  2284:             addi.l #$855AA55A,$F100
00:0000361A F100
00:0000361C 67FE            	  2285:             beq.s *                       * Check Z Flag  beq/bne
00:0000361E 6AFE            	  2286:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003620 65FE            	  2287:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003622 69FE            	  2288:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003624 06B9A00000000000	  2289:             addi.l #$A0000000,$F100
00:0000362C F100
00:0000362E 68FE            	  2290:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003630 0CB9278EFBD20000	  2291:             cmpi.l #$278EFBD2,$F100
00:00003638 F100
00:0000363A 66FE            	  2292:             bne.s *                       * Check Z Flag  beq/bne
                            	  2293: 
00:0000363C 4E75            	  2294:             rts
                            	  2295: 
                            	  2296: 
                            	  2297: *-----------------------------------------------------------
                            	  2298: *-----------------------------------------------------------
                            	  2299: * OPCODE : SUB_I
                            	  2300: *-----------------------------------------------------------
                            	  2301: *-----------------------------------------------------------
                            	  2302: op_SUB_I:
                            	  2303: 
                            	  2304: *     EA = Dn  - Byte
00:0000363E 203C12345678    	  2305:             move.l #$12345678,d0      * populate test data
00:00003644 04000000        	  2306:             subi.b #0,d0
00:00003648 67FE            	  2307:             beq.s *                       * Check Z Flag  beq/bne
00:0000364A 6BFE            	  2308:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000364C 65FE            	  2309:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000364E 69FE            	  2310:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003650 04000010        	  2311:             subi.b #$10,d0
00:00003654 67FE            	  2312:             beq.s *                       * Check Z Flag  beq/bne
00:00003656 6BFE            	  2313:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003658 65FE            	  2314:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000365A 69FE            	  2315:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000365C 040000A5        	  2316:             subi.b #$A5,d0
00:00003660 67FE            	  2317:             beq.s *                       * Check Z Flag  beq/bne
00:00003662 6AFE            	  2318:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003664 64FE            	  2319:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003666 68FE            	  2320:             bvc.s *                       * Check V Flag  bvc/bvs
00:00003668 0C0000C3        	  2321:             cmpi.b #$C3,d0
00:0000366C 66FE            	  2322:             bne.s *                       * Check Z Flag  beq/bne
                            	  2323: 
                            	  2324: *     EA = Dn  - WORD
00:0000366E 203C12345678    	  2325:             move.l #$12345678,d0      * populate test data
00:00003674 04400000        	  2326:             subi.w #0,d0
00:00003678 67FE            	  2327:             beq.s *                       * Check Z Flag  beq/bne
00:0000367A 6BFE            	  2328:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000367C 65FE            	  2329:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000367E 69FE            	  2330:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003680 04407000        	  2331:             subi.w #$7000,d0
00:00003684 67FE            	  2332:             beq.s *                       * Check Z Flag  beq/bne
00:00003686 6AFE            	  2333:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003688 64FE            	  2334:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000368A 69FE            	  2335:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000368C 0440A55A        	  2336:             subi.w #$A55A,d0
00:00003690 67FE            	  2337:             beq.s *                       * Check Z Flag  beq/bne
00:00003692 6BFE            	  2338:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003694 65FE            	  2339:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003696 69FE            	  2340:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003698 0C40411E        	  2341:             cmpi.w #$411E,d0
00:0000369C 66FE            	  2342:             bne.s *                       * Check Z Flag  beq/bne
                            	  2343: 
                            	  2344: *     EA = Dn  - LONG
00:0000369E 203C12345678    	  2345:             move.l #$12345678,d0      * populate test data
00:000036A4 048000000000    	  2346:             subi.l #0,d0
00:000036AA 67FE            	  2347:             beq.s *                       * Check Z Flag  beq/bne
00:000036AC 6BFE            	  2348:             bmi.s *                       * Check N Flag  bmi/bpl
00:000036AE 65FE            	  2349:             bcs.s *                       * Check C Flag  bcc/bcs
00:000036B0 69FE            	  2350:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036B2 0480F0000000    	  2351:             subi.l #$F0000000,d0
00:000036B8 67FE            	  2352:             beq.s *                       * Check Z Flag  beq/bne
00:000036BA 6BFE            	  2353:             bmi.s *                       * Check N Flag  bmi/bpl
00:000036BC 64FE            	  2354:             bcc.s *                       * Check C Flag  bcc/bcs
00:000036BE 69FE            	  2355:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036C0 0480855AA55A    	  2356:             subi.l #$855AA55A,d0
00:000036C6 67FE            	  2357:             beq.s *                       * Check Z Flag  beq/bne
00:000036C8 6AFE            	  2358:             bpl.s *                       * Check N Flag  bmi/bpl
00:000036CA 64FE            	  2359:             bcc.s *                       * Check C Flag  bcc/bcs
00:000036CC 68FE            	  2360:             bvc.s *                       * Check V Flag  bvc/bvs
00:000036CE 0480A0000000    	  2361:             subi.l #$A0000000,d0
00:000036D4 69FE            	  2362:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036D6 0C80FCD9B11E    	  2363:             cmpi.l #$FCD9B11E,d0
00:000036DC 66FE            	  2364:             bne.s *                       * Check Z Flag  beq/bne
                            	  2365: 
                            	  2366: 
                            	  2367: 
                            	  2368: *     EA = x.L  - Byte
00:000036DE 207C0000F100    	  2369:             move.l #$F100,a0      * populate test data
00:000036E4 20BC12345678    	  2370:             move.l #$12345678,(a0)     * populate test data
00:000036EA 043900000000F103	  2371:             subi.b #0,$F103
00:000036F2 67FE            	  2372:             beq.s *                       * Check Z Flag  beq/bne
00:000036F4 6BFE            	  2373:             bmi.s *                       * Check N Flag  bmi/bpl
00:000036F6 65FE            	  2374:             bcs.s *                       * Check C Flag  bcc/bcs
00:000036F8 69FE            	  2375:             bvs.s *                       * Check V Flag  bvc/bvs
00:000036FA 043900100000F103	  2376:             subi.b #$10,$F103
00:00003702 67FE            	  2377:             beq.s *                       * Check Z Flag  beq/bne
00:00003704 6BFE            	  2378:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003706 65FE            	  2379:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003708 69FE            	  2380:             bvs.s *                       * Check V Flag  bvc/bvs
00:0000370A 043900A50000F103	  2381:             subi.b #$A5,$F103
00:00003712 67FE            	  2382:             beq.s *                       * Check Z Flag  beq/bne
00:00003714 6AFE            	  2383:             bpl.s *                       * Check N Flag  bmi/bpl
00:00003716 64FE            	  2384:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003718 68FE            	  2385:             bvc.s *                       * Check V Flag  bvc/bvs
00:0000371A 0C3900C30000F103	  2386:             cmpi.b #$C3,$F103
00:00003722 66FE            	  2387:             bne.s *                       * Check Z Flag  beq/bne
                            	  2388: 
                            	  2389: *     EA = x.L- WORD
00:00003724 207C0000F100    	  2390:             move.l #$F100,a0      * populate test data
00:0000372A 20BC12345678    	  2391:             move.l #$12345678,(a0)     * populate test data
00:00003730 047900000000F100	  2392:             subi.w #0,$F100
00:00003738 67FE            	  2393:             beq.s *                       * Check Z Flag  beq/bne
00:0000373A 6BFE            	  2394:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000373C 65FE            	  2395:             bcs.s *                       * Check C Flag  bcc/bcs
00:0000373E 69FE            	  2396:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003740 047970000000F100	  2397:             subi.w #$7000,$F100
00:00003748 67FE            	  2398:             beq.s *                       * Check Z Flag  beq/bne
00:0000374A 6AFE            	  2399:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000374C 64FE            	  2400:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000374E 69FE            	  2401:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003750 0479A55A0000F100	  2402:             subi.w #$A55A,$F100
00:00003758 67FE            	  2403:             beq.s *                       * Check Z Flag  beq/bne
00:0000375A 6AFE            	  2404:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000375C 64FE            	  2405:             bcc.s *                       * Check C Flag  bcc/bcs
00:0000375E 69FE            	  2406:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003760 0C79FCDA0000F100	  2407:             cmpi.w #$FCDA,$F100
00:00003768 66FE            	  2408:             bne.s *                       * Check Z Flag  beq/bne
                            	  2409: 
                            	  2410: *     EA = x.L- LONG
00:0000376A 23FC123456780000	  2411:             move.l #$12345678,$F100  * populate test data
00:00003772 F100
00:00003774 04B9000000000000	  2412:             subi.l #0,$F100
00:0000377C F100
00:0000377E 67FE            	  2413:             beq.s *                       * Check Z Flag  beq/bne
00:00003780 6BFE            	  2414:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003782 65FE            	  2415:             bcs.s *                       * Check C Flag  bcc/bcs
00:00003784 69FE            	  2416:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003786 04B9F00000000000	  2417:             subi.l #$F0000000,$F100
00:0000378E F100
00:00003790 67FE            	  2418:             beq.s *                       * Check Z Flag  beq/bne
00:00003792 6BFE            	  2419:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003794 64FE            	  2420:             bcc.s *                       * Check C Flag  bcc/bcs
00:00003796 69FE            	  2421:             bvs.s *                       * Check V Flag  bvc/bvs
00:00003798 04B9855AA55A0000	  2422:             subi.l #$855AA55A,$F100
00:000037A0 F100
00:000037A2 67FE            	  2423:             beq.s *                       * Check Z Flag  beq/bne
00:000037A4 6AFE            	  2424:             bpl.s *                       * Check N Flag  bmi/bpl
00:000037A6 64FE            	  2425:             bcc.s *                       * Check C Flag  bcc/bcs
00:000037A8 68FE            	  2426:             bvc.s *                       * Check V Flag  bvc/bvs
00:000037AA 04B9A00000000000	  2427:             subi.l #$A0000000,$F100
00:000037B2 F100
00:000037B4 69FE            	  2428:             bvs.s *                       * Check V Flag  bvc/bvs
00:000037B6 0CB9FCD9B11E0000	  2429:             cmpi.l #$FCD9B11E,$F100
00:000037BE F100
00:000037C0 66FE            	  2430:             bne.s *                       * Check Z Flag  beq/bne
                            	  2431: 
00:000037C2 4E75            	  2432:             rts
                            	  2433: 
                            	  2434: 
                            	  2435: 
                            	  2436: *-----------------------------------------------------------
                            	  2437: *-----------------------------------------------------------
                            	  2438: * OPCODE : MOVE
                            	  2439: *-----------------------------------------------------------
                            	  2440: *-----------------------------------------------------------
                            	  2441: op_MOVE:
00:000037C4 203C11223344    	  2442:             move.l #$11223344,d0
00:000037CA 223C55667788    	  2443:             move.l #$55667788,d1
00:000037D0 243C8899AABB    	  2444:             move.l #$8899aabb,d2
00:000037D6 263CCCDDEEFF    	  2445:             move.l #$ccddeeff,d3
00:000037DC 7800            	  2446:             moveq  #$00000000,d4
00:000037DE 7A00            	  2447:             moveq  #$00000000,d5
00:000037E0 7C00            	  2448:             moveq  #$00000000,d6
00:000037E2 7E00            	  2449:             moveq  #$00000000,d7
00:000037E4 207C44332211    	  2450:             move.l #$44332211,a0
00:000037EA 227C88776655    	  2451:             move.l #$88776655,a1
00:000037F0 247CBBAA9988    	  2452:             move.l #$bbaa9988,a2
00:000037F6 267CFFEEDDCC    	  2453:             move.l #$ffeeddcc,a3
                            	  2454: 
00:000037FC 1800            	  2455:             move.b d0,d4              * BYTE - DATA REGISTER
00:000037FE 67FE            	  2456:             beq.s *                       * Check Z Flag  beq/bne
00:00003800 6BFE            	  2457:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003802 0C8400000044    	  2458:             cmpi.l #$00000044,d4
00:00003808 66FE            	  2459:             bne.s *                       * Check Z Flag  beq/bne
                            	  2460: 
00:0000380A 3A01            	  2461:             move.w d1,d5              * WORD - DATA REGISTER
00:0000380C 67FE            	  2462:             beq.s *                       * Check Z Flag  beq/bne
00:0000380E 6BFE            	  2463:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003810 0C8500007788    	  2464:             cmpi.l #$00007788,d5
00:00003816 66FE            	  2465:             bne.s *                       * Check Z Flag  beq/bne
                            	  2466: 
00:00003818 2C02            	  2467:             move.l d2,d6              * LONG - DATA REGISTER
00:0000381A 67FE            	  2468:             beq.s *                       * Check Z Flag  beq/bne
00:0000381C 6AFE            	  2469:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000381E 0C868899AABB    	  2470:             cmpi.l #$8899aabb,d6
00:00003824 66FE            	  2471:             bne.s *                       * Check Z Flag  beq/bne
                            	  2472: 
00:00003826 3A09            	  2473:             move.w a1,d5              * WORD - ADDRESS REGISTER
00:00003828 67FE            	  2474:             beq.s *                       * Check Z Flag  beq/bne
00:0000382A 6BFE            	  2475:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000382C 0C8500006655    	  2476:             cmpi.l #$00006655,d5
00:00003832 66FE            	  2477:             bne.s *                       * Check Z Flag  beq/bne
                            	  2478: 
00:00003834 2C0A            	  2479:             move.l a2,d6              * LONG - ADDRESS REGISTER
00:00003836 67FE            	  2480:             beq.s *                       * Check Z Flag  beq/bne
00:00003838 6AFE            	  2481:             bpl.s *                       * Check N Flag  bmi/bpl
00:0000383A 0C86BBAA9988    	  2482:             cmpi.l #$bbaa9988,d6
00:00003840 66FE            	  2483:             bne.s *                       * Check Z Flag  beq/bne
                            	  2484: 
                            	  2485: 
00:00003842 3842            	  2486:             movea.w d2,a4             * WORD - ADDRESS REGISTER as SOURCE ## MOVEA
00:00003844 B9C2            	  2487:             cmpa.l d2,a4
00:00003846 67FE            	  2488:             beq.s *                       * Check Z Flag  beq/bne ## comopare fails because A4 was sign extended
                            	  2489: 
00:00003848 2A41            	  2490:             movea.l d1,a5             * LONG - ADDRESS REGISTER as SOURCE ## MOVEA
00:0000384A BBC1            	  2491:             cmpa.l d1,a5
00:0000384C 66FE            	  2492:             bne.s *                       * Check Z Flag  beq/bne
                            	  2493: 
                            	  2494: 
                            	  2495: 
                            	  2496: *   Too mamy EA combinations to test,so we focus on a few of the more complicted EA's
                            	  2497: 
00:0000384E 203C11223344    	  2498:             move.l #$11223344,d0
00:00003854 223C00010100    	  2499:             move.l #$00010100,d1
00:0000385A 243C8899AABB    	  2500:             move.l #$8899aabb,d2
00:00003860 7601            	  2501:             moveq  #$00000001,d3
00:00003862 7800            	  2502:             moveq  #$00000000,d4
00:00003864 7A00            	  2503:             moveq  #$00000000,d5
00:00003866 7C00            	  2504:             moveq  #$00000000,d6
00:00003868 7E00            	  2505:             moveq  #$00000000,d7
00:0000386A 91C8            	  2506:             move.l #$00000000,a0
00:0000386C 227C00010100    	  2507:             move.l #$00010100,a1
                            	  2508: 
                            	  2509: *     x(An,AL) --> x.L
00:00003872 11BC005A9804    	  2510:             move.b #$5A,4(a0,a1.l)    * BYTE
00:00003878 47F09804        	  2511:             lea 4(a0,a1.l),a3
00:0000387C 13F0980400010105	  2512:             move.b 4(a0,a1.l),$00010105
00:00003884 67FE            	  2513:             beq.s *                       * Check Z Flag  beq/bne
00:00003886 6BFE            	  2514:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003888 0C30005A9805    	  2515:             cmpi.b #$5A,5(a0,a1.l)
00:0000388E 66FE            	  2516:             bne.s *                       * Check Z Flag  beq/bne
                            	  2517: 
                            	  2518: *     x.L --> n(An,Dw)
00:00003890 11B9000101051007	  2519: MOVE2:      move.b  $00010105,7(a0,d1.w)    * BYTE
00:00003898 67FE            	  2520:             beq.s *                       * Check Z Flag  beq/bne
00:0000389A 6BFE            	  2521:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000389C 0C30005A1007    	  2522:             cmpi.b #$5A,7(a0,d1.w)
00:000038A2 66FE            	  2523:             bne.s *                       * Check Z Flag  beq/bne
                            	  2524: 
                            	  2525: *     x(PC,Ds) --> x.w
00:000038A4 11FB30660100    	  2526:             move.b  MOVE1(pc,d3.w),$0100 * BYTE
00:000038AA 67FE            	  2527:             beq.s *                       * Check Z Flag  beq/bne
00:000038AC 6AFE            	  2528:             bpl.s *                       * Check N Flag  bmi/bpl
00:000038AE 0C3900B900003891	  2529:             cmpi.b #$B9,1+MOVE2
00:000038B6 66FE            	  2530:             bne.s *                       * Check Z Flag  beq/bne
                            	  2531: 
                            	  2532: *     #x -->    n(An,AL)
00:000038B8 11BC00781007    	  2533:             move.b  #$78,7(a0,d1.w)    * BYTE
00:000038BE 67FE            	  2534:             beq.s *                       * Check Z Flag  beq/bne
00:000038C0 6BFE            	  2535:             bmi.s *                       * Check N Flag  bmi/bpl
00:000038C2 0C3000781007    	  2536:             cmpi.b #$78,7(a0,d1.w)
00:000038C8 66FE            	  2537:             bne.s *                       * Check Z Flag  beq/bne
                            	  2538: 
00:000038CA 203C11223344    	  2539:             move.l #$11223344,d0
00:000038D0 223C00010100    	  2540:             move.l #$00010100,d1
00:000038D6 243C8899AABB    	  2541:             move.l #$8899aabb,d2
00:000038DC 7602            	  2542:             moveq  #$00000002,d3
00:000038DE 7800            	  2543:             moveq  #$00000000,d4
00:000038E0 7A00            	  2544:             moveq  #$00000000,d5
00:000038E2 7C00            	  2545:             moveq  #$00000000,d6
00:000038E4 7E00            	  2546:             moveq  #$00000000,d7
00:000038E6 91C8            	  2547:             move.l #$00000000,a0
00:000038E8 227C00010100    	  2548:             move.l #$00010100,a1
                            	  2549: 
                            	  2550: *     x(An,AL) --> x.L
00:000038EE 31BC5A5A9804    	  2551:             move.w #$5A5A,4(a0,a1.l)    * WORD
00:000038F4 49F09804        	  2552:             lea 4(a0,a1.l),a4
00:000038F8 33F0980400010104	  2553:             move.w 4(a0,a1.l),$00010104
00:00003900 67FE            	  2554:             beq.s *                       * Check Z Flag  beq/bne
00:00003902 6BFE            	  2555:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003904 0C705A5A9804    	  2556:             cmpi.w #$5A5A,4(a0,a1.l)
00:0000390A 66FE            	  2557:             bne.s *                       * Check Z Flag  beq/bne
                            	  2558: 
                            	  2559: *     x.L --> n(An,Dw)
00:0000390C 31B9000101041006	  2560: MOVE1:      move.w  $00010104,6(a0,d1.w)    * WORD
00:00003914 67FE            	  2561:             beq.s *                       * Check Z Flag  beq/bne
00:00003916 6BFE            	  2562:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003918 0C705A5A1006    	  2563:             cmpi.w #$5A5A,6(a0,d1.w)
00:0000391E 66FE            	  2564:             bne.s *                       * Check Z Flag  beq/bne
                            	  2565: 
                            	  2566: *     x(PC,Ds) --> x.w
00:00003920 31FB30EA0100    	  2567:             move.w  MOVE1(pc,d3),$0100 * WORD
00:00003926 67FE            	  2568:             beq.s *                       * Check Z Flag  beq/bne
00:00003928 6BFE            	  2569:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000392A 0C7967FE00003914	  2570:             cmpi.w #$67FE,8+MOVE1
00:00003932 66FE            	  2571:             bne.s *                       * Check Z Flag  beq/bne
                            	  2572: 
                            	  2573: *     #x -->    n(An,AL)
00:00003934 31BC78781006    	  2574:             move.w  #$7878,6(a0,d1.w)    * WORD
00:0000393A 67FE            	  2575:             beq.s *                       * Check Z Flag  beq/bne
00:0000393C 6BFE            	  2576:             bmi.s *                       * Check N Flag  bmi/bpl
00:0000393E 0C7078781006    	  2577:             cmpi.w #$7878,6(a0,d1.w)
00:00003944 66FE            	  2578:             bne.s *                       * Check Z Flag  beq/bne
                            	  2579: 
                            	  2580: * ---
                            	  2581: 
00:00003946 203C11223344    	  2582:             move.l #$11223344,d0
00:0000394C 223C00010100    	  2583:             move.l #$00010100,d1
00:00003952 243C8899AABB    	  2584:             move.l #$8899aabb,d2
00:00003958 7602            	  2585:             moveq  #$00000002,d3
00:0000395A 7800            	  2586:             moveq  #$00000000,d4
00:0000395C 7A00            	  2587:             moveq  #$00000000,d5
00:0000395E 7C00            	  2588:             moveq  #$00000000,d6
00:00003960 7E00            	  2589:             moveq  #$00000000,d7
00:00003962 91C8            	  2590:             move.l #$00000000,a0
00:00003964 227C00010100    	  2591:             move.l #$00010100,a1
                            	  2592: 
                            	  2593: *     x(An,AL) --> x.L
00:0000396A 21BC5A5A12349804	  2594:             move.l #$5A5A1234,4(a0,a1.l)    * LONG
00:00003972 49F09804        	  2595:             lea 4(a0,a1.l),a4
00:00003976 23F0980400010104	  2596:             move.l 4(a0,a1.l),$00010104
00:0000397E 67FE            	  2597:             beq.s *                       * Check Z Flag  beq/bne
00:00003980 6BFE            	  2598:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003982 0CB05A5A12349804	  2599:             cmpi.l #$5A5A1234,4(a0,a1.l)
00:0000398A 66FE            	  2600:             bne.s *                       * Check Z Flag  beq/bne
                            	  2601: 
                            	  2602: *     x.L --> n(An,Dw)
00:0000398C 21B9000101041006	  2603: MOVE3:      move.l  $00010104,6(a0,d1.w)    * LONG
00:00003994 67FE            	  2604:             beq.s *                       * Check Z Flag  beq/bne
00:00003996 6BFE            	  2605:             bmi.s *                       * Check N Flag  bmi/bpl
00:00003998 0CB05A5A12341006	  2606:             cmpi.l #$5A5A1234,6(a0,d1.w)
00:000039A0 66FE            	  2607:             bne.s *                       * Check Z Flag  beq/bne
                            	  2608: 
                            	  2609: *     x(PC,Ds) --> x.w
00:000039A2 21FB30E80100    	  2610:             move.l  MOVE3(pc,d3),$0100 * LONG
00:000039A8 67FE            	  2611:             beq.s *                       * Check Z Flag  beq/bne
00:000039AA 6BFE            	  2612:             bmi.s *                       * Check N Flag  bmi/bpl
00:000039AC 0CB967FE6BFE0000	  2613:             cmpi.l #$67FE6BFE,8+MOVE3
00:000039B4 3994
00:000039B6 66FE            	  2614:             bne.s *                       * Check Z Flag  beq/bne
                            	  2615: 
                            	  2616: *     #x -->    n(An,AL)
00:000039B8 21BC787823231006	  2617:             move.l  #$78782323,6(a0,d1.w)    * LONG
00:000039C0 67FE            	  2618:             beq.s *                       * Check Z Flag  beq/bne
00:000039C2 6BFE            	  2619:             bmi.s *                       * Check N Flag  bmi/bpl
00:000039C4 0CB0787823231006	  2620:             cmpi.l #$78782323,6(a0,d1.w)
00:000039CC 66FE            	  2621:             bne.s *                       * Check Z Flag  beq/bne
                            	  2622: 
                            	  2623: 
00:000039CE 4E75            	  2624:          rts
                            	  2625: 
                            	  2626: 
                            	  2627: *-----------------------------------------------------------
                            	  2628: *-----------------------------------------------------------
                            	  2629: * OPCODE : MOVE_xxx_FLAGS
                            	  2630: *-----------------------------------------------------------
                            	  2631: *-----------------------------------------------------------
                            	  2632: op_MOVE_xxx_FLAGS:
                            	  2633: 
                            	  2634: *     Move_To_SR
                            	  2635: 
                            	  2636: *     Dn
                            	  2637: 
00:000039D0 303C2FFF        	  2638:             move.w #$2FFF,d0
00:000039D4 46C0            	  2639:             move.w d0,SR
00:000039D6 6AFE            	  2640:             bpl.s *           * branch if Z clear
00:000039D8 66FE            	  2641:             bne.s *           * branch if N clear
00:000039DA 68FE            	  2642:             bvc.s *           * branch if V clear
00:000039DC 64FE            	  2643:             bcc.s *           * branch if C clear
00:000039DE 303C2F00        	  2644:             move.w #$2F00,d0
00:000039E2 44C0            	  2645:             move d0,CCR
00:000039E4 67FE            	  2646:             beq.s *           * branch if Z set
00:000039E6 6BFE            	  2647:             bmi.s *           * branch if N set
00:000039E8 69FE            	  2648:             bvs.s *           * branch if V set
00:000039EA 65FE            	  2649:             bcs.s *           * branch if C set
                            	  2650: 
00:000039EC 303C2000        	  2651:             move.w #$2000,d0
00:000039F0 46C0            	  2652:             move.w d0,SR
00:000039F2 67FE            	  2653:             beq.s *           * branch if Z set
00:000039F4 6BFE            	  2654:             bmi.s *           * branch if N set
00:000039F6 69FE            	  2655:             bvs.s *           * branch if V set
00:000039F8 65FE            	  2656:             bcs.s *           * branch if C set
                            	  2657: 
                            	  2658: *     (An)
00:000039FA 307C0100        	  2659:             move.l #$00000100,a0
00:000039FE 30BC2FFF        	  2660:             move.w #$2FFF,(a0)
00:00003A02 46D0            	  2661:             move.w (a0),SR
00:00003A04 6AFE            	  2662:             bpl.s *           * branch if Z clear
00:00003A06 66FE            	  2663:             bne.s *           * branch if N clear
00:00003A08 68FE            	  2664:             bvc.s *           * branch if V clear
00:00003A0A 64FE            	  2665:             bcc.s *           * branch if C clear
                            	  2666: 
00:00003A0C 30BC2000        	  2667:             move.w #$2000,(a0)
00:00003A10 46D0            	  2668:             move.w (a0),SR
00:00003A12 67FE            	  2669:             beq.s *           * branch if Z set
00:00003A14 6BFE            	  2670:             bmi.s *           * branch if N set
00:00003A16 69FE            	  2671:             bvs.s *           * branch if V set
00:00003A18 65FE            	  2672:             bcs.s *           * branch if C set
                            	  2673: 
                            	  2674: *     (An)+
00:00003A1A 307C0100        	  2675:             move.l #$00000100,a0
00:00003A1E 30BC2FFF        	  2676:             move.w #$2FFF,(a0)
00:00003A22 46D8            	  2677:             move.w (a0)+,SR
00:00003A24 6AFE            	  2678:             bpl.s *           * branch if Z clear
00:00003A26 66FE            	  2679:             bne.s *           * branch if N clear
00:00003A28 68FE            	  2680:             bvc.s *           * branch if V clear
00:00003A2A 64FE            	  2681:             bcc.s *           * branch if C clear
                            	  2682: 
00:00003A2C 30BC2000        	  2683:             move.w #$2000,(a0)
00:00003A30 46D8            	  2684:             move.w (a0)+,SR
00:00003A32 67FE            	  2685:             beq.s *           * branch if Z set
00:00003A34 6BFE            	  2686:             bmi.s *           * branch if N set
00:00003A36 69FE            	  2687:             bvs.s *           * branch if V set
00:00003A38 65FE            	  2688:             bcs.s *           * branch if C set
                            	  2689: 
                            	  2690: *     -(An)
00:00003A3A 307C0102        	  2691:             move.l #$00000102,a0
00:00003A3E 30BC2FFF        	  2692:             move.w #$2FFF,(a0)
00:00003A42 46D8            	  2693:             move.w (a0)+,SR
00:00003A44 6AFE            	  2694:             bpl.s *           * branch if Z clear
00:00003A46 66FE            	  2695:             bne.s *           * branch if N clear
00:00003A48 68FE            	  2696:             bvc.s *           * branch if V clear
00:00003A4A 64FE            	  2697:             bcc.s *           * branch if C clear
                            	  2698: 
00:00003A4C 30BC2000        	  2699:             move.w #$2000,(a0)
00:00003A50 46D8            	  2700:             move.w (a0)+,SR
00:00003A52 67FE            	  2701:             beq.s *           * branch if Z set
00:00003A54 6BFE            	  2702:             bmi.s *           * branch if N set
00:00003A56 69FE            	  2703:             bvs.s *           * branch if V set
00:00003A58 65FE            	  2704:             bcs.s *           * branch if C set
                            	  2705: 
                            	  2706: *     n(An)
00:00003A5A 307C0102        	  2707:             move.l #$00000102,a0
00:00003A5E 317C2FFF0002    	  2708:             move.w #$2FFF,2(a0)
00:00003A64 46E80002        	  2709:             move.w 2(a0),SR
00:00003A68 6AFE            	  2710:             bpl.s *           * branch if Z clear
00:00003A6A 66FE            	  2711:             bne.s *           * branch if N clear
00:00003A6C 68FE            	  2712:             bvc.s *           * branch if V clear
00:00003A6E 64FE            	  2713:             bcc.s *           * branch if C clear
                            	  2714: 
00:00003A70 317C20000002    	  2715:             move.w #$2000,2(a0)
00:00003A76 46E80002        	  2716:             move.w 2(a0),SR
00:00003A7A 67FE            	  2717:             beq.s *           * branch if Z set
00:00003A7C 6BFE            	  2718:             bmi.s *           * branch if N set
00:00003A7E 69FE            	  2719:             bvs.s *           * branch if V set
00:00003A80 65FE            	  2720:             bcs.s *           * branch if C set
                            	  2721: 
                            	  2722: *     n(An,Rn.l)
00:00003A82 307C0100        	  2723:             move.l #$00000100,a0
00:00003A86 7002            	  2724:             moveq  #$00000002,d0
00:00003A88 31BC2FFF0802    	  2725:             move.w #$2FFF,2(a0,d0.l)
00:00003A8E 46F00802        	  2726:             move.w 2(a0,d0.l),SR
00:00003A92 6AFE            	  2727:             bpl.s *           * branch if Z clear
00:00003A94 66FE            	  2728:             bne.s *           * branch if N clear
00:00003A96 68FE            	  2729:             bvc.s *           * branch if V clear
00:00003A98 64FE            	  2730:             bcc.s *           * branch if C clear
                            	  2731: 
00:00003A9A 31BC20000802    	  2732:             move.w #$2000,2(a0,d0.l)
00:00003AA0 46F00802        	  2733:             move.w 2(a0,d0.l),SR
00:00003AA4 67FE            	  2734:             beq.s *           * branch if Z set
00:00003AA6 6BFE            	  2735:             bmi.s *           * branch if N set
00:00003AA8 69FE            	  2736:             bvs.s *           * branch if V set
00:00003AAA 65FE            	  2737:             bcs.s *           * branch if C set
                            	  2738: 
                            	  2739: *     x.W
00:00003AAC 31FC2FFF0100    	  2740:             move.w #$2FFF,$0100
00:00003AB2 46F80100        	  2741:             move.w $0100,SR
00:00003AB6 6AFE            	  2742:             bpl.s *           * branch if Z clear
00:00003AB8 66FE            	  2743:             bne.s *           * branch if N clear
00:00003ABA 68FE            	  2744:             bvc.s *           * branch if V clear
00:00003ABC 64FE            	  2745:             bcc.s *           * branch if C clear
                            	  2746: 
00:00003ABE 31FC20000100    	  2747:             move.w #$2000,$0100
00:00003AC4 46F80100        	  2748:             move.w $0100,SR
00:00003AC8 67FE            	  2749:             beq.s *           * branch if Z set
00:00003ACA 6BFE            	  2750:             bmi.s *           * branch if N set
00:00003ACC 69FE            	  2751:             bvs.s *           * branch if V set
00:00003ACE 65FE            	  2752:             bcs.s *           * branch if C set
                            	  2753: 
                            	  2754: *     x.L
00:00003AD0 33FC2FFF00010100	  2755:             move.w #$2FFF,$00010100
00:00003AD8 46F900010100    	  2756:             move.w $00010100,SR
00:00003ADE 6AFE            	  2757:             bpl.s *           * branch if Z clear
00:00003AE0 66FE            	  2758:             bne.s *           * branch if N clear
00:00003AE2 68FE            	  2759:             bvc.s *           * branch if V clear
00:00003AE4 64FE            	  2760:             bcc.s *           * branch if C clear
                            	  2761: 
00:00003AE6 33FC200000010100	  2762: MOVE4:      move.w #$2000,$00010100
00:00003AEE 46F900010100    	  2763:             move.w $00010100,SR
00:00003AF4 67FE            	  2764:             beq.s *           * branch if Z set
00:00003AF6 6BFE            	  2765:             bmi.s *           * branch if N set
00:00003AF8 69FE            	  2766:             bvs.s *           * branch if V set
00:00003AFA 65FE            	  2767:             bcs.s *           * branch if C set
                            	  2768: 
                            	  2769: *     x(PC)
00:00003AFC 46FAFFEA        	  2770:             move.w MOVE4+2(pc),SR
00:00003B00 67FE            	  2771:             beq.s *           * branch if Z set
00:00003B02 6BFE            	  2772:             bmi.s *           * branch if N set
00:00003B04 69FE            	  2773:             bvs.s *           * branch if V set
00:00003B06 65FE            	  2774:             bcs.s *           * branch if C set
                            	  2775: 
                            	  2776: *     x(PC,d0.l)
00:00003B08 7000            	  2777:             moveq  #$00000000,d0
00:00003B0A 46FB08DC        	  2778:             move.w MOVE4+2(pc,d0.l),SR
00:00003B0E 67FE            	  2779:             beq.s *           * branch if Z set
00:00003B10 6BFE            	  2780:             bmi.s *           * branch if N set
00:00003B12 69FE            	  2781:             bvs.s *           * branch if V set
00:00003B14 65FE            	  2782:             bcs.s *           * branch if C set
00:00003B16 44FB08D0        	  2783:             move MOVE4+2(pc,d0.l),CCR
00:00003B1A 67FE            	  2784:             beq.s *           * branch if Z set
00:00003B1C 6BFE            	  2785:             bmi.s *           * branch if N set
00:00003B1E 69FE            	  2786:             bvs.s *           * branch if V set
00:00003B20 65FE            	  2787:             bcs.s *           * branch if C set
                            	  2788: 
                            	  2789: *     #x
00:00003B22 46FC2FFF        	  2790:             move.w #$2FFF,SR
00:00003B26 66FE            	  2791:             bne.s *           * branch if Z clear
00:00003B28 6AFE            	  2792:             bpl.s *           * branch if N clear
00:00003B2A 68FE            	  2793:             bvc.s *           * branch if V clear
00:00003B2C 64FE            	  2794:             bcc.s *           * branch if C clear
                            	  2795: 
                            	  2796: 
                            	  2797: 
                            	  2798: *  MOVE_From_SR
                            	  2799: 
                            	  2800: 
                            	  2801: 
                            	  2802: *     Dn
00:00003B2E 46FC275A        	  2803:             move.w #$275A,SR          * Initial value
00:00003B32 40C0            	  2804:             move.w SR,d0
00:00003B34 0C40271A        	  2805:             cmpi.w #$271A,d0
                            	  2806: * The following fails because sr bits are implemented and non-zero so later code works.           
                            	  2807: *            bne.s *                   * branch if Z set
                            	  2808: 
                            	  2809: *     (An)
00:00003B38 307C0100        	  2810:             move.l #$00000100,a0
00:00003B3C 46FC275A        	  2811:             move.w #$275A,SR          * Initial value
00:00003B40 40D0            	  2812:             move.w SR,(a0)
00:00003B42 0C50275A        	  2813:             cmpi.w #$275A,(a0)
00:00003B46 66FE            	  2814:             bne.s *                   * branch if Z set
                            	  2815: 
                            	  2816: *     (An)+
00:00003B48 307C0100        	  2817:             move.l #$00000100,a0
00:00003B4C 46FC257A        	  2818:             move.w #$257A,SR          * Initial value
00:00003B50 40D8            	  2819:             move.w SR,(a0)+
00:00003B52 307C0100        	  2820:             move.l #$00000100,a0
00:00003B56 0C58257A        	  2821:             cmpi.w #$257A,(a0)+
00:00003B5A 66FE            	  2822:             bne.s *                   * branch if Z set
                            	  2823: 
                            	  2824: *     -(An)
00:00003B5C 307C0102        	  2825:             move.l #$00000102,a0
00:00003B60 46FC2766        	  2826:             move.w #$2766,SR          * Initial value
00:00003B64 40E0            	  2827:             move.w SR,-(a0)
00:00003B66 307C0100        	  2828:             move.l #$00000100,a0
00:00003B6A 0C502766        	  2829:             cmpi.w #$2766,(a0)
00:00003B6E 66FE            	  2830:             bne.s *                   * branch if Z set
                            	  2831: 
                            	  2832: *     x(An)
00:00003B70 307C0102        	  2833:             move.l #$00000102,a0
00:00003B74 46FC2733        	  2834:             move.w #$2733,SR          * Initial value
00:00003B78 40E80004        	  2835:             move.w SR,4(a0)
00:00003B7C 0C6827330004    	  2836:             cmpi.w #$2733,4(a0)
00:00003B82 66FE            	  2837:             bne.s *                   * branch if Z set
                            	  2838: 
                            	  2839: *     x(An,rn)
00:00003B84 307C0102        	  2840:             move.l #$00000102,a0
00:00003B88 7004            	  2841:             moveq  #$00000004,d0
00:00003B8A 46FC275A        	  2842:             move.w #$275a,SR          * Initial value
00:00003B8E 40F00804        	  2843:             move.w SR,4(a0,d0.l)
00:00003B92 0C70275A0804    	  2844:             cmpi.w #$275a,4(a0,d0.l)
00:00003B98 66FE            	  2845:             bne.s *                   * branch if Z set
                            	  2846: 
                            	  2847: *     x.W
00:00003B9A 46FC2777        	  2848:             move.w #$2777,SR          * Initial value
00:00003B9E 40F80102        	  2849:             move.w SR,$0102
00:00003BA2 0C7827770102    	  2850:             cmpi.w #$2777,$0102
00:00003BA8 66FE            	  2851:             bne.s *                   * branch if Z set
                            	  2852: 
                            	  2853: *     x.L
00:00003BAA 46FC2777        	  2854:             move.w #$2777,SR          * Initial value
00:00003BAE 40F900010102    	  2855:             move.w SR,$10102
00:00003BB4 0C79277700010102	  2856:             cmpi.w #$2777,$10102
00:00003BBC 66FE            	  2857:             bne.s *                   * branch if Z set
                            	  2858: 
                            	  2859: 
                            	  2860: 
00:00003BBE 46FC2700        	  2861:             move.w #$2700,SR          * Put flags back to initial value
                            	  2862: 
00:00003BC2 4E75            	  2863:             rts
                            	  2864: 
                            	  2865: 
                            	  2866: *-----------------------------------------------------------
                            	  2867: *-----------------------------------------------------------
                            	  2868: * OPCODE : EXT
                            	  2869: *-----------------------------------------------------------
                            	  2870: *-----------------------------------------------------------
                            	  2871: op_EXT:
                            	  2872: 
00:00003BC4 707F            	  2873:             move.l #$0000007F,d0
00:00003BC6 223C00008FFF    	  2874:             move.l #$00008FFF,d1
00:00003BCC 7400            	  2875:             moveq  #$00000000,d2
                            	  2876: 
00:00003BCE 4880            	  2877:             ext.w d0
00:00003BD0 6BFE            	  2878:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003BD2 67FE            	  2879:             beq.s *                   * Check Z Flag  beq/bne
00:00003BD4 0C800000007F    	  2880:             cmpi.l #$0000007F,d0
00:00003BDA 66FE            	  2881:             bne.s *                   * branch if Z set
                            	  2882: 
00:00003BDC 48C1            	  2883:             ext.l d1
00:00003BDE 6AFE            	  2884:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003BE0 67FE            	  2885:             beq.s *                   * Check Z Flag  beq/bne
00:00003BE2 0C81FFFF8FFF    	  2886:             cmpi.l #$FFFF8FFF,d1
00:00003BE8 66FE            	  2887:             bne.s *                   * branch if Z set
                            	  2888: 
00:00003BEA 48C2            	  2889:             ext.l d2
00:00003BEC 66FE            	  2890:             bne.s *                   * Check Z Flag  beq/bne
                            	  2891: 
                            	  2892: 
                            	  2893: 
00:00003BEE 4E75            	  2894:             rts
                            	  2895: 
                            	  2896: 
                            	  2897: *-----------------------------------------------------------
                            	  2898: *-----------------------------------------------------------
                            	  2899: * OPCODE : SWAP
                            	  2900: *-----------------------------------------------------------
                            	  2901: *-----------------------------------------------------------
                            	  2902: op_SWAP:
                            	  2903: 
00:00003BF0 203C12345678    	  2904:             move.l #$12345678,d0
                            	  2905: 
00:00003BF6 4840            	  2906:             swap d0
00:00003BF8 6BFE            	  2907:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003BFA 67FE            	  2908:             beq.s *                   * Check Z Flag  beq/bne
00:00003BFC 0C8056781234    	  2909:             cmpi.l #$56781234,d0
00:00003C02 66FE            	  2910:             bne.s *                   * branch if Z set
                            	  2911: 
                            	  2912: 
                            	  2913: 
00:00003C04 4E75            	  2914:             rts
                            	  2915: 
                            	  2916: 
                            	  2917: *-----------------------------------------------------------
                            	  2918: *-----------------------------------------------------------
                            	  2919: * OPCODE : LEA_PEA
                            	  2920: *-----------------------------------------------------------
                            	  2921: *-----------------------------------------------------------
                            	  2922: op_LEAPEA:
                            	  2923: 
00:00003C06 207C00345678    	  2924:             move.l #$00345678,a0
00:00003C0C 7800            	  2925:             moveq  #$00000000,d4
                            	  2926: 
                            	  2927: *     (An)
00:00003C0E 4DD0            	  2928:             lea (a0),a6
00:00003C10 200E            	  2929:             move.l a6,d0
00:00003C12 0C8000345678    	  2930:             cmpi.l #$00345678,d0
00:00003C18 66FE            	  2931:             bne.s *                   * branch if Z set
00:00003C1A 4850            	  2932:             pea (a0)
00:00003C1C 0C9700345678    	  2933:             cmpi.l #$00345678,(a7)
00:00003C22 66FE            	  2934:             bne.s *                   * branch if Z set
                            	  2935:             * This was without a specifier which the assembler defaulted to .w
00:00003C24 588F            	  2936:             addq.l #4,a7            * Restore Stack Pointer
                            	  2937: 
                            	  2938: *     x(An)
00:00003C26 4DE80004        	  2939:             lea 4(a0),a6
00:00003C2A 200E            	  2940:             move.l a6,d0
00:00003C2C 0C800034567C    	  2941:             cmpi.l #$0034567C,d0
00:00003C32 66FE            	  2942:             bne.s *                   * branch if Z set
00:00003C34 48680004        	  2943:             pea 4(a0)
00:00003C38 0C970034567C    	  2944:             cmpi.l #$0034567C,(a7)
00:00003C3E 66FE            	  2945:             bne.s *                   * branch if Z set
                            	  2946:             * This was without a specifier which the assembler defaulted to .w
00:00003C40 588F            	  2947:             addq.l #4,a7            * Restore Stack Pointer
                            	  2948: 
                            	  2949: *     x(An,Dn.l)
00:00003C42 4DF04004        	  2950:             lea 4(a0,d4),a6
00:00003C46 200E            	  2951:             move.l a6,d0
00:00003C48 0C800034567C    	  2952:             cmpi.l #$0034567C,d0
00:00003C4E 66FE            	  2953:             bne.s *                   * branch if Z set
00:00003C50 48704804        	  2954:             pea 4(a0,d4.l)
00:00003C54 0C970034567C    	  2955:             cmpi.l #$0034567C,(a7)
00:00003C5A 66FE            	  2956:             bne.s *                   * branch if Z set
                            	  2957:             * This was without a specifier which the assembler defaulted to .w
00:00003C5C 588F            	  2958:             addq.l #4,a7            * Restore Stack Pointer
                            	  2959: 
                            	  2960: *     x.W
00:00003C5E 4DF81234        	  2961:             lea $1234,a6
00:00003C62 200E            	  2962:             move.l a6,d0
00:00003C64 0C401234        	  2963:             cmpi.w #$1234,d0
00:00003C68 66FE            	  2964:             bne.s *                   * branch if Z set
00:00003C6A 48781234        	  2965:             pea $1234
00:00003C6E 0C9700001234    	  2966:             cmpi.l #$00001234,(a7)
00:00003C74 66FE            	  2967:             bne.s *                   * branch if Z set
                            	  2968:             * This was without a specifier which the assembler defaulted to .w
00:00003C76 588F            	  2969:             addq.l #4,a7            * Restore Stack Pointer
                            	  2970: 
                            	  2971: *     x.L
00:00003C78 4DF900345678    	  2972:             lea $00345678,a6
00:00003C7E 200E            	  2973:             move.l a6,d0
00:00003C80 B08E            	  2974:             cmp.l a6,d0
00:00003C82 66FE            	  2975:             bne.s *                   * branch if Z set
00:00003C84 487900345678    	  2976:             pea $00345678
00:00003C8A 0C9700345678    	  2977:             cmpi.l #$00345678,(a7)
00:00003C90 66FE            	  2978:             bne.s *                   * branch if Z set
                            	  2979:             * This was without a specifier which the assembler defaulted to .w
00:00003C92 588F            	  2980:             addq.l #4,a7            * Restore Stack Pointer
                            	  2981: 
                            	  2982: *     x(PC)
00:00003C94 4DFA0008        	  2983:             lea LEA1(pc),a6
00:00003C98 200E            	  2984:             move.l a6,d0
00:00003C9A B08E            	  2985:             cmp.l a6,d0
00:00003C9C 66FE            	  2986:             bne.s *                   * branch if Z set
00:00003C9E 487AFFFE        	  2987: LEA1:       pea LEA1(pc)
00:00003CA2 0C970000241E    	  2988:             cmpi.l #$0000241E,(a7)
00:00003CA8 67FE            	  2989:             beq.s *                   * branch if Z clear
                            	  2990:             * This was without a specifier which the assembler defaulted to .w
00:00003CAA 588F            	  2991:             addq.l #4,a7              * Restore Stack Pointer
                            	  2992: 
                            	  2993: 
                            	  2994: 
                            	  2995: 
00:00003CAC 46FC2700        	  2996:             move.w #$2700,sr          * Put flags back to initial value
                            	  2997: 
00:00003CB0 4E75            	  2998:             rts
                            	  2999:  	
                            	  3000: 
                            	  3001: 
                            	  3002: *-----------------------------------------------------------
                            	  3003: *-----------------------------------------------------------
                            	  3004: * OPCODE : LEA_TAS
                            	  3005: *-----------------------------------------------------------
                            	  3006: *-----------------------------------------------------------
                            	  3007: op_TAS:
                            	  3008: 
                            	  3009: *     Test just one addressing mode
                            	  3010: 
00:00003CB2 307C0100        	  3011:             move.l #$00000100,a0
                            	  3012: 
                            	  3013: *     (An)
00:00003CB6 4210            	  3014:             move.b #$00,(a0)
00:00003CB8 6BFE            	  3015:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003CBA 66FE            	  3016:             bne.s *                   * Check Z Flag  beq/bne
00:00003CBC 4AD0            	  3017:             tas (a0)
00:00003CBE 0C100080        	  3018:             cmpi.b #$80,(a0)
00:00003CC2 66FE            	  3019:             bne.s *                   * branch if Z set
00:00003CC4 10BC00F5        	  3020:             move.b #$F5,(a0)
00:00003CC8 4AD0            	  3021:             tas (a0)
00:00003CCA 6AFE            	  3022:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003CCC 67FE            	  3023:             beq.s *                   * Check Z Flag  beq/bne
00:00003CCE 4AD0            	  3024:             tas (a0)
00:00003CD0 0C1000F5        	  3025:             cmpi.b #$F5,(a0)
00:00003CD4 66FE            	  3026:             bne.s *                   * branch if Z set
                            	  3027: 
00:00003CD6 4E75            	  3028:             rts
                            	  3029: 
                            	  3030: 
                            	  3031: *-----------------------------------------------------------
                            	  3032: *-----------------------------------------------------------
                            	  3033: * OPCODE : LEA_TST
                            	  3034: *-----------------------------------------------------------
                            	  3035: *-----------------------------------------------------------
                            	  3036: op_TST:
                            	  3037: 
                            	  3038: *     Test just one addressing mode
                            	  3039: 
00:00003CD8 307C0100        	  3040:             move.l #$00000100,a0
                            	  3041: 
                            	  3042: *     (An) - BYTE
00:00003CDC 4210            	  3043:             move.b #$00,(a0)
00:00003CDE 4A10            	  3044:             tst.b (a0)
00:00003CE0 6BFE            	  3045:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003CE2 66FE            	  3046:             bne.s *                   * Check Z Flag  beq/bne
00:00003CE4 10BC00F5        	  3047:             move.b #$F5,(a0)
00:00003CE8 4A10            	  3048:             tst.b (a0)
00:00003CEA 6AFE            	  3049:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003CEC 67FE            	  3050:             beq.s *                   * Check Z Flag  beq/bne
                            	  3051: 
                            	  3052: *     (An) - WORD
00:00003CEE 4250            	  3053:             move.w #$0000,(a0)
00:00003CF0 4A50            	  3054:             tst.w (a0)
00:00003CF2 6BFE            	  3055:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003CF4 66FE            	  3056:             bne.s *                   * Check Z Flag  beq/bne
00:00003CF6 30BCF567        	  3057:             move.w #$F567,(a0)
00:00003CFA 4A50            	  3058:             tst.w (a0)
00:00003CFC 6AFE            	  3059:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003CFE 67FE            	  3060:             beq.s *                   * Check Z Flag  beq/bne
                            	  3061: 
                            	  3062: *     (An) - LONG
00:00003D00 4290            	  3063:             move.l #$00000000,(a0)
00:00003D02 4A90            	  3064:             tst.l (a0)
00:00003D04 6BFE            	  3065:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D06 66FE            	  3066:             bne.s *                   * Check Z Flag  beq/bne
00:00003D08 20BCF56789AB    	  3067:             move.l #$F56789ab,(a0)
00:00003D0E 4A90            	  3068:             tst.l (a0)
00:00003D10 6AFE            	  3069:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D12 67FE            	  3070:             beq.s *                   * Check Z Flag  beq/bne
                            	  3071: 
                            	  3072: 
00:00003D14 4E75            	  3073:             rts
                            	  3074: 
                            	  3075: 
                            	  3076: *-----------------------------------------------------------
                            	  3077: *-----------------------------------------------------------
                            	  3078: * OPCODE : LINKS
                            	  3079: *-----------------------------------------------------------
                            	  3080: *-----------------------------------------------------------
                            	  3081: op_LINKS:
                            	  3082: 
00:00003D16 207C11223344    	  3083:             move.l #$11223344,a0
00:00003D1C 203C11223344    	  3084:             move.l #$11223344,d0
00:00003D22 4E500000        	  3085:             link a0,#$0
00:00003D26 0C9711223344    	  3086:             cmpi.l #$11223344,(a7)
                            	  3087: 
00:00003D2C 4E58            	  3088:             unlk a0
00:00003D2E B1C0            	  3089:             cmp.l d0,a0
00:00003D30 66FE            	  3090:             bne.s *                   * branch if Z set
                            	  3091: 
00:00003D32 4E75            	  3092:             rts
                            	  3093: 
                            	  3094: *-----------------------------------------------------------
                            	  3095: *-----------------------------------------------------------
                            	  3096: * OPCODE : MOVE_USP
                            	  3097: *-----------------------------------------------------------
                            	  3098: *-----------------------------------------------------------
                            	  3099: op_MOVE_USP:
                            	  3100: 
00:00003D34 207C11223344    	  3101:             move.l #$11223344,a0
00:00003D3A 4E60            	  3102:             move a0,USP
00:00003D3C 4E69            	  3103:             move USP,a1
00:00003D3E B3C8            	  3104:             cmp.l a0,a1
00:00003D40 66FE            	  3105:             bne.s *                   * branch if Z set
                            	  3106: 
00:00003D42 4E75            	  3107:             rts
                            	  3108: 
                            	  3109: 
                            	  3110: *-----------------------------------------------------------
                            	  3111: *-----------------------------------------------------------
                            	  3112: * OPCODE : CHK
                            	  3113: *-----------------------------------------------------------
                            	  3114: *-----------------------------------------------------------
                            	  3115: 
                            	  3116: op_CHK:
                            	  3117: 
00:00003D44 20780018        	  3118: 	move.l 6*4,a0							; get check vector
00:00003D48 21FC000021C80018	  3119: 	move.l #EXCEPTION_6,6*4		; set vector
00:00003D50 303C1122        	  3120: 	move.w #$1122,d0
00:00003D54 323C1122        	  3121: 	move.w #$1122,d1
00:00003D58 4380            	  3122: 	chk d0,d1
                            	  3123: 
00:00003D5A 4E71            	  3124: 	nop
00:00003D5C 4E71            	  3125: 	nop
                            	  3126: 
00:00003D5E 323C1122        	  3127: 	move.w #$1122,d1
00:00003D62 43BC1122        	  3128: 	chk #$1122,d1
                            	  3129: 
00:00003D66 323C1122        	  3130: 	move.w #$1122,d1
00:00003D6A 43BC007A        	  3131: 	chk #00122,d1
00:00003D6E BCBCEEEE0006    	  3132: 	cmp.l #$EEEE0006,d6
00:00003D74 66FE            	  3133: 	bne.s *                   ; branch if Z set
                            	  3134: 
00:00003D76 303C1122        	  3135: 	move.w #$1122,d0
00:00003D7A 323C8000        	  3136: 	move.w #$8000,d1
00:00003D7E 4380            	  3137: 	chk d0,d1
00:00003D80 BCBCEEEE0006    	  3138: 	cmp.l #$EEEE0006,d6
00:00003D86 66FE            	  3139: 	bne.s *                   ; branch if Z set
                            	  3140: 
00:00003D88 21C80018        	  3141: 	move.l a0,6*4							; restore old vector
00:00003D8C 4E75            	  3142: 	rts
                            	  3143: 
                            	  3144: 
                            	  3145: *-----------------------------------------------------------
                            	  3146: *-----------------------------------------------------------
                            	  3147: * OPCODE : NEGS
                            	  3148: *-----------------------------------------------------------
                            	  3149: *-----------------------------------------------------------
                            	  3150: op_NEGS:
                            	  3151: 
                            	  3152: *     NOT - BYTE
00:00003D8E 307C0100        	  3153:             move.l #$00000100,a0
00:00003D92 7000            	  3154:             moveq  #$00000000,d0
00:00003D94 4600            	  3155:             not.b d0
00:00003D96 6AFE            	  3156:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003D98 67FE            	  3157:             beq.s *                   * Check Z Flag  beq/bne
00:00003D9A 4600            	  3158:             not.b d0
00:00003D9C 6BFE            	  3159:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003D9E 66FE            	  3160:             bne.s *                   * Check Z Flag  beq/bne
00:00003DA0 4A00            	  3161:             cmpi.b #$00,d0
00:00003DA2 66FE            	  3162:             bne.s *                   * Check Z Flag  beq/bne
00:00003DA4 10BC0080        	  3163:             move.b #$80,(a0)
00:00003DA8 4610            	  3164:             not.b (a0)
00:00003DAA 6BFE            	  3165:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003DAC 67FE            	  3166:             beq.s *                   * Check Z Flag  beq/bne
00:00003DAE 4610            	  3167:             not.b (a0)
00:00003DB0 6AFE            	  3168:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003DB2 67FE            	  3169:             beq.s *                   * Check Z Flag  beq/bne
00:00003DB4 0C100080        	  3170:             cmpi.b #$80,(a0)
00:00003DB8 66FE            	  3171:             bne.s *                   * Check Z Flag  beq/bne
                            	  3172: 
                            	  3173: *     NOT - WORD
00:00003DBA 307C0100        	  3174:             move.l #$00000100,a0
00:00003DBE 7000            	  3175:             moveq  #$00000000,d0
00:00003DC0 4640            	  3176:             not.w d0
00:00003DC2 6AFE            	  3177:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003DC4 67FE            	  3178:             beq.s *                   * Check Z Flag  beq/bne
00:00003DC6 4640            	  3179:             not.w d0
00:00003DC8 6BFE            	  3180:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003DCA 66FE            	  3181:             bne.s *                   * Check Z Flag  beq/bne
00:00003DCC 4A40            	  3182:             cmpi.w #$0000,d0
00:00003DCE 66FE            	  3183:             bne.s *                   * Check Z Flag  beq/bne
00:00003DD0 30BC5A5A        	  3184:             move.w #$5a5a,(a0)
00:00003DD4 4650            	  3185:             not.w (a0)
00:00003DD6 6AFE            	  3186:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003DD8 67FE            	  3187:             beq.s *                   * Check Z Flag  beq/bne
00:00003DDA 4650            	  3188:             not.w (a0)
00:00003DDC 6BFE            	  3189:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003DDE 67FE            	  3190:             beq.s *                   * Check Z Flag  beq/bne
00:00003DE0 0C505A5A        	  3191:             cmpi.w #$5a5a,(a0)
00:00003DE4 66FE            	  3192:             bne.s *                   * Check Z Flag  beq/bne
                            	  3193: 
                            	  3194: *     NOT - LONG
00:00003DE6 307C0100        	  3195:             move.l #$00000100,a0
00:00003DEA 7000            	  3196:             moveq  #$00000000,d0
00:00003DEC 4680            	  3197:             not.l d0
00:00003DEE 6AFE            	  3198:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003DF0 67FE            	  3199:             beq.s *                   * Check Z Flag  beq/bne
00:00003DF2 4680            	  3200:             not.l d0
00:00003DF4 6BFE            	  3201:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003DF6 66FE            	  3202:             bne.s *                   * Check Z Flag  beq/bne
00:00003DF8 4A80            	  3203:             cmpi.l #$00000000,d0
00:00003DFA 66FE            	  3204:             bne.s *                   * Check Z Flag  beq/bne
00:00003DFC 20BC5A5A1234    	  3205:             move.l #$5a5a1234,(a0)
00:00003E02 4690            	  3206:             not.l (a0)
00:00003E04 6AFE            	  3207:             bpl.s *                   * Check N Flag  bmi/bpl
00:00003E06 67FE            	  3208:             beq.s *                   * Check Z Flag  beq/bne
00:00003E08 4690            	  3209:             not.l (a0)
00:00003E0A 6BFE            	  3210:             bmi.s *                   * Check N Flag  bmi/bpl
00:00003E0C 67FE            	  3211:             beq.s *                   * Check Z Flag  beq/bne
00:00003E0E 0C905A5A1234    	  3212:             cmpi.l #$5a5a1234,(a0)
00:00003E14 66FE            	  3213:             bne.s *                   * Check Z Flag  beq/bne
                            	  3214: 
                            	  3215: * -----
                            	  3216: 
                            	  3217: *     NEG - BYTE
00:00003E16 307C0100        	  3218:             move.l #$00000100,a0
00:00003E1A 7000            	  3219:             moveq  #$00000000,d0
00:00003E1C 7240D241        	  3220:             move.l #$00000080,d1
00:00003E20 4400            	  3221:             neg.b d0
00:00003E22 6BFE            	  3222:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E24 66FE            	  3223:             bne.s *                   * Check Z Flag  beq/bne 1
00:00003E26 65FE            	  3224:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00003E28 69FE            	  3225:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E2A 4401            	  3226:             neg.b d1
00:00003E2C 6AFE            	  3227:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E2E 67FE            	  3228:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E30 64FE            	  3229:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E32 68FE            	  3230:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00003E34 0C010080        	  3231:             cmpi.b #$80,d1
00:00003E38 66FE            	  3232:             bne.s *                   * Check Z Flag  beq/bne
00:00003E3A 10BC007F        	  3233:             move.b #$7F,(a0)
00:00003E3E 4410            	  3234:             neg.b (a0)
00:00003E40 6AFE            	  3235:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E42 67FE            	  3236:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E44 64FE            	  3237:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E46 69FE            	  3238:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E48 10BC00F5        	  3239:             move.b #$F5,(a0)
00:00003E4C 4410            	  3240:             neg.b (a0)
00:00003E4E 6BFE            	  3241:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E50 67FE            	  3242:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E52 64FE            	  3243:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E54 69FE            	  3244:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E56 0C10000B        	  3245:             cmpi.b #$0B,(a0)
00:00003E5A 66FE            	  3246:             bne.s *                   * Check Z Flag  beq/bne
                            	  3247: 
                            	  3248: * -----
                            	  3249: 
                            	  3250: *     NEG - WORD
00:00003E5C 307C0100        	  3251:             move.l #$00000100,a0
00:00003E60 7000            	  3252:             moveq  #$00000000,d0
00:00003E62 223C00008000    	  3253:             move.l #$00008000,d1
00:00003E68 4440            	  3254:             neg.w d0
00:00003E6A 6BFE            	  3255:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E6C 66FE            	  3256:             bne.s *                   * Check Z Flag  beq/bne 1
00:00003E6E 65FE            	  3257:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00003E70 69FE            	  3258:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E72 4441            	  3259:             neg.w d1
00:00003E74 6AFE            	  3260:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E76 67FE            	  3261:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E78 64FE            	  3262:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E7A 68FE            	  3263:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00003E7C 0C418000        	  3264:             cmpi.w #$8000,d1
00:00003E80 66FE            	  3265:             bne.s *                   * Check Z Flag  beq/bne
00:00003E82 30BC7FFF        	  3266:             move.w #$7FFF,(a0)
00:00003E86 4450            	  3267:             neg.w (a0)
00:00003E88 6AFE            	  3268:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003E8A 67FE            	  3269:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E8C 64FE            	  3270:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E8E 69FE            	  3271:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E90 30BCF578        	  3272:             move.w #$F578,(a0)
00:00003E94 4450            	  3273:             neg.w (a0)
00:00003E96 6BFE            	  3274:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003E98 67FE            	  3275:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003E9A 64FE            	  3276:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003E9C 69FE            	  3277:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003E9E 0C500A88        	  3278:             cmpi.w #$0A88,(a0)
00:00003EA2 66FE            	  3279:             bne.s *                   * Check Z Flag  beq/bne
                            	  3280: 
                            	  3281: * -----
                            	  3282: 
                            	  3283: *     NEG - LONG
00:00003EA4 307C0100        	  3284:             move.l #$00000100,a0
00:00003EA8 7000            	  3285:             moveq  #$00000000,d0
00:00003EAA 223C80000000    	  3286:             move.l #$80000000,d1
00:00003EB0 4480            	  3287:             neg.l d0
00:00003EB2 6BFE            	  3288:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003EB4 66FE            	  3289:             bne.s *                   * Check Z Flag  beq/bne 1
00:00003EB6 65FE            	  3290:             bcs.s *                   * Check C Flag  bcc/bcs 1
00:00003EB8 69FE            	  3291:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003EBA 4481            	  3292:             neg.l d1
00:00003EBC 6AFE            	  3293:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003EBE 67FE            	  3294:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003EC0 64FE            	  3295:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003EC2 68FE            	  3296:             bvc.s *                   * Check V Flag  bvc/bvs 0
00:00003EC4 0C8180000000    	  3297:             cmpi.l #$80000000,d1
00:00003ECA 66FE            	  3298:             bne.s *                   * Check Z Flag  beq/bne
00:00003ECC 20BC7FFFFFFF    	  3299:             move.l #$7FFFFFFF,(a0)
00:00003ED2 4490            	  3300:             neg.l (a0)
00:00003ED4 6AFE            	  3301:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003ED6 67FE            	  3302:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003ED8 64FE            	  3303:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003EDA 69FE            	  3304:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003EDC 20BCF5781234    	  3305:             move.l #$F5781234,(a0)
00:00003EE2 4490            	  3306:             neg.l (a0)
00:00003EE4 6BFE            	  3307:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003EE6 67FE            	  3308:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003EE8 64FE            	  3309:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003EEA 69FE            	  3310:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003EEC 0C900A87EDCC    	  3311:             cmpi.l #$0A87EDCC,(a0)
00:00003EF2 66FE            	  3312:             bne.s *                   * Check Z Flag  beq/bne
                            	  3313: 
                            	  3314: 
                            	  3315: * -----
                            	  3316: 
                            	  3317: *     NEGX - BYTE
00:00003EF4 307C0100        	  3318:             move.l #$00000100,a0
00:00003EF8 7000            	  3319:             moveq  #$00000000,d0
00:00003EFA 7240D241        	  3320:             move.l #$00000080,d1
00:00003EFE 003C0010        	  3321:             ori.b #$10,CCR        * Set X Flag
00:00003F02 4000            	  3322:             negx.b d0
00:00003F04 6AFE            	  3323:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003F06 67FE            	  3324:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003F08 64FE            	  3325:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003F0A 69FE            	  3326:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F0C 023C00EF        	  3327:             andi.b #$EF,CCR       * Clear X Flag
00:00003F10 4000            	  3328:             negx.b d0
00:00003F12 6BFE            	  3329:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003F14 67FE            	  3330:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003F16 64FE            	  3331:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003F18 69FE            	  3332:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F1A 003C0010        	  3333:             ori.b #$10,CCR        * Set X Flag
00:00003F1E 4001            	  3334:             negx.b d1
00:00003F20 6BFE            	  3335:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003F22 67FE            	  3336:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F24 64FE            	  3337:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F26 69FE            	  3338:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003F28 0C01007F        	  3339:             cmpi.b #$7F,d1
00:00003F2C 66FE            	  3340:             bne.s *                   * Check Z Flag  beq/bne
00:00003F2E 023C00EF        	  3341:             andi.b #$EF,CCR       * Clear X Flag
00:00003F32 4001            	  3342:             negx.b d1
00:00003F34 6AFE            	  3343:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003F36 67FE            	  3344:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F38 64FE            	  3345:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F3A 69FE            	  3346:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003F3C 0C010081        	  3347:             cmpi.b #$81,d1
00:00003F40 66FE            	  3348:             bne.s *                   * Check Z Flag  beq/bne
00:00003F42 10BC007F        	  3349:             move.b #$7F,(a0)
00:00003F46 003C0010        	  3350:             ori.b #$10,CCR        * Set X Flag
00:00003F4A 4010            	  3351:             negx.b (a0)
00:00003F4C 6AFE            	  3352:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003F4E 67FE            	  3353:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F50 64FE            	  3354:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3355:             * I think overflow should happen here.
                            	  3356: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F52 10BC007F        	  3357:             move.b #$7F,(a0)
00:00003F56 023C00EF        	  3358:             andi.b #$EF,CCR       * Clear X Flag
00:00003F5A 4010            	  3359:             negx.b (a0)
00:00003F5C 6AFE            	  3360:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003F5E 67FE            	  3361:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F60 64FE            	  3362:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F62 69FE            	  3363:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F64 10BC00F5        	  3364:             move.b #$F5,(a0)
00:00003F68 003C0010        	  3365:             ori.b #$10,CCR        * Set X Flag
00:00003F6C 4010            	  3366:             negx.b (a0)
00:00003F6E 6BFE            	  3367:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003F70 67FE            	  3368:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F72 64FE            	  3369:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F74 69FE            	  3370:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F76 0C10000A        	  3371:             cmpi.b #$0A,(a0)
00:00003F7A 66FE            	  3372:             bne.s *                   * Check Z Flag  beq/bne
00:00003F7C 023C00EF        	  3373:             andi.b #$EF,CCR       * Clear X Flag
00:00003F80 4010            	  3374:             negx.b (a0)
00:00003F82 6AFE            	  3375:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003F84 67FE            	  3376:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003F86 64FE            	  3377:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003F88 69FE            	  3378:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003F8A 0C1000F6        	  3379:             cmpi.b #$F6,(a0)
00:00003F8E 66FE            	  3380:             bne.s *                   * Check Z Flag  beq/bne
                            	  3381: 
                            	  3382: 
                            	  3383: 
                            	  3384: * -----
                            	  3385: 
                            	  3386: *     NEGX - WORD
00:00003F90 307C0100        	  3387:             move.l #$00000100,a0
00:00003F94 7000            	  3388:             moveq  #$00000000,d0
00:00003F96 223C00008000    	  3389:             move.l #$00008000,d1
00:00003F9C 003C0010        	  3390:             ori.b #$10,CCR        * Set X Flag
00:00003FA0 4040            	  3391:             negx.w d0
00:00003FA2 6AFE            	  3392:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00003FA4 67FE            	  3393:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003FA6 64FE            	  3394:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003FA8 69FE            	  3395:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FAA 023C00EF        	  3396:             andi.b #$EF,CCR       * Clear X Flag
00:00003FAE 4040            	  3397:             negx.w d0
00:00003FB0 6BFE            	  3398:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00003FB2 67FE            	  3399:             beq.s *                   * Check Z Flag  beq/bne 1
00:00003FB4 64FE            	  3400:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00003FB6 69FE            	  3401:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FB8 003C0010        	  3402:             ori.b #$10,CCR        * Set X Flag
00:00003FBC 4041            	  3403:             negx.w d1
00:00003FBE 6BFE            	  3404:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003FC0 67FE            	  3405:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FC2 64FE            	  3406:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003FC4 69FE            	  3407:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003FC6 0C417FFF        	  3408:             cmpi.w #$7FFF,d1
00:00003FCA 66FE            	  3409:             bne.s *                   * Check Z Flag  beq/bne
00:00003FCC 023C00EF        	  3410:             andi.b #$EF,CCR       * Clear X Flag
00:00003FD0 4041            	  3411:             negx.w d1
00:00003FD2 6AFE            	  3412:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003FD4 67FE            	  3413:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FD6 64FE            	  3414:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00003FD8 69FE            	  3415:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00003FDA 0C418001        	  3416:             cmpi.w #$8001,d1
00:00003FDE 66FE            	  3417:             bne.s *                   * Check Z Flag  beq/bne
00:00003FE0 30BC7FFF        	  3418:             move.w #$7FFF,(a0)
00:00003FE4 003C0010        	  3419:             ori.b #$10,CCR        * Set X Flag
00:00003FE8 4050            	  3420:             negx.w (a0)
00:00003FEA 6AFE            	  3421:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00003FEC 67FE            	  3422:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FEE 64FE            	  3423:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3424: ***            
                            	  3425: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00003FF0 30BCF567        	  3426:             move.w #$F567,(a0)
00:00003FF4 023C00EF        	  3427:             andi.b #$EF,CCR       * Clear X Flag
00:00003FF8 4050            	  3428:             negx.w (a0)
00:00003FFA 6BFE            	  3429:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:00003FFC 67FE            	  3430:             beq.s *                   * Check Z Flag  beq/bne 0
00:00003FFE 64FE            	  3431:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004000 69FE            	  3432:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004002 30BCF567        	  3433:             move.w #$F567,(a0)
00:00004006 003C0010        	  3434:             ori.b #$10,CCR        * Set X Flag
00:0000400A 4050            	  3435:             negx.w (a0)
00:0000400C 6BFE            	  3436:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000400E 67FE            	  3437:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004010 64FE            	  3438:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004012 69FE            	  3439:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004014 0C500A98        	  3440:             cmpi.w #$0A98,(a0)
00:00004018 66FE            	  3441:             bne.s *                   * Check Z Flag  beq/bne
00:0000401A 023C00EF        	  3442:             andi.b #$EF,CCR       * Clear X Flag
00:0000401E 4050            	  3443:             negx.w (a0)
00:00004020 6AFE            	  3444:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00004022 67FE            	  3445:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004024 64FE            	  3446:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004026 69FE            	  3447:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004028 0C50F568        	  3448:             cmpi.w #$F568,(a0)
00:0000402C 66FE            	  3449:             bne.s *                   * Check Z Flag  beq/bne
                            	  3450: 
                            	  3451: 
                            	  3452: * -----
                            	  3453: 
                            	  3454: *     NEGX - LONG
00:0000402E 307C0100        	  3455:             move.l #$00000100,a0
00:00004032 7000            	  3456:             moveq  #$00000000,d0
00:00004034 223C80000000    	  3457:             move.l #$80000000,d1
00:0000403A 003C0010        	  3458:             ori.b #$10,CCR        * Set X Flag
00:0000403E 4080            	  3459:             negx.l d0
00:00004040 6AFE            	  3460:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:00004042 67FE            	  3461:             beq.s *                   * Check Z Flag  beq/bne 1
00:00004044 64FE            	  3462:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00004046 69FE            	  3463:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004048 023C00EF        	  3464:             andi.b #$EF,CCR       * Clear X Flag
00:0000404C 4080            	  3465:             negx.l d0
00:0000404E 6BFE            	  3466:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004050 67FE            	  3467:             beq.s *                   * Check Z Flag  beq/bne 1
00:00004052 64FE            	  3468:             bcc.s *                   * Check C Flag  bcc/bcs 1
00:00004054 69FE            	  3469:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004056 003C0010        	  3470:             ori.b #$10,CCR        * Set X Flag
00:0000405A 4081            	  3471:             negx.l d1
00:0000405C 6BFE            	  3472:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:0000405E 67FE            	  3473:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004060 64FE            	  3474:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:00004062 69FE            	  3475:             bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004064 0C817FFFFFFF    	  3476:             cmpi.l #$7FFFFFFF,d1
00:0000406A 66FE            	  3477:             bne.s *                   * Check Z Flag  beq/bne
00:0000406C 023C00EF        	  3478:             andi.b #$EF,CCR       * Clear X Flag
00:00004070 4081            	  3479:             negx.l d1
00:00004072 6AFE            	  3480:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:00004074 67FE            	  3481:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004076 64FE            	  3482:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3483: ****            
                            	  3484: *            bvs.s *                   * Check V Flag  bvc/bvs 0
00:00004078 0C8180000001    	  3485:             cmpi.l #$80000001,d1
00:0000407E 66FE            	  3486:             bne.s *                   * Check Z Flag  beq/bne
00:00004080 20BC00007FFF    	  3487:             move.l #$7FFF,(a0)
00:00004086 003C0010        	  3488:             ori.b #$10,CCR        * Set X Flag
00:0000408A 4090            	  3489:             negx.l (a0)
00:0000408C 6AFE            	  3490:             bpl.s *                   * Check N Flag  bmi/bpl 1
00:0000408E 67FE            	  3491:             beq.s *                   * Check Z Flag  beq/bne 0
00:00004090 64FE            	  3492:             bcc.s *                   * Check C Flag  bcc/bcs 0
                            	  3493: ****            
                            	  3494: *            bvs.s *                   * Check V Flag  bvc/bvs 1
00:00004092 20BCF5671234    	  3495:             move.l #$F5671234,(a0)
00:00004098 023C00EF        	  3496:             andi.b #$EF,CCR       * Clear X Flag
00:0000409C 4090            	  3497:             negx.l (a0)
00:0000409E 6BFE            	  3498:             bmi.s *                   * Check N Flag  bmi/bpl 1
00:000040A0 67FE            	  3499:             beq.s *                   * Check Z Flag  beq/bne 0
00:000040A2 64FE            	  3500:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000040A4 69FE            	  3501:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000040A6 20BCF5675678    	  3502:             move.l #$F5675678,(a0)
00:000040AC 003C0010        	  3503:             ori.b #$10,CCR        * Set X Flag
00:000040B0 4090            	  3504:             negx.l (a0)
00:000040B2 6BFE            	  3505:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:000040B4 67FE            	  3506:             beq.s *                   * Check Z Flag  beq/bne 0
00:000040B6 64FE            	  3507:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000040B8 69FE            	  3508:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000040BA 0C900A98A987    	  3509:             cmpi.l #$0A98A987,(a0)
00:000040C0 66FE            	  3510:             bne.s *                   * Check Z Flag  beq/bne
00:000040C2 023C00EF        	  3511:             andi.b #$EF,CCR       * Clear X Flag
00:000040C6 4090            	  3512:             negx.l (a0)
00:000040C8 6AFE            	  3513:             bpl.s *                   * Check N Flag  bmi/bpl 0
00:000040CA 67FE            	  3514:             beq.s *                   * Check Z Flag  beq/bne 0
00:000040CC 64FE            	  3515:             bcc.s *                   * Check C Flag  bcc/bcs 0
00:000040CE 69FE            	  3516:             bvs.s *                   * Check V Flag  bvc/bvs 1
00:000040D0 0C90F5675679    	  3517:             cmpi.l #$F5675679,(a0)
00:000040D6 66FE            	  3518:             bne.s *                   * Check Z Flag  beq/bne
                            	  3519: 
                            	  3520: 
                            	  3521: * -----
                            	  3522: 
                            	  3523: *     CLR - BYTE
00:000040D8 307C0100        	  3524:             move.l #$00000100,a0
00:000040DC 203C12345678    	  3525:             move.l #$12345678,d0
00:000040E2 223C12345678    	  3526:             move.l #$12345678,d1
00:000040E8 243C12345678    	  3527:             move.l #$12345678,d2
00:000040EE 283C12345600    	  3528:             move.l #$12345600,d4
00:000040F4 2A3C12340000    	  3529:             move.l #$12340000,d5
00:000040FA 7C00            	  3530:             moveq  #$00000000,d6
                            	  3531: 
00:000040FC 4200            	  3532:             clr.b d0
00:000040FE 66FE            	  3533:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004100 6BFE            	  3534:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004102 B880            	  3535:             cmp.l d0,d4
00:00004104 66FE            	  3536:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3537: 
00:00004106 4241            	  3538:             clr.w d1
00:00004108 66FE            	  3539:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000410A 6BFE            	  3540:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:0000410C BA81            	  3541:             cmp.l d1,d5
00:0000410E 66FE            	  3542:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3543: 
00:00004110 7400            	  3544:             clr.l d2
00:00004112 66FE            	  3545:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004114 6BFE            	  3546:             bmi.s *                   * Check N Flag  bmi/bpl 0
00:00004116 BC82            	  3547:             cmp.l d2,d6
00:00004118 66FE            	  3548:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3549: 
00:0000411A 4E75            	  3550:             rts
                            	  3551: 
                            	  3552: 
                            	  3553: 
                            	  3554: *-----------------------------------------------------------
                            	  3555: *-----------------------------------------------------------
                            	  3556: * OPCODE : MOVEM
                            	  3557: *-----------------------------------------------------------
                            	  3558: *-----------------------------------------------------------
                            	  3559: op_MOVEM:
                            	  3560: 
                            	  3561: *     WORD  Registers --> Memory
00:0000411C 203C0000D0D0    	  3562:             move.l #$0000d0d0,d0
00:00004122 223C0000D1D1    	  3563:             move.l #$0000d1d1,d1
00:00004128 243C0000D2D2    	  3564:             move.l #$0000d2d2,d2
00:0000412E 263C0000D3D3    	  3565:             move.l #$0000d3d3,d3
00:00004134 283C0000D4D4    	  3566:             move.l #$0000d4d4,d4
00:0000413A 2A3C0000D5D5    	  3567:             move.l #$0000d5d5,d5
00:00004140 2C3C0000D6D6    	  3568:             move.l #$0000d6d6,d6
00:00004146 2E3C0000D7D7    	  3569:             move.l #$0000d7d7,d7
00:0000414C 307C0A0A        	  3570:             move.l #$00000a0a,a0
00:00004150 327C1A1A        	  3571:             move.l #$00001a1a,a1
00:00004154 347C2A2A        	  3572:             move.l #$00002a2a,a2
00:00004158 367C3A3A        	  3573:             move.l #$00003a3a,a3
00:0000415C 387C4A4A        	  3574:             move.l #$00004a4a,a4
00:00004160 3A7C5A5A        	  3575:             move.l #$00005a5a,a5
00:00004164 3C7C6A6A        	  3576:             move.l #$00006a6a,a6
                            	  3577: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3578: 
00:00004168 48B8FFFF0100    	  3579:             movem.w D0-D7/A0-A7,$00000100
                            	  3580: 
00:0000416E 307C0100        	  3581:             move.l #$00000100,a0
                            	  3582: 
00:00004172 B058            	  3583:             cmp.w (a0)+,d0
00:00004174 66FE            	  3584:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004176 B258            	  3585:             cmp.w (a0)+,d1
00:00004178 66FE            	  3586:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000417A B458            	  3587:             cmp.w (a0)+,d2
00:0000417C 66FE            	  3588:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000417E B658            	  3589:             cmp.w (a0)+,d3
00:00004180 66FE            	  3590:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004182 B858            	  3591:             cmp.w (a0)+,d4
00:00004184 66FE            	  3592:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004186 BA58            	  3593:             cmp.w (a0)+,d5
00:00004188 66FE            	  3594:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000418A BC58            	  3595:             cmp.w (a0)+,d6
00:0000418C 66FE            	  3596:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000418E BE58            	  3597:             cmp.w (a0)+,d7
00:00004190 66FE            	  3598:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3599: 
00:00004192 0C580A0A        	  3600:             cmpi.w #$0A0A,(a0)+    * Because we are using a0 as a pointer
00:00004196 66FE            	  3601:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3602: 
00:00004198 B2D8            	  3603:             cmp.w (a0)+,a1
00:0000419A 66FE            	  3604:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000419C B4D8            	  3605:             cmp.w (a0)+,a2
00:0000419E 66FE            	  3606:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041A0 B6D8            	  3607:             cmp.w (a0)+,a3
00:000041A2 66FE            	  3608:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041A4 B8D8            	  3609:             cmp.w (a0)+,a4
00:000041A6 66FE            	  3610:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041A8 BAD8            	  3611:             cmp.w (a0)+,a5
00:000041AA 66FE            	  3612:             bne.s *                   * Check Z Flag  beq/bne 0
00:000041AC BCD8            	  3613:             cmp.w (a0)+,a6
00:000041AE 66FE            	  3614:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3615: 
                            	  3616: 
                            	  3617: 
                            	  3618: 
                            	  3619: *     LONG  Registers --> Memory
00:000041B0 203CD0D0D0D0    	  3620:             move.l #$d0d0d0d0,d0
00:000041B6 223CD1D1D1D1    	  3621:             move.l #$d1d1d1d1,d1
00:000041BC 243CD2D2D2D2    	  3622:             move.l #$d2d2d2d2,d2
00:000041C2 263CD3D3D3D3    	  3623:             move.l #$d3d3d3d3,d3
00:000041C8 283CD4D4D4D4    	  3624:             move.l #$d4d4d4d4,d4
00:000041CE 2A3CD5D5D5D5    	  3625:             move.l #$d5d5d5d5,d5
00:000041D4 2C3CD6D6D6D6    	  3626:             move.l #$d6d6d6d6,d6
00:000041DA 2E3CD7D7D7D7    	  3627:             move.l #$d7d7d7d7,d7
00:000041E0 207C0A0A0A0A    	  3628:             move.l #$0a0a0a0a,a0
00:000041E6 227C1A1A1A1A    	  3629:             move.l #$1a1a1a1a,a1
00:000041EC 247C2A2A2A2A    	  3630:             move.l #$2a2a2a2a,a2
00:000041F2 267C3A3A3A3A    	  3631:             move.l #$3a3a3a3a,a3
00:000041F8 287C4A4A4A4A    	  3632:             move.l #$4a4a4a4a,a4
00:000041FE 2A7C5A5A5A5A    	  3633:             move.l #$5a5a5a5a,a5
00:00004204 2C7C6A6A6A6A    	  3634:             move.l #$6a6a6a6a,a6
                            	  3635: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3636: 
                            	  3637: 
00:0000420A 48F8FFFF0120    	  3638:             movem.l D0-D7/A0-A7,$00000120
                            	  3639: 
00:00004210 307C0120        	  3640:             move.l #$00000120,a0
                            	  3641: 
00:00004214 B098            	  3642:             cmp.l (a0)+,d0
00:00004216 66FE            	  3643:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004218 B298            	  3644:             cmp.l (a0)+,d1
00:0000421A 66FE            	  3645:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000421C B498            	  3646:             cmp.l (a0)+,d2
00:0000421E 66FE            	  3647:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004220 B698            	  3648:             cmp.l (a0)+,d3
00:00004222 66FE            	  3649:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004224 B898            	  3650:             cmp.l (a0)+,d4
00:00004226 66FE            	  3651:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004228 BA98            	  3652:             cmp.l (a0)+,d5
00:0000422A 66FE            	  3653:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000422C BC98            	  3654:             cmp.l (a0)+,d6
00:0000422E 66FE            	  3655:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004230 BE98            	  3656:             cmp.l (a0)+,d7
00:00004232 66FE            	  3657:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3658: 
00:00004234 0C980A0A0A0A    	  3659:             cmpi.l #$0A0A0A0A,(a0)+    * Because we are using a0 as a pointer
00:0000423A 66FE            	  3660:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3661: 
00:0000423C B3D8            	  3662:             cmp.l (a0)+,a1
00:0000423E 66FE            	  3663:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004240 B5D8            	  3664:             cmp.l (a0)+,a2
00:00004242 66FE            	  3665:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004244 B7D8            	  3666:             cmp.l (a0)+,a3
00:00004246 66FE            	  3667:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004248 B9D8            	  3668:             cmp.l (a0)+,a4
00:0000424A 66FE            	  3669:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000424C BBD8            	  3670:             cmp.l (a0)+,a5
00:0000424E 66FE            	  3671:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004250 BDD8            	  3672:             cmp.l (a0)+,a6
00:00004252 66FE            	  3673:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3674: *      ----
                            	  3675: 
                            	  3676: 
                            	  3677: *     WORD  Registers --> Memory  -(An) EA Mode
00:00004254 203C0000D0D0    	  3678:             move.l #$0000d0d0,d0
00:0000425A 223C0000D1D1    	  3679:             move.l #$0000d1d1,d1
00:00004260 243C0000D2D2    	  3680:             move.l #$0000d2d2,d2
00:00004266 263C0000D3D3    	  3681:             move.l #$0000d3d3,d3
00:0000426C 283C0000D4D4    	  3682:             move.l #$0000d4d4,d4
00:00004272 2A3C0000D5D5    	  3683:             move.l #$0000d5d5,d5
00:00004278 2C3C0000D6D6    	  3684:             move.l #$0000d6d6,d6
00:0000427E 2E3C0000D7D7    	  3685:             move.l #$0000d7d7,d7
00:00004284 307C0A0A        	  3686:             move.l #$00000a0a,a0
00:00004288 327C1A1A        	  3687:             move.l #$00001a1a,a1
00:0000428C 347C2A2A        	  3688:             move.l #$00002a2a,a2
00:00004290 367C3A3A        	  3689:             move.l #$00003a3a,a3
00:00004294 387C4A4A        	  3690:             move.l #$00004a4a,a4
00:00004298 3A7C5A5A        	  3691:             move.l #$00005a5a,a5
00:0000429C 3C7C6A6A        	  3692:             move.l #$00006a6a,a6
                            	  3693: *           move.l #$00007a7a,a7  * Dont change the Stack Pointer
                            	  3694: 
00:000042A0 307C01A0        	  3695:             move.l #$000001A0,a0
00:000042A4 48A0FFFF        	  3696:             movem.w D0-D7/A0-A7,-(a0)
                            	  3697: 
00:000042A8 307C019E        	  3698:             move.l #$0000019E,a0
                            	  3699: 
00:000042AC BCE0            	  3700:             cmp.w -(a0),a6
00:000042AE 66FE            	  3701:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042B0 BAE0            	  3702:             cmp.w -(a0),a5
00:000042B2 66FE            	  3703:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042B4 B8E0            	  3704:             cmp.w -(a0),a4
00:000042B6 66FE            	  3705:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042B8 B6E0            	  3706:             cmp.w -(a0),a3
00:000042BA 66FE            	  3707:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042BC B4E0            	  3708:             cmp.w -(a0),a2
00:000042BE 66FE            	  3709:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042C0 B2E0            	  3710:             cmp.w -(a0),a1
00:000042C2 66FE            	  3711:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042C4 B0E0            	  3712:             cmp.w -(a0),a0
                            	  3713: *            bne.s *                   * Check Z Flag  beq/bne 0
00:000042C6 BE60            	  3714:             cmp.w -(a0),d7
00:000042C8 66FE            	  3715:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042CA BC60            	  3716:             cmp.w -(a0),d6
00:000042CC 66FE            	  3717:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042CE BA60            	  3718:             cmp.w -(a0),d5
00:000042D0 66FE            	  3719:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042D2 B860            	  3720:             cmp.w -(a0),d4
00:000042D4 66FE            	  3721:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042D6 B660            	  3722:             cmp.w -(a0),d3
00:000042D8 66FE            	  3723:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042DA B460            	  3724:             cmp.w -(a0),d2
00:000042DC 66FE            	  3725:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042DE B260            	  3726:             cmp.w -(a0),d1
00:000042E0 66FE            	  3727:             bne.s *                   * Check Z Flag  beq/bne 0
00:000042E2 B060            	  3728:             cmp.w -(a0),d0
00:000042E4 66FE            	  3729:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3730: 
                            	  3731: 
                            	  3732: 
                            	  3733: 
                            	  3734: *     LONG  Registers --> Memory   -(An) EA Mode
00:000042E6 203CD0D0D0D0    	  3735:             move.l #$d0d0d0d0,d0
00:000042EC 223CD1D1D1D1    	  3736:             move.l #$d1d1d1d1,d1
00:000042F2 243CD2D2D2D2    	  3737:             move.l #$d2d2d2d2,d2
00:000042F8 263CD3D3D3D3    	  3738:             move.l #$d3d3d3d3,d3
00:000042FE 283CD4D4D4D4    	  3739:             move.l #$d4d4d4d4,d4
00:00004304 2A3CD5D5D5D5    	  3740:             move.l #$d5d5d5d5,d5
00:0000430A 2C3CD6D6D6D6    	  3741:             move.l #$d6d6d6d6,d6
00:00004310 2E3CD7D7D7D7    	  3742:             move.l #$d7d7d7d7,d7
00:00004316 207C0A0A0A0A    	  3743:             move.l #$0a0a0a0a,a0
00:0000431C 227C1A1A1A1A    	  3744:             move.l #$1a1a1a1a,a1
00:00004322 247C2A2A2A2A    	  3745:             move.l #$2a2a2a2a,a2
00:00004328 267C3A3A3A3A    	  3746:             move.l #$3a3a3a3a,a3
00:0000432E 287C4A4A4A4A    	  3747:             move.l #$4a4a4a4a,a4
00:00004334 2A7C5A5A5A5A    	  3748:             move.l #$5a5a5a5a,a5
00:0000433A 2C7C6A6A6A6A    	  3749:             move.l #$6a6a6a6a,a6
                            	  3750: *           move.l #$7a7a7a7a,a7  * Dont change the Stack Pointer
                            	  3751: 
                            	  3752: 
00:00004340 307C01A0        	  3753:             move.l #$000001A0,a0
00:00004344 48E0FFFF        	  3754:             movem.l D0-D7/A0-A7,-(a0)
                            	  3755: 
00:00004348 307C019C        	  3756:             move.l #$0000019C,a0
                            	  3757: 
00:0000434C BDE0            	  3758:             cmp.l -(a0),a6
00:0000434E 66FE            	  3759:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004350 BBE0            	  3760:             cmp.l -(a0),a5
00:00004352 66FE            	  3761:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004354 B9E0            	  3762:             cmp.l -(a0),a4
00:00004356 66FE            	  3763:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004358 B7E0            	  3764:             cmp.l -(a0),a3
00:0000435A 66FE            	  3765:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000435C B5E0            	  3766:             cmp.l -(a0),a2
00:0000435E 66FE            	  3767:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004360 B3E0            	  3768:             cmp.l -(a0),a1
00:00004362 66FE            	  3769:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004364 B1E0            	  3770:             cmp.l -(a0),a0
                            	  3771: *            bne.s *                   * Check Z Flag  beq/bne 0
00:00004366 BEA0            	  3772:             cmp.l -(a0),d7
00:00004368 66FE            	  3773:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000436A BCA0            	  3774:             cmp.l -(a0),d6
00:0000436C 66FE            	  3775:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000436E BAA0            	  3776:             cmp.l -(a0),d5
00:00004370 66FE            	  3777:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004372 B8A0            	  3778:             cmp.l -(a0),d4
00:00004374 66FE            	  3779:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004376 B6A0            	  3780:             cmp.l -(a0),d3
00:00004378 66FE            	  3781:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000437A B4A0            	  3782:             cmp.l -(a0),d2
00:0000437C 66FE            	  3783:             bne.s *                   * Check Z Flag  beq/bne 0
00:0000437E B2A0            	  3784:             cmp.l -(a0),d1
00:00004380 66FE            	  3785:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004382 B0A0            	  3786:             cmp.l -(a0),d0
00:00004384 66FE            	  3787:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3788: 
                            	  3789: 
                            	  3790: 
                            	  3791: *     ----
                            	  3792: 
                            	  3793: *     WORD - Memory --> Registers
00:00004386 7000            	  3794:             moveq  #$00000000,d0
00:00004388 7200            	  3795:             moveq  #$00000000,d1
00:0000438A 7400            	  3796:             moveq  #$00000000,d2
00:0000438C 7600            	  3797:             moveq  #$00000000,d3
00:0000438E 7800            	  3798:             moveq  #$00000000,d4
00:00004390 7A00            	  3799:             moveq  #$00000000,d5
00:00004392 7C00            	  3800:             moveq  #$00000000,d6
00:00004394 7E00            	  3801:             moveq  #$00000000,d7
00:00004396 91C8            	  3802:             move.l #$00000000,a0
00:00004398 93C9            	  3803:             move.l #$00000000,a1
00:0000439A 95CA            	  3804:             move.l #$00000000,a2
00:0000439C 97CB            	  3805:             move.l #$00000000,a3
00:0000439E 99CC            	  3806:             move.l #$00000000,a4
00:000043A0 9BCD            	  3807:             move.l #$00000000,a5
00:000043A2 9DCE            	  3808:             move.l #$00000000,a6
                            	  3809: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3810: 
00:000043A4 4CB82A550100    	  3811:             movem.w $00000100,D0/D2/D4/D6/A1/A3/A5
                            	  3812: 
00:000043AA B0BCFFFFD0D0    	  3813:             cmp.l #$FFFFD0D0,d0
00:000043B0 66FE            	  3814:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043B2 B4BCFFFFD1D1    	  3815:             cmp.l #$FFFFD1D1,d2
00:000043B8 66FE            	  3816:             bne.s *                  * Check Z Flag  beq/bne 0
00:000043BA B8BCFFFFD2D2    	  3817:             cmp.l #$FFFFD2D2,d4
00:000043C0 66FE            	  3818:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043C2 BCBCFFFFD3D3    	  3819:             cmp.l #$FFFFD3D3,d6
00:000043C8 66FE            	  3820:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043CA B2FCD4D4        	  3821:             cmp.l #$FFFFD4D4,a1
00:000043CE 66FE            	  3822:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043D0 B6FCD5D5        	  3823:             cmp.l #$FFFFD5D5,a3
00:000043D4 66FE            	  3824:             bne.s *                   * Check Z Flag  beq/bne 0
00:000043D6 BAFCD6D6        	  3825:             cmp.l #$FFFFD6D6,a5
00:000043DA 66FE            	  3826:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3827: 
                            	  3828: 
                            	  3829: *     LONG - Memory --> Registers
00:000043DC 7000            	  3830:             moveq  #$00000000,d0
00:000043DE 7200            	  3831:             moveq  #$00000000,d1
00:000043E0 7400            	  3832:             moveq  #$00000000,d2
00:000043E2 7600            	  3833:             moveq  #$00000000,d3
00:000043E4 7800            	  3834:             moveq  #$00000000,d4
00:000043E6 7A00            	  3835:             moveq  #$00000000,d5
00:000043E8 7C00            	  3836:             moveq  #$00000000,d6
00:000043EA 7E00            	  3837:             moveq  #$00000000,d7
00:000043EC 91C8            	  3838:             move.l #$00000000,a0
00:000043EE 93C9            	  3839:             move.l #$00000000,a1
00:000043F0 95CA            	  3840:             move.l #$00000000,a2
00:000043F2 97CB            	  3841:             move.l #$00000000,a3
00:000043F4 99CC            	  3842:             move.l #$00000000,a4
00:000043F6 9BCD            	  3843:             move.l #$00000000,a5
00:000043F8 9DCE            	  3844:             move.l #$00000000,a6
                            	  3845: *           move.l #$00000000,a7  * Dont change the Stack Pointer
                            	  3846: 
00:000043FA 4CF82A550120    	  3847:             movem.l $00000120,D0/D2/D4/D6/A1/A3/A5
                            	  3848: 
00:00004400 B0BCD0D0D0D0    	  3849:             cmp.l #$D0D0D0D0,d0
00:00004406 66FE            	  3850:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004408 B4BCD1D1D1D1    	  3851:             cmp.l #$D1D1D1D1,d2
00:0000440E 66FE            	  3852:             bne.s *                  * Check Z Flag  beq/bne 0
00:00004410 B8BCD2D2D2D2    	  3853:             cmp.l #$D2D2D2D2,d4
00:00004416 66FE            	  3854:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004418 BCBCD3D3D3D3    	  3855:             cmp.l #$D3D3D3D3,d6
00:0000441E 66FE            	  3856:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004420 B3FCD4D4D4D4    	  3857:             cmp.l #$D4D4D4D4,a1
00:00004426 66FE            	  3858:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004428 B7FCD5D5D5D5    	  3859:             cmp.l #$D5D5D5D5,a3
00:0000442E 66FE            	  3860:             bne.s *                   * Check Z Flag  beq/bne 0
00:00004430 BBFCD6D6D6D6    	  3861:             cmp.l #$D6D6D6D6,a5
00:00004436 66FE            	  3862:             bne.s *                   * Check Z Flag  beq/bne 0
                            	  3863: 
00:00004438 4E75            	  3864:             rts
                            	  3865: 
                            	  3866: 
                            	  3867: *-----------------------------------------------------------
                            	  3868: *-----------------------------------------------------------
                            	  3869: * OPCODE : ABCD
                            	  3870: *-----------------------------------------------------------
                            	  3871: *-----------------------------------------------------------
                            	  3872: op_ABCD:
                            	  3873: 
                            	  3874: *     Test with X Flag CLEARED
00:0000443A 307C0110        	  3875:                 move.l #$00000110,a0 * Address pointer-X
00:0000443E 327C0120        	  3876:                 move.l #$00000120,a1 * Address pointer-Y
00:00004442 7000            	  3877:                 moveq  #$00000000,d0 * BCD byte-X
00:00004444 7200            	  3878:                 moveq  #$00000000,d1 * BCD byte-Y
00:00004446 7400            	  3879:                 moveq  #$00000000,d2
00:00004448 7600            	  3880:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:0000444A 7800            	  3881:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000444C 7A00            	  3882:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:0000444E 2C3C00000099    	  3883:                 move.l #$00000099,d6 * Inner loop counter
00:00004454 2E3C00000099    	  3884:                 move.l #$00000099,d7 * Outer loop counter
                            	  3885: 
00:0000445A 2007            	  3886: ABCD_OUTER1:    move.l d7,d0
00:0000445C 2206            	  3887: ABCD_INNER1:    move.l d6,d1
00:0000445E 023C00EF        	  3888:                 andi.b #$EF,CCR     * Clear X Flag
00:00004462 307C0110        	  3889:                 move.l #$00000110,a0 * Address pointer-X
00:00004466 327C0120        	  3890:                 move.l #$00000120,a1 * Address pointer-Y
00:0000446A 1140FFFF        	  3891:                 move.b d0,-1(a0)
00:0000446E 1341FFFF        	  3892:                 move.b d1,-1(a1)
                            	  3893: 
00:00004472 C300            	  3894:                 abcd d0,d1
00:00004474 6402            	  3895:                 bcc.s ABCD_NO_C1          * Check C Flag  bcc/bcs 0
00:00004476 5284            	  3896:                 add.l #1,d4
00:00004478 DA81            	  3897: ABCD_NO_C1:     add.l d1,d5
                            	  3898: 
00:0000447A C308            	  3899:                 abcd -(a0),-(a1)
00:0000447C 6402            	  3900:                 bcc.s ABCD_NO_C2          * Check C Flag  bcc/bcs 0
00:0000447E 5284            	  3901:                 add.l #1,d4
00:00004480 D611            	  3902: ABCD_NO_C2:     add.b (a1),d3
                            	  3903: 
                            	  3904: 
00:00004482 51CEFFD8        	  3905:                 dbf d6,ABCD_INNER1
00:00004486 2C3C00000099    	  3906:                 move.l #$00000099,d6
00:0000448C 51CFFFCC        	  3907:                 dbf d7,ABCD_OUTER1
00:00004490 0C8400005AFC    	  3908:                 cmpi.l #$00005AFC,d4  * Check the cumulative results
00:00004496 66FE            	  3909:                 bne.s *
00:00004498 0C85001C9A34    	  3910:                 cmpi.l #$001C9A34,d5
00:0000449E 66FE            	  3911:                 bne.s *
00:000044A0 0C8300000034    	  3912:                 cmpi.l #$00000034,d3
00:000044A6 66FE            	  3913:                 bne.s *
                            	  3914: 
                            	  3915: *     Test with X Flag SET
00:000044A8 307C0110        	  3916:                 move.l #$00000110,a0 * Address pointer-X
00:000044AC 327C0120        	  3917:                 move.l #$00000120,a1 * Address pointer-Y
00:000044B0 7000            	  3918:                 moveq  #$00000000,d0 * BCD byte-X
00:000044B2 7200            	  3919:                 moveq  #$00000000,d1 * BCD byte-Y
00:000044B4 7400            	  3920:                 moveq  #$00000000,d2
00:000044B6 7600            	  3921:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000044B8 7800            	  3922:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000044BA 7A00            	  3923:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000044BC 2C3C00000099    	  3924:                 move.l #$00000099,d6 * Inner loop counter
00:000044C2 2E3C00000099    	  3925:                 move.l #$00000099,d7 * Outer loop counter
                            	  3926: 
00:000044C8 2007            	  3927: ABCD_OUTER2:    move.l d7,d0
00:000044CA 2206            	  3928: ABCD_INNER2:    move.l d6,d1
00:000044CC 003C0010        	  3929:                 ori.b #$10,CCR      * Set X Flag
00:000044D0 307C0110        	  3930:                 move.l #$00000110,a0 * Address pointer-X
00:000044D4 327C0120        	  3931:                 move.l #$00000120,a1 * Address pointer-Y
00:000044D8 1140FFFF        	  3932:                 move.b d0,-1(a0)
00:000044DC 1341FFFF        	  3933:                 move.b d1,-1(a1)
                            	  3934: 
00:000044E0 C300            	  3935:                 abcd d0,d1
00:000044E2 6402            	  3936:                 bcc.s ABCD_NO_C3          * Check C Flag  bcc/bcs 0
00:000044E4 5284            	  3937:                 add.l #1,d4
00:000044E6 DA81            	  3938: ABCD_NO_C3:     add.l d1,d5
                            	  3939: 
00:000044E8 C308            	  3940:                 abcd -(a0),-(a1)
00:000044EA 6402            	  3941:                 bcc.s ABCD_NO_C4          * Check C Flag  bcc/bcs 0
00:000044EC 5284            	  3942:                 add.l #1,d4
00:000044EE D611            	  3943: ABCD_NO_C4:     add.b (a1),d3
                            	  3944: 
                            	  3945: 
00:000044F0 51CEFFD8        	  3946:                 dbf d6,ABCD_INNER2
00:000044F4 2C3C00000099    	  3947:                 move.l #$00000099,d6
00:000044FA 51CFFFCC        	  3948:                 dbf d7,ABCD_OUTER2
00:000044FE 0C8400005B60    	  3949:                 cmpi.l #$00005B60,d4  * Check the cumulative results
00:00004504 66FE            	  3950:                 bne.s *
00:00004506 0C85001CCFC8    	  3951:                 cmpi.l #$001CCFC8,d5
00:0000450C 66FE            	  3952:                 bne.s *
00:0000450E 0C8300000034    	  3953:                 cmpi.l #$00000034,d3
00:00004514 66FE            	  3954:                 bne.s *
                            	  3955: 
                            	  3956: *             Quick check of Z Flag
00:00004516 4200            	  3957:                 move.b #$00,d0
00:00004518 4201            	  3958:                 move.b #$00,d1
00:0000451A 44FC0000        	  3959:                 move #$00,CCR              * Set Z flag to 0
00:0000451E C101            	  3960:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:00004520 67FE            	  3961:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3962: 
00:00004522 103C0001        	  3963:                 move.b #$01,d0
00:00004526 4201            	  3964:                 move.b #$00,d1
00:00004528 44FC0004        	  3965:                 move #$04,CCR              * Set Z flag to 0
00:0000452C C101            	  3966:                 abcd d1,d0                  * Should NOT set Z Flag to 1
00:0000452E 67FE            	  3967:                 beq.s *                       * Check Z Flag  beq/bne
                            	  3968: 
00:00004530 4E75            	  3969:                 rts
                            	  3970: 
                            	  3971: *-----------------------------------------------------------
                            	  3972: *-----------------------------------------------------------
                            	  3973: * OPCODE : SBCD
                            	  3974: *-----------------------------------------------------------
                            	  3975: *-----------------------------------------------------------
                            	  3976: op_SBCD:
                            	  3977: 
                            	  3978: *     Test with X Flag CLEARED
00:00004532 307C0110        	  3979:                 move.l #$00000110,a0 * Address pointer-X
00:00004536 327C0120        	  3980:                 move.l #$00000120,a1 * Address pointer-Y
00:0000453A 7000            	  3981:                 moveq  #$00000000,d0 * BCD byte-X
00:0000453C 7200            	  3982:                 moveq  #$00000000,d1 * BCD byte-Y
00:0000453E 7400            	  3983:                 moveq  #$00000000,d2
00:00004540 7600            	  3984:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:00004542 7800            	  3985:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004544 7A00            	  3986:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:00004546 2C3C00000099    	  3987:                 move.l #$00000099,d6 * Inner loop counter
00:0000454C 2E3C00000099    	  3988:                 move.l #$00000099,d7 * Outer loop counter
                            	  3989: 
00:00004552 2007            	  3990: SBCD_OUTER1:    move.l d7,d0
00:00004554 2206            	  3991: SBCD_INNER1:    move.l d6,d1
00:00004556 023C00EF        	  3992:                 andi.b #$EF,CCR     * Clear X Flag
00:0000455A 307C0110        	  3993:                 move.l #$00000110,a0 * Address pointer-X
00:0000455E 327C0120        	  3994:                 move.l #$00000120,a1 * Address pointer-Y
00:00004562 1140FFFF        	  3995:                 move.b d0,-1(a0)
00:00004566 1341FFFF        	  3996:                 move.b d1,-1(a1)
                            	  3997: 
00:0000456A 8300            	  3998:                 sbcd d0,d1
00:0000456C 6402            	  3999:                 bcc.s SBCD_NO_C1          * Check C Flag  bcc/bcs 0
00:0000456E 5284            	  4000:                 add.l #1,d4
00:00004570 DA81            	  4001: SBCD_NO_C1:     add.l d1,d5
                            	  4002: 
00:00004572 8308            	  4003:                 sbcd -(a0),-(a1)
00:00004574 6402            	  4004:                 bcc.s SBCD_NO_C2          * Check C Flag  bcc/bcs 0
00:00004576 5284            	  4005:                 add.l #1,d4
00:00004578 D611            	  4006: SBCD_NO_C2:     add.b (a1),d3
                            	  4007: 
                            	  4008: 
00:0000457A 51CEFFD8        	  4009:                 dbf d6,SBCD_INNER1
00:0000457E 2C3C00000099    	  4010:                 move.l #$00000099,d6
00:00004584 51CFFFCC        	  4011:                 dbf d7,SBCD_OUTER1
00:00004588 0C8400005C0A    	  4012:                 cmpi.l #$00005C0A,d4  * Check the cumulative results
00:0000458E 66FE            	  4013:                 bne.s *
00:00004590 0C85001C459E    	  4014:                 cmpi.l #$001C459E,d5
00:00004596 66FE            	  4015:                 bne.s *
00:00004598 0C830000009E    	  4016:                 cmpi.l #$0000009E,d3
00:0000459E 66FE            	  4017:                 bne.s *
                            	  4018: 
                            	  4019: *     Test with X Flag SET
00:000045A0 307C0110        	  4020:                 move.l #$00000110,a0 * Address pointer-X
00:000045A4 327C0120        	  4021:                 move.l #$00000120,a1 * Address pointer-Y
00:000045A8 7000            	  4022:                 moveq  #$00000000,d0 * BCD byte-X
00:000045AA 7200            	  4023:                 moveq  #$00000000,d1 * BCD byte-Y
00:000045AC 7400            	  4024:                 moveq  #$00000000,d2
00:000045AE 7600            	  4025:                 moveq  #$00000000,d3 * Cumulative -(An) BCD results
00:000045B0 7800            	  4026:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:000045B2 7A00            	  4027:                 moveq  #$00000000,d5 * Cumulative Register BCD results
00:000045B4 2C3C00000099    	  4028:                 move.l #$00000099,d6 * Inner loop counter
00:000045BA 2E3C00000099    	  4029:                 move.l #$00000099,d7 * Outer loop counter
                            	  4030: 
00:000045C0 2007            	  4031: SBCD_OUTER2:    move.l d7,d0
00:000045C2 2206            	  4032: SBCD_INNER2:    move.l d6,d1
00:000045C4 003C0010        	  4033:                 ori.b #$10,CCR      * Set X Flag
00:000045C8 307C0110        	  4034:                 move.l #$00000110,a0 * Address pointer-X
00:000045CC 327C0120        	  4035:                 move.l #$00000120,a1 * Address pointer-Y
00:000045D0 1140FFFF        	  4036:                 move.b d0,-1(a0)
00:000045D4 1341FFFF        	  4037:                 move.b d1,-1(a1)
                            	  4038: 
00:000045D8 8300            	  4039:                 sbcd d0,d1
00:000045DA 6402            	  4040:                 bcc.s SBCD_NO_C3          * Check C Flag  bcc/bcs 0
00:000045DC 5284            	  4041:                 add.l #1,d4
00:000045DE DA81            	  4042: SBCD_NO_C3:     add.l d1,d5
                            	  4043: 
00:000045E0 8308            	  4044:                 sbcd -(a0),-(a1)
00:000045E2 6402            	  4045:                 bcc.s SBCD_NO_C4          * Check C Flag  bcc/bcs 0
00:000045E4 5284            	  4046:                 add.l #1,d4
00:000045E6 D611            	  4047: SBCD_NO_C4:     add.b (a1),d3
                            	  4048: 
00:000045E8 51CEFFD8        	  4049:                 dbf d6,SBCD_INNER2
00:000045EC 2C3C00000099    	  4050:                 move.l #$00000099,d6
00:000045F2 51CFFFCC        	  4051:                 dbf d7,SBCD_OUTER2
00:000045F6 0C8400005CA4    	  4052:                 cmpi.l #$00005CA4,d4  * Check the cumulative results
00:000045FC 66FE            	  4053:                 bne.s *
00:000045FE 0C85001C5C66    	  4054:                 cmpi.l #$001C5C66,d5
00:00004604 66FE            	  4055:                 bne.s *
00:00004606 0C830000009E    	  4056:                 cmpi.l #$0000009E,d3
00:0000460C 66FE            	  4057:                 bne.s *
                            	  4058: 
                            	  4059: 
                            	  4060: *             Quick check of Z Flag
00:0000460E 4200            	  4061:                 move.b #$00,d0
00:00004610 4201            	  4062:                 move.b #$00,d1
00:00004612 44FC0000        	  4063:                 move #$00,CCR              * Set Z flag to 0
00:00004616 8101            	  4064:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:00004618 67FE            	  4065:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4066: 
00:0000461A 103C0001        	  4067:                 move.b #$01,d0
00:0000461E 4201            	  4068:                 move.b #$00,d1
00:00004620 44FC0004        	  4069:                 move #$04,CCR              * Set Z flag to 0
00:00004624 8101            	  4070:                 sbcd d1,d0                  * Should NOT set Z Flag to 1
00:00004626 67FE            	  4071:                 beq.s *                       * Check Z Flag  beq/bne
                            	  4072: 
00:00004628 4E75            	  4073:                 rts
                            	  4074: 
                            	  4075: *-----------------------------------------------------------
                            	  4076: *-----------------------------------------------------------
                            	  4077: * OPCODE : NBCD
                            	  4078: *-----------------------------------------------------------
                            	  4079: *-----------------------------------------------------------
                            	  4080: op_NBCD:
                            	  4081: 
                            	  4082: *        NBCD to a  Register
                            	  4083: 
00:0000462A 7000            	  4084:                 moveq  #$00000000,d0 * BCD byte
00:0000462C 7200            	  4085:                 moveq  #$00000000,d1
00:0000462E 7400            	  4086:                 moveq  #$00000000,d2
00:00004630 7600            	  4087:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00004632 7800            	  4088:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:00004634 7A00            	  4089:                 moveq  #$00000000,d5 * Cumulative BCD results
00:00004636 2C3C00000099    	  4090:                 move.l #$00000099,d6
00:0000463C 2E3C00000099    	  4091:                 move.l #$00000099,d7 * Loop counter
                            	  4092: 
00:00004642 2007            	  4093: NBCD_LOOP:      move.l d7,d0
00:00004644 44FC0004        	  4094:                 move #$04,CCR        * Set Z flag to 0
                            	  4095: 
00:00004648 4800            	  4096:                 nbcd d0
                            	  4097: 
00:0000464A 6402            	  4098:                 bcc.s NBCD_NO_C         * Check C Flag
00:0000464C 5284            	  4099:                 add.l #1,d4
00:0000464E 6602            	  4100: NBCD_NO_C:      bne.s NBCD_NO_Z         * Check Z Flag
00:00004650 5283            	  4101:                 add.l #1,d3
00:00004652 DA80            	  4102: NBCD_NO_Z:      add.l d0,d5         * Add results into d5
                            	  4103: 
00:00004654 51CFFFEC        	  4104:                 dbf d7,NBCD_LOOP
                            	  4105: 
00:00004658 0C8300000001    	  4106:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:0000465E 66FE            	  4107:                 bne.s *
00:00004660 0C8400000099    	  4108:                 cmpi.l #$00000099,d4
00:00004666 66FE            	  4109:                 bne.s *
00:00004668 0C8500002E3B    	  4110:                 cmpi.l #$00002E3B,d5
00:0000466E 66FE            	  4111:                 bne.s *
                            	  4112: 
                            	  4113: 
                            	  4114: *        NBCD to a memory location
                            	  4115: 
00:00004670 7000            	  4116:                 moveq  #$00000000,d0 * BCD byte
00:00004672 7200            	  4117:                 moveq  #$00000000,d1
00:00004674 7400            	  4118:                 moveq  #$00000000,d2
00:00004676 7600            	  4119:                 moveq  #$00000000,d3 * Cumulative number.s of times Z was set
00:00004678 7800            	  4120:                 moveq  #$00000000,d4 * Cumulative number.s of times C was set
00:0000467A 7A00            	  4121:                 moveq  #$00000000,d5 * Cumulative BCD results
00:0000467C 2C3C00000099    	  4122:                 move.l #$00000099,d6
00:00004682 2E3C00000099    	  4123:                 move.l #$00000099,d7 * Loop counter
                            	  4124: 
00:00004688 11C70100        	  4125: NBCD_LOOP1:     move.b d7,$00000100
00:0000468C 44FC0004        	  4126:                 move #$04,CCR        * Set Z flag to 0
                            	  4127: 
00:00004690 48380100        	  4128:                 nbcd $00000100
00:00004694 10380100        	  4129:                 move.b $00000100,d0
                            	  4130: 
00:00004698 6402            	  4131:                 bcc.s NBCD_NO_C1        * Check C Flag
00:0000469A 5284            	  4132:                 add.l #1,d4
00:0000469C 6602            	  4133: NBCD_NO_C1:     bne.s NBCD_NO_Z1        * Check Z Flag
00:0000469E 5283            	  4134:                 add.l #1,d3
00:000046A0 DA80            	  4135: NBCD_NO_Z1:     add.l d0,d5         * Add results into d5
                            	  4136: 
00:000046A2 51CFFFE4        	  4137:                 dbf d7,NBCD_LOOP1
                            	  4138: 
00:000046A6 0C8300000001    	  4139:                 cmpi.l #$00000001,d3  * Check the cumulative results
00:000046AC 66FE            	  4140:                 bne.s *
00:000046AE 4A84            	  4141:                 cmpi.l #$00000000,d4
00:000046B0 66FE            	  4142:                 bne.s *
00:000046B2 0C8500002E3B    	  4143:                 cmpi.l #$00002E3B,d5
00:000046B8 66FE            	  4144:                 bne.s *
                            	  4145: 
                            	  4146: 
00:000046BA 4E75            	  4147:                 rts
                            	  4148: 
                            	  4149: 
                            	  4150: 
                            	  4151: *-----------------------------------------------------------
                            	  4152: *-----------------------------------------------------------
                            	  4153: * OPCODE : TRAPV
                            	  4154: *-----------------------------------------------------------
                            	  4155: *-----------------------------------------------------------
                            	  4156: op_TRAPV:
                            	  4157: 
                            	  4158: *     TRAPV will set d0 to 12345678 if V flag is set
                            	  4159: 
00:000046BC 7000            	  4160:                 moveq  #$00000000,d0 * Clear d0
                            	  4161: 
00:000046BE 44FC0000        	  4162:                 move #$00,CCR        * Clear V flag
00:000046C2 4E76            	  4163:                 trapv
00:000046C4 4A80            	  4164:                 cmpi.l #$00000000,d0  * Check of d0 was updated (should not be_)
00:000046C6 66FE            	  4165:                 bne.s *
                            	  4166: 
00:000046C8 44FC0002        	  4167:                 move #$02,CCR        * Set V flag
00:000046CC 4E76            	  4168:                 trapv
00:000046CE 0C8012345678    	  4169:                 cmpi.l #$12345678,d0  * Check of d0 was updated (should not be_)
00:000046D4 66FE            	  4170:                 bne.s *
                            	  4171: 
                            	  4172: 
00:000046D6 4E75            	  4173:                 rts
                            	  4174: 
                            	  4175: 
                            	  4176: 
                            	  4177: *-----------------------------------------------------------
                            	  4178: *-----------------------------------------------------------
                            	  4179: * OPCODE : RTR
                            	  4180: *-----------------------------------------------------------
                            	  4181: *-----------------------------------------------------------
                            	  4182: 
                            	  4183: op_RTR:
                            	  4184: 
                            	  4185: *     Leventhal claims only 5 LSB's are popped from the stack to the CCR
                            	  4186: 
00:000046D8 41FA000A        	  4187:                 lea 		RTR_DONE,a0
00:000046DC 2F08            	  4188:                 move.l 	a0,-(a7)     * push destination PC to the stack
00:000046DE 3F3CFF15        	  4189:                 move.w 	#$FF15,-(a7)       * push flags=0xFFFF to the stack
00:000046E2 4E77            	  4190:                 rtr
                            	  4191: 
00:000046E4 40C0            	  4192: RTR_DONE:       move.w SR,d0
00:000046E6 0240001F        	  4193:                 andi.w #$1F,d0
00:000046EA 0C400015        	  4194:                 cmpi.w #$15,d0
00:000046EE 66FE            	  4195:                 bne.s *
                            	  4196: 
00:000046F0 4E75            	  4197:                 rts
                            	  4198: 
                            	  4199: 
00:000046F2 283C44444444    	  4200: BSR_FAR2:       move.l #$44444444,d4
00:000046F8 4E75            	  4201:                 rts
                            	  4202: 
                            	  4203: 
                            	  4204: *-----------------------------------------------------------
                            	  4205: *-----------------------------------------------------------
                            	  4206: * OPCODE : BCC
                            	  4207: *-----------------------------------------------------------
                            	  4208: *-----------------------------------------------------------
                            	  4209: 
00:000046FA 44FC0000        	  4210: op_BCC:         move #$00,CCR
00:000046FE 6202            	  4211:                 bhi.s BCC1            * Higher Than         C=0 AND Z=0
00:00004700 60FE            	  4212:                 bra.s *
                            	  4213: 
00:00004702 44FC0001        	  4214: BCC1:           move #$01,CCR
00:00004706 63000004        	  4215:                 bls.w BCC2            * Lower or Same       C=1 OR Z=1
00:0000470A 60FE            	  4216:                 bra.s *
                            	  4217: 
00:0000470C 44FC0000        	  4218: BCC2:           move #$00,CCR
00:00004710 6402            	  4219:                 bcc.s BCC3            * Carry Clear         C=0
00:00004712 60FE            	  4220:                 bra.s *
                            	  4221: 
00:00004714 44FC0001        	  4222: BCC3:           move #$01,CCR
00:00004718 65000004        	  4223:                 bcs.w BCC4            * Carry Set           C=1
00:0000471C 60FE            	  4224:                 bra.s *
                            	  4225: 
00:0000471E 44FC0000        	  4226: BCC4:           move #$00,CCR
00:00004722 6602            	  4227:                 bne.s BCC5            * Not Equal           Z=0
00:00004724 60FE            	  4228:                 bra.s *
                            	  4229: 
00:00004726 44FC0004        	  4230: BCC5:           move #$04,CCR
00:0000472A 67000004        	  4231:                 beq.w BCC6            * Equal               Z=1
00:0000472E 60FE            	  4232:                 bra.s *
                            	  4233: 
00:00004730 44FC0000        	  4234: BCC6:           move #$00,CCR
00:00004734 6802            	  4235:                 bvc.s BCC7            * V Clear             V=0
00:00004736 60FE            	  4236:                 bra.s *
                            	  4237: 
00:00004738 44FC0002        	  4238: BCC7:           move #$02,CCR
00:0000473C 69000004        	  4239:                 bvs.w BCC8            * V Set               V=1
00:00004740 60FE            	  4240:                 bra.s *
                            	  4241: 
00:00004742 44FC0000        	  4242: BCC8:           move #$00,CCR
00:00004746 6A02            	  4243:                 bpl.s BCC9            * Plus                N=0
00:00004748 60FE            	  4244:                 bra.s *
                            	  4245: 
00:0000474A 44FC0008        	  4246: BCC9:           move #$08,CCR
00:0000474E 6B000004        	  4247:                 bmi.w BCC10           * Minus               N=1
00:00004752 60FE            	  4248:                 bra.s *
                            	  4249: 
00:00004754 44FC0000        	  4250: BCC10:          move #$00,CCR
00:00004758 6C02            	  4251:                 bge.s BCC11           * Greater or Equal    N=V
00:0000475A 60FE            	  4252:                 bra.s *
                            	  4253: 
00:0000475C 44FC0002        	  4254: BCC11:          move #$02,CCR
00:00004760 6D000004        	  4255:                 blt.w BCC12           * Less Than           N!=V
00:00004764 60FE            	  4256:                 bra.s *
                            	  4257: 
00:00004766 44FC000A        	  4258: BCC12:          move #$0A,CCR
00:0000476A 6E02            	  4259:                 bgt.s BCC13           * Greater Than        N=V  AND Z=0
00:0000476C 60FE            	  4260:                 bra.s *
                            	  4261: 
00:0000476E 44FC0006        	  4262: BCC13:          move #$06,CCR
00:00004772 6F000004        	  4263:                 ble.w BCC14           * Less Than or Equal  N!=V AND Z=1
00:00004776 60FE            	  4264:                 bra.s *
                            	  4265: 
                            	  4266: 
00:00004778 4E75            	  4267: BCC14:          rts
                            	  4268: 
                            	  4269: 
                            	  4270: *-----------------------------------------------------------
                            	  4271: *-----------------------------------------------------------
                            	  4272: * OPCODE : DBCC
                            	  4273: *-----------------------------------------------------------
                            	  4274: *-----------------------------------------------------------
                            	  4275: 
00:0000477A 7003            	  4276: op_DBCC:        moveq  #$00000003,d0    * Loop counter
00:0000477C 7200            	  4277:                 moveq  #$00000000,d1    * Accumulator
00:0000477E 44FC0000        	  4278:                 move #$00,CCR
                            	  4279: 
00:00004782 5201            	  4280: DBCC_LOOP1:     addi.b #$1,d1
00:00004784 51C8FFFC        	  4281:                 dbf d0,DBCC_LOOP1
                            	  4282: 
00:00004788 0C8100000004    	  4283:                 cmpi.l #$00000004,d1  * Check Accumulator results
00:0000478E 66FE            	  4284:                 bne.s *
                            	  4285: 
00:00004790 5201            	  4286: DBCC_LOOP2:     addi.b #$1,d1
00:00004792 54C8FFFC        	  4287:                 dbcc d0,DBCC_LOOP2    * Dont loop
                            	  4288: 
00:00004796 0C8100000005    	  4289:                 cmpi.l #$00000005,d1  * Check Accumulator results
00:0000479C 66FE            	  4290:                 bne.s *
                            	  4291: 
00:0000479E 4E75            	  4292:                 rts
                            	  4293: 
                            	  4294: 
                            	  4295: *-----------------------------------------------------------
                            	  4296: *-----------------------------------------------------------
                            	  4297: * OPCODE : SCC
                            	  4298: *-----------------------------------------------------------
                            	  4299: *-----------------------------------------------------------
                            	  4300: 
00:000047A0 44FC0001        	  4301: op_SCC:         move #$01,CCR
00:000047A4 54F900010000    	  4302:                 scc $00010000                   * Clear the EA byte
00:000047AA 4A3900010000    	  4303:                 cmpi.b #$00,$00010000
00:000047B0 66FE            	  4304:                 bne.s *
                            	  4305: 
00:000047B2 44FC0000        	  4306:                 move #$00,CCR
00:000047B6 54F900010000    	  4307:                 scc $00010000                   * Set the EA byte to 0xFF
00:000047BC 0C3900FF00010000	  4308:                 cmpi.b #$FF,$00010000
00:000047C4 66FE            	  4309:                 bne.s *
                            	  4310: 
00:000047C6 54C0            	  4311: 								scc d0													* Test setting a data register
00:000047C8 0C0000FF        	  4312: 								cmpi.b #$FF,d0
00:000047CC 66FE            	  4313: 								bne.s *
00:000047CE 4E75            	  4314:                 rts
                            	  4315: 
                            	  4316: 
                            	  4317: 
                            	  4318: *-----------------------------------------------------------
                            	  4319: *-----------------------------------------------------------
                            	  4320: * OPCODE : ADDQ
                            	  4321: *-----------------------------------------------------------
                            	  4322: *-----------------------------------------------------------
                            	  4323: 
                            	  4324: op_ADDQ:
                            	  4325: 
                            	  4326: *     BYTE
00:000047D0 203C000000FF    	  4327:                 move.l #$000000FF,d0    * Loop counter
00:000047D6 7200            	  4328:                 moveq  #$00000000,d1    * Flag results accumulator
00:000047D8 7400            	  4329:                 moveq  #$00000000,d2    * Data results accumulator
00:000047DA 7600            	  4330:                 moveq  #$00000000,d3
00:000047DC 7800            	  4331:                 moveq  #$00000000,d4
00:000047DE 7A00            	  4332:                 moveq  #$00000000,d5
00:000047E0 7C00            	  4333:                 moveq  #$00000000,d6
00:000047E2 7E00            	  4334:                 moveq  #$00000000,d7
                            	  4335: 
00:000047E4 5605            	  4336: ADDQ_LOOP1:     addq.b #3,d5
00:000047E6 40C6            	  4337:                 move.w SR,d6
00:000047E8 02860000001F    	  4338:                 andi.l #$1F,d6        * Isolate flags
00:000047EE D286            	  4339:                 add.l d6,d1           * Copy flag results into accumulator
00:000047F0 D485            	  4340:                 add.l d5,d2           * Copy data results into data accumulator
00:000047F2 51C8FFF0        	  4341:                 dbf d0,ADDQ_LOOP1
                            	  4342: 
00:000047F6 0C810000043D    	  4343:                 cmpi.l #$0000043D,d1
00:000047FC 66FE            	  4344:                 bne.s *
00:000047FE 0C8200007F80    	  4345:                 cmpi.l #$00007F80,d2
00:00004804 66FE            	  4346:                 bne.s *
                            	  4347: 
                            	  4348: 
                            	  4349: *     WORD
00:00004806 203C000000FF    	  4350:                 move.l #$000000FF,d0    * Loop counter
00:0000480C 7200            	  4351:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000480E 7400            	  4352:                 moveq  #$00000000,d2    * Data results accumulator
00:00004810 7600            	  4353:                 moveq  #$00000000,d3
00:00004812 7800            	  4354:                 moveq  #$00000000,d4
00:00004814 2A3C0000FFF0    	  4355:                 move.l #$0000FFF0,d5
00:0000481A 7C00            	  4356:                 moveq  #$00000000,d6
00:0000481C 7E00            	  4357:                 moveq  #$00000000,d7
00:0000481E 307C0100        	  4358:                 move.l #$00000100,a0
                            	  4359: 
00:00004822 5A45            	  4360: ADDQ_LOOP2:     addq.w #5,d5
00:00004824 40C6            	  4361:                 move.w SR,d6
00:00004826 02860000001F    	  4362:                 andi.l #$1F,d6        * Isolate flags
00:0000482C D286            	  4363:                 add.l d6,d1           * Copy flag results into accumulator
00:0000482E D485            	  4364:                 add.l d5,d2           * Copy data results into data accumulator
00:00004830 51C8FFF0        	  4365:                 dbf d0,ADDQ_LOOP2
                            	  4366: 
00:00004834 0C8100000029    	  4367:                 cmpi.l #$00000029,d1
00:0000483A 66FE            	  4368:                 bne.s *
00:0000483C 0C8200057280    	  4369:                 cmpi.l #$00057280,d2
00:00004842 66FE            	  4370:                 bne.s *
                            	  4371: 
                            	  4372: 
                            	  4373: *     LONG
00:00004844 203C000000FF    	  4374:                 move.l #$000000FF,d0    * Loop counter
00:0000484A 7200            	  4375:                 moveq  #$00000000,d1    * Flag results accumulator
00:0000484C 7400            	  4376:                 moveq  #$00000000,d2    * Data results accumulator
00:0000484E 7600            	  4377:                 moveq  #$00000000,d3
00:00004850 7800            	  4378:                 moveq  #$00000000,d4
00:00004852 7AF0            	  4379:                 move.l #$FFFFFFF0,d5
00:00004854 7C00            	  4380:                 moveq  #$00000000,d6
00:00004856 7E00            	  4381:                 moveq  #$00000000,d7
                            	  4382: 
00:00004858 5285            	  4383: ADDQ_LOOP3:     addq.l #1,d5
00:0000485A 40C6            	  4384:                 move.w SR,d6
00:0000485C 02860000001F    	  4385:                 andi.l #$1F,d6        * Isolate flags
00:00004862 D286            	  4386:                 add.l d6,d1           * Copy flag results into accumulator
00:00004864 D485            	  4387:                 add.l d5,d2           * Copy data results into data accumulator
00:00004866 51C8FFF0        	  4388:                 dbf d0,ADDQ_LOOP3
                            	  4389: 
00:0000486A 0C810000008D    	  4390:                 cmpi.l #$0000008D,d1
00:00004870 66FE            	  4391:                 bne.s *
00:00004872 0C8200007080    	  4392:                 cmpi.l #$00007080,d2
00:00004878 66FE            	  4393:                 bne.s *
                            	  4394: 
                            	  4395: *     Check that Flags are not updated for Address registers
00:0000487A 207C0000FFFF    	  4396:                 move.l #$0000FFFF,a0
00:00004880 44FC0000        	  4397:                 move #$00,CCR         * Clear flags
00:00004884 5E48            	  4398:                 addq.w #$7,a0
00:00004886 65FE            	  4399:                 bcs.s *
                            	  4400: 
00:00004888 4E75            	  4401:                 rts
                            	  4402: 
                            	  4403: 
                            	  4404: 
                            	  4405: *-----------------------------------------------------------
                            	  4406: *-----------------------------------------------------------
                            	  4407: * OPCODE : SUBQ
                            	  4408: *-----------------------------------------------------------
                            	  4409: *-----------------------------------------------------------
                            	  4410: 
                            	  4411: op_SUBQ:
                            	  4412: 
                            	  4413: *     BYTE
00:0000488A 203C000000FF    	  4414:                 move.l #$000000FF,d0    * Loop counter
00:00004890 7200            	  4415:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004892 243C00001234    	  4416:                 move.l #$00001234,d2    * Data results accumulator
00:00004898 7600            	  4417:                 moveq  #$00000000,d3
00:0000489A 7800            	  4418:                 moveq  #$00000000,d4
00:0000489C 7A12            	  4419:                 moveq  #$00000012,d5
00:0000489E 7C00            	  4420:                 moveq  #$00000000,d6
00:000048A0 7E00            	  4421:                 moveq  #$00000000,d7
                            	  4422: 
00:000048A2 5305            	  4423: SUBQ_LOOP1:     subq.b #1,d5
00:000048A4 40C6            	  4424:                 move.w SR,d6
00:000048A6 02860000001F    	  4425:                 andi.l #$1F,d6        * Isolate flags
00:000048AC D286            	  4426:                 add.l d6,d1           * Copy flag results into accumulator
00:000048AE D485            	  4427:                 add.l d5,d2           * Copy data results into data accumulator
00:000048B0 51C8FFF0        	  4428:                 dbf d0,SUBQ_LOOP1
                            	  4429: 
00:000048B4 0C8100000417    	  4430:                 cmpi.l #$00000417,d1
00:000048BA 66FE            	  4431:                 bne.s *
00:000048BC 0C82000091B4    	  4432:                 cmpi.l #$000091B4,d2
00:000048C2 66FE            	  4433:                 bne.s *
                            	  4434: 
                            	  4435: 
                            	  4436: *     WORD
00:000048C4 203C000000FF    	  4437:                 move.l #$000000FF,d0    * Loop counter
00:000048CA 7200            	  4438:                 moveq  #$00000000,d1    * Flag results accumulator
00:000048CC 7400            	  4439:                 moveq  #$00000000,d2    * Data results accumulator
00:000048CE 7600            	  4440:                 moveq  #$00000000,d3
00:000048D0 7800            	  4441:                 moveq  #$00000000,d4
00:000048D2 7A02            	  4442:                 moveq  #$00000002,d5
00:000048D4 7C00            	  4443:                 moveq  #$00000000,d6
00:000048D6 7E00            	  4444:                 moveq  #$00000000,d7
00:000048D8 307C0100        	  4445:                 move.l #$00000100,a0
                            	  4446: 
00:000048DC 5B45            	  4447: SUBQ_LOOP2:     subq.w #5,d5
00:000048DE 40C6            	  4448:                 move.w SR,d6
00:000048E0 02860000001F    	  4449:                 andi.l #$1F,d6        * Isolate flags
00:000048E6 D286            	  4450:                 add.l d6,d1           * Copy flag results into accumulator
00:000048E8 D485            	  4451:                 add.l d5,d2           * Copy data results into data accumulator
00:000048EA 51C8FFF0        	  4452:                 dbf d0,SUBQ_LOOP2
                            	  4453: 
00:000048EE 0C8100000811    	  4454:                 cmpi.l #$00000811,d1
00:000048F4 66FE            	  4455:                 bne.s *
00:000048F6 0C8200FD7F80    	  4456:                 cmpi.l #$00FD7F80,d2
00:000048FC 66FE            	  4457:                 bne.s *
                            	  4458: 
                            	  4459: 
                            	  4460: *     LONG
00:000048FE 203C000000FF    	  4461:                 move.l #$000000FF,d0    * Loop counter
00:00004904 7200            	  4462:                 moveq  #$00000000,d1    * Flag results accumulator
00:00004906 7400            	  4463:                 moveq  #$00000000,d2    * Data results accumulator
00:00004908 7600            	  4464:                 moveq  #$00000000,d3
00:0000490A 7800            	  4465:                 moveq  #$00000000,d4
00:0000490C 7A07            	  4466:                 moveq  #$00000007,d5
00:0000490E 7C00            	  4467:                 moveq  #$00000000,d6
00:00004910 7E00            	  4468:                 moveq  #$00000000,d7
                            	  4469: 
00:00004912 5385            	  4470: SUBQ_LOOP3:     subq.l #1,d5
00:00004914 40C6            	  4471:                 move.w SR,d6
00:00004916 02860000001F    	  4472:                 andi.l #$1F,d6        * Isolate flags
00:0000491C D286            	  4473:                 add.l d6,d1           * Copy flag results into accumulator
00:0000491E D485            	  4474:                 add.l d5,d2           * Copy data results into data accumulator
00:00004920 51C8FFF0        	  4475:                 dbf d0,SUBQ_LOOP3
                            	  4476: 
00:00004924 0C81000007DD    	  4477:                 cmpi.l #$000007DD,d1
00:0000492A 66FE            	  4478:                 bne.s *
00:0000492C 0C82FFFF8680    	  4479:                 cmpi.l #$FFFF8680,d2
00:00004932 66FE            	  4480:                 bne.s *
                            	  4481: 
                            	  4482: *     Check that Flags are not updated for Address registers
00:00004934 207C0001FFFF    	  4483:                 move.l #$0001FFFF,a0
00:0000493A 44FC0000        	  4484:                 move #$00,CCR         * Clear flags
00:0000493E 5F48            	  4485:                 subq.w #$7,a0
00:00004940 65FE            	  4486:                 bcs.s *
                            	  4487: 
00:00004942 4E75            	  4488:                 rts
                            	  4489: 
                            	  4490: 
                            	  4491: 
                            	  4492: 
                            	  4493: *-----------------------------------------------------------
                            	  4494: *-----------------------------------------------------------
                            	  4495: * OPCODE : MOVEQ
                            	  4496: *-----------------------------------------------------------
                            	  4497: *-----------------------------------------------------------
                            	  4498: 
                            	  4499: op_MOVEQ:
00:00004944 7000            	  4500:                 moveq  #$00000000,d0
00:00004946 7000            	  4501:                 moveq #$0,d0
00:00004948 66FE            	  4502:                 bne.s *
00:0000494A 4A80            	  4503:                 cmpi.l #$00000000,d0
00:0000494C 66FE            	  4504:                 bne.s *
                            	  4505: 
00:0000494E 7000            	  4506:                 moveq  #$00000000,d0
00:00004950 7080            	  4507:                 moveq #-128,d0
00:00004952 67FE            	  4508:                 beq.s *
00:00004954 6AFE            	  4509:                 bpl.s *
00:00004956 0C80FFFFFF80    	  4510:                 cmpi.l #$FFFFFF80,d0
00:0000495C 66FE            	  4511:                 bne.s *
                            	  4512: 
                            	  4513: 
00:0000495E 4E75            	  4514:                 rts
                            	  4515: 
                            	  4516: 
                            	  4517: *-----------------------------------------------------------
                            	  4518: *-----------------------------------------------------------
                            	  4519: * OPCODE : DIVU
                            	  4520: *-----------------------------------------------------------
                            	  4521: *-----------------------------------------------------------
                            	  4522: 
                            	  4523: op_DIVU:
                            	  4524: 
00:00004960 203CA5A5A5A5    	  4525:                 move.l #$a5a5a5a5,d0        * Initial Numerator
00:00004966 223C00005A5A    	  4526:                 move.l #$00005a5a,d1        * Initial Divisor
00:0000496C 243CA5A5A5A5    	  4527:                 move.l #$a5a5a5a5,d2
00:00004972 7600            	  4528:                 moveq  #$00000000,d3
00:00004974 7800            	  4529:                 moveq  #$00000000,d4        * Cumulative data results
00:00004976 7A00            	  4530:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004978 7C0E            	  4531:                 move.l #$0000000E,d6       * Inner loop counter
00:0000497A 7E1E            	  4532:                 move.l #$0000001E,d7       * Outer loop counter
                            	  4533: 
                            	  4534: 
00:0000497C 80C1            	  4535: DIVU_OUTER1:    divu d1,d0               * !! Easy68K C not always cleared
00:0000497E 40C3            	  4536:                 move.w SR,d3
00:00004980 02830000000C    	  4537:                 andi.l #$0C,d3            * Isolate flags
00:00004986 DA83            	  4538:                 add.l d3,d5               * Copy flag results into accumulator
00:00004988 D880            	  4539:                 add.l d0,d4               * Copy data results into data accumulator
00:0000498A E289            	  4540:                 lsr.l #$1,d1
                            	  4541: 
00:0000498C 51CEFFEE        	  4542:                 dbf d6,DIVU_OUTER1
00:00004990 E28A            	  4543:                 lsr.l #$1,d2
00:00004992 2002            	  4544:                 move.l d2,d0
00:00004994 223C00005A5A    	  4545:                 move.l #$00005a5a,d1       * Initial Divisor
00:0000499A 7C0E            	  4546:                 move.l #$0000000E,d6       * Inner loop counter
00:0000499C 51CFFFDE        	  4547:                 dbf d7,DIVU_OUTER1
                            	  4548: 
00:000049A0 0C8492FEDB89    	  4549:                 cmpi.l #$92FEDB89,d4      * Check the data results
00:000049A6 66FE            	  4550:                 bne.s *
                            	  4551: 
00:000049A8 0C8500000110    	  4552:                 cmpi.l #$00000110,d5      * Check the Flag results
00:000049AE 66FE            	  4553:                 bne.s *
                            	  4554: 
                            	  4555: 
00:000049B0 4E75            	  4556:                 rts
                            	  4557: 
                            	  4558: 
                            	  4559: 
                            	  4560: *-----------------------------------------------------------
                            	  4561: *-----------------------------------------------------------
                            	  4562: * OPCODE : DIVS
                            	  4563: *-----------------------------------------------------------
                            	  4564: *-----------------------------------------------------------
                            	  4565: 
                            	  4566: op_DIVS:
                            	  4567: 
00:000049B2 203CA5A5A5A5    	  4568: 	move.l #$a5a5a5a5,d0        * Initial Numerator
00:000049B8 223C00005A5A    	  4569: 	move.l #$00005a5a,d1        * Initial Divisor
00:000049BE 243CA5A5A5A5    	  4570: 	move.l #$a5a5a5a5,d2
00:000049C4 7600            	  4571: 	moveq  #$00000000,d3
00:000049C6 7800            	  4572: 	moveq  #$00000000,d4        * Cumulative data results
00:000049C8 7A00            	  4573: 	moveq  #$00000000,d5       * Cumulative flag results
00:000049CA 7C0E            	  4574: 	move.l #$0000000E,d6       * Inner loop counter
00:000049CC 7E1E            	  4575: 	move.l #$0000001E,d7       * Outer loop counter
                            	  4576: 
                            	  4577: DIVS_OUTER1:
00:000049CE 81C1            	  4578: 	divs d1,d0               * !! Easy68K C not always cleared
00:000049D0 40C3            	  4579: 	move.w SR,d3
00:000049D2 02830000000C    	  4580: 	andi.l #$0C,d3            * Isolate flags
00:000049D8 DA83            	  4581: 	add.l d3,d5               * Copy flag results into accumulator
00:000049DA D880            	  4582: 	add.l d0,d4               * Copy data results into data accumulator
00:000049DC E289            	  4583: 	lsr.l #$1,d1
                            	  4584: 
00:000049DE 51CEFFEE        	  4585: 	dbf d6,DIVS_OUTER1
00:000049E2 E28A            	  4586: 	lsr.l #$1,d2
00:000049E4 2002            	  4587: 	move.l d2,d0
00:000049E6 223C00005A5A    	  4588: 	move.l #$00005a5a,d1       * Initial Divisor
00:000049EC 7C0E            	  4589: 	move.l #$0000000E,d6       * Inner loop counter
00:000049EE 51CFFFDE        	  4590: 	dbf d7,DIVS_OUTER1
                            	  4591: 
00:000049F2 0C844EC5D057    	  4592: 	cmpi.l #$4EC5D057,d4      * Check the data results
00:000049F8 66FE            	  4593: 	bne.s *
                            	  4594: 
00:000049FA 0C8500000038    	  4595: 	cmpi.l #$00000038,d5      * Check the Flag results
00:00004A00 66FE            	  4596: 	bne.s *
00:00004A02 4E75            	  4597: 	rts
                            	  4598: 
                            	  4599: 
                            	  4600: *-----------------------------------------------------------
                            	  4601: *-----------------------------------------------------------
                            	  4602: * OPCODE : OR
                            	  4603: *-----------------------------------------------------------
                            	  4604: *-----------------------------------------------------------
                            	  4605: 
                            	  4606: op_OR:
                            	  4607: 
                            	  4608: *  * <EA> to Register
                            	  4609: 
00:00004A04 203CA5A5A5A5    	  4610:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004A0A 223C8167E123    	  4611:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004A10 243CA5A5A5A5    	  4612:                 move.l #$a5a5a5a5,d2
00:00004A16 7600            	  4613:                 moveq  #$00000000,d3
00:00004A18 7800            	  4614:                 moveq  #$00000000,d4       * Cumulative data results
00:00004A1A 7A00            	  4615:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004A1C 7C1E            	  4616:                 move.l #$0000001E,d6       * Inner loop counter
00:00004A1E 7E1E            	  4617:                 move.l #$0000001E,d7       * Outer loop counter
00:00004A20 307C0100        	  4618:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4619: 
                            	  4620: 
                            	  4621: OR_OUTER1:
                            	  4622: 
                            	  4623: *     BYTE
00:00004A24 2081            	  4624:                 move.l d1,(a0)
00:00004A26 8010            	  4625:                 or.b (a0),d0
00:00004A28 40C3            	  4626:                 move.w SR,d3
00:00004A2A 02830000000C    	  4627:                 andi.l #$0C,d3            * Isolate flags
00:00004A30 DA83            	  4628:                 add.l d3,d5               * Copy flag results into accumulator
00:00004A32 D880            	  4629:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4630: 
                            	  4631: *     WORD
00:00004A34 2081            	  4632:                 move.l d1,(a0)
00:00004A36 8050            	  4633:                 or.w (a0),d0
00:00004A38 40C3            	  4634:                 move.w SR,d3
00:00004A3A 02830000000C    	  4635:                 andi.l #$0C,d3            * Isolate flags
00:00004A40 DA83            	  4636:                 add.l d3,d5               * Copy flag results into accumulator
00:00004A42 D880            	  4637:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4638: 
                            	  4639: *     LONG
00:00004A44 2081            	  4640:                 move.l d1,(a0)
00:00004A46 8090            	  4641:                 or.l (a0),d0
00:00004A48 40C3            	  4642:                 move.w SR,d3
00:00004A4A 02830000000F    	  4643:                 andi.l #$0F,d3            * Isolate flags
00:00004A50 DA83            	  4644:                 add.l d3,d5               * Copy flag results into accumulator
00:00004A52 D880            	  4645:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4646: 
                            	  4647: 
00:00004A54 E289            	  4648:                 lsr.l #$1,d1
00:00004A56 51CEFFCC        	  4649:                 dbf d6,OR_OUTER1
00:00004A5A E28A            	  4650:                 lsr.l #$1,d2
00:00004A5C 223C8167E123    	  4651:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004A62 7C1E            	  4652:                 move.l #$0000001E,d6       * Inner loop counter
00:00004A64 51CFFFBE        	  4653:                 dbf d7,OR_OUTER1
                            	  4654: 
00:00004A68 0C8476EAC803    	  4655:                 cmpi.l #$76EAC803,d4      * Check the data results
00:00004A6E 66FE            	  4656:                 bne.s *
00:00004A70 0C8500005A18    	  4657:                 cmpi.l #$00005A18,d5      * Check the Flag results
00:00004A76 66FE            	  4658:                 bne.s *
                            	  4659: 
                            	  4660: 
                            	  4661: *  * Register to <EA>
                            	  4662: 
00:00004A78 203C86738374    	  4663:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004A7E 223CFC55F2FE    	  4664:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004A84 243C86738374    	  4665:                 move.l #$86738374,d2
00:00004A8A 7600            	  4666:                 moveq  #$00000000,d3
00:00004A8C 7800            	  4667:                 moveq  #$00000000,d4       * Cumulative data results
00:00004A8E 7A00            	  4668:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004A90 7C1E            	  4669:                 move.l #$0000001E,d6       * Inner loop counter
00:00004A92 7E1D            	  4670:                 move.l #$0000001D,d7       * Outer loop counter
00:00004A94 307C0100        	  4671:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4672: 
                            	  4673: 
                            	  4674: OR_OUTER2:
                            	  4675: 
                            	  4676: *     BYTE
00:00004A98 2080            	  4677:                 move.l d0,(a0)
00:00004A9A 8310            	  4678:                 or.b d1,(a0)
00:00004A9C 40C3            	  4679:                 move.w SR,d3
00:00004A9E 02830000000C    	  4680:                 andi.l #$0C,d3            * Isolate flags
00:00004AA4 DA83            	  4681:                 add.l d3,d5               * Copy flag results into accumulator
00:00004AA6 D890            	  4682:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4683: 
                            	  4684: *     WORD
00:00004AA8 2080            	  4685:                 move.l d0,(a0)
00:00004AAA 8350            	  4686:                 or.w d1,(a0)
00:00004AAC 40C3            	  4687:                 move.w SR,d3
00:00004AAE 02830000000C    	  4688:                 andi.l #$0C,d3            * Isolate flags
00:00004AB4 DA83            	  4689:                 add.l d3,d5               * Copy flag results into accumulator
00:00004AB6 D890            	  4690:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4691: 
                            	  4692: *     LONG
00:00004AB8 2080            	  4693:                 move.l d0,(a0)
00:00004ABA 8390            	  4694:                 or.l d1,(a0)
00:00004ABC 40C3            	  4695:                 move.w SR,d3
00:00004ABE 02830000000F    	  4696:                 andi.l #$0F,d3            * Isolate flags
00:00004AC4 DA83            	  4697:                 add.l d3,d5               * Copy flag results into accumulator
00:00004AC6 D890            	  4698:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4699: 
                            	  4700: 
00:00004AC8 E289            	  4701:                 lsr.l #$1,d1
00:00004ACA 51CEFFCC        	  4702:                 dbf d6,OR_OUTER2
00:00004ACE E28A            	  4703:                 lsr.l #$1,d2
00:00004AD0 223C8167E123    	  4704:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004AD6 7C1E            	  4705:                 move.l #$0000001E,d6       * Inner loop counter
00:00004AD8 51CFFFBE        	  4706:                 dbf d7,OR_OUTER2
                            	  4707: 
00:00004ADC 0C84FA82B9E4    	  4708:                 cmpi.l #$FA82B9E4,d4      * Check the data results
00:00004AE2 66FE            	  4709:                 bne.s *
00:00004AE4 0C8500005730    	  4710:                 cmpi.l #$00005730,d5      * Check the Flag results
00:00004AEA 66FE            	  4711:                 bne.s *
                            	  4712: 
                            	  4713: 
00:00004AEC 4E75            	  4714:                 rts
                            	  4715: 
                            	  4716: 
                            	  4717: 
                            	  4718: *-----------------------------------------------------------
                            	  4719: *-----------------------------------------------------------
                            	  4720: * OPCODE : AND
                            	  4721: *-----------------------------------------------------------
                            	  4722: *-----------------------------------------------------------
                            	  4723: 
                            	  4724: op_AND:
                            	  4725: 
                            	  4726: *  * <EA> to Register
                            	  4727: 
00:00004AEE 203CA5A5A5A5    	  4728:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004AF4 223C8167E123    	  4729:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004AFA 243CA5A5A5A5    	  4730:                 move.l #$a5a5a5a5,d2
00:00004B00 7600            	  4731:                 moveq  #$00000000,d3
00:00004B02 7800            	  4732:                 moveq  #$00000000,d4       * Cumulative data results
00:00004B04 7A00            	  4733:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004B06 7C1E            	  4734:                 move.l #$0000001E,d6       * Inner loop counter
00:00004B08 7E1E            	  4735:                 move.l #$0000001E,d7       * Outer loop counter
00:00004B0A 307C0100        	  4736:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4737: 
                            	  4738: 
                            	  4739: AND_OUTER1:
                            	  4740: 
                            	  4741: *     BYTE
00:00004B0E 2081            	  4742:                 move.l d1,(a0)
00:00004B10 C010            	  4743:                 and.b (a0),d0
00:00004B12 40C3            	  4744:                 move.w sr,d3
00:00004B14 02830000000C    	  4745:                 andi.l #$0C,d3            * Isolate flags
00:00004B1A DA83            	  4746:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B1C D880            	  4747:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4748: 
                            	  4749: *     WORD
00:00004B1E 2081            	  4750:                 move.l d1,(a0)
00:00004B20 C050            	  4751:                 and.w (a0),d0
00:00004B22 40C3            	  4752:                 move.w sr,d3
00:00004B24 02830000000C    	  4753:                 andi.l #$0C,d3            * Isolate flags
00:00004B2A DA83            	  4754:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B2C D880            	  4755:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4756: 
                            	  4757: *     LONG
00:00004B2E 2081            	  4758:                 move.l d1,(a0)
00:00004B30 C090            	  4759:                 and.l (a0),d0
00:00004B32 40C3            	  4760:                 move.w sr,d3
00:00004B34 02830000000F    	  4761:                 andi.l #$0F,d3            * Isolate flags
00:00004B3A DA83            	  4762:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B3C D880            	  4763:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4764: 
                            	  4765: 
00:00004B3E E289            	  4766:                 lsr.l #$1,d1
00:00004B40 51CEFFCC        	  4767:                 dbf d6,AND_OUTER1
00:00004B44 E28A            	  4768:                 lsr.l #$1,d2
00:00004B46 223C8167E123    	  4769:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004B4C 7C1E            	  4770:                 move.l #$0000001E,d6       * Inner loop counter
00:00004B4E 51CFFFBE        	  4771:                 dbf d7,AND_OUTER1
                            	  4772: 
00:00004B52 0C84CF212883    	  4773:                 cmpi.l #$CF212883,d4      * Check the data results
00:00004B58 66FE            	  4774:                 bne.s *
00:00004B5A 0C8500002D10    	  4775:                 cmpi.l #$00002D10,d5      * Check the Flag results
00:00004B60 66FE            	  4776:                 bne.s *
                            	  4777: 
                            	  4778: 
                            	  4779: *  * Register to <EA>
                            	  4780: 
00:00004B62 203C86738374    	  4781:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004B68 223CFC55F2FE    	  4782:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004B6E 243C86738374    	  4783:                 move.l #$86738374,d2
00:00004B74 7600            	  4784:                 moveq  #$00000000,d3
00:00004B76 7800            	  4785:                 moveq  #$00000000,d4       * Cumulative data results
00:00004B78 7A00            	  4786:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004B7A 7C1E            	  4787:                 move.l #$0000001E,d6       * Inner loop counter
00:00004B7C 7E1D            	  4788:                 move.l #$0000001D,d7       * Outer loop counter
00:00004B7E 307C0100        	  4789:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4790: 
                            	  4791: 
                            	  4792: AND_OUTER2:
                            	  4793: 
                            	  4794: *     BYTE
00:00004B82 2080            	  4795:                 move.l d0,(a0)
00:00004B84 C310            	  4796:                 and.b d1,(a0)
00:00004B86 40C3            	  4797:                 move.w sr,d3
00:00004B88 02830000000C    	  4798:                 andi.l #$0C,d3            * Isolate flags
00:00004B8E DA83            	  4799:                 add.l d3,d5               * Copy flag results into accumulator
00:00004B90 D890            	  4800:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4801: 
                            	  4802: *     WORD
00:00004B92 2080            	  4803:                 move.l d0,(a0)
00:00004B94 C350            	  4804:                 and.w d1,(a0)
00:00004B96 40C3            	  4805:                 move.w sr,d3
00:00004B98 02830000000C    	  4806:                 andi.l #$0C,d3            * Isolate flags
00:00004B9E DA83            	  4807:                 add.l d3,d5               * Copy flag results into accumulator
00:00004BA0 D890            	  4808:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4809: 
                            	  4810: *     LONG
00:00004BA2 2080            	  4811:                 move.l d0,(a0)
00:00004BA4 C390            	  4812:                 and.l d1,(a0)
00:00004BA6 40C3            	  4813:                 move.w sr,d3
00:00004BA8 02830000000F    	  4814:                 andi.l #$0F,d3            * Isolate flags
00:00004BAE DA83            	  4815:                 add.l d3,d5               * Copy flag results into accumulator
00:00004BB0 D890            	  4816:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4817: 
                            	  4818: 
00:00004BB2 E289            	  4819:                 lsr.l #$1,d1
00:00004BB4 51CEFFCC        	  4820:                 dbf d6,AND_OUTER2
00:00004BB8 E28A            	  4821:                 lsr.l #$1,d2
00:00004BBA 223C8167E123    	  4822:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004BC0 7C1E            	  4823:                 move.l #$0000001E,d6       * Inner loop counter
00:00004BC2 51CFFFBE        	  4824:                 dbf d7,AND_OUTER2
                            	  4825: 
00:00004BC6 0C844A3DE544    	  4826:                 cmpi.l #$4A3DE544,d4      * Check the data results
00:00004BCC 66FE            	  4827:                 bne.s *
00:00004BCE 0C85000018E8    	  4828:                 cmpi.l #$000018E8,d5      * Check the Flag results
00:00004BD4 66FE            	  4829:                 bne.s *
                            	  4830: 
                            	  4831: 
00:00004BD6 4E75            	  4832:                 rts
                            	  4833: 
                            	  4834: 
                            	  4835: 
                            	  4836: *-----------------------------------------------------------
                            	  4837: *-----------------------------------------------------------
                            	  4838: * OPCODE : EOR
                            	  4839: *-----------------------------------------------------------
                            	  4840: *-----------------------------------------------------------
                            	  4841: 
                            	  4842: op_EOR:
                            	  4843: 
                            	  4844: *  * Register to <EA>
                            	  4845: 
00:00004BD8 203C86738374    	  4846:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004BDE 223CFC55F2FE    	  4847:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004BE4 243C86738374    	  4848:                 move.l #$86738374,d2
00:00004BEA 7600            	  4849:                 moveq  #$00000000,d3
00:00004BEC 7800            	  4850:                 moveq  #$00000000,d4       * Cumulative data results
00:00004BEE 7A00            	  4851:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004BF0 7C1E            	  4852:                 move.l #$0000001E,d6       * Inner loop counter
00:00004BF2 7E1D            	  4853:                 move.l #$0000001D,d7       * Outer loop counter
00:00004BF4 307C0100        	  4854:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4855: 
                            	  4856: 
                            	  4857: EOR_OUTER2:
                            	  4858: 
                            	  4859: *     BYTE
00:00004BF8 2080            	  4860:                 move.l d0,(a0)
00:00004BFA B310            	  4861:                 eor.b d1,(a0)
00:00004BFC 40C3            	  4862:                 move.w sr,d3
00:00004BFE 02830000000C    	  4863:                 andi.l #$0C,d3            * Isolate flags
00:00004C04 DA83            	  4864:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C06 D890            	  4865:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4866: 
                            	  4867: *     WORD
00:00004C08 2080            	  4868:                 move.l d0,(a0)
00:00004C0A B350            	  4869:                 eor.w d1,(a0)
00:00004C0C 40C3            	  4870:                 move.w sr,d3
00:00004C0E 02830000000C    	  4871:                 andi.l #$0C,d3            * Isolate flags
00:00004C14 DA83            	  4872:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C16 D890            	  4873:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4874: 
                            	  4875: *     LONG
00:00004C18 2080            	  4876:                 move.l d0,(a0)
00:00004C1A B390            	  4877:                 eor.l d1,(a0)
00:00004C1C 40C3            	  4878:                 move.w sr,d3
00:00004C1E 02830000000F    	  4879:                 andi.l #$0F,d3            * Isolate flags
00:00004C24 DA83            	  4880:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C26 D890            	  4881:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  4882: 
                            	  4883: 
00:00004C28 E289            	  4884:                 lsr.l #$1,d1
00:00004C2A 51CEFFCC        	  4885:                 dbf d6,EOR_OUTER2
00:00004C2E E28A            	  4886:                 lsr.l #$1,d2
00:00004C30 223C8167E123    	  4887:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004C36 7C1E            	  4888:                 move.l #$0000001E,d6       * Inner loop counter
00:00004C38 51CFFFBE        	  4889:                 dbf d7,EOR_OUTER2
                            	  4890: 
00:00004C3C 0C8455C5EB70    	  4891:                 cmpi.l #$55C5EB70,d4      * Check the data results
00:00004C42 66FE            	  4892:                 bne.s *
00:00004C44 0C8500004430    	  4893:                 cmpi.l #$00004430,d5      * Check the Flag results
00:00004C4A 66FE            	  4894:                 bne.s *
                            	  4895: 
                            	  4896: 
00:00004C4C 4E75            	  4897:                 rts
                            	  4898: 
                            	  4899: 
                            	  4900: *-----------------------------------------------------------
                            	  4901: *-----------------------------------------------------------
                            	  4902: * OPCODE : CMP
                            	  4903: *-----------------------------------------------------------
                            	  4904: *-----------------------------------------------------------
                            	  4905: 
                            	  4906: op_CMP:
                            	  4907: 
                            	  4908: 
                            	  4909: *  * <EA> to Register
                            	  4910: 
00:00004C4E 203CA5A5A5A5    	  4911:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004C54 223C8167E123    	  4912:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004C5A 243CA5A5A5A5    	  4913:                 move.l #$a5a5a5a5,d2
00:00004C60 7600            	  4914:                 moveq  #$00000000,d3
00:00004C62 7800            	  4915:                 moveq  #$00000000,d4       * Cumulative data results
00:00004C64 7A00            	  4916:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004C66 7C1E            	  4917:                 move.l #$0000001E,d6       * Inner loop counter
00:00004C68 7E1E            	  4918:                 move.l #$0000001E,d7       * Outer loop counter
00:00004C6A 307C0100        	  4919:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  4920: 
                            	  4921: 
                            	  4922: CMP_OUTER1:
                            	  4923: 
                            	  4924: *     BYTE
00:00004C6E 2081            	  4925:                 move.l d1,(a0)
00:00004C70 B010            	  4926:                 cmp.b (a0),d0
00:00004C72 40C3            	  4927:                 move.w sr,d3
00:00004C74 02830000000F    	  4928:                 andi.l #$0F,d3            * Isolate flags
00:00004C7A DA83            	  4929:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C7C D880            	  4930:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4931: 
                            	  4932: *     WORD
00:00004C7E 2081            	  4933:                 move.l d1,(a0)
00:00004C80 B050            	  4934:                 cmp.w (a0),d0
00:00004C82 40C3            	  4935:                 move.w sr,d3
00:00004C84 02830000000F    	  4936:                 andi.l #$0F,d3            * Isolate flags
00:00004C8A DA83            	  4937:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C8C D880            	  4938:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4939: 
                            	  4940: *     LONG
00:00004C8E 2081            	  4941:                 move.l d1,(a0)
00:00004C90 B090            	  4942:                 cmp.l (a0),d0
00:00004C92 40C3            	  4943:                 move.w sr,d3
00:00004C94 02830000000F    	  4944:                 andi.l #$0F,d3            * Isolate flags
00:00004C9A DA83            	  4945:                 add.l d3,d5               * Copy flag results into accumulator
00:00004C9C D880            	  4946:                 add.l d0,d4               * Copy data results into data accumulator
                            	  4947: 
                            	  4948: 
00:00004C9E E289            	  4949:                 lsr.l #$1,d1
00:00004CA0 51CEFFCC        	  4950:                 dbf d6,CMP_OUTER1
00:00004CA4 E28A            	  4951:                 lsr.l #$1,d2
00:00004CA6 223C8167E123    	  4952:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004CAC 7C1E            	  4953:                 move.l #$0000001E,d6       * Inner loop counter
00:00004CAE 51CFFFBE        	  4954:                 dbf d7,CMP_OUTER1
                            	  4955: 
00:00004CB2 0C847878712F    	  4956:                 cmpi.l #$7878712F,d4      * Check the data results
00:00004CB8 66FE            	  4957:                 bne.s *
00:00004CBA 0C8500005502    	  4958:                 cmpi.l #$00005502,d5      * Check the Flag results
00:00004CC0 66FE            	  4959:                 bne.s *
                            	  4960: 
                            	  4961: 
                            	  4962: 
00:00004CC2 4E75            	  4963:                 rts
                            	  4964: 
                            	  4965: 
                            	  4966: *-----------------------------------------------------------
                            	  4967: *-----------------------------------------------------------
                            	  4968: * OPCODE : CMPA
                            	  4969: *-----------------------------------------------------------
                            	  4970: *-----------------------------------------------------------
                            	  4971: 
                            	  4972: op_CMPA:
                            	  4973: 
                            	  4974: 
                            	  4975: *  * <EA> to Register
                            	  4976: 
00:00004CC4 207CA5A5A5A5    	  4977:                 move.l #$a5a5a5a5,a0       * Initial Data-X  Inner loop
00:00004CCA 223C8167E123    	  4978:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004CD0 243CA5A5A5A5    	  4979:                 move.l #$a5a5a5a5,d2
00:00004CD6 7600            	  4980:                 moveq  #$00000000,d3
00:00004CD8 7800            	  4981:                 moveq  #$00000000,d4       * Cumulative data results
00:00004CDA 7A00            	  4982:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004CDC 7C1E            	  4983:                 move.l #$0000001E,d6       * Inner loop counter
00:00004CDE 7E1E            	  4984:                 move.l #$0000001E,d7       * Outer loop counter
00:00004CE0 327C0100        	  4985:                 move.l #$00000100,a1       * Address for memory EA operations
                            	  4986: 
                            	  4987: 
                            	  4988: CMPA_OUTER1:
                            	  4989: 
                            	  4990: 
                            	  4991: *     WORD
00:00004CE4 2281            	  4992:                 move.l d1,(a1)
00:00004CE6 B0D1            	  4993:                 cmpa.w (a1),a0
00:00004CE8 40C3            	  4994:                 move.w sr,d3
00:00004CEA 02830000000F    	  4995:                 andi.l #$0F,d3            * Isolate flags
00:00004CF0 DA83            	  4996:                 add.l d3,d5               * Copy flag results into accumulator
00:00004CF2 D888            	  4997:                 add.l a0,d4               * Copy data results into data accumulator
                            	  4998: 
                            	  4999: *     LONG
00:00004CF4 2281            	  5000:                 move.l d1,(a1)
00:00004CF6 B1D1            	  5001:                 cmpa.l (a1),a0
00:00004CF8 40C3            	  5002:                 move.w sr,d3
00:00004CFA 02830000000F    	  5003:                 andi.l #$0F,d3            * Isolate flags
00:00004D00 DA83            	  5004:                 add.l d3,d5               * Copy flag results into accumulator
00:00004D02 D888            	  5005:                 add.l a0,d4               * Copy data results into data accumulator
                            	  5006: 
                            	  5007: 
00:00004D04 E289            	  5008:                 lsr.l #$1,d1
00:00004D06 51CEFFDC        	  5009:                 dbf d6,CMPA_OUTER1
00:00004D0A E28A            	  5010:                 lsr.l #$1,d2
00:00004D0C 223C8167E123    	  5011:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004D12 7C1E            	  5012:                 move.l #$0000001E,d6       * Inner loop counter
00:00004D14 51CFFFCE        	  5013:                 dbf d7,CMPA_OUTER1
                            	  5014: 
00:00004D18 0C84A5A5A0CA    	  5015:                 cmpi.l #$a5a5a0ca,d4      * Check the data results
00:00004D1E 66FE            	  5016:                 bne.s *
00:00004D20 0C8500003A7D    	  5017:                 cmpi.l #$00003A7D,d5      * Check the Flag results
00:00004D26 66FE            	  5018:                 bne.s *
                            	  5019: 
                            	  5020: 
00:00004D28 4E75            	  5021:                 rts
                            	  5022: 
                            	  5023: 
                            	  5024: 
                            	  5025: *-----------------------------------------------------------
                            	  5026: *-----------------------------------------------------------
                            	  5027: * OPCODE : CMPM
                            	  5028: *-----------------------------------------------------------
                            	  5029: *-----------------------------------------------------------
                            	  5030: 
                            	  5031: op_CMPM:
                            	  5032: 
00:00004D2A 307C0100        	  5033:                 move.l #$00000100,a0       * Address for Data-X
00:00004D2E 327C0200        	  5034:                 move.l #$00000200,a1       * Address for Data-Y
00:00004D32 7000            	  5035:                 moveq  #$00000000,d0
00:00004D34 7200            	  5036:                 moveq  #$00000000,d1
00:00004D36 7400            	  5037:                 moveq  #$00000000,d2
                            	  5038: 
00:00004D38 20FC11FF5580    	  5039:                 move.l #$11FF5580,(a0)+   * Populate test data
00:00004D3E 20FC1111FFFF    	  5040:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:00004D44 20FC33333333    	  5041:                 move.l #$33333333,(a0)+   * Populate test data
00:00004D4A 20FC44444444    	  5042:                 move.l #$44444444,(a0)+   * Populate test data
                            	  5043: 
00:00004D50 22FC80FF337F    	  5044:                 move.l #$80FF337F,(a1)+   * Populate test data
00:00004D56 22FCFFFF1111    	  5045:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:00004D5C 22FC33333333    	  5046:                 move.l #$33333333,(a1)+   * Populate test data
00:00004D62 22FC44444444    	  5047:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5048: 
00:00004D68 307C0100        	  5049:                 move.l #$00000100,a0       * Address for Data-X
00:00004D6C 327C0200        	  5050:                 move.l #$00000200,a1       * Address for Data-Y
00:00004D70 7C0F            	  5051:                 move.l #$0000000F,d6       * Loop counter
                            	  5052: 
00:00004D72 B308            	  5053: CMPM_LOOP1:     cmpm.b (a0)+,(a1)+
00:00004D74 40C3            	  5054:                 move.w sr,d3
00:00004D76 02830000000F    	  5055:                 andi.l #$0F,d3            * Isolate flags
00:00004D7C D083            	  5056:                 add.l d3,d0               * Copy flag results into accumulator
00:00004D7E 51CEFFF2        	  5057:                 dbf d6,CMPM_LOOP1
                            	  5058: 
                            	  5059: 
00:00004D82 307C0100        	  5060:                 move.l #$00000100,a0       * Address for Data-X
00:00004D86 327C0200        	  5061:                 move.l #$00000200,a1       * Address for Data-Y
00:00004D8A 7C07            	  5062:                 moveq  #$00000007,d6       * Loop counter
                            	  5063: 
00:00004D8C B348            	  5064: CMPM_LOOP2:     cmpm.w (a0)+,(a1)+
00:00004D8E 40C3            	  5065:                 move.w sr,d3
00:00004D90 02830000000F    	  5066:                 andi.l #$0F,d3            * Isolate flags
00:00004D96 D283            	  5067:                 add.l d3,d1               * Copy flag results into accumulator
00:00004D98 51CEFFF2        	  5068:                 dbf d6,CMPM_LOOP2
                            	  5069: 
                            	  5070: 
00:00004D9C 307C0100        	  5071:                 move.l #$00000100,a0       * Address for Data-X
00:00004DA0 327C0200        	  5072:                 move.l #$00000200,a1       * Address for Data-Y
00:00004DA4 7C03            	  5073:                 moveq  #$00000003,d6       * Loop counter
                            	  5074: 
00:00004DA6 B388            	  5075: CMPM_LOOP3:     cmpm.l (a0)+,(a1)+
00:00004DA8 40C3            	  5076:                 move.w sr,d3
00:00004DAA 02830000000F    	  5077:                 andi.l #$0F,d3            * Isolate flags
00:00004DB0 D483            	  5078:                 add.l d3,d2               * Copy flag results into accumulator
00:00004DB2 51CEFFF2        	  5079:                 dbf d6,CMPM_LOOP3
                            	  5080: 
                            	  5081: 
00:00004DB6 0C800000004C    	  5082:                 cmpi.l #$0000004C,d0      * Check the data results
00:00004DBC 66FE            	  5083:                 bne.s *
00:00004DBE 0C8100000024    	  5084:                 cmpi.l #$00000024,d1
00:00004DC4 66FE            	  5085:                 bne.s *
00:00004DC6 0C8200000012    	  5086:                 cmpi.l #$00000012,d2
00:00004DCC 66FE            	  5087:                 bne.s *
                            	  5088: 
00:00004DCE 4E75            	  5089:                 rts
                            	  5090: 
                            	  5091: 
                            	  5092: *-----------------------------------------------------------
                            	  5093: *-----------------------------------------------------------
                            	  5094: * OPCODE : ADD
                            	  5095: *-----------------------------------------------------------
                            	  5096: *-----------------------------------------------------------
                            	  5097: 
                            	  5098: op_ADD:
                            	  5099: 
                            	  5100: 
                            	  5101: *  * <EA> to Register
00:00004DD0 203CA5A5A5A5    	  5102:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004DD6 223C8167E123    	  5103:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004DDC 243CA5A5A5A5    	  5104:                 move.l #$a5a5a5a5,d2
00:00004DE2 7600            	  5105:                 moveq  #$00000000,d3
00:00004DE4 7800            	  5106:                 moveq  #$00000000,d4       * Cumulative data results
00:00004DE6 7A00            	  5107:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004DE8 7C1E            	  5108:                 move.l #$0000001E,d6       * Inner loop counter
00:00004DEA 7E1E            	  5109:                 move.l #$0000001E,d7       * Outer loop counter
00:00004DEC 307C0100        	  5110:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5111: 
                            	  5112: 
                            	  5113: ADD_OUTER1:
                            	  5114: 
                            	  5115: *     BYTE
00:00004DF0 2081            	  5116:                 move.l d1,(a0)
00:00004DF2 D010            	  5117:                 add.b (a0),d0
00:00004DF4 40C3            	  5118:                 move.w sr,d3
00:00004DF6 02830000001F    	  5119:                 andi.l #$1F,d3            * Isolate flags
00:00004DFC DA83            	  5120:                 add.l d3,d5               * Copy flag results into accumulator
00:00004DFE D880            	  5121:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5122: 
                            	  5123: *     WORD
00:00004E00 2081            	  5124:                 move.l d1,(a0)
00:00004E02 D050            	  5125:                 add.w (a0),d0
00:00004E04 40C3            	  5126:                 move.w sr,d3
00:00004E06 02830000000C    	  5127:                 andi.l #$0C,d3            * Isolate flags
00:00004E0C DA83            	  5128:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E0E D880            	  5129:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5130: 
                            	  5131: *     LONG
00:00004E10 2081            	  5132:                 move.l d1,(a0)
00:00004E12 D090            	  5133:                 add.l (a0),d0
00:00004E14 40C3            	  5134:                 move.w sr,d3
00:00004E16 02830000000F    	  5135:                 andi.l #$0F,d3            * Isolate flags
00:00004E1C DA83            	  5136:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E1E D880            	  5137:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5138: 
                            	  5139: 
00:00004E20 E299            	  5140:                 ror.l #$1,d1
00:00004E22 51CEFFCC        	  5141:                 dbf d6,ADD_OUTER1
00:00004E26 E29A            	  5142:                 ror.l #$1,d2
00:00004E28 223C8167E123    	  5143:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004E2E 7C1E            	  5144:                 move.l #$0000001E,d6       * Inner loop counter
00:00004E30 51CFFFBE        	  5145:                 dbf d7,ADD_OUTER1
                            	  5146: 
00:00004E34 0C8423ED428F    	  5147:                 cmpi.l #$23ED428F,d4      * Check the data results
00:00004E3A 66FE            	  5148:                 bne.s *
00:00004E3C 0C8500004C96    	  5149:                 cmpi.l #$00004C96,d5      * Check the Flag results
00:00004E42 66FE            	  5150:                 bne.s *
                            	  5151: 
                            	  5152: 
                            	  5153: *  * Register to <EA>
00:00004E44 203C86738374    	  5154:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004E4A 223CFC55F2FE    	  5155:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004E50 243C86738374    	  5156:                 move.l #$86738374,d2
00:00004E56 7600            	  5157:                 moveq  #$00000000,d3
00:00004E58 7800            	  5158:                 moveq  #$00000000,d4       * Cumulative data results
00:00004E5A 7A00            	  5159:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004E5C 7C1E            	  5160:                 move.l #$0000001E,d6       * Inner loop counter
00:00004E5E 7E1D            	  5161:                 move.l #$0000001D,d7       * Outer loop counter
00:00004E60 307C0100        	  5162:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5163: 
                            	  5164: 
                            	  5165: ADD_OUTER2:
                            	  5166: 
                            	  5167: *     BYTE
00:00004E64 2080            	  5168:                 move.l d0,(a0)
00:00004E66 D310            	  5169:                 add.b d1,(a0)
00:00004E68 40C3            	  5170:                 move.w sr,d3
00:00004E6A 02830000000C    	  5171:                 andi.l #$0C,d3            * Isolate flags
00:00004E70 DA83            	  5172:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E72 D890            	  5173:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5174: 
                            	  5175: *     WORD
00:00004E74 2080            	  5176:                 move.l d0,(a0)
00:00004E76 D350            	  5177:                 add.w d1,(a0)
00:00004E78 40C3            	  5178:                 move.w sr,d3
00:00004E7A 02830000001F    	  5179:                 andi.l #$1F,d3            * Isolate flags
00:00004E80 DA83            	  5180:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E82 D890            	  5181:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5182: 
                            	  5183: *     LONG
00:00004E84 2080            	  5184:                 move.l d0,(a0)
00:00004E86 D390            	  5185:                 add.l d1,(a0)
00:00004E88 40C3            	  5186:                 move.w sr,d3
00:00004E8A 02830000000F    	  5187:                 andi.l #$0F,d3            * Isolate flags
00:00004E90 DA83            	  5188:                 add.l d3,d5               * Copy flag results into accumulator
00:00004E92 D890            	  5189:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5190: 
                            	  5191: 
00:00004E94 E299            	  5192:                 ror.l #$1,d1
00:00004E96 51CEFFCC        	  5193:                 dbf d6,ADD_OUTER2
00:00004E9A E29A            	  5194:                 ror.l #$1,d2
00:00004E9C 223C8167E123    	  5195:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004EA2 7C1E            	  5196:                 move.l #$0000001E,d6       * Inner loop counter
00:00004EA4 51CFFFBE        	  5197:                 dbf d7,ADD_OUTER2
                            	  5198: 
00:00004EA8 0C846701B884    	  5199:                 cmpi.l #$6701B884,d4      * Check the data results
00:00004EAE 66FE            	  5200:                 bne.s *
00:00004EB0 0C8500005467    	  5201:                 cmpi.l #$00005467,d5      * Check the Flag results
00:00004EB6 66FE            	  5202:                 bne.s *
                            	  5203: 
00:00004EB8 4E75            	  5204:                 rts
                            	  5205: 
                            	  5206: *-----------------------------------------------------------
                            	  5207: *-----------------------------------------------------------
                            	  5208: * OPCODE : SUB
                            	  5209: *-----------------------------------------------------------
                            	  5210: *-----------------------------------------------------------
                            	  5211: 
                            	  5212: op_SUB:
                            	  5213: 
                            	  5214: *  * <EA> to Register
00:00004EBA 203CA5A5A5A5    	  5215:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004EC0 223C8167E123    	  5216:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00004EC6 243CA5A5A5A5    	  5217:                 move.l #$a5a5a5a5,d2
00:00004ECC 7600            	  5218:                 moveq  #$00000000,d3
00:00004ECE 7800            	  5219:                 moveq  #$00000000,d4       * Cumulative data results
00:00004ED0 7A00            	  5220:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004ED2 7C1E            	  5221:                 move.l #$0000001E,d6       * Inner loop counter
00:00004ED4 7E1E            	  5222:                 move.l #$0000001E,d7       * Outer loop counter
00:00004ED6 307C0100        	  5223:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5224: 
                            	  5225: 
                            	  5226: SUB_OUTER1:
                            	  5227: 
                            	  5228: *     BYTE
00:00004EDA 2081            	  5229:                 move.l d1,(a0)
00:00004EDC 9010            	  5230:                 sub.b (a0),d0
00:00004EDE 40C3            	  5231:                 move.w sr,d3
00:00004EE0 02830000001F    	  5232:                 andi.l #$1F,d3            * Isolate flags
00:00004EE6 DA83            	  5233:                 add.l d3,d5               * Copy flag results into accumulator
00:00004EE8 D880            	  5234:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5235: 
                            	  5236: *     WORD
00:00004EEA 2081            	  5237:                 move.l d1,(a0)
00:00004EEC 9050            	  5238:                 sub.w (a0),d0
00:00004EEE 40C3            	  5239:                 move.w sr,d3
00:00004EF0 02830000000C    	  5240:                 andi.l #$0C,d3            * Isolate flags
00:00004EF6 DA83            	  5241:                 add.l d3,d5               * Copy flag results into accumulator
00:00004EF8 D880            	  5242:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5243: 
                            	  5244: *     LONG
00:00004EFA 2081            	  5245:                 move.l d1,(a0)
00:00004EFC 9090            	  5246:                 sub.l (a0),d0
00:00004EFE 40C3            	  5247:                 move.w sr,d3
00:00004F00 02830000000F    	  5248:                 andi.l #$0F,d3            * Isolate flags
00:00004F06 DA83            	  5249:                 add.l d3,d5               * Copy flag results into accumulator
00:00004F08 D880            	  5250:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5251: 
                            	  5252: 
00:00004F0A E299            	  5253:                 ror.l #$1,d1
00:00004F0C 51CEFFCC        	  5254:                 dbf d6,SUB_OUTER1
00:00004F10 E29A            	  5255:                 ror.l #$1,d2
00:00004F12 223C8167E123    	  5256:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004F18 7C1E            	  5257:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F1A 51CFFFBE        	  5258:                 dbf d7,SUB_OUTER1
                            	  5259: 
00:00004F1E 0C841A8D14CF    	  5260:                 cmpi.l #$1A8D14CF,d4      * Check the data results
00:00004F24 66FE            	  5261:                 bne.s *
00:00004F26 0C8500004FC4    	  5262:                 cmpi.l #$00004FC4,d5      * Check the Flag results
00:00004F2C 66FE            	  5263:                 bne.s *
                            	  5264: 
                            	  5265: 
                            	  5266: *  * Register to <EA>
00:00004F2E 203C86738374    	  5267:                 move.l #$86738374,d0       * Initial Data-X  Inner loop
00:00004F34 223CFC55F2FE    	  5268:                 move.l #$FC55F2FE,d1       * Initial Data-Y  Outer loop
00:00004F3A 243C86738374    	  5269:                 move.l #$86738374,d2
00:00004F40 7600            	  5270:                 moveq  #$00000000,d3
00:00004F42 7800            	  5271:                 moveq  #$00000000,d4       * Cumulative data results
00:00004F44 7A00            	  5272:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004F46 7C1E            	  5273:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F48 7E1D            	  5274:                 move.l #$0000001D,d7       * Outer loop counter
00:00004F4A 307C0100        	  5275:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5276: 
                            	  5277: 
                            	  5278: SUB_OUTER2:
                            	  5279: 
                            	  5280: *     BYTE
00:00004F4E 2080            	  5281:                 move.l d0,(a0)
00:00004F50 9310            	  5282:                 sub.b d1,(a0)
00:00004F52 40C3            	  5283:                 move.w sr,d3
00:00004F54 02830000000C    	  5284:                 andi.l #$0C,d3            * Isolate flags
00:00004F5A DA83            	  5285:                 add.l d3,d5               * Copy flag results into accumulator
00:00004F5C D890            	  5286:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5287: 
                            	  5288: *     WORD
00:00004F5E 2080            	  5289:                 move.l d0,(a0)
00:00004F60 9350            	  5290:                 sub.w d1,(a0)
00:00004F62 40C3            	  5291:                 move.w sr,d3
00:00004F64 02830000001F    	  5292:                 andi.l #$1F,d3            * Isolate flags
00:00004F6A DA83            	  5293:                 add.l d3,d5               * Copy flag results into accumulator
00:00004F6C D890            	  5294:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5295: 
                            	  5296: *     LONG
00:00004F6E 2080            	  5297:                 move.l d0,(a0)
00:00004F70 9390            	  5298:                 sub.l d1,(a0)
00:00004F72 40C3            	  5299:                 move.w sr,d3
00:00004F74 02830000000F    	  5300:                 andi.l #$0F,d3            * Isolate flags
00:00004F7A DA83            	  5301:                 add.l d3,d5               * Copy flag results into accumulator
00:00004F7C D890            	  5302:                 add.l (a0),d4             * Copy data results into data accumulator
                            	  5303: 
                            	  5304: 
00:00004F7E E299            	  5305:                 ror.l #$1,d1
00:00004F80 51CEFFCC        	  5306:                 dbf d6,SUB_OUTER2
00:00004F84 E29A            	  5307:                 ror.l #$1,d2
00:00004F86 223C8167E123    	  5308:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004F8C 7C1E            	  5309:                 move.l #$0000001E,d6       * Inner loop counter
00:00004F8E 51CFFFBE        	  5310:                 dbf d7,SUB_OUTER2
                            	  5311: 
00:00004F92 0C8436D38BEC    	  5312:                 cmpi.l #$36D38BEC,d4      * Check the data results
00:00004F98 66FE            	  5313:                 bne.s *
00:00004F9A 0C85000045A5    	  5314:                 cmpi.l #$000045A5,d5      * Check the Flag results
00:00004FA0 66FE            	  5315:                 bne.s *
                            	  5316: 
                            	  5317: 
                            	  5318: 
                            	  5319: 
00:00004FA2 4E75            	  5320:                 rts
                            	  5321: 
                            	  5322: 
                            	  5323: 
                            	  5324: *-----------------------------------------------------------
                            	  5325: *-----------------------------------------------------------
                            	  5326: * OPCODE : ADDA
                            	  5327: *-----------------------------------------------------------
                            	  5328: *-----------------------------------------------------------
                            	  5329: 
                            	  5330: op_ADDA:
                            	  5331: 
                            	  5332: *  * <EA> to Register
00:00004FA4 203CA5A5A5A5    	  5333:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004FAA 223C8167E123    	  5334:                 move.l #$8167E123,d1
00:00004FB0 243CA5A5A5A5    	  5335:                 move.l #$a5a5a5a5,d2
00:00004FB6 7600            	  5336:                 moveq  #$00000000,d3
00:00004FB8 7800            	  5337:                 moveq  #$00000000,d4       * Cumulative data results
00:00004FBA 7A00            	  5338:                 moveq  #$00000000,d5       * Cumulative flag results
00:00004FBC 7C1E            	  5339:                 move.l #$0000001E,d6       * Inner loop counter
00:00004FBE 7E1E            	  5340:                 move.l #$0000001E,d7       * Outer loop counter
00:00004FC0 307C0100        	  5341:                 move.l #$00000100,a0       * Address for memory EA operations
00:00004FC4 227C8167E123    	  5342:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5343: 
                            	  5344: ADDA_OUTER1:
                            	  5345: 
                            	  5346: *     WORD
                            	  5347: *                move.l d1,(a0)       * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5348: *                adda.w (a0),a1
                            	  5349: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5350: 
                            	  5351: *     LONG
00:00004FCA 2081            	  5352:                 move.l d1,(a0)
00:00004FCC D3D0            	  5353:                 adda.l (a0),a1
00:00004FCE D889            	  5354:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5355: 
00:00004FD0 E299            	  5356:                 ror.l #$1,d1
00:00004FD2 51CEFFF6        	  5357:                 dbf d6,ADDA_OUTER1
00:00004FD6 E299            	  5358:                 ror.l #$1,d1
00:00004FD8 2241            	  5359:                 move.l d1,a1
00:00004FDA 223C8167E123    	  5360:                 move.l #$8167E123,d1       * Initial Data-Y
00:00004FE0 7C1E            	  5361:                 move.l #$0000001E,d6       * Inner loop counter
00:00004FE2 51CFFFE6        	  5362:                 dbf d7,ADDA_OUTER1
                            	  5363: 
00:00004FE6 0C84AC04DB4C    	  5364:                 cmpi.l #$AC04DB4C,d4      * Check the data results
00:00004FEC 66FE            	  5365:                 bne.s *
                            	  5366: 
                            	  5367: 
00:00004FEE 4E75            	  5368:                 rts
                            	  5369: 
                            	  5370: 
                            	  5371: *-----------------------------------------------------------
                            	  5372: *-----------------------------------------------------------
                            	  5373: * OPCODE : SUBA
                            	  5374: *-----------------------------------------------------------
                            	  5375: *-----------------------------------------------------------
                            	  5376: 
                            	  5377: op_SUBA:
                            	  5378: 
                            	  5379: *  * <EA> to Register
00:00004FF0 203CA5A5A5A5    	  5380:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00004FF6 223C8167E123    	  5381:                 move.l #$8167E123,d1
00:00004FFC 243CA5A5A5A5    	  5382:                 move.l #$a5a5a5a5,d2
00:00005002 7600            	  5383:                 moveq  #$00000000,d3
00:00005004 7800            	  5384:                 moveq  #$00000000,d4       * Cumulative data results
00:00005006 7A00            	  5385:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005008 7C1E            	  5386:                 move.l #$0000001E,d6       * Inner loop counter
00:0000500A 7E1E            	  5387:                 move.l #$0000001E,d7       * Outer loop counter
00:0000500C 307C0100        	  5388:                 move.l #$00000100,a0       * Address for memory EA operations
00:00005010 227C8167E123    	  5389:                 move.l #$8167E123,a1       * Initial Data-Y  Outer loop
                            	  5390: 
                            	  5391: SUBA_OUTER1:
                            	  5392: 
                            	  5393: *     WORD
                            	  5394: *                move.l d1,(a0) * !!! Easy68K is not altering the whole 32-bits of the address register
                            	  5395: *                suba.w (a0),a1
                            	  5396: *                add.l a1,d4               * Copy data results into data accumulator
                            	  5397: 
                            	  5398: *     LONG
00:00005016 2081            	  5399:                 move.l d1,(a0)
00:00005018 93D0            	  5400:                 suba.l (a0),a1
00:0000501A D889            	  5401:                 add.l a1,d4               * Copy data results into data accumulator
                            	  5402: 
00:0000501C E299            	  5403:                 ror.l #$1,d1
00:0000501E 51CEFFF6        	  5404:                 dbf d6,SUBA_OUTER1
00:00005022 E299            	  5405:                 ror.l #$1,d1
00:00005024 2241            	  5406:                 move.l d1,a1
00:00005026 223C8167E123    	  5407:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000502C 7C1E            	  5408:                 move.l #$0000001E,d6       * Inner loop counter
00:0000502E 51CFFFE6        	  5409:                 dbf d7,SUBA_OUTER1
                            	  5410: 
00:00005032 0C84E1E36D7A    	  5411:                 cmpi.l #$E1E36D7A,d4      * Check the data results
00:00005038 66FE            	  5412:                 bne.s *
                            	  5413: 
                            	  5414: 
00:0000503A 4E75            	  5415:                 rts
                            	  5416: 
                            	  5417: 
                            	  5418: 
                            	  5419: *-----------------------------------------------------------
                            	  5420: *-----------------------------------------------------------
                            	  5421: * OPCODE : ADDX
                            	  5422: *-----------------------------------------------------------
                            	  5423: *-----------------------------------------------------------
                            	  5424: 
                            	  5425: op_ADDX:
                            	  5426: 
                            	  5427: 
                            	  5428: *  * Register to Register
00:0000503C 203CA5A5A5A5    	  5429:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00005042 223C8167E123    	  5430:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00005048 243CA5A5A5A5    	  5431:                 move.l #$a5a5a5a5,d2
00:0000504E 7600            	  5432:                 moveq  #$00000000,d3
00:00005050 7800            	  5433:                 moveq  #$00000000,d4       * Cumulative data results
00:00005052 7A00            	  5434:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005054 7C1E            	  5435:                 move.l #$0000001E,d6       * Inner loop counter
00:00005056 7E1E            	  5436:                 move.l #$0000001E,d7       * Outer loop counter
00:00005058 307C0100        	  5437:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5438: 
                            	  5439: 
                            	  5440: ADDX_OUTER1:
                            	  5441: 
                            	  5442: *     BYTE
00:0000505C 2002            	  5443:                 move.l d2,d0
00:0000505E D101            	  5444:                 addx.b d1,d0
00:00005060 40C3            	  5445:                 move.w sr,d3
00:00005062 02830000001F    	  5446:                 andi.l #$1F,d3            * Isolate flags
00:00005068 DA83            	  5447:                 add.l d3,d5               * Copy flag results into accumulator
00:0000506A D880            	  5448:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5449: 
                            	  5450: *     WORD
00:0000506C 2002            	  5451:                 move.l d2,d0
00:0000506E D141            	  5452:                 addx.w d1,d0
00:00005070 40C3            	  5453:                 move.w sr,d3
00:00005072 02830000001F    	  5454:                 andi.l #$1F,d3            * Isolate flags
00:00005078 DA83            	  5455:                 add.l d3,d5               * Copy flag results into accumulator
00:0000507A D880            	  5456:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5457: 
                            	  5458: *     LONG
00:0000507C 2002            	  5459:                 move.l d2,d0
00:0000507E D181            	  5460:                 addx.l d1,d0
00:00005080 40C3            	  5461:                 move.w sr,d3
00:00005082 02830000001F    	  5462:                 andi.l #$1F,d3            * Isolate flags
00:00005088 DA83            	  5463:                 add.l d3,d5               * Copy flag results into accumulator
00:0000508A D880            	  5464:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5465: 
00:0000508C E299            	  5466:                 ror.l #$1,d1
00:0000508E 51CEFFCC        	  5467:                 dbf d6,ADDX_OUTER1
00:00005092 E29A            	  5468:                 ror.l #$1,d2
00:00005094 223C8167E123    	  5469:                 move.l #$8167E123,d1       * Initial Data-Y
00:0000509A 7C1E            	  5470:                 move.l #$0000001E,d6       * Inner loop counter
00:0000509C 51CFFFBE        	  5471:                 dbf d7,ADDX_OUTER1
                            	  5472: 
00:000050A0 0C844E96A4D9    	  5473:                 cmpi.l #$4E96A4D9,d4      * Check the data results
00:000050A6 66FE            	  5474:                 bne.s *
00:000050A8 0C85000085CD    	  5475:                 cmpi.l #$000085CD,d5      * Check the Flag results
00:000050AE 66FE            	  5476:                 bne.s *
                            	  5477: 
                            	  5478: 
                            	  5479: 
                            	  5480: *     -(An),-(An)
                            	  5481: 
00:000050B0 7000            	  5482:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:000050B2 7200            	  5483:                 moveq  #$00000000,d1
00:000050B4 7400            	  5484:                 moveq  #$00000000,d2
00:000050B6 307C0100        	  5485:                 move.l #$00000100,a0       * Address for Data-X
00:000050BA 327C0200        	  5486:                 move.l #$00000200,a1       * Address for Data-Y
00:000050BE 20FC11FF5580    	  5487:                 move.l #$11FF5580,(a0)+   * Populate test data
00:000050C4 20FC1111FFFF    	  5488:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:000050CA 20FC33333333    	  5489:                 move.l #$33333333,(a0)+   * Populate test data
00:000050D0 20FC44444444    	  5490:                 move.l #$44444444,(a0)+   * Populate test data
00:000050D6 22FC80FF337F    	  5491:                 move.l #$80FF337F,(a1)+   * Populate test data
00:000050DC 22FCFFFF1111    	  5492:                 move.l #$FFFF1111,(a1)+   * Populate test data
00:000050E2 22FC33333333    	  5493:                 move.l #$33333333,(a1)+   * Populate test data
00:000050E8 22FC44444444    	  5494:                 move.l #$44444444,(a1)+   * Populate test data
                            	  5495: 
                            	  5496: 
00:000050EE 7C0F            	  5497:                 move.l #$0000000F,d6       * Loop counter
                            	  5498: 
00:000050F0 D308            	  5499: ADDX_LOOP3:     addx.b -(a0),-(a1)
00:000050F2 40C3            	  5500:                 move.w sr,d3
00:000050F4 02830000000F    	  5501:                 andi.l #$0F,d3            * Isolate flags
00:000050FA D083            	  5502:                 add.l d3,d0               * Copy flag results into accumulator
00:000050FC D211            	  5503:                 add.b (a1),d1
00:000050FE 51CEFFF0        	  5504:                 dbf d6,ADDX_LOOP3
                            	  5505: 
                            	  5506: 
00:00005102 307C0110        	  5507:                 move.l #$00000110,a0       * Address for Data-X
00:00005106 327C0210        	  5508:                 move.l #$00000210,a1       * Address for Data-Y
00:0000510A 7C07            	  5509:                 moveq  #$00000007,d6       * Loop counter
                            	  5510: 
00:0000510C D348            	  5511: ADDX_LOOP4:     addx.w -(a0),-(a1)
00:0000510E 40C3            	  5512:                 move.w sr,d3
00:00005110 02830000000F    	  5513:                 andi.l #$0F,d3            * Isolate flags
00:00005116 D083            	  5514:                 add.l d3,d0               * Copy flag results into accumulator
00:00005118 D251            	  5515:                 add.w (a1),d1
00:0000511A 51CEFFF0        	  5516:                 dbf d6,ADDX_LOOP4
                            	  5517: 
                            	  5518: 
00:0000511E 307C0110        	  5519:                 move.l #$00000110,a0       * Address for Data-X
00:00005122 327C0210        	  5520:                 move.l #$00000210,a1       * Address for Data-Y
00:00005126 7C03            	  5521:                 moveq  #$00000003,d6       * Loop counter
                            	  5522: 
00:00005128 D388            	  5523: ADDX_LOOP5:     addx.l -(a0),-(a1)
00:0000512A 40C3            	  5524:                 move.w sr,d3
00:0000512C 02830000000F    	  5525:                 andi.l #$0F,d3            * Isolate flags
00:00005132 D083            	  5526:                 add.l d3,d0               * Copy flag results into accumulator
00:00005134 D291            	  5527:                 add.l (a1),d1
00:00005136 51CEFFF0        	  5528:                 dbf d6,ADDX_LOOP5
                            	  5529: 
                            	  5530: 
00:0000513A 0C8000000095    	  5531:                 cmpi.l #$00000095,d0      * Check the flag results
00:00005140 66FE            	  5532:                 bne.s *
00:00005142 0C81C812A682    	  5533:                 cmpi.l #$C812A682,d1      * Check the data results
00:00005148 66FE            	  5534:                 bne.s *
                            	  5535: 
00:0000514A 4E75            	  5536:                 rts
                            	  5537: 
                            	  5538: 
                            	  5539: 
                            	  5540: 
                            	  5541: *-----------------------------------------------------------
                            	  5542: *-----------------------------------------------------------
                            	  5543: * OPCODE : SUBX
                            	  5544: *-----------------------------------------------------------
                            	  5545: *-----------------------------------------------------------
                            	  5546: 
                            	  5547: op_SUBX:
                            	  5548: 
                            	  5549: 
                            	  5550: *  * Register to Register
00:0000514C 203CA5A5A5A5    	  5551:                 move.l #$a5a5a5a5,d0       * Initial Data-X  Inner loop
00:00005152 223C8167E123    	  5552:                 move.l #$8167E123,d1       * Initial Data-Y  Outer loop
00:00005158 243CA5A5A5A5    	  5553:                 move.l #$a5a5a5a5,d2
00:0000515E 7600            	  5554:                 moveq  #$00000000,d3
00:00005160 7800            	  5555:                 moveq  #$00000000,d4       * Cumulative data results
00:00005162 7A00            	  5556:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005164 7C1E            	  5557:                 move.l #$0000001E,d6       * Inner loop counter
00:00005166 7E1E            	  5558:                 move.l #$0000001E,d7       * Outer loop counter
00:00005168 307C0100        	  5559:                 move.l #$00000100,a0       * Address for memory EA operations
                            	  5560: 
                            	  5561: 
                            	  5562: SUBX_OUTER1:
                            	  5563: 
                            	  5564: *     BYTE
00:0000516C 2002            	  5565:                 move.l d2,d0
00:0000516E 9101            	  5566:                 subx.b d1,d0
00:00005170 40C3            	  5567:                 move.w sr,d3
00:00005172 02830000001F    	  5568:                 andi.l #$1F,d3            * Isolate flags
00:00005178 DA83            	  5569:                 add.l d3,d5               * Copy flag results into accumulator
00:0000517A D880            	  5570:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5571: 
                            	  5572: *     WORD
00:0000517C 2002            	  5573:                 move.l d2,d0
00:0000517E 9141            	  5574:                 subx.w d1,d0
00:00005180 40C3            	  5575:                 move.w sr,d3
00:00005182 02830000001F    	  5576:                 andi.l #$1F,d3            * Isolate flags
00:00005188 DA83            	  5577:                 add.l d3,d5               * Copy flag results into accumulator
00:0000518A D880            	  5578:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5579: 
                            	  5580: *     LONG
00:0000518C 2002            	  5581:                 move.l d2,d0
00:0000518E 9181            	  5582:                 subx.l d1,d0
00:00005190 40C3            	  5583:                 move.w sr,d3
00:00005192 02830000001F    	  5584:                 andi.l #$1F,d3            * Isolate flags
00:00005198 DA83            	  5585:                 add.l d3,d5               * Copy flag results into accumulator
00:0000519A D880            	  5586:                 add.l d0,d4               * Copy data results into data accumulator
                            	  5587: 
00:0000519C E299            	  5588:                 ror.l #$1,d1
00:0000519E 51CEFFCC        	  5589:                 dbf d6,SUBX_OUTER1
00:000051A2 E29A            	  5590:                 ror.l #$1,d2
00:000051A4 223C8167E123    	  5591:                 move.l #$8167E123,d1       * Initial Data-Y
00:000051AA 7C1E            	  5592:                 move.l #$0000001E,d6       * Inner loop counter
00:000051AC 51CFFFBE        	  5593:                 dbf d7,SUBX_OUTER1
                            	  5594: 
00:000051B0 0C84FCAA913E    	  5595:                 cmpi.l #$FCAA913E,d4      * Check the data results
00:000051B6 66FE            	  5596:                 bne.s *
00:000051B8 0C8500007E89    	  5597:                 cmpi.l #$00007E89,d5      * Check the Flag results
00:000051BE 66FE            	  5598:                 bne.s *
                            	  5599: 
                            	  5600: 
                            	  5601: 
                            	  5602: *     -(An),-(An)
                            	  5603: 
00:000051C0 7000            	  5604:                 moveq  #$00000000,d0       * BYTE Flag Results Accumulator
00:000051C2 7200            	  5605:                 moveq  #$00000000,d1
00:000051C4 7400            	  5606:                 moveq  #$00000000,d2
00:000051C6 307C0100        	  5607:                 move.l #$00000100,a0       * Address for Data-X
00:000051CA 327C0200        	  5608:                 move.l #$00000200,a1       * Address for Data-Y
00:000051CE 20FC11FF5580    	  5609:                 move.l #$11FF5580,(a0)+   * Populate test data
00:000051D4 20FC1111FFFF    	  5610:                 move.l #$1111FFFF,(a0)+   * Populate test data
00:000051DA 20FC80FF337F    	  5611:                 move.l #$80FF337F,(a0)+   * Populate test data
00:000051E0 20FC44444444    	  5612:                 move.l #$44444444,(a0)+   * Populate test data
00:000051E6 22FC80FF337F    	  5613:                 move.l #$80FF337F,(a1)+   * Populate test data
00:000051EC 22FC1111FFFF    	  5614:                 move.l #$1111FFFF,(a1)+   * Populate test data
00:000051F2 22FC33333333    	  5615:                 move.l #$33333333,(a1)+   * Populate test data
00:000051F8 22FC5580EECC    	  5616:                 move.l #$5580EECC,(a1)+   * Populate test data
                            	  5617: 
                            	  5618: 
00:000051FE 7C0F            	  5619:                 move.l #$0000000F,d6       * Loop counter
                            	  5620: 
00:00005200 9308            	  5621: SUBX_LOOP3:     subx.b -(a0),-(a1)
00:00005202 40C3            	  5622:                 move.w sr,d3
00:00005204 02830000000F    	  5623:                 andi.l #$0F,d3            * Isolate flags
00:0000520A D083            	  5624:                 add.l d3,d0               * Copy flag results into accumulator
00:0000520C D211            	  5625:                 add.b (a1),d1
00:0000520E 51CEFFF0        	  5626:                 dbf d6,SUBX_LOOP3
                            	  5627: 
                            	  5628: 
00:00005212 307C0110        	  5629:                 move.l #$00000110,a0       * Address for Data-X
00:00005216 327C0210        	  5630:                 move.l #$00000210,a1       * Address for Data-Y
00:0000521A 7C07            	  5631:                 moveq  #$00000007,d6       * Loop counter
                            	  5632: 
00:0000521C 9348            	  5633: SUBX_LOOP4:     subx.w -(a0),-(a1)
00:0000521E 40C3            	  5634:                 move.w sr,d3
00:00005220 02830000000F    	  5635:                 andi.l #$0F,d3            * Isolate flags
00:00005226 D083            	  5636:                 add.l d3,d0               * Copy flag results into accumulator
00:00005228 D251            	  5637:                 add.w (a1),d1
00:0000522A 51CEFFF0        	  5638:                 dbf d6,SUBX_LOOP4
                            	  5639: 
                            	  5640: 
00:0000522E 307C0110        	  5641:                 move.l #$00000110,a0       * Address for Data-X
00:00005232 327C0210        	  5642:                 move.l #$00000210,a1       * Address for Data-Y
00:00005236 7C03            	  5643:                 moveq  #$00000003,d6       * Loop counter
                            	  5644: 
00:00005238 9388            	  5645: SUBX_LOOP5:     subx.l -(a0),-(a1)
00:0000523A 40C3            	  5646:                 move.w sr,d3
00:0000523C 02830000000F    	  5647:                 andi.l #$0F,d3            * Isolate flags
00:00005242 D083            	  5648:                 add.l d3,d0               * Copy flag results into accumulator
00:00005244 D291            	  5649:                 add.l (a1),d1
00:00005246 51CEFFF0        	  5650:                 dbf d6,SUBX_LOOP5
                            	  5651: 
                            	  5652: 
00:0000524A 0C80000000B1    	  5653:                 cmpi.l #$000000B1,d0      * Check the flag results
00:00005250 66FE            	  5654:                 bne.s *
00:00005252 0C8162C6F417    	  5655:                 cmpi.l #$62C6F417,d1      * Check the data results
00:00005258 66FE            	  5656:                 bne.s *
                            	  5657: 
00:0000525A 4E75            	  5658:                 rts
                            	  5659: 
                            	  5660: 
                            	  5661: *-----------------------------------------------------------
                            	  5662: *-----------------------------------------------------------
                            	  5663: * OPCODE : MULU
                            	  5664: *-----------------------------------------------------------
                            	  5665: *-----------------------------------------------------------
                            	  5666: 
                            	  5667: op_MULU:
                            	  5668: 
00:0000525C 203CFE805501    	  5669:                 move.l #$FE805501,d0        * Initial
00:00005262 223C5697EDB6    	  5670:                 move.l #$5697EDB6,d1        * Initial Y
00:00005268 243CFE805501    	  5671:                 move.l #$FE805501,d2
00:0000526E 7600            	  5672:                 moveq  #$00000000,d3
00:00005270 7800            	  5673:                 moveq  #$00000000,d4        * Cumulative data results
00:00005272 7A00            	  5674:                 moveq  #$00000000,d5       * Cumulative flag results
00:00005274 7C0E            	  5675:                 move.l #$0000000E,d6       * Inner loop counter
00:00005276 7E0E            	  5676:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5677: 
                            	  5678: 
00:00005278 C0C1            	  5679: MULU_OUTER1:    mulu d1,d0
00:0000527A 40C3            	  5680:                 move.w sr,d3
00:0000527C 02830000000C    	  5681:                 andi.l #$0C,d3            * Isolate flags
00:00005282 DA83            	  5682:                 add.l d3,d5               * Copy flag results into accumulator
00:00005284 D880            	  5683:                 add.l d0,d4               * Copy data results into data accumulator
00:00005286 E299            	  5684:                 ror.l #$1,d1
                            	  5685: 
00:00005288 51CEFFEE        	  5686:                 dbf d6,MULU_OUTER1
00:0000528C E29A            	  5687:                 ror.l #$1,d2
00:0000528E 2002            	  5688:                 move.l d2,d0
00:00005290 7C0E            	  5689:                 move.l #$0000000E,d6       * Inner loop counter
00:00005292 51CFFFE4        	  5690:                 dbf d7,MULU_OUTER1
                            	  5691: 
00:00005296 0C8476FB988C    	  5692:                 cmpi.l #$76FB988C,d4      * Check the data results
00:0000529C 66FE            	  5693:                 bne.s *
                            	  5694: 
00:0000529E 0C8500000170    	  5695:                 cmpi.l #$00000170,d5      * Check the Flag results
00:000052A4 66FE            	  5696:                 bne.s *
                            	  5697: 
                            	  5698: 
00:000052A6 4E75            	  5699:                 rts
                            	  5700: 
                            	  5701: 
                            	  5702: *-----------------------------------------------------------
                            	  5703: *-----------------------------------------------------------
                            	  5704: * OPCODE : MULS
                            	  5705: *-----------------------------------------------------------
                            	  5706: *-----------------------------------------------------------
                            	  5707: 
                            	  5708: op_MULS:
                            	  5709: 
00:000052A8 203CFE805501    	  5710:                 move.l #$FE805501,d0        * Initial
00:000052AE 223C5697EDB6    	  5711:                 move.l #$5697EDB6,d1        * Initial Y
00:000052B4 243CFE805501    	  5712:                 move.l #$FE805501,d2
00:000052BA 7600            	  5713:                 moveq  #$00000000,d3
00:000052BC 7800            	  5714:                 moveq  #$00000000,d4        * Cumulative data results
00:000052BE 7A00            	  5715:                 moveq  #$00000000,d5       * Cumulative flag results
00:000052C0 7C0E            	  5716:                 move.l #$0000000E,d6       * Inner loop counter
00:000052C2 7E0E            	  5717:                 move.l #$0000000E,d7       * Outer loop counter
                            	  5718: 
                            	  5719: 
00:000052C4 C1C1            	  5720: MULS_OUTER1:    muls d1,d0
00:000052C6 40C3            	  5721:                 move.w sr,d3
00:000052C8 02830000000C    	  5722:                 andi.l #$0C,d3            * Isolate flags
00:000052CE DA83            	  5723:                 add.l d3,d5               * Copy flag results into accumulator
00:000052D0 D880            	  5724:                 add.l d0,d4               * Copy data results into data accumulator
00:000052D2 E299            	  5725:                 ror.l #$1,d1
                            	  5726: 
00:000052D4 51CEFFEE        	  5727:                 dbf d6,MULS_OUTER1
00:000052D8 E29A            	  5728:                 ror.l #$1,d2
00:000052DA 2002            	  5729:                 move.l d2,d0
00:000052DC 7C0E            	  5730:                 move.l #$0000000E,d6       * Inner loop counter
00:000052DE 51CFFFE4        	  5731:                 dbf d7,MULS_OUTER1
                            	  5732: 
00:000052E2 0C84D4E2988C    	  5733:                 cmpi.l #$D4E2988C,d4      * Check the data results
00:000052E8 66FE            	  5734:                 bne.s *
                            	  5735: 
00:000052EA 0C85000003E0    	  5736:                 cmpi.l #$000003E0,d5      * Check the Flag results
00:000052F0 66FE            	  5737:                 bne.s *
                            	  5738: 
                            	  5739: 
00:000052F2 4E75            	  5740:                 rts
                            	  5741: 
                            	  5742: 
                            	  5743: 
                            	  5744: *-----------------------------------------------------------
                            	  5745: *-----------------------------------------------------------
                            	  5746: * OPCODE : EXG
                            	  5747: *-----------------------------------------------------------
                            	  5748: *-----------------------------------------------------------
                            	  5749: 
                            	  5750: op_EXG:
00:000052F4 223CD1D1D1D1    	  5751:                 move.l #$d1d1d1d1,d1
00:000052FA 243CD2D2D2D2    	  5752:                 move.l #$d2d2d2d2,d2
00:00005300 263CD3D3D3D3    	  5753:                 move.l #$d3d3d3d3,d3
00:00005306 227CA1A1A1A1    	  5754:                 move.l #$a1a1a1a1,a1
00:0000530C 247CA2A2A2A2    	  5755:                 move.l #$a2a2a2a2,a2
00:00005312 267CA3A3A3A3    	  5756:                 move.l #$a3a3a3a3,a3
                            	  5757: 
00:00005318 C342            	  5758:                 exg d1,d2
00:0000531A C34A            	  5759:                 exg a1,a2
00:0000531C C78B            	  5760:                 exg d3,a3
                            	  5761: 
00:0000531E 0C81D2D2D2D2    	  5762:                 cmpi.l #$d2d2d2d2,d1      * Check the results
00:00005324 66FE            	  5763:                 bne.s *
00:00005326 0C82D1D1D1D1    	  5764:                 cmpi.l #$d1d1d1d1,d2
00:0000532C 66FE            	  5765:                 bne.s *
00:0000532E 0C83A3A3A3A3    	  5766:                 cmpi.l #$a3a3a3a3,d3
00:00005334 66FE            	  5767:                 bne.s *
                            	  5768: 
00:00005336 2209            	  5769:                 move.l a1,d1
00:00005338 240A            	  5770:                 move.l a2,d2
00:0000533A 260B            	  5771:                 move.l a3,d3
                            	  5772: 
00:0000533C 0C81A2A2A2A2    	  5773:                 cmpi.l #$a2a2a2a2,d1
00:00005342 66FE            	  5774:                 bne.s *
00:00005344 0C82A1A1A1A1    	  5775:                 cmpi.l #$a1a1a1a1,d2
00:0000534A 66FE            	  5776:                 bne.s *
00:0000534C 0C83D3D3D3D3    	  5777:                 cmpi.l #$d3d3d3d3,d3
00:00005352 66FE            	  5778:                 bne.s *
                            	  5779: 
00:00005354 4E75            	  5780:                 rts
                            	  5781: 
                            	  5782: 
                            	  5783: *-----------------------------------------------------------
                            	  5784: *-----------------------------------------------------------
                            	  5785: * OPCODE : ROx
                            	  5786: *-----------------------------------------------------------
                            	  5787: *-----------------------------------------------------------
                            	  5788: 
                            	  5789: *     Subroutine to check and accumulate the flags
00:00005356 40C3            	  5790: ROx_FLAGS:      move.w sr,d3
00:00005358 02830000000F    	  5791:                 andi.l #$0F,d3            * Isolate flags
00:0000535E DA83            	  5792:                 add.l d3,d5               * Copy flag results into accumulator
00:00005360 4E75            	  5793:                 rts
                            	  5794: 
                            	  5795: op_ROx:
                            	  5796: 
                            	  5797: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  5798: 
                            	  5799: *        BYTE LEFT
00:00005362 203C80018FF1    	  5800:                 move.l #$80018FF1,d0
00:00005368 7A00            	  5801:                 moveq  #$00000000,d5
00:0000536A 7C11            	  5802:                 moveq  #$00000011,d6
                            	  5803: ROx_LOOP1:
00:0000536C ED38            	  5804:                 rol.b d6,d0
00:0000536E 61E6            	  5805:                 bsr ROx_FLAGS
00:00005370 51CEFFFA        	  5806:                 dbf d6,ROx_LOOP1
00:00005374 0C8080018FE3    	  5807:                 cmpi.l #$80018FE3,d0
00:0000537A 66FE            	  5808:                 bne.s *
00:0000537C 0C850000006B    	  5809:                 cmpi.l #$0000006B,d5
00:00005382 66FE            	  5810:                 bne.s *
                            	  5811: 
                            	  5812: *        BYTE RIGHT
00:00005384 203C80018FF1    	  5813:                 move.l #$80018FF1,d0
00:0000538A 7C12            	  5814:                 moveq  #$00000012,d6
                            	  5815: ROx_LOOP2:
00:0000538C EC38            	  5816:                 ror.b d6,d0
00:0000538E 61C6            	  5817:                 bsr ROx_FLAGS
00:00005390 51CEFFFA        	  5818:                 dbf d6,ROx_LOOP2
00:00005394 0C8080018F3E    	  5819:                 cmpi.l #$80018F3E,d0
00:0000539A 66FE            	  5820:                 bne.s *
00:0000539C 0C85000000C5    	  5821:                 cmpi.l #$000000C5,d5
00:000053A2 66FE            	  5822:                 bne.s *
                            	  5823: 
                            	  5824: 
                            	  5825: *        WORD LEFT
00:000053A4 203C80018FF1    	  5826:                 move.l #$80018FF1,d0
00:000053AA 7C13            	  5827:                 moveq  #$00000013,d6
                            	  5828: ROx_LOOP3:
00:000053AC ED78            	  5829:                 rol.w d6,d0
00:000053AE 61A6            	  5830:                 bsr ROx_FLAGS
00:000053B0 51CEFFFA        	  5831:                 dbf d6,ROx_LOOP3
00:000053B4 0C80800163FC    	  5832:                 cmpi.l #$800163FC,d0
00:000053BA 66FE            	  5833:                 bne.s *
00:000053BC 0C8500000131    	  5834:                 cmpi.l #$00000131,d5
00:000053C2 66FE            	  5835:                 bne.s *
                            	  5836: 
                            	  5837: *        WORD RIGHT
00:000053C4 203C80018FF1    	  5838:                 move.l #$80018FF1,d0
00:000053CA 7C1E            	  5839:                 move.l #$0000001E,d6
                            	  5840: ROx_LOOP4:
00:000053CC EC78            	  5841:                 ror.w d6,d0
00:000053CE 6186            	  5842:                 bsr ROx_FLAGS
00:000053D0 51CEFFFA        	  5843:                 dbf d6,ROx_LOOP4
00:000053D4 0C808001C7F8    	  5844:                 cmpi.l #$8001C7F8,d0
00:000053DA 66FE            	  5845:                 bne.s *
00:000053DC 0C85000001DB    	  5846:                 cmpi.l #$000001DB,d5
00:000053E2 66FE            	  5847:                 bne.s *
                            	  5848: 
                            	  5849: 
                            	  5850: *        LONG LEFT
00:000053E4 203C80018FF1    	  5851:                 move.l #$80018FF1,d0
00:000053EA 7C15            	  5852:                 moveq  #$00000015,d6
                            	  5853: ROx_LOOP5:
00:000053EC EDB8            	  5854:                 rol.l d6,d0
00:000053EE 6100FF66        	  5855:                 bsr ROx_FLAGS
00:000053F2 51CEFFF8        	  5856:                 dbf d6,ROx_LOOP5
00:000053F6 0C8000C7F8C0    	  5857:                 cmpi.l #$00C7F8C0,d0
00:000053FC 66FE            	  5858:                 bne.s *
00:000053FE 0C850000021A    	  5859:                 cmpi.l #$0000021A,d5
00:00005404 66FE            	  5860:                 bne.s *
                            	  5861: 
                            	  5862: *        LONG RIGHT
00:00005406 203C80018FF1    	  5863:                 move.l #$80018FF1,d0
00:0000540C 7C16            	  5864:                 moveq  #$00000016,d6
                            	  5865: ROx_LOOP6:
00:0000540E ECB8            	  5866:                 ror.l d6,d0
00:00005410 6100FF44        	  5867:                 bsr ROx_FLAGS
00:00005414 51CEFFF8        	  5868:                 dbf d6,ROx_LOOP6
00:00005418 0C80000C7F8C    	  5869:                 cmpi.l #$000C7F8C,d0
00:0000541E 66FE            	  5870:                 bne.s *
00:00005420 0C8500000250    	  5871:                 cmpi.l #$00000250,d5
00:00005426 66FE            	  5872:                 bne.s *
                            	  5873: 
                            	  5874: 
                            	  5875: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  5876: 
00:00005428 203C80018FF1    	  5877:                 move.l #$80018FF1,d0
00:0000542E 7A00            	  5878:                 moveq  #$00000000,d5
                            	  5879: 
                            	  5880: *        BYTE LEFT
00:00005430 E318            	  5881:                 rol.b #1,d0
00:00005432 6100FF22        	  5882:                 bsr ROx_FLAGS
00:00005436 EB18            	  5883:                 rol.b #5,d0
00:00005438 6100FF1C        	  5884:                 bsr ROx_FLAGS
00:0000543C EF18            	  5885:                 rol.b #7,d0
00:0000543E 6100FF16        	  5886:                 bsr ROx_FLAGS
00:00005442 E118            	  5887:                 rol.b #8,d0
00:00005444 6100FF10        	  5888:                 bsr ROx_FLAGS
00:00005448 0C8080018F3E    	  5889:                 cmpi.l #$80018F3E,d0
00:0000544E 66FE            	  5890:                 bne.s *
00:00005450 0C8500000009    	  5891:                 cmpi.l #$00000009,d5
00:00005456 66FE            	  5892:                 bne.s *
                            	  5893: 
                            	  5894: *        BYTE RIGHT
00:00005458 E218            	  5895:                 ror.b #1,d0
00:0000545A 6100FEFA        	  5896:                 bsr ROx_FLAGS
00:0000545E EA18            	  5897:                 ror.b #5,d0
00:00005460 6100FEF4        	  5898:                 bsr ROx_FLAGS
00:00005464 EE18            	  5899:                 ror.b #7,d0
00:00005466 6100FEEE        	  5900:                 bsr ROx_FLAGS
00:0000546A E018            	  5901:                 ror.b #8,d0
00:0000546C 6100FEE8        	  5902:                 bsr ROx_FLAGS
00:00005470 0C8080018FF1    	  5903:                 cmpi.l #$80018FF1,d0
00:00005476 66FE            	  5904:                 bne.s *
00:00005478 0C8500000024    	  5905:                 cmpi.l #$00000024,d5
00:0000547E 66FE            	  5906:                 bne.s *
                            	  5907: 
                            	  5908: *        WORD LEFT
00:00005480 E358            	  5909:                 rol.w #1,d0
00:00005482 6100FED2        	  5910:                 bsr ROx_FLAGS
00:00005486 EB58            	  5911:                 rol.w #5,d0
00:00005488 6100FECC        	  5912:                 bsr ROx_FLAGS
00:0000548C EF58            	  5913:                 rol.w #7,d0
00:0000548E 6100FEC6        	  5914:                 bsr ROx_FLAGS
00:00005492 E158            	  5915:                 rol.w #8,d0
00:00005494 6100FEC0        	  5916:                 bsr ROx_FLAGS
00:00005498 0C808001FE31    	  5917:                 cmpi.l #$8001FE31,d0
00:0000549E 66FE            	  5918:                 bne.s *
00:000054A0 0C8500000037    	  5919:                 cmpi.l #$00000037,d5
00:000054A6 66FE            	  5920:                 bne.s *
                            	  5921: 
                            	  5922: *        WORD RIGHT
00:000054A8 E258            	  5923:                 ror.w #1,d0
00:000054AA 6100FEAA        	  5924:                 bsr ROx_FLAGS
00:000054AE EA58            	  5925:                 ror.w #5,d0
00:000054B0 6100FEA4        	  5926:                 bsr ROx_FLAGS
00:000054B4 EE58            	  5927:                 ror.w #7,d0
00:000054B6 6100FE9E        	  5928:                 bsr ROx_FLAGS
00:000054BA E058            	  5929:                 ror.w #8,d0
00:000054BC 6100FE98        	  5930:                 bsr ROx_FLAGS
00:000054C0 0C8080018FF1    	  5931:                 cmpi.l #$80018FF1,d0
00:000054C6 66FE            	  5932:                 bne.s *
00:000054C8 0C850000005B    	  5933:                 cmpi.l #$0000005B,d5
00:000054CE 66FE            	  5934:                 bne.s *
                            	  5935: 
                            	  5936: *        LONG LEFT
00:000054D0 E398            	  5937:                 rol.l #1,d0
00:000054D2 6100FE82        	  5938:                 bsr ROx_FLAGS
00:000054D6 EB98            	  5939:                 rol.l #5,d0
00:000054D8 6100FE7C        	  5940:                 bsr ROx_FLAGS
00:000054DC EF98            	  5941:                 rol.l #7,d0
00:000054DE 6100FE76        	  5942:                 bsr ROx_FLAGS
00:000054E2 E198            	  5943:                 rol.l #8,d0
00:000054E4 6100FE70        	  5944:                 bsr ROx_FLAGS
00:000054E8 0C80FE300031    	  5945:                 cmpi.l #$FE300031,d0
00:000054EE 66FE            	  5946:                 bne.s *
00:000054F0 0C8500000065    	  5947:                 cmpi.l #$00000065,d5
00:000054F6 66FE            	  5948:                 bne.s *
                            	  5949: 
                            	  5950: *        LONG RIGHT
00:000054F8 E298            	  5951:                 ror.l #1,d0
00:000054FA 6100FE5A        	  5952:                 bsr ROx_FLAGS
00:000054FE EA98            	  5953:                 ror.l #5,d0
00:00005500 6100FE54        	  5954:                 bsr ROx_FLAGS
00:00005504 EE98            	  5955:                 ror.l #7,d0
00:00005506 6100FE4E        	  5956:                 bsr ROx_FLAGS
00:0000550A E098            	  5957:                 ror.l #8,d0
00:0000550C 6100FE48        	  5958:                 bsr ROx_FLAGS
00:00005510 0C8080018FF1    	  5959:                 cmpi.l #$80018FF1,d0
00:00005516 66FE            	  5960:                 bne.s *
00:00005518 0C8500000080    	  5961:                 cmpi.l #$00000080,d5
00:0000551E 66FE            	  5962:                 bne.s *
                            	  5963: 
                            	  5964: 
                            	  5965: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  5966: 
00:00005520 7A00            	  5967:                 moveq  #$00000000,d5
00:00005522 307C0100        	  5968:                 move.l #$00000100,a0
00:00005526 30BC8FF1        	  5969:                 move.w #$8FF1,(a0)
                            	  5970: 
                            	  5971: *        WORD LEFT
00:0000552A E7D0            	  5972:                 rol (a0)
00:0000552C 6100FE28        	  5973:                 bsr ROx_FLAGS
00:00005530 E7D0            	  5974:                 rol (a0)
00:00005532 6100FE22        	  5975:                 bsr ROx_FLAGS
00:00005536 E7D0            	  5976:                 rol (a0)
00:00005538 6100FE1C        	  5977:                 bsr ROx_FLAGS
00:0000553C E7D0            	  5978:                 rol (a0)
00:0000553E 6100FE16        	  5979:                 bsr ROx_FLAGS
00:00005542 3010            	  5980:                 move.w (a0),d0
00:00005544 0C808001FF18    	  5981:                 cmpi.l #$8001FF18,d0
00:0000554A 66FE            	  5982:                 bne.s *
00:0000554C 0C8500000009    	  5983:                 cmpi.l #$00000009,d5
00:00005552 66FE            	  5984:                 bne.s *
                            	  5985: 
                            	  5986: *        WORD RIGHT
00:00005554 E6D0            	  5987:                 ror (a0)
00:00005556 6100FDFE        	  5988:                 bsr ROx_FLAGS
00:0000555A E6D0            	  5989:                 ror (a0)
00:0000555C 6100FDF8        	  5990:                 bsr ROx_FLAGS
00:00005560 E6D0            	  5991:                 ror (a0)
00:00005562 6100FDF2        	  5992:                 bsr ROx_FLAGS
00:00005566 E6D0            	  5993:                 ror (a0)
00:00005568 6100FDEC        	  5994:                 bsr ROx_FLAGS
00:0000556C E6D0            	  5995:                 ror (a0)
00:0000556E 6100FDE6        	  5996:                 bsr ROx_FLAGS
00:00005572 E6D0            	  5997:                 ror (a0)
00:00005574 6100FDE0        	  5998:                 bsr ROx_FLAGS
00:00005578 3010            	  5999:                 move.w (a0),d0
00:0000557A 0C80800163FC    	  6000:                 cmpi.l #$800163FC,d0
00:00005580 66FE            	  6001:                 bne.s *
00:00005582 0C850000001B    	  6002:                 cmpi.l #$0000001B,d5
00:00005588 66FE            	  6003:                 bne.s *
                            	  6004: 
00:0000558A 4E75            	  6005:                 rts
                            	  6006: 
                            	  6007: 
                            	  6008: 
                            	  6009: *-----------------------------------------------------------
                            	  6010: *-----------------------------------------------------------
                            	  6011: * OPCODE : ROXx
                            	  6012: *-----------------------------------------------------------
                            	  6013: *-----------------------------------------------------------
                            	  6014: 
                            	  6015: *     Subroutine to check and accumulate the flags
00:0000558C 40C3            	  6016: ROXx_FLAGS:     move.w sr,d3
00:0000558E 02830000000F    	  6017:                 andi.l #$0F,d3            * Isolate flags
00:00005594 DA83            	  6018:                 add.l d3,d5               * Copy flag results into accumulator
00:00005596 4E75            	  6019:                 rts
                            	  6020: 
                            	  6021: op_ROXx:
                            	  6022: 
                            	  6023: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6024: 
                            	  6025: *        BYTE LEFT
00:00005598 203C80018FF1    	  6026:                 move.l #$80018FF1,d0
00:0000559E 7A00            	  6027:                 moveq  #$00000000,d5
00:000055A0 7C11            	  6028:                 moveq  #$00000011,d6
                            	  6029: ROXx_LOOP1:
00:000055A2 ED30            	  6030:                 roxl.b d6,d0
00:000055A4 61E6            	  6031:                 bsr ROXx_FLAGS
00:000055A6 51CEFFFA        	  6032:                 dbf d6,ROXx_LOOP1
00:000055AA 0C8080018FD0    	  6033:                 cmpi.l #$80018FD0,d0
00:000055B0 66FE            	  6034:                 bne.s *
00:000055B2 0C8500000042    	  6035:                 cmpi.l #$00000042,d5
00:000055B8 66FE            	  6036:                 bne.s *
                            	  6037: 
                            	  6038: *        BYTE RIGHT
00:000055BA 203C80018FF1    	  6039:                 move.l #$80018FF1,d0
00:000055C0 7C12            	  6040:                 moveq  #$00000012,d6
                            	  6041: ROXx_LOOP2:
00:000055C2 EC30            	  6042:                 roxr.b d6,d0
00:000055C4 61C6            	  6043:                 bsr ROXx_FLAGS
00:000055C6 51CEFFFA        	  6044:                 dbf d6,ROXx_LOOP2
00:000055CA 0C8080018F51    	  6045:                 cmpi.l #$80018F51,d0
00:000055D0 66FE            	  6046:                 bne.s *
00:000055D2 0C850000009C    	  6047:                 cmpi.l #$0000009C,d5
00:000055D8 66FE            	  6048:                 bne.s *
                            	  6049: 
                            	  6050: 
                            	  6051: *        WORD LEFT
00:000055DA 203C80018FF1    	  6052:                 move.l #$80018FF1,d0
00:000055E0 7C13            	  6053:                 moveq  #$00000013,d6
                            	  6054: ROXx_LOOP3:
00:000055E2 ED70            	  6055:                 roxl.w d6,d0
00:000055E4 61A6            	  6056:                 bsr ROXx_FLAGS
00:000055E6 51CEFFFA        	  6057:                 dbf d6,ROXx_LOOP3
00:000055EA 0C8080013980    	  6058:                 cmpi.l #$80013980,d0
00:000055F0 66FE            	  6059:                 bne.s *
00:000055F2 0C85000000C9    	  6060:                 cmpi.l #$000000C9,d5
00:000055F8 66FE            	  6061:                 bne.s *
                            	  6062: 
                            	  6063: *        WORD RIGHT
00:000055FA 203C80018FF1    	  6064:                 move.l #$80018FF1,d0
00:00005600 7C1E            	  6065:                 move.l #$0000001E,d6
                            	  6066: ROXx_LOOP4:
00:00005602 EC70            	  6067:                 roxr.w d6,d0
00:00005604 6186            	  6068:                 bsr ROXx_FLAGS
00:00005606 51CEFFFA        	  6069:                 dbf d6,ROXx_LOOP4
00:0000560A 0C8080010A1D    	  6070:                 cmpi.l #$80010A1D,d0
00:00005610 66FE            	  6071:                 bne.s *
00:00005612 0C850000014D    	  6072:                 cmpi.l #$0000014D,d5
00:00005618 66FE            	  6073:                 bne.s *
                            	  6074: 
                            	  6075: 
                            	  6076: *        LONG LEFT
00:0000561A 203C80018FF1    	  6077:                 move.l #$80018FF1,d0
00:00005620 7C15            	  6078:                 moveq  #$00000015,d6
                            	  6079: ROXx_LOOP5:
00:00005622 EDB0            	  6080:                 roxl.l d6,d0
00:00005624 6100FF66        	  6081:                 bsr ROXx_FLAGS
00:00005628 51CEFFF8        	  6082:                 dbf d6,ROXx_LOOP5
00:0000562C 0C80800185D0    	  6083:                 cmpi.l #$800185D0,d0
00:00005632 66FE            	  6084:                 bne.s *
00:00005634 0C85000001A1    	  6085:                 cmpi.l #$000001A1,d5
00:0000563A 66FE            	  6086:                 bne.s *
                            	  6087: 
                            	  6088: *        LONG RIGHT
00:0000563C 203C80018FF1    	  6089:                 move.l #$80018FF1,d0
00:00005642 7C16            	  6090:                 moveq  #$00000016,d6
                            	  6091: ROXx_LOOP6:
00:00005644 ECB0            	  6092:                 roxr.l d6,d0
00:00005646 6100FF44        	  6093:                 bsr ROXx_FLAGS
00:0000564A 51CEFFF8        	  6094:                 dbf d6,ROXx_LOOP6
00:0000564E 0C80082D8200    	  6095:                 cmpi.l #$082D8200,d0
00:00005654 66FE            	  6096:                 bne.s *
00:00005656 0C85000001DE    	  6097:                 cmpi.l #$000001DE,d5
00:0000565C 66FE            	  6098:                 bne.s *
                            	  6099: 
                            	  6100: 
                            	  6101: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6102: 
00:0000565E 203C80018FF1    	  6103:                 move.l #$80018FF1,d0
00:00005664 7A00            	  6104:                 moveq  #$00000000,d5
                            	  6105: 
                            	  6106: *        BYTE LEFT
00:00005666 E310            	  6107:                 roxl.b #1,d0
00:00005668 6100FF22        	  6108:                 bsr ROXx_FLAGS
00:0000566C EB10            	  6109:                 roxl.b #5,d0
00:0000566E 6100FF1C        	  6110:                 bsr ROXx_FLAGS
00:00005672 EF10            	  6111:                 roxl.b #7,d0
00:00005674 6100FF16        	  6112:                 bsr ROXx_FLAGS
00:00005678 E110            	  6113:                 roxl.b #8,d0
00:0000567A 6100FF10        	  6114:                 bsr ROXx_FLAGS
00:0000567E 0C8080018F09    	  6115:                 cmpi.l #$80018F09,d0
00:00005684 66FE            	  6116:                 bne.s *
00:00005686 0C850000000B    	  6117:                 cmpi.l #$0000000B,d5
00:0000568C 66FE            	  6118:                 bne.s *
                            	  6119: 
                            	  6120: *        BYTE RIGHT
00:0000568E E210            	  6121:                 roxr.b #1,d0
00:00005690 6100FEFA        	  6122:                 bsr ROXx_FLAGS
00:00005694 EA10            	  6123:                 roxr.b #5,d0
00:00005696 6100FEF4        	  6124:                 bsr ROXx_FLAGS
00:0000569A EE10            	  6125:                 roxr.b #7,d0
00:0000569C 6100FEEE        	  6126:                 bsr ROXx_FLAGS
00:000056A0 E010            	  6127:                 roxr.b #8,d0
00:000056A2 6100FEE8        	  6128:                 bsr ROXx_FLAGS
00:000056A6 0C8080018F00    	  6129:                 cmpi.l #$80018F00,d0
00:000056AC 66FE            	  6130:                 bne.s *
00:000056AE 0C8500000015    	  6131:                 cmpi.l #$00000015,d5
00:000056B4 66FE            	  6132:                 bne.s *
                            	  6133: 
                            	  6134: *        WORD LEFT
00:000056B6 E350            	  6135:                 roxl.w #1,d0
00:000056B8 6100FED2        	  6136:                 bsr ROXx_FLAGS
00:000056BC EB50            	  6137:                 roxl.w #5,d0
00:000056BE 6100FECC        	  6138:                 bsr ROXx_FLAGS
00:000056C2 EF50            	  6139:                 roxl.w #7,d0
00:000056C4 6100FEC6        	  6140:                 bsr ROXx_FLAGS
00:000056C8 E150            	  6141:                 roxl.w #8,d0
00:000056CA 6100FEC0        	  6142:                 bsr ROXx_FLAGS
00:000056CE 0C808001B000    	  6143:                 cmpi.l #$8001B000,d0
00:000056D4 66FE            	  6144:                 bne.s *
00:000056D6 0C8500000027    	  6145:                 cmpi.l #$00000027,d5
00:000056DC 66FE            	  6146:                 bne.s *
                            	  6147: 
                            	  6148: *        WORD RIGHT
00:000056DE E250            	  6149:                 roxr.w #1,d0
00:000056E0 6100FEAA        	  6150:                 bsr ROXx_FLAGS
00:000056E4 EA50            	  6151:                 roxr.w #5,d0
00:000056E6 6100FEA4        	  6152:                 bsr ROXx_FLAGS
00:000056EA EE50            	  6153:                 roxr.w #7,d0
00:000056EC 6100FE9E        	  6154:                 bsr ROXx_FLAGS
00:000056F0 E050            	  6155:                 roxr.w #8,d0
00:000056F2 6100FE98        	  6156:                 bsr ROXx_FLAGS
00:000056F6 0C8080010A00    	  6157:                 cmpi.l #$80010A00,d0
00:000056FC 66FE            	  6158:                 bne.s *
00:000056FE 0C8500000028    	  6159:                 cmpi.l #$00000028,d5
00:00005704 66FE            	  6160:                 bne.s *
                            	  6161: 
                            	  6162: *        LONG LEFT
00:00005706 E390            	  6163:                 roxl.l #1,d0
00:00005708 6100FE82        	  6164:                 bsr ROXx_FLAGS
00:0000570C EB90            	  6165:                 roxl.l #5,d0
00:0000570E 6100FE7C        	  6166:                 bsr ROXx_FLAGS
00:00005712 EF90            	  6167:                 roxl.l #7,d0
00:00005714 6100FE76        	  6168:                 bsr ROXx_FLAGS
00:00005718 E190            	  6169:                 roxl.l #8,d0
00:0000571A 6100FE70        	  6170:                 bsr ROXx_FLAGS
00:0000571E 0C8040000010    	  6171:                 cmpi.l #$40000010,d0
00:00005724 66FE            	  6172:                 bne.s *
00:00005726 0C850000002A    	  6173:                 cmpi.l #$0000002A,d5
00:0000572C 66FE            	  6174:                 bne.s *
                            	  6175: 
                            	  6176: *        LONG RIGHT
00:0000572E E290            	  6177:                 roxr.l #1,d0
00:00005730 6100FE5A        	  6178:                 bsr ROXx_FLAGS
00:00005734 EA90            	  6179:                 roxr.l #5,d0
00:00005736 6100FE54        	  6180:                 bsr ROXx_FLAGS
00:0000573A EE90            	  6181:                 roxr.l #7,d0
00:0000573C 6100FE4E        	  6182:                 bsr ROXx_FLAGS
00:00005740 E090            	  6183:                 roxr.l #8,d0
00:00005742 6100FE48        	  6184:                 bsr ROXx_FLAGS
00:00005746 0C8000010200    	  6185:                 cmpi.l #$00010200,d0
00:0000574C 66FE            	  6186:                 bne.s *
00:0000574E 0C8500000032    	  6187:                 cmpi.l #$00000032,d5
00:00005754 66FE            	  6188:                 bne.s *
                            	  6189: 
                            	  6190: 
                            	  6191: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6192: 
00:00005756 7A00            	  6193:                 moveq  #$00000000,d5
00:00005758 307C0100        	  6194:                 move.l #$00000100,a0
00:0000575C 30BC8FF1        	  6195:                 move.w #$8FF1,(a0)
                            	  6196: 
                            	  6197: *        WORD LEFT
00:00005760 E5D0            	  6198:                 roxl (a0)
00:00005762 6100FE28        	  6199:                 bsr ROXx_FLAGS
00:00005766 E5D0            	  6200:                 roxl (a0)
00:00005768 6100FE22        	  6201:                 bsr ROXx_FLAGS
00:0000576C E5D0            	  6202:                 roxl (a0)
00:0000576E 6100FE1C        	  6203:                 bsr ROXx_FLAGS
00:00005772 E5D0            	  6204:                 roxl (a0)
00:00005774 6100FE16        	  6205:                 bsr ROXx_FLAGS
00:00005778 3010            	  6206:                 move.w (a0),d0
00:0000577A 0C800001FF10    	  6207:                 cmpi.l #$0001FF10,d0
00:00005780 66FE            	  6208:                 bne.s *
00:00005782 0C8500000009    	  6209:                 cmpi.l #$00000009,d5
00:00005788 66FE            	  6210:                 bne.s *
                            	  6211: 
                            	  6212: *        WORD RIGHT
00:0000578A E4D0            	  6213:                 roxr (a0)
00:0000578C 6100FDFE        	  6214:                 bsr ROXx_FLAGS
00:00005790 E4D0            	  6215:                 roxr (a0)
00:00005792 6100FDF8        	  6216:                 bsr ROXx_FLAGS
00:00005796 E4D0            	  6217:                 roxr (a0)
00:00005798 6100FDF2        	  6218:                 bsr ROXx_FLAGS
00:0000579C E4D0            	  6219:                 roxr (a0)
00:0000579E 6100FDEC        	  6220:                 bsr ROXx_FLAGS
00:000057A2 E4D0            	  6221:                 roxr (a0)
00:000057A4 6100FDE6        	  6222:                 bsr ROXx_FLAGS
00:000057A8 E4D0            	  6223:                 roxr (a0)
00:000057AA 6100FDE0        	  6224:                 bsr ROXx_FLAGS
00:000057AE 3010            	  6225:                 move.w (a0),d0
00:000057B0 0C80000103FC    	  6226:                 cmpi.l #$000103FC,d0
00:000057B6 66FE            	  6227:                 bne.s *
00:000057B8 0C850000000A    	  6228:                 cmpi.l #$0000000A,d5
00:000057BE 66FE            	  6229:                 bne.s *
                            	  6230: 
00:000057C0 4E75            	  6231:                 rts
                            	  6232: 
                            	  6233: 
                            	  6234: 
                            	  6235: 
                            	  6236: *-----------------------------------------------------------
                            	  6237: *-----------------------------------------------------------
                            	  6238: * OPCODE : SHIFTS
                            	  6239: *-----------------------------------------------------------
                            	  6240: *-----------------------------------------------------------
                            	  6241: 
                            	  6242: *     Subroutine to check and accumulate the flags
00:000057C2 40C3            	  6243: SHIFTS_FLAGS:   move.w sr,d3
00:000057C4 02830000000F    	  6244:                 andi.l #$0F,d3            * Isolate flags
00:000057CA DA83            	  6245:                 add.l d3,d5               * Copy flag results into accumulator
00:000057CC 4E75            	  6246:                 rts
                            	  6247: 
                            	  6248: op_SHIFTS:
                            	  6249: 
                            	  6250: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6251: 
                            	  6252: *        BYTE LEFT
00:000057CE 203C80018F81    	  6253:                 move.l #$80018F81,d0
00:000057D4 7A00            	  6254:                 moveq  #$00000000,d5
00:000057D6 7C02            	  6255:                 moveq  #$00000002,d6
                            	  6256: SHIFTS_LOOP1:
00:000057D8 ED20            	  6257:                 asl.b d6,d0
00:000057DA 61E6            	  6258:                 bsr SHIFTS_FLAGS
00:000057DC 51CEFFFA        	  6259:                 dbf d6,SHIFTS_LOOP1
00:000057E0 0C8080018F08    	  6260:                 cmpi.l #$80018F08,d0
00:000057E6 66FE            	  6261:                 bne.s *
00:000057E8 0C8500000002    	  6262:                 cmpi.l #$00000002,d5
00:000057EE 66FE            	  6263:                 bne.s *
                            	  6264: 
                            	  6265: *        BYTE RIGHT
00:000057F0 203C80018F81    	  6266:                 move.l #$80018F81,d0
00:000057F6 7C02            	  6267:                 moveq  #$00000002,d6
                            	  6268: SHIFTS_LOOP2:
00:000057F8 EC20            	  6269:                 asr.b d6,d0
00:000057FA 61C6            	  6270:                 bsr SHIFTS_FLAGS
00:000057FC 51CEFFFA        	  6271:                 dbf d6,SHIFTS_LOOP2
00:00005800 0C8080018FF0    	  6272:                 cmpi.l #$80018FF0,d0
00:00005806 66FE            	  6273:                 bne.s *
00:00005808 0C850000001A    	  6274:                 cmpi.l #$0000001A,d5
00:0000580E 66FE            	  6275:                 bne.s *
                            	  6276: 
                            	  6277: 
                            	  6278: *        WORD LEFT
00:00005810 203C80018FF1    	  6279:                 move.l #$80018FF1,d0
00:00005816 7C02            	  6280:                 moveq  #$00000002,d6
                            	  6281: SHIFTS_LOOP3:
00:00005818 ED60            	  6282:                 asl.w d6,d0
00:0000581A 61A6            	  6283:                 bsr SHIFTS_FLAGS
00:0000581C 51CEFFFA        	  6284:                 dbf d6,SHIFTS_LOOP3
00:00005820 0C8080017F88    	  6285:                 cmpi.l #$80017F88,d0
00:00005826 66FE            	  6286:                 bne.s *
00:00005828 0C850000001C    	  6287:                 cmpi.l #$0000001C,d5
00:0000582E 66FE            	  6288:                 bne.s *
                            	  6289: 
                            	  6290: *        WORD RIGHT
00:00005830 203C80018FF1    	  6291:                 move.l #$80018FF1,d0
00:00005836 7C02            	  6292:                 moveq  #$00000002,d6
                            	  6293: SHIFTS_LOOP4:
00:00005838 EC60            	  6294:                 asr.w d6,d0
00:0000583A 6186            	  6295:                 bsr SHIFTS_FLAGS
00:0000583C 51CEFFFA        	  6296:                 dbf d6,SHIFTS_LOOP4
00:00005840 0C808001F1FE    	  6297:                 cmpi.l #$8001F1FE,d0
00:00005846 66FE            	  6298:                 bne.s *
00:00005848 0C8500000034    	  6299:                 cmpi.l #$00000034,d5
00:0000584E 66FE            	  6300:                 bne.s *
                            	  6301: 
                            	  6302: 
                            	  6303: *        LONG LEFT
00:00005850 203C80018FF1    	  6304:                 move.l #$80018FF1,d0
00:00005856 7C02            	  6305:                 moveq  #$00000002,d6
                            	  6306: SHIFTS_LOOP5:
00:00005858 EDA0            	  6307:                 asl.l d6,d0
00:0000585A 6100FF66        	  6308:                 bsr SHIFTS_FLAGS
00:0000585E 51CEFFF8        	  6309:                 dbf d6,SHIFTS_LOOP5
00:00005862 0C80000C7F88    	  6310:                 cmpi.l #$000C7F88,d0
00:00005868 66FE            	  6311:                 bne.s *
00:0000586A 0C8500000036    	  6312:                 cmpi.l #$00000036,d5
00:00005870 66FE            	  6313:                 bne.s *
                            	  6314: 
                            	  6315: *        LONG RIGHT
00:00005872 203C80018FF1    	  6316:                 move.l #$80018FF1,d0
00:00005878 7C02            	  6317:                 moveq  #$00000002,d6
                            	  6318: SHIFTS_LOOP6:
00:0000587A ECA0            	  6319:                 asr.l d6,d0
00:0000587C 6100FF44        	  6320:                 bsr SHIFTS_FLAGS
00:00005880 51CEFFF8        	  6321:                 dbf d6,SHIFTS_LOOP6
00:00005884 0C80F00031FE    	  6322:                 cmpi.l #$F00031FE,d0
00:0000588A 66FE            	  6323:                 bne.s *
00:0000588C 0C850000004E    	  6324:                 cmpi.l #$0000004E,d5
00:00005892 66FE            	  6325:                 bne.s *
                            	  6326: 
                            	  6327: 
                            	  6328: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6329: 
00:00005894 203C80018FF1    	  6330:                 move.l #$80018FF1,d0
00:0000589A 7A00            	  6331:                 moveq  #$00000000,d5
                            	  6332: 
                            	  6333: *        BYTE LEFT
00:0000589C D000            	  6334:                 asl.b #1,d0
00:0000589E 6100FF22        	  6335:                 bsr SHIFTS_FLAGS
00:000058A2 E500            	  6336:                 asl.b #2,d0
00:000058A4 6100FF1C        	  6337:                 bsr SHIFTS_FLAGS
00:000058A8 D000            	  6338:                 asl.b #1,d0
00:000058AA 6100FF16        	  6339:                 bsr SHIFTS_FLAGS
00:000058AE E700            	  6340:                 asl.b #3,d0
00:000058B0 6100FF10        	  6341:                 bsr SHIFTS_FLAGS
00:000058B4 0C8080018F80    	  6342:                 cmpi.l #$80018F80,d0
00:000058BA 66FE            	  6343:                 bne.s *
00:000058BC 0C850000001F    	  6344:                 cmpi.l #$0000001F,d5
00:000058C2 66FE            	  6345:                 bne.s *
                            	  6346: 
                            	  6347: *        BYTE RIGHT
00:000058C4 E200            	  6348:                 asr.b #1,d0
00:000058C6 6100FEFA        	  6349:                 bsr SHIFTS_FLAGS
00:000058CA E400            	  6350:                 asr.b #2,d0
00:000058CC 6100FEF4        	  6351:                 bsr SHIFTS_FLAGS
00:000058D0 E600            	  6352:                 asr.b #3,d0
00:000058D2 6100FEEE        	  6353:                 bsr SHIFTS_FLAGS
00:000058D6 E200            	  6354:                 asr.b #1,d0
00:000058D8 6100FEE8        	  6355:                 bsr SHIFTS_FLAGS
00:000058DC 0C8080018FFF    	  6356:                 cmpi.l #$80018FFF,d0
00:000058E2 66FE            	  6357:                 bne.s *
00:000058E4 0C850000003F    	  6358:                 cmpi.l #$0000003F,d5
00:000058EA 66FE            	  6359:                 bne.s *
                            	  6360: 
                            	  6361: *        WORD LEFT
00:000058EC D040            	  6362:                 asl.w #1,d0
00:000058EE 6100FED2        	  6363:                 bsr SHIFTS_FLAGS
00:000058F2 E540            	  6364:                 asl.w #2,d0
00:000058F4 6100FECC        	  6365:                 bsr SHIFTS_FLAGS
00:000058F8 E740            	  6366:                 asl.w #3,d0
00:000058FA 6100FEC6        	  6367:                 bsr SHIFTS_FLAGS
00:000058FE EB40            	  6368:                 asl.w #5,d0
00:00005900 6100FEC0        	  6369:                 bsr SHIFTS_FLAGS
00:00005904 0C808001F800    	  6370:                 cmpi.l #$8001F800,d0
00:0000590A 66FE            	  6371:                 bne.s *
00:0000590C 0C8500000056    	  6372:                 cmpi.l #$00000056,d5
00:00005912 66FE            	  6373:                 bne.s *
                            	  6374: 
                            	  6375: *        WORD RIGHT
00:00005914 EA40            	  6376:                 asr.w #5,d0
00:00005916 6100FEAA        	  6377:                 bsr SHIFTS_FLAGS
00:0000591A E240            	  6378:                 asr.w #1,d0
00:0000591C 6100FEA4        	  6379:                 bsr SHIFTS_FLAGS
00:00005920 E440            	  6380:                 asr.w #2,d0
00:00005922 6100FE9E        	  6381:                 bsr SHIFTS_FLAGS
00:00005926 E840            	  6382:                 asr.w #4,d0
00:00005928 6100FE98        	  6383:                 bsr SHIFTS_FLAGS
00:0000592C 0C808001FFFF    	  6384:                 cmpi.l #$8001FFFF,d0
00:00005932 66FE            	  6385:                 bne.s *
00:00005934 0C8500000077    	  6386:                 cmpi.l #$00000077,d5
00:0000593A 66FE            	  6387:                 bne.s *
                            	  6388: 
                            	  6389: *        LONG LEFT
00:0000593C 203C80018FF1    	  6390:                 move.l #$80018FF1,d0
00:00005942 D080            	  6391:                 asl.l #1,d0
00:00005944 6100FE7C        	  6392:                 bsr SHIFTS_FLAGS
00:00005948 E580            	  6393:                 asl.l #2,d0
00:0000594A 6100FE76        	  6394:                 bsr SHIFTS_FLAGS
00:0000594E EF80            	  6395:                 asl.l #7,d0
00:00005950 6100FE70        	  6396:                 bsr SHIFTS_FLAGS
00:00005954 E980            	  6397:                 asl.l #4,d0
00:00005956 6100FE6A        	  6398:                 bsr SHIFTS_FLAGS
00:0000595A 0C8063FC4000    	  6399:                 cmpi.l #$63FC4000,d0
00:00005960 66FE            	  6400:                 bne.s *
00:00005962 0C850000007A    	  6401:                 cmpi.l #$0000007A,d5
00:00005968 66FE            	  6402:                 bne.s *
                            	  6403: 
                            	  6404: *        LONG RIGHT
00:0000596A 203C80018FF1    	  6405:                 move.l #$80018FF1,d0
00:00005970 E280            	  6406:                 asr.l #1,d0
00:00005972 6100FE4E        	  6407:                 bsr SHIFTS_FLAGS
00:00005976 EA80            	  6408:                 asr.l #5,d0
00:00005978 6100FE48        	  6409:                 bsr SHIFTS_FLAGS
00:0000597C EE80            	  6410:                 asr.l #7,d0
00:0000597E 6100FE42        	  6411:                 bsr SHIFTS_FLAGS
00:00005982 E080            	  6412:                 asr.l #8,d0
00:00005984 6100FE3C        	  6413:                 bsr SHIFTS_FLAGS
00:00005988 0C80FFFFFC00    	  6414:                 cmpi.l #$FFFFFC00,d0
00:0000598E 66FE            	  6415:                 bne.s *
00:00005990 0C850000009C    	  6416:                 cmpi.l #$0000009C,d5
00:00005996 66FE            	  6417:                 bne.s *
                            	  6418: 
                            	  6419: 
                            	  6420: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6421: 
00:00005998 7A00            	  6422:                 moveq  #$00000000,d5
00:0000599A 307C0100        	  6423:                 move.l #$00000100,a0
00:0000599E 30BC8FF1        	  6424:                 move.w #$8FF1,(a0)
                            	  6425: 
                            	  6426: *        WORD LEFT
00:000059A2 E1D0            	  6427:                 asl  (a0)
00:000059A4 6100FE1C        	  6428:                 bsr SHIFTS_FLAGS
00:000059A8 E1D0            	  6429:                 asl  (a0)
00:000059AA 6100FE16        	  6430:                 bsr SHIFTS_FLAGS
00:000059AE E1D0            	  6431:                 asl  (a0)
00:000059B0 6100FE10        	  6432:                 bsr SHIFTS_FLAGS
00:000059B4 E1D0            	  6433:                 asl  (a0)
00:000059B6 6100FE0A        	  6434:                 bsr SHIFTS_FLAGS
00:000059BA 3010            	  6435:                 move.w (a0),d0
00:000059BC 0C80FFFFFF10    	  6436:                 cmpi.l #$FFFFFF10,d0
00:000059C2 66FE            	  6437:                 bne.s *
00:000059C4 0C850000000D    	  6438:                 cmpi.l #$0000000D,d5
00:000059CA 66FE            	  6439:                 bne.s *
                            	  6440: 
                            	  6441: *        WORD RIGHT
00:000059CC E0D0            	  6442:                 asr (a0)
00:000059CE 6100FDF2        	  6443:                 bsr SHIFTS_FLAGS
00:000059D2 E0D0            	  6444:                 asr (a0)
00:000059D4 6100FDEC        	  6445:                 bsr SHIFTS_FLAGS
00:000059D8 E0D0            	  6446:                 asr (a0)
00:000059DA 6100FDE6        	  6447:                 bsr SHIFTS_FLAGS
00:000059DE E0D0            	  6448:                 asr (a0)
00:000059E0 6100FDE0        	  6449:                 bsr SHIFTS_FLAGS
00:000059E4 E0D0            	  6450:                 asr (a0)
00:000059E6 6100FDDA        	  6451:                 bsr SHIFTS_FLAGS
00:000059EA E0D0            	  6452:                 asr (a0)
00:000059EC 6100FDD4        	  6453:                 bsr SHIFTS_FLAGS
00:000059F0 3010            	  6454:                 move.w (a0),d0
00:000059F2 0C80FFFFFFFC    	  6455:                 cmpi.l #$FFFFFFFC,d0
00:000059F8 66FE            	  6456:                 bne.s *
00:000059FA 0C850000003E    	  6457:                 cmpi.l #$0000003E,d5
00:00005A00 66FE            	  6458:                 bne.s *
                            	  6459: 
00:00005A02 4E75            	  6460:                 rts
                            	  6461: 
                            	  6462: 
                            	  6463: 
                            	  6464: *-----------------------------------------------------------
                            	  6465: *-----------------------------------------------------------
                            	  6466: * OPCODE : SHIFTS2
                            	  6467: *-----------------------------------------------------------
                            	  6468: *-----------------------------------------------------------
                            	  6469: 
                            	  6470: *     Subroutine to check and accumulate the flags
00:00005A04 40C3            	  6471: SHIFTS2_FLAGS:  move.w sr,d3
00:00005A06 02830000000F    	  6472:                 andi.l #$0F,d3            * Isolate flags
00:00005A0C DA83            	  6473:                 add.l d3,d5               * Copy flag results into accumulator
00:00005A0E 4E75            	  6474:                 rts
                            	  6475: 
                            	  6476: op_SHIFTS2:
                            	  6477: 
                            	  6478: *     Shift a Register LEFT and RIGHT with shift_count ## IN A REGISTER ##
                            	  6479: 
                            	  6480: *        BYTE LEFT
00:00005A10 203C80018F81    	  6481:                 move.l #$80018F81,d0
00:00005A16 7A00            	  6482:                 moveq  #$00000000,d5
00:00005A18 7C02            	  6483:                 moveq  #$00000002,d6
                            	  6484: SHIFTS2_LOOP1:
00:00005A1A ED28            	  6485:                 lsl.b d6,d0
00:00005A1C 61E6            	  6486:                 bsr SHIFTS2_FLAGS
00:00005A1E 51CEFFFA        	  6487:                 dbf d6,SHIFTS2_LOOP1
00:00005A22 0C8080018F08    	  6488:                 cmpi.l #$80018F08,d0
00:00005A28 66FE            	  6489:                 bne.s *
00:00005A2A 4A85            	  6490:                 cmpi.l #$00000000,d5
00:00005A2C 66FE            	  6491:                 bne.s *
                            	  6492: 
                            	  6493: *        BYTE RIGHT
00:00005A2E 203C80018F81    	  6494:                 move.l #$80018F81,d0
00:00005A34 7C02            	  6495:                 moveq  #$00000002,d6
                            	  6496: SHIFTS2_LOOP2:
00:00005A36 EC28            	  6497:                 lsr.b d6,d0
00:00005A38 61CA            	  6498:                 bsr SHIFTS2_FLAGS
00:00005A3A 51CEFFFA        	  6499:                 dbf d6,SHIFTS2_LOOP2
00:00005A3E 0C8080018F10    	  6500:                 cmpi.l #$80018F10,d0
00:00005A44 66FE            	  6501:                 bne.s *
00:00005A46 4A85            	  6502:                 cmpi.l #$00000000,d5
00:00005A48 66FE            	  6503:                 bne.s *
                            	  6504: 
                            	  6505: 
                            	  6506: *        WORD LEFT
00:00005A4A 203C80018FF1    	  6507:                 move.l #$80018FF1,d0
00:00005A50 7C02            	  6508:                 moveq  #$00000002,d6
                            	  6509: SHIFTS2_LOOP3:
00:00005A52 ED68            	  6510:                 lsl.w d6,d0
00:00005A54 61AE            	  6511:                 bsr SHIFTS2_FLAGS
00:00005A56 51CEFFFA        	  6512:                 dbf d6,SHIFTS2_LOOP3
00:00005A5A 0C8080017F88    	  6513:                 cmpi.l #$80017F88,d0
00:00005A60 66FE            	  6514:                 bne.s *
00:00005A62 4A85            	  6515:                 cmpi.l #$00000000,d5
00:00005A64 66FE            	  6516:                 bne.s *
                            	  6517: 
                            	  6518: *        WORD RIGHT
00:00005A66 203C80018FF1    	  6519:                 move.l #$80018FF1,d0
00:00005A6C 7C02            	  6520:                 moveq  #$00000002,d6
                            	  6521: SHIFTS2_LOOP4:
00:00005A6E EC68            	  6522:                 lsr.w d6,d0
00:00005A70 6192            	  6523:                 bsr SHIFTS2_FLAGS
00:00005A72 51CEFFFA        	  6524:                 dbf d6,SHIFTS2_LOOP4
00:00005A76 0C80800111FE    	  6525:                 cmpi.l #$800111FE,d0
00:00005A7C 66FE            	  6526:                 bne.s *
00:00005A7E 4A85            	  6527:                 cmpi.l #$00000000,d5
00:00005A80 66FE            	  6528:                 bne.s *
                            	  6529: 
                            	  6530: 
                            	  6531: *        LONG LEFT
00:00005A82 203C80018FF1    	  6532:                 move.l #$80018FF1,d0
00:00005A88 7C02            	  6533:                 moveq  #$00000002,d6
                            	  6534: SHIFTS2_LOOP5:
00:00005A8A EDA8            	  6535:                 lsl.l d6,d0
00:00005A8C 6100FF76        	  6536:                 bsr SHIFTS2_FLAGS
00:00005A90 51CEFFF8        	  6537:                 dbf d6,SHIFTS2_LOOP5
00:00005A94 0C80000C7F88    	  6538:                 cmpi.l #$000C7F88,d0
00:00005A9A 66FE            	  6539:                 bne.s *
00:00005A9C 4A85            	  6540:                 cmpi.l #$00000000,d5
00:00005A9E 66FE            	  6541:                 bne.s *
                            	  6542: 
                            	  6543: *        LONG RIGHT
00:00005AA0 203C80018FF1    	  6544:                 move.l #$80018FF1,d0
00:00005AA6 7C02            	  6545:                 moveq  #$00000002,d6
                            	  6546: SHIFTS2_LOOP6:
00:00005AA8 ECA8            	  6547:                 lsr.l d6,d0
00:00005AAA 6100FF58        	  6548:                 bsr SHIFTS2_FLAGS
00:00005AAE 51CEFFF8        	  6549:                 dbf d6,SHIFTS2_LOOP6
00:00005AB2 0C80100031FE    	  6550:                 cmpi.l #$100031FE,d0
00:00005AB8 66FE            	  6551:                 bne.s *
00:00005ABA 4A85            	  6552:                 cmpi.l #$00000000,d5
00:00005ABC 66FE            	  6553:                 bne.s *
                            	  6554: 
                            	  6555: 
                            	  6556: *     Shift a Register LEFT and RIGHT with shift_count ## IN THE OPCODE ##
                            	  6557: 
00:00005ABE 203C80018FF1    	  6558:                 move.l #$80018FF1,d0
00:00005AC4 7A00            	  6559:                 moveq  #$00000000,d5
                            	  6560: 
                            	  6561: *        BYTE LEFT
00:00005AC6 E308            	  6562:                 lsl.b #1,d0
00:00005AC8 6100FF3A        	  6563:                 bsr SHIFTS2_FLAGS
00:00005ACC E508            	  6564:                 lsl.b #2,d0
00:00005ACE 6100FF34        	  6565:                 bsr SHIFTS2_FLAGS
00:00005AD2 E308            	  6566:                 lsl.b #1,d0
00:00005AD4 6100FF2E        	  6567:                 bsr SHIFTS2_FLAGS
00:00005AD8 E708            	  6568:                 lsl.b #3,d0
00:00005ADA 6100FF28        	  6569:                 bsr SHIFTS2_FLAGS
00:00005ADE 0C8080018F80    	  6570:                 cmpi.l #$80018F80,d0
00:00005AE4 66FE            	  6571:                 bne.s *
00:00005AE6 0C850000001B    	  6572:                 cmpi.l #$0000001B,d5
00:00005AEC 66FE            	  6573:                 bne.s *
                            	  6574: 
                            	  6575: *        BYTE RIGHT
00:00005AEE E208            	  6576:                 lsr.b #1,d0
00:00005AF0 6100FF12        	  6577:                 bsr SHIFTS2_FLAGS
00:00005AF4 E408            	  6578:                 lsr.b #2,d0
00:00005AF6 6100FF0C        	  6579:                 bsr SHIFTS2_FLAGS
00:00005AFA E608            	  6580:                 lsr.b #3,d0
00:00005AFC 6100FF06        	  6581:                 bsr SHIFTS2_FLAGS
00:00005B00 E208            	  6582:                 lsr.b #1,d0
00:00005B02 6100FF00        	  6583:                 bsr SHIFTS2_FLAGS
00:00005B06 0C8080018F01    	  6584:                 cmpi.l #$80018F01,d0
00:00005B0C 66FE            	  6585:                 bne.s *
00:00005B0E 0C850000001B    	  6586:                 cmpi.l #$0000001B,d5
00:00005B14 66FE            	  6587:                 bne.s *
                            	  6588: 
                            	  6589: *        WORD LEFT
00:00005B16 E348            	  6590:                 lsl.w #1,d0
00:00005B18 6100FEEA        	  6591:                 bsr SHIFTS2_FLAGS
00:00005B1C E548            	  6592:                 lsl.w #2,d0
00:00005B1E 6100FEE4        	  6593:                 bsr SHIFTS2_FLAGS
00:00005B22 E748            	  6594:                 lsl.w #3,d0
00:00005B24 6100FEDE        	  6595:                 bsr SHIFTS2_FLAGS
00:00005B28 EB48            	  6596:                 lsl.w #5,d0
00:00005B2A 6100FED8        	  6597:                 bsr SHIFTS2_FLAGS
00:00005B2E 0C8080010800    	  6598:                 cmpi.l #$80010800,d0
00:00005B34 66FE            	  6599:                 bne.s *
00:00005B36 0C8500000025    	  6600:                 cmpi.l #$00000025,d5
00:00005B3C 66FE            	  6601:                 bne.s *
                            	  6602: 
                            	  6603: *        WORD RIGHT
00:00005B3E EA48            	  6604:                 lsr.w #5,d0
00:00005B40 6100FEC2        	  6605:                 bsr SHIFTS2_FLAGS
00:00005B44 E248            	  6606:                 lsr.w #1,d0
00:00005B46 6100FEBC        	  6607:                 bsr SHIFTS2_FLAGS
00:00005B4A E448            	  6608:                 lsr.w #2,d0
00:00005B4C 6100FEB6        	  6609:                 bsr SHIFTS2_FLAGS
00:00005B50 E848            	  6610:                 lsr.w #4,d0
00:00005B52 6100FEB0        	  6611:                 bsr SHIFTS2_FLAGS
00:00005B56 0C8080010000    	  6612:                 cmpi.l #$80010000,d0
00:00005B5C 66FE            	  6613:                 bne.s *
00:00005B5E 0C850000002A    	  6614:                 cmpi.l #$0000002A,d5
00:00005B64 66FE            	  6615:                 bne.s *
                            	  6616: 
                            	  6617: *        LONG LEFT
00:00005B66 203C80018FF1    	  6618:                 move.l #$80018FF1,d0
00:00005B6C E388            	  6619:                 lsl.l #1,d0
00:00005B6E 6100FE94        	  6620:                 bsr SHIFTS2_FLAGS
00:00005B72 E588            	  6621:                 lsl.l #2,d0
00:00005B74 6100FE8E        	  6622:                 bsr SHIFTS2_FLAGS
00:00005B78 EF88            	  6623:                 lsl.l #7,d0
00:00005B7A 6100FE88        	  6624:                 bsr SHIFTS2_FLAGS
00:00005B7E E988            	  6625:                 lsl.l #4,d0
00:00005B80 6100FE82        	  6626:                 bsr SHIFTS2_FLAGS
00:00005B84 0C8063FC4000    	  6627:                 cmpi.l #$63FC4000,d0
00:00005B8A 66FE            	  6628:                 bne.s *
00:00005B8C 0C850000002B    	  6629:                 cmpi.l #$0000002B,d5
00:00005B92 66FE            	  6630:                 bne.s *
                            	  6631: 
                            	  6632: *        LONG RIGHT
00:00005B94 203C80018FF1    	  6633:                 move.l #$80018FF1,d0
00:00005B9A E288            	  6634:                 lsr.l #1,d0
00:00005B9C 6100FE66        	  6635:                 bsr SHIFTS2_FLAGS
00:00005BA0 EA88            	  6636:                 lsr.l #5,d0
00:00005BA2 6100FE60        	  6637:                 bsr SHIFTS2_FLAGS
00:00005BA6 EE88            	  6638:                 lsr.l #7,d0
00:00005BA8 6100FE5A        	  6639:                 bsr SHIFTS2_FLAGS
00:00005BAC E088            	  6640:                 lsr.l #8,d0
00:00005BAE 6100FE54        	  6641:                 bsr SHIFTS2_FLAGS
00:00005BB2 0C8000000400    	  6642:                 cmpi.l #$00000400,d0
00:00005BB8 66FE            	  6643:                 bne.s *
00:00005BBA 0C850000002D    	  6644:                 cmpi.l #$0000002D,d5
00:00005BC0 66FE            	  6645:                 bne.s *
                            	  6646: 
                            	  6647: 
                            	  6648: *     Shift a Memory location LEFT and RIGHT with shift_count of 1 - WORD only
                            	  6649: 
00:00005BC2 7A00            	  6650:                 moveq  #$00000000,d5
00:00005BC4 307C0100        	  6651:                 move.l #$00000100,a0
00:00005BC8 30BC8FF1        	  6652:                 move.w #$8FF1,(a0)
                            	  6653: 
                            	  6654: *        WORD LEFT
00:00005BCC E3D0            	  6655:                 lsl  (a0)
00:00005BCE 6100FE34        	  6656:                 bsr SHIFTS2_FLAGS
00:00005BD2 E3D0            	  6657:                 lsl  (a0)
00:00005BD4 6100FE2E        	  6658:                 bsr SHIFTS2_FLAGS
00:00005BD8 E3D0            	  6659:                 lsl  (a0)
00:00005BDA 6100FE28        	  6660:                 bsr SHIFTS2_FLAGS
00:00005BDE E3D0            	  6661:                 lsl  (a0)
00:00005BE0 6100FE22        	  6662:                 bsr SHIFTS2_FLAGS
00:00005BE4 3010            	  6663:                 move.w (a0),d0
00:00005BE6 0C800000FF10    	  6664:                 cmpi.l #$0000FF10,d0
00:00005BEC 66FE            	  6665:                 bne.s *
00:00005BEE 0C8500000009    	  6666:                 cmpi.l #$00000009,d5
00:00005BF4 66FE            	  6667:                 bne.s *
                            	  6668: 
                            	  6669: *        WORD RIGHT
00:00005BF6 E2D0            	  6670:                 lsr (a0)
00:00005BF8 6100FE0A        	  6671:                 bsr SHIFTS2_FLAGS
00:00005BFC E2D0            	  6672:                 lsr (a0)
00:00005BFE 6100FE04        	  6673:                 bsr SHIFTS2_FLAGS
00:00005C02 E2D0            	  6674:                 lsr (a0)
00:00005C04 6100FDFE        	  6675:                 bsr SHIFTS2_FLAGS
00:00005C08 E2D0            	  6676:                 lsr (a0)
00:00005C0A 6100FDF8        	  6677:                 bsr SHIFTS2_FLAGS
00:00005C0E E2D0            	  6678:                 lsr (a0)
00:00005C10 6100FDF2        	  6679:                 bsr SHIFTS2_FLAGS
00:00005C14 E2D0            	  6680:                 lsr (a0)
00:00005C16 6100FDEC        	  6681:                 bsr SHIFTS2_FLAGS
00:00005C1A 3010            	  6682:                 move.w (a0),d0
00:00005C1C 0C80000003FC    	  6683:                 cmpi.l #$000003FC,d0
00:00005C22 66FE            	  6684:                 bne.s *
00:00005C24 0C850000000A    	  6685:                 cmpi.l #$0000000A,d5
00:00005C2A 66FE            	  6686:                 bne.s *
                            	  6687: 
00:00005C2C 4E75            	  6688:                 rts
                            	  6689: 
                            	  6690: ;-----------------------------------------------------------
                            	  6691: ;-----------------------------------------------------------
                            	  6692: ; OPCODE : BSR / RTS
                            	  6693: ;-----------------------------------------------------------
                            	  6694: ;-----------------------------------------------------------
                            	  6695: 
                            	  6696: ;t3_bsr:
                            	  6697: ;	moveq	#3,d3
                            	  6698: ;	rts
                            	  6699: 
                            	  6700: ;t1_bsr:
                            	  6701: ;	moveq	#1,d1
                            	  6702: ;	rts
                            	  6703: 
                            	  6704: ;op_bsr:
                            	  6705: ;	bsr			t1_bsr
                            	  6706: ;	bsr			t2_bsr
                            	  6707: ;	bsr.w		t3_bsr
                            	  6708: ;	bsr.w		t4_bsr
                            	  6709: ;	cmpi.l	#1,d1
                            	  6710: ;	bne			*
                            	  6711: ;	cmpi.l	#2,d2
                            	  6712: ;	bne			*
                            	  6713: ;	cmpi.l	#3,d3
                            	  6714: ;	bne			*
                            	  6715: ;	cmpi.l	#4,d4
                            	  6716: ;	bne			*
                            	  6717: ;	rts
                            	  6718: 
                            	  6719: ;t2_bsr:
                            	  6720: ;	moveq	#2,d2
                            	  6721: ;	rts
                            	  6722: 	
                            	  6723: ;t4_bsr:
                            	  6724: ;	moveq	#4,d4
                            	  6725: ;	rts
                            	  6726: *    END
                            	  6727:     
                            	  6728: 

Source: "boot.x68"
                            	   895: 	include "TinyBasicFlt.x68"

Source: "TinyBasicFlt.x68"
                            	     1: ******************************************************************
                            	     2: *								 *
                            	     3: *		Tiny Float BASIC for the Motorola MC68000		 *
                            	     4: *								 *
                            	     5: * Derived from Palo Alto Tiny BASIC as published in the May 1976 *
                            	     6: * issue of Dr. Dobb's Journal.  Adapted to the 68000 by:         *
                            	     7: *	Gordon Brandly						 *
                            	     8: *								 *
                            	     9: ******************************************************************
                            	    10: *    Copyright (C) 1984 by Gordon Brandly. This program may be	 *
                            	    11: *    freely distributed for personal use only. All commercial	 *
                            	    12: *		       rights are reserved.			 *
                            	    13: ******************************************************************
                            	    14: * Modified (c) 2022 for the rf68000. Robert Finch
                            	    15: * Numerics changed to floating-point
                            	    16: * added string handling
                            	    17: ******************************************************************
                            	    18: 
                            	    19: * Vers. 1.0  1984/7/17	- Original version by Gordon Brandly
                            	    20: *	1.1  1984/12/9	- Addition of '$' print term by Marvin Lipford
                            	    21: *	1.2  1985/4/9	- Bug fix in multiply routine by Rick Murray
                            	    22: 
                            	    23: *	OPT	FRS,BRS 	forward ref.'s & branches default to short
                            	    24: 
                            	    25: ;CR	EQU	$0D		ASCII equates
                            	    26: ;LF	EQU	$0A
                            	    27: ;TAB	EQU	$09
                            	    28: ;CTRLC	EQU	$03
                            	    29: ;CTRLH	EQU	$08
                            	    30: ;CTRLS	EQU	$13
                            	    31: ;CTRLX	EQU	$18
                            	    32: 
                            	    33: DT_NONE equ 0
                            	    34: DT_NUMERIC equ 1
                            	    35: DT_STRING equ 2		; string descriptor
                            	    36: DT_TEXTPTR equ 3	; pointer into program text
                            	    37: 
                            	    38: BUFLEN	EQU	80		length of keyboard input buffer
                            	    39: STRAREASIZE	EQU	2048	; size of string area
                            	    40: 	CODE
                            	    41: *	ORG	$10000		first free address using Tutor
                            	    42: *
                            	    43: * Standard jump table. You can change these addresses if you are
                            	    44: * customizing this interpreter for a different environment.
                            	    45: *
00:00005C2E 6020            	    46: START	BRA	CSTART		Cold Start entry point
00:00005C30 60000088        	    47: GOWARM	BRA	WSTART		Warm Start entry point
00:00005C34 6000145E        	    48: GOOUT	BRA OUTC		Jump to character-out routine
00:00005C38 6000146A        	    49: GOIN	BRA INC		Jump to character-in routine
00:00005C3C 60001486        	    50: GOAUXO	BRA	AUXOUT		Jump to auxiliary-out routine
00:00005C40 60001496        	    51: GOAUXI	BRA	AUXIN		Jump to auxiliary-in routine
00:00005C44 600014B2        	    52: GOBYE	BRA	BYEBYE		Jump to monitor, DOS, etc.
                            	    53: *
                            	    54: * Modifiable system constants:
                            	    55: *
00:00005C48 00041000        	    56: TXTBGN	DC.L	$41000		beginning of program memory
00:00005C4C 00047FF0        	    57: ENDMEM	DC.L	$47FF0		end of available memory
                            	    58: *
                            	    59: * The main interpreter starts here:
                            	    60: *
                            	    61: CSTART
00:00005C50 2E7AFFFA        	    62: 	MOVE.L ENDMEM,SP	initialize stack pointer
00:00005C54 23FC000070B00000	    63: 	move.l #INC1,INPPTR
00:00005C5C 7168
00:00005C5E 4239000400A4    	    64: 	move.b #0,InputDevice
00:00005C64 13FC0001000400A8	    65: 	move.b #1,OutputDevice
00:00005C6C 23FC000000010004	    66: 	move.l #1,_fpTextIncr
00:00005C74 0094
00:00005C76 4DFA148E        	    67: 	LEA	INITMSG,A6	tell who we are
00:00005C7A 61001400        	    68: 	BSR	PRMESG
00:00005C7E 23FAFFC8000071B8	    69: 	MOVE.L TXTBGN,TXTUNF	init. end-of-program pointer
00:00005C86 203AFFC4        	    70: 	MOVE.L ENDMEM,D0	get address of end of memory
00:00005C8A 23FAFFC000007174	    71: 	move.l ENDMEM,STKFP
00:00005C92 90BC00001000    	    72: 	SUB.L	#4096,D0	reserve 4K for the stack
00:00005C98 23C0000071A8    	    73: 	MOVE.L D0,STRSTK
00:00005C9E D0BC00000020    	    74: 	ADD.L #32,D0
00:00005CA4 23C0000071C0    	    75: 	MOVE.L D0,STKLMT
00:00005CAA 90BC00000200    	    76: 	SUB.L	#512,D0 	reserve variable area (32 16 byte floats)
00:00005CB0 23C0000071BC    	    77: 	MOVE.L D0,VARBGN
00:00005CB6 610000C2        	    78: 	bsr ClearStringArea
                            	    79: WSTART
00:00005CBA 7000            	    80: 	CLR.L	D0		initialize internal variables
00:00005CBC 23FC000000010004	    81: 	move.l #1,_fpTextIncr
00:00005CC4 0094
00:00005CC6 42B9000071A4    	    82: 	clr.l IRQROUT
00:00005CCC 23C000007180    	    83: 	MOVE.L	D0,LOPVAR
00:00005CD2 23C000007178    	    84: 	MOVE.L	D0,STKGOS
00:00005CD8 23C000007170    	    85: 	MOVE.L	D0,CURRNT	; current line number pointer = 0
00:00005CDE 2E7AFF6C        	    86: 	MOVE.L ENDMEM,SP	; init S.P. again, just in case
00:00005CE2 610000B6        	    87: 	bsr ClearStringStack
00:00005CE6 4DFA1442        	    88: 	LEA	OKMSG,A6			; display "OK"
00:00005CEA 61001390        	    89: 	bsr	PRMESG
                            	    90: ST3
00:00005CEE 103C003E        	    91: 	MOVE.B	#'>',D0         Prompt with a '>' and
00:00005CF2 610010CC        	    92: 	bsr	GETLN		read a line.
00:00005CF6 61001328        	    93: 	bsr	TOUPBUF 	convert to upper case
00:00005CFA 2848            	    94: 	MOVE.L	A0,A4		save pointer to end of line
00:00005CFC 41FA14CA        	    95: 	LEA	BUFFER,A0	point to the beginning of line
00:00005D00 610012C8        	    96: 	bsr	TSTNUM		is there a number there?
00:00005D04 61001310        	    97: 	bsr	IGNBLK		skip trailing blanks
00:00005D08 F2016080        	    98: 	FMOVE.L FP1,D1
00:00005D0C 4A82            	    99: 	TST.L D2			; does line no. exist? (or nonzero?)
00:00005D0E 67000244        	   100: 	BEQ	DIRECT		; if not, it's a direct statement
00:00005D12 B2BC0000FFFF    	   101: 	CMP.L	#$FFFF,D1	see if line no. is <= 16 bits
00:00005D18 64001098        	   102: 	BCC	QHOW		if not, we've overflowed
00:00005D1C 1101            	   103: 	MOVE.B	D1,-(A0)	store the binary line no.
00:00005D1E E059            	   104: 	ROR	#8,D1		(Kludge to store a word on a
00:00005D20 1101            	   105: 	MOVE.B	D1,-(A0)	possible byte boundary)
00:00005D22 E159            	   106: 	ROL	#8,D1
00:00005D24 61001138        	   107: 	bsr	FNDLN		find this line in save area
00:00005D28 2A49            	   108: 	MOVE.L	A1,A5		save possible line pointer
00:00005D2A 6614            	   109: 	BNE	ST4		if not found, insert
00:00005D2C 61001156        	   110: 	bsr	FNDNXT		find the next line (into A1)
00:00005D30 244D            	   111: 	MOVE.L	A5,A2		pointer to line to be deleted
00:00005D32 267A1484        	   112: 	MOVE.L	TXTUNF,A3	points to top of save area
00:00005D36 6100115C        	   113: 	bsr	MVUP		move up to delete
00:00005D3A 23CA000071B8    	   114: 	MOVE.L	A2,TXTUNF	update the end pointer
                            	   115: ST4
00:00005D40 200C            	   116: 	MOVE.L	A4,D0		calculate the length of new line
00:00005D42 9088            	   117: 	SUB.L	A0,D0
00:00005D44 B0BC00000003    	   118: 	CMP.L	#3,D0		is it just a line no. & CR?
00:00005D4A 6FA2            	   119: 	BLE	ST3		if so, it was just a delete
00:00005D4C 267A146A        	   120: 	MOVE.L TXTUNF,A3	compute new end
00:00005D50 2C4B            	   121: 	MOVE.L A3,A6
00:00005D52 D7C0            	   122: 	ADD.L	D0,A3
00:00005D54 203A145A        	   123: 	MOVE.L StrArea,D0	see if there's enough room
00:00005D58 B08B            	   124: 	CMP.L	A3,D0
00:00005D5A 6300104E        	   125: 	BLS	QSORRY		if not, say so
00:00005D5E 23CB000071B8    	   126: 	MOVE.L	A3,TXTUNF	if so, store new end position
00:00005D64 224E            	   127: 	MOVE.L	A6,A1		points to old unfilled area
00:00005D66 244D            	   128: 	MOVE.L	A5,A2		points to beginning of move area
00:00005D68 6100113E        	   129: 	bsr	MVDOWN		move things out of the way
00:00005D6C 2248            	   130: 	MOVE.L	A0,A1		set up to do the insertion
00:00005D6E 244D            	   131: 	MOVE.L	A5,A2
00:00005D70 264C            	   132: 	MOVE.L	A4,A3
00:00005D72 61001120        	   133: 	bsr	MVUP		do it
00:00005D76 6000FF76        	   134: 	BRA	ST3		go back and get another line
                            	   135: 
                            	   136: ClearStringArea:
00:00005D7A 203A1440        	   137: 	move.l VARBGN,d0
00:00005D7E 90BC00000800    	   138: 	SUB.L #STRAREASIZE,D0
00:00005D84 23C0000071B0    	   139: 	MOVE.L D0,StrArea
00:00005D8A 23C0000071B4    	   140: 	MOVE.L D0,LastStr
00:00005D90 207A141E        	   141: 	move.l StrArea,a0
00:00005D94 4298            	   142: 	clr.l (a0)+
00:00005D96 4298            	   143: 	clr.l (a0)+
00:00005D98 4E75            	   144: 	rts
                            	   145: 
                            	   146: ClearStringStack:
00:00005D9A 7007            	   147: 	moveq #7,d0
00:00005D9C 227A140A        	   148: 	move.l STRSTK,a1
                            	   149: .0001
00:00005DA0 4299            	   150: 	clr.l (a1)+				; clear the string stack
00:00005DA2 51C8FFFC        	   151: 	dbra d0,.0001
00:00005DA6 23C9000071AC    	   152: 	move.l a1,StrSp		; set string stack stack pointer
00:00005DAC 4E75            	   153: 	rts
                            	   154: 
                            	   155: 	even
                            	   156: 
                            	   157: *******************************************************************
                            	   158: *
                            	   159: * *** Tables *** DIRECT *** EXEC ***
                            	   160: *
                            	   161: * This section of the code tests a string against a table. When
                            	   162: * a match is found, control is transferred to the section of
                            	   163: * code according to the table.
                            	   164: *
                            	   165: * At 'EXEC', A0 should point to the string, A1 should point to
                            	   166: * the character table, and A2 should point to the execution
                            	   167: * table. At 'DIRECT', A0 should point to the string, A1 and
                            	   168: * A2 will be set up to point to TAB1 and TAB1_1, which are
                            	   169: * the tables of all direct and statement commands.
                            	   170: *
                            	   171: * A '.' in the string will terminate the test and the partial
                            	   172: * match will be considered as a match, e.g. 'P.', 'PR.','PRI.',
                            	   173: * 'PRIN.', or 'PRINT' will all match 'PRINT'.
                            	   174: *
                            	   175: * There are two tables: the character table and the execution
                            	   176: * table. The character table consists of any number of text items.
                            	   177: * Each item is a string of characters with the last character's
                            	   178: * high bit set to one. The execution table holds a 16-bit
                            	   179: * execution addresses that correspond to each entry in the
                            	   180: * character table.
                            	   181: *
                            	   182: * The end of the character table is a 0 byte which corresponds
                            	   183: * to the default routine in the execution table, which is
                            	   184: * executed if none of the other table items are matched.
                            	   185: *
                            	   186: * Character-matching tables:
                            	   187: TAB1
00:00005DAE 3C434F          	   188: 	DC.B	'<CO',('M'+$80)
00:00005DB1 CD
00:00005DB2 3C434F          	   189: 	DC.B	'<CO',('N'+$80)
00:00005DB5 CE
00:00005DB6 3E434F          	   190: 	DC.B	'>CO',('M'+$80)
00:00005DB9 CD
00:00005DBA 3E434F          	   191: 	DC.B	'>CO',('N'+$80)
00:00005DBD CE
00:00005DBE 3C3E434F        	   192: 	DC.B	'<>CO',('M'+$80)
00:00005DC2 CD
00:00005DC3 3C3E434F        	   193: 	DC.B	'<>CO',('N'+$80)
00:00005DC7 CE
00:00005DC8 4C4953          	   194: 	DC.B	'LIS',('T'+$80)         Direct commands
00:00005DCB D4
00:00005DCC 4C4F41          	   195: 	DC.B	'LOA',('D'+$80)
00:00005DCF C4
00:00005DD0 4E45            	   196: 	DC.B	'NE',('W'+$80)
00:00005DD2 D7
00:00005DD3 5255            	   197: 	DC.B	'RU',('N'+$80)
00:00005DD5 CE
00:00005DD6 534156          	   198: 	DC.B	'SAV',('E'+$80)
00:00005DD9 C5
00:00005DDA 434C            	   199: 	DC.B 	'CL',('S'+$80)
00:00005DDC D3
                            	   200: TAB2
00:00005DDD 4E4558          	   201: 	DC.B	'NEX',('T'+$80)         Direct / statement
00:00005DE0 D4
00:00005DE1 4C45            	   202: 	DC.B	'LE',('T'+$80)
00:00005DE3 D4
00:00005DE4 49              	   203: 	DC.B	'I',('F'+$80)
00:00005DE5 C6
00:00005DE6 474F54          	   204: 	DC.B	'GOT',('O'+$80)
00:00005DE9 CF
00:00005DEA 474F5355        	   205: 	DC.B	'GOSU',('B'+$80)
00:00005DEE C2
00:00005DEF 5245545552      	   206: 	DC.B	'RETUR',('N'+$80)
00:00005DF4 CE
00:00005DF5 5245            	   207: 	DC.B	'RE',('M'+$80)
00:00005DF7 CD
00:00005DF8 464F            	   208: 	DC.B	'FO',('R'+$80)
00:00005DFA D2
00:00005DFB 494E5055        	   209: 	DC.B	'INPU',('T'+$80)
00:00005DFF D4
00:00005E00 5052494E        	   210: 	DC.B	'PRIN',('T'+$80)
00:00005E04 D4
00:00005E05 504F4B          	   211: 	DC.B	'POK',('E'+$80)
00:00005E08 C5
00:00005E09 53544F          	   212: 	DC.B	'STO',('P'+$80)
00:00005E0C D0
00:00005E0D 4259            	   213: 	DC.B	'BY',('E'+$80)
00:00005E0F C5
00:00005E10 43414C          	   214: 	DC.B	'CAL',('L'+$80)
00:00005E13 CC
00:00005E14 4F4E4952        	   215: 	DC.B	'ONIR',('Q'+$80)
00:00005E18 D1
00:00005E19 00              	   216: 	DC.B	0
                            	   217: TAB4
00:00005E1A 504545          	   218: 	DC.B	'PEE',('K'+$80)         Functions
00:00005E1D CB
00:00005E1E 524E            	   219: 	DC.B	'RN',('D'+$80)
00:00005E20 C4
00:00005E21 4142            	   220: 	DC.B	'AB',('S'+$80)
00:00005E23 D3
00:00005E24 53495A          	   221: 	DC.B	'SIZ',('E'+$80)
00:00005E27 C5
00:00005E28 544943          	   222: 	DC.B	'TIC',('K'+$80)
00:00005E2B CB
00:00005E2C 434F52454E      	   223: 	DC.B	'COREN',('O'+$80)
00:00005E31 CF
00:00005E32 4C454654        	   224: 	DC.B	'LEFT',('$'+$80)
00:00005E36 A4
00:00005E37 5249474854      	   225: 	DC.B	'RIGHT',('$'+$80)
00:00005E3C A4
00:00005E3D 4D4944          	   226: 	DC.B	'MID',('$'+$80)
00:00005E40 A4
00:00005E41 4C45            	   227: 	DC.B	'LE',('N'+$80)
00:00005E43 CE
00:00005E44 494E            	   228: 	DC.B	'IN',('T'+$80)
00:00005E46 D4
00:00005E47 434852          	   229: 	DC.B	'CHR',('$'+$80)
00:00005E4A A4
00:00005E4B 00              	   230: 	DC.B	0
                            	   231: TAB5
00:00005E4C 54              	   232: 	DC.B	'T',('O'+$80)           "TO" in "FOR"
00:00005E4D CF
00:00005E4E 00              	   233: 	DC.B	0
                            	   234: TAB6
00:00005E4F 535445          	   235: 	DC.B	'STE',('P'+$80)         "STEP" in "FOR"
00:00005E52 D0
00:00005E53 00              	   236: 	DC.B	0
                            	   237: TAB8
00:00005E54 3E              	   238: 	DC.B	'>',('='+$80)           Relational operators
00:00005E55 BD
00:00005E56 3C              	   239: 	DC.B	'<',('>'+$80)
00:00005E57 BE
00:00005E58 BE              	   240: 	DC.B	('>'+$80)
00:00005E59 BD              	   241: 	DC.B	('='+$80)
00:00005E5A 3C              	   242: 	DC.B	'<',('='+$80)
00:00005E5B BD
00:00005E5C BC              	   243: 	DC.B	('<'+$80)
00:00005E5D 00              	   244: 	DC.B	0
00:00005E5E 00              	   245: 	DC.B	0	<- for aligning on a word boundary
                            	   246: TAB9
00:00005E5F 414E            	   247: 	DC.B	'AN',('D'+$80)
00:00005E61 C4
00:00005E62 00              	   248: 	DC.B	0
                            	   249: TAB10
00:00005E63 4F              	   250: 	DC.B	'O',('R'+$80)
00:00005E64 D2
00:00005E65 00              	   251: 	DC.B	0
                            	   252: TAB11
00:00005E66 4D4F            	   253: 	DC.B	'MO',('D'+$80)
00:00005E68 C4
00:00005E69 00              	   254: 	DC.B	0
00:00005E6A 00              	   255: 	DC.B	0
                            	   256: 
                            	   257: ; Execution address tables:
                            	   258: 	align 2
                            	   259: TAB1_1	
00:00005E6C 00005FAC        	   260: 	DC.L	INCOM
00:00005E70 00005F9E        	   261: 	DC.L	INCON
00:00005E74 00005FC4        	   262: 	DC.L	OUTCOM
00:00005E78 00005FDA        	   263: 	DC.L	OUTCON
00:00005E7C 00005FBA        	   264: 	DC.L	IOCOM
00:00005E80 00005FD0        	   265: 	DC.L	IOCON
00:00005E84 000060C4        	   266: 	DC.L	LIST			Direct commands
00:00005E88 000063A2        	   267: 	DC.L	LOAD
00:00005E8C 00005FE6        	   268: 	DC.L	NEW
00:00005E90 00006002        	   269: 	DC.L	RUN
00:00005E94 00006402        	   270: 	DC.L	SAVE
00:00005E98 00007088        	   271: 	DC.L	CLS
                            	   272: TAB2_1
00:00005E9C 00006260        	   273: 	DC.L	NEXT			Direct / statement
00:00005EA0 00006392        	   274: 	DC.L	LET
00:00005EA4 000062CC        	   275: 	DC.L	IF
00:00005EA8 0000607C        	   276: 	DC.L	GOTO
00:00005EAC 0000617A        	   277: 	DC.L	GOSUB
00:00005EB0 000061B4        	   278: 	DC.L	RETURN
00:00005EB4 000062CA        	   279: 	DC.L	REM
00:00005EB8 000061E0        	   280: 	DC.L	FOR
00:00005EBC 000062F4        	   281: 	DC.L	INPUT
00:00005EC0 000060F0        	   282: 	DC.L	PRINT
00:00005EC4 00006480        	   283: 	DC.L	POKE
00:00005EC8 00005FFA        	   284: 	DC.L	STOP
00:00005ECC 00005C44        	   285: 	DC.L	GOBYE
00:00005ED0 000064FA        	   286: 	DC.L	CALL
00:00005ED4 00006090        	   287: 	DC.L	ONIRQ
00:00005ED8 0000638A        	   288: 	DC.L	DEFLT
                            	   289: TAB4_1
00:00005EDC 00006AAA        	   290: 	DC.L	PEEK			; Functions
00:00005EE0 00006B12        	   291: 	DC.L	RND
00:00005EE4 00006B3C        	   292: 	DC.L	ABS
00:00005EE8 00006B48        	   293: 	DC.L	SIZE
00:00005EEC 00006B58        	   294: 	DC.L	TICK
00:00005EF0 00006B64        	   295: 	DC.L	CORENO
00:00005EF4 00006C76        	   296: 	DC.L	LEFT
00:00005EF8 00006C82        	   297: 	DC.L	RIGHT
00:00005EFC 00006BAC        	   298: 	DC.L	MID
00:00005F00 00006CAA        	   299: 	DC.L	LEN
00:00005F04 00006CD0        	   300: 	DC.L	INT
00:00005F08 00006CE6        	   301: 	DC.L  CHR
00:00005F0C 000067B4        	   302: 	DC.L	XP40
                            	   303: TAB5_1
00:00005F10 000061FA        	   304: 	DC.L	FR1			; "TO" in "FOR"
00:00005F14 00006D6A        	   305: 	DC.L	QWHAT
                            	   306: TAB6_1
00:00005F18 00006212        	   307: 	DC.L	FR2			; "STEP" in "FOR"
00:00005F1C 00006218        	   308: 	DC.L	FR3
                            	   309: TAB8_1
00:00005F20 000065EA        	   310: 	DC.L	XP11	>=		Relational operators
00:00005F24 000065F6        	   311: 	DC.L	XP12	<>
00:00005F28 00006602        	   312: 	DC.L	XP13	>
00:00005F2C 0000661A        	   313: 	DC.L	XP15	=
00:00005F30 0000660E        	   314: 	DC.L	XP14	<=
00:00005F34 00006628        	   315: 	DC.L	XP16	<
00:00005F38 00006646        	   316: 	DC.L	XP17
                            	   317: TAB9_1
00:00005F3C 000065A8        	   318: 	DC.L	XP_AND
00:00005F40 000065BE        	   319: 	DC.L	XP_ANDX
                            	   320: TAB10_1
00:00005F44 00006580        	   321: 	DC.L	XP_OR
00:00005F48 000065BE        	   322: 	DC.L	XP_ORX
                            	   323: TAB11_1
00:00005F4C 00006786        	   324: 	DC.L	XP_MOD
00:00005F50 00006750        	   325: 	DC.L	XP31
                            	   326: 	even
                            	   327: 	
                            	   328: DIRECT
00:00005F54 33FC0001000071C4	   329: 	move.w #1,DIRFLG
00:00005F5C 43FAFE50        	   330: 	LEA	TAB1,A1
00:00005F60 45FAFF0A        	   331: 	LEA	TAB1_1,A2
                            	   332: EXEC
00:00005F64 610010B0        	   333: 	bsr	IGNBLK				; ignore leading blanks
00:00005F68 2648            	   334: 	MOVE.L A0,A3			; save the pointer
00:00005F6A 4202            	   335: 	CLR.B	D2					; clear match flag
                            	   336: EXLP
00:00005F6C 1018            	   337: 	MOVE.B (A0)+,D0	 	; get the program character
00:00005F6E 1211            	   338: 	MOVE.B (A1),D1 		; get the table character
00:00005F70 6604            	   339: 	BNE	EXNGO					; If end of table,
00:00005F72 204B            	   340: 	MOVE.L A3,A0			; restore the text pointer and...
00:00005F74 6024            	   341: 	BRA	EXGO					; execute the default.
                            	   342: EXNGO
00:00005F76 1600            	   343: 	MOVE.B D0,D3		 	; Else check for period...
00:00005F78 C602            	   344: 	AND.B	D2,D3				; and a match.
00:00005F7A B63C002E        	   345: 	CMP.B	#'.',D3
00:00005F7E 671A            	   346: 	BEQ	EXGO					; if so, execute
00:00005F80 C23C007F        	   347: 	AND.B	#$7F,D1 		; ignore the table's high bit
00:00005F84 B200            	   348: 	CMP.B	D0,D1				; is there a match?
00:00005F86 670C            	   349: 	BEQ	EXMAT
00:00005F88 588A            	   350: 	ADDQ.L #4,A2			; if not, try the next entry
00:00005F8A 204B            	   351: 	MOVE.L A3,A0			; reset the program pointer
00:00005F8C 4202            	   352: 	CLR.B	D2					; sorry, no match
                            	   353: EX1
00:00005F8E 4A19            	   354: 	TST.B	(A1)+				; get to the end of the entry
00:00005F90 6AFC            	   355: 	BPL	EX1
00:00005F92 60D8            	   356: 	BRA	EXLP					; back for more matching
                            	   357: EXMAT
00:00005F94 74FF            	   358: 	MOVEQ	#-1,D2			; we've got a match so far
00:00005F96 4A19            	   359: 	TST.B	(A1)+				; end of table entry?
00:00005F98 6AD2            	   360: 	BPL	EXLP					; if not, go back for more
                            	   361: EXGO
00:00005F9A 2652            	   362: 	MOVE.L (A2),A3		; execute the appropriate routine
00:00005F9C 4ED3            	   363: 	JMP	(A3)
                            	   364: 
                            	   365: *******************************************************************
                            	   366: * Console redirection
                            	   367: * <COM will redirect input to the COM port
                            	   368: * >COM will redirect output to the COM port
                            	   369: * <CON will redirect input to the console
                            	   370: * >CON will redirect output to the console
                            	   371: * <>COM will redirect input and output to the COM port
                            	   372: * <>CON will redirect input and output to the console
                            	   373: *******************************************************************
                            	   374: INCON
00:00005F9E 23FC000070B00000	   375: 	move.l	#INC1,INPPTR
00:00005FA6 7168
00:00005FA8 600001C8        	   376: 	bra			FINISH
                            	   377: INCOM
00:00005FAC 23FC000070D80000	   378: 	move.l	#AUXIN,INPPTR
00:00005FB4 7168
00:00005FB6 600001BA        	   379: 	bra			FINISH
                            	   380: IOCOM
00:00005FBA 23FC000070D80000	   381: 	move.l	#AUXIN,INPPTR
00:00005FC2 7168
                            	   382: OUTCOM
00:00005FC4 13FC0002000400A8	   383: 	move.b #2,OutputDevice
00:00005FCC 600001A4        	   384: 	bra	FINISH
                            	   385: IOCON
00:00005FD0 23FC000070B00000	   386: 	move.l	#INC1,INPPTR
00:00005FD8 7168
                            	   387: OUTCON
00:00005FDA 13FC0001000400A8	   388: 	move.b #1,OutputDevice
00:00005FE2 6000018E        	   389: 	bra	FINISH
                            	   390: 
                            	   391: *******************************************************************
                            	   392: *
                            	   393: * What follows is the code to execute direct and statement
                            	   394: * commands. Control is transferred to these points via the command
                            	   395: * table lookup code of 'DIRECT' and 'EXEC' in the last section.
                            	   396: * After the command is executed, control is transferred to other
                            	   397: * sections as follows:
                            	   398: *
                            	   399: * For 'LIST', 'NEW', and 'STOP': go back to the warm start point.
                            	   400: * For 'RUN': go execute the first stored line if any; else go
                            	   401: * back to the warm start point.
                            	   402: * For 'GOTO' and 'GOSUB': go execute the target line.
                            	   403: * For 'RETURN' and 'NEXT'; go back to saved return line.
                            	   404: * For all others: if 'CURRNT' is 0, go to warm start; else go
                            	   405: * execute next command. (This is done in 'FINISH'.)
                            	   406: *
                            	   407: *******************************************************************
                            	   408: *
                            	   409: * *** NEW *** STOP *** RUN (& friends) *** GOTO ***
                            	   410: *
                            	   411: * 'NEW<CR>' sets TXTUNF to point to TXTBGN
                            	   412: *
                            	   413: * 'STOP<CR>' goes back to WSTART
                            	   414: *
                            	   415: * 'RUN<CR>' finds the first stored line, stores its address
                            	   416: * in CURRNT, and starts executing it. Note that only those
                            	   417: * commands in TAB2 are legal for a stored program.
                            	   418: *
                            	   419: * There are 3 more entries in 'RUN':
                            	   420: * 'RUNNXL' finds next line, stores it's address and executes it.
                            	   421: * 'RUNTSL' stores the address of this line and executes it.
                            	   422: * 'RUNSML' continues the execution on same line.
                            	   423: *
                            	   424: * 'GOTO expr<CR>' evaluates the expression, finds the target
                            	   425: * line, and jumps to 'RUNTSL' to do it.
                            	   426: *
                            	   427: NEW
00:00005FE6 61000D70        	   428: 	bsr	ENDCHK
00:00005FEA 23FAFC5C000071B8	   429: 	MOVE.L TXTBGN,TXTUNF	set the end pointer
00:00005FF2 6100FD86        	   430: 	bsr ClearStringArea
00:00005FF6 6100FDA2        	   431: 	bsr ClearStringStack
                            	   432: 
                            	   433: STOP
00:00005FFA 61000D5C        	   434: 	bsr	ENDCHK
00:00005FFE 6000FCBA        	   435: 	BRA	WSTART
                            	   436: 
                            	   437: RUN
00:00006002 4279000071C4    	   438: 	clr.w DIRFLG
00:00006008 61000D4E        	   439: 	bsr	ENDCHK
00:0000600C 207AFC3A        	   440: 	MOVE.L	TXTBGN,A0	set pointer to beginning
00:00006010 23C800007170    	   441: 	MOVE.L	A0,CURRNT
                            	   442: 
                            	   443: RUNNXL
00:00006016 4AB900007170    	   444: 	TST.L	CURRNT		; executing a program?
00:0000601C 6700FC9C        	   445: 	beq	WSTART			; if not, we've finished a direct stat.
00:00006020 4AB9000071A4    	   446: 	tst.l	IRQROUT		; are we handling IRQ's ?
00:00006026 672E            	   447: 	beq	RUN1
00:00006028 4A39000400A0    	   448: 	tst.b IRQFlag		; was there an IRQ ?
00:0000602E 6726            	   449: 	beq	RUN1
00:00006030 4239000400A0    	   450: 	clr.b IRQFlag
                            	   451: 
                            	   452: 	; same code as GOSUB	
                            	   453: ;	sub.l #128,sp		; allocate storage for local variables
                            	   454: ;	move.l STKFP,-(sp)
                            	   455: ;	move.l sp,STKFP
00:00006036 61000EB4        	   456: 	bsr	PUSHA				; save the current 'FOR' parameters
00:0000603A 2F08            	   457: 	MOVE.L A0,-(SP)	; save text pointer
00:0000603C 2F3A1132        	   458: 	MOVE.L CURRNT,-(SP)	found it, save old 'CURRNT'...
00:00006040 2F3A1136        	   459: 	MOVE.L STKGOS,-(SP)	and 'STKGOS'
00:00006044 42B900007180    	   460: 	CLR.L	LOPVAR		; load new values
00:0000604A 23CF00007178    	   461: 	MOVE.L SP,STKGOS
                            	   462: 
00:00006050 227A1152        	   463: 	move.l IRQROUT,a1
00:00006054 600C            	   464: 	bra	RUNTSL
                            	   465: RUN1
00:00006056 7200            	   466: 	CLR.L	D1			; else find the next line number
00:00006058 2248            	   467: 	MOVE.L A0,A1
00:0000605A 61000E10        	   468: 	bsr	FNDLNP
00:0000605E 6500FC5A        	   469: 	BCS	WSTART		; if we've fallen off the end, stop
                            	   470: 
                            	   471: RUNTSL
00:00006062 23C900007170    	   472: 	MOVE.L	A1,CURRNT	set CURRNT to point to the line no.
00:00006068 2049            	   473: 	MOVE.L	A1,A0		set the text pointer to
00:0000606A 5488            	   474: 	ADDQ.L	#2,A0		the start of the line text
                            	   475: 
                            	   476: RUNSML
00:0000606C 61000FFC        	   477: 	bsr	CHKIO		see if a control-C was pressed
00:00006070 43FAFD6B        	   478: 	LEA	TAB2,A1 	find command in TAB2
00:00006074 45FAFE26        	   479: 	LEA	TAB2_1,A2
00:00006078 6000FEEA        	   480: 	BRA	EXEC		and execute it
                            	   481: 
                            	   482: GOTO	
00:0000607C 610004E0        	   483: 	bsr	INT_EXPR	; evaluate the following expression
00:00006080 61000CD6        	   484: 	bsr	ENDCHK		; must find end of line
00:00006084 2200            	   485: 	move.l d0,d1
00:00006086 61000DD6        	   486: 	bsr	FNDLN			; find the target line
00:0000608A 66000D26        	   487: 	bne	QHOW			; no such line no.
00:0000608E 60D2            	   488: 	bra	RUNTSL		; go do it
                            	   489: 
                            	   490: ;******************************************************************
                            	   491: ; ONIRQ <line number>
                            	   492: ; ONIRQ sets up an interrupt handler which acts like a specialized
                            	   493: ; subroutine call. ONIRQ is coded like a GOTO that never executes.
                            	   494: ;******************************************************************
                            	   495: 
                            	   496: ONIRQ:
00:00006090 610004CC        	   497: 	bsr	INT_EXPR		; evaluate the following expression
00:00006094 61000CC2        	   498: 	bsr ENDCHK			; must find end of line
00:00006098 2200            	   499: 	move.l d0,d1
00:0000609A 61000DC2        	   500: 	bsr FNDLN				; find the target line
00:0000609E 660A            	   501: 	bne	ONIRQ1
00:000060A0 42B9000071A4    	   502: 	clr.l IRQROUT
00:000060A6 600000CA        	   503: 	bra	FINISH
                            	   504: ONIRQ1:
00:000060AA 23C9000071A4    	   505: 	move.l a1,IRQROUT
00:000060B0 600000C0        	   506: 	jmp	FINISH
                            	   507: 
                            	   508: 
                            	   509: WAITIRQ:
00:000060B4 61000FB4        	   510: 	jsr	CHKIO				; see if a control-C was pressed
00:000060B8 4A39000400A0    	   511: 	tst.b IRQFlag
00:000060BE 67F4            	   512: 	beq	WAITIRQ
00:000060C0 600000B0        	   513: 	jmp	FINISH
                            	   514: 
                            	   515: *******************************************************************
                            	   516: *
                            	   517: * *** LIST *** PRINT ***
                            	   518: *
                            	   519: * LIST has two forms:
                            	   520: * 'LIST<CR>' lists all saved lines
                            	   521: * 'LIST #<CR>' starts listing at the line #
                            	   522: * Control-S pauses the listing, control-C stops it.
                            	   523: *
                            	   524: * PRINT command is 'PRINT ....:' or 'PRINT ....<CR>'
                            	   525: * where '....' is a list of expressions, formats, back-arrows,
                            	   526: * and strings.	These items a separated by commas.
                            	   527: *
                            	   528: * A format is a pound sign followed by a number.  It controls
                            	   529: * the number of spaces the value of an expression is going to
                            	   530: * be printed in.  It stays effective for the rest of the print
                            	   531: * command unless changed by another format.  If no format is
                            	   532: * specified, 11 positions will be used.
                            	   533: *
                            	   534: * A string is quoted in a pair of single- or double-quotes.
                            	   535: *
                            	   536: * An underline (back-arrow) means generate a <CR> without a <LF>
                            	   537: *
                            	   538: * A <CR LF> is generated after the entire list has been printed
                            	   539: * or if the list is empty.  If the list ends with a semicolon,
                            	   540: * however, no <CR LF> is generated.
                            	   541: *
                            	   542: 
                            	   543: LIST	
00:000060C4 61000F04        	   544: 	bsr	TSTNUM		see if there's a line no.
00:000060C8 61000C8E        	   545: 	bsr	ENDCHK		if not, we get a zero
00:000060CC 61000D90        	   546: 	bsr	FNDLN		find this or next line
                            	   547: LS1
00:000060D0 650000A0        	   548: 	BCS	FINISH		warm start if we passed the end
00:000060D4 61000EBE        	   549: 	bsr	PRTLN		print the line
00:000060D8 61000F90        	   550: 	bsr	CHKIO		check for listing halt request
00:000060DC 670C            	   551: 	BEQ	LS3
00:000060DE B03C0013        	   552: 	CMP.B	#CTRLS,D0	pause the listing?
00:000060E2 6606            	   553: 	BNE	LS3
                            	   554: LS2
00:000060E4 61000F84        	   555: 	bsr	CHKIO		if so, wait for another keypress
00:000060E8 67FA            	   556: 	BEQ	LS2
                            	   557: LS3
00:000060EA 61000D80        	   558: 	bsr	FNDLNP		find the next line
00:000060EE 60E0            	   559: 	BRA	LS1
                            	   560: 
                            	   561: PRINT	
00:000060F0 780B            	   562: 	MOVE.L #11,D4		D4 = number of print spaces
00:000060F2 61000EBE        	   563: 	bsr	TSTC		if null list and ":"
00:000060F6 3A              	   564: 	DC.B	':',PR2-*
00:000060F7 09
00:000060F8 61001184        	   565: 	bsr	CRLF		give CR-LF and continue
00:000060FC 6000FF6E        	   566: 	BRA	RUNSML		execution on the same line
                            	   567: PR2	
00:00006100 61000EB0        	   568: 	bsr	TSTC		if null list and <CR>
00:00006104 0D              	   569: 	DC.B	CR,PR0-*
00:00006105 09
00:00006106 61001176        	   570: 	bsr	CRLF		also give CR-LF and
00:0000610A 6000FF0A        	   571: 	BRA	RUNNXL		execute the next line
                            	   572: PR0
00:0000610E 61000EA2        	   573: 	bsr	TSTC				; else is it a format?
00:00006112 23              	   574: 	dc.b '#',PR1-*
00:00006113 09
00:00006114 61000448        	   575: 	bsr	INT_EXPR		; yes, evaluate expression
00:00006118 2800            	   576: 	move.l d0,d4		; and save it as print width
00:0000611A 600E            	   577: 	bra	PR3					; look for more to print
                            	   578: PR1
00:0000611C 61000E94        	   579: 	bsr	TSTC				; is character expression? (MRL)
00:00006120 24              	   580: 	dc.b '$',PR8-*
00:00006121 1B
00:00006122 6100043A        	   581: 	bsr	INT_EXPR		; yep. Evaluate expression (MRL)
00:00006126 6100FB0C        	   582: 	bsr	GOOUT				; print low byte (MRL)
                            	   583: 	bra	PR3					; look for more. (MRL)
                            	   584: PR3
00:0000612A 61000E86        	   585: 	bsr	TSTC						; if ",", go find next
00:0000612E 2C              	   586: 	dc.b ',',PR6-*
00:0000612F 07
00:00006130 61000C0C        	   587: 	bsr	FIN							; in the list.
00:00006134 60D8            	   588: 	BRA	PR0
                            	   589: PR6
00:00006136 61001146        	   590: 	bsr	CRLF						; list ends here
00:0000613A 6036            	   591: 	BRA	FINISH
                            	   592: PR8
00:0000613C 2F04            	   593: 	move.l d4,-(SP)			; save the width value
00:0000613E 61000430        	   594: 	bsr	EXPR						; evaluate the expression
00:00006142 281F            	   595: 	move.l (sp)+,d4			; restore the width
00:00006144 0C8000000002    	   596: 	cmpi.l #DT_STRING,d0	; is it a string?
00:0000614A 670C            	   597: 	beq PR9
00:0000614C F2000080        	   598: 	fmove fp0,fp1
00:00006150 7823            	   599: 	move.l #35,d4
00:00006152 61000DF6        	   600: 	bsr	PRTNUM					; print its value
00:00006156 60D2            	   601: 	bra	PR3							; more to print?
                            	   602: 	; Print a string
                            	   603: PR9
00:00006158 F239680000040600	   604: 	fmove.x fp0,_fpWork
00:00006160 323900040600    	   605: 	move.w _fpWork,d1
00:00006166 227900040604    	   606: 	move.l _fpWork+4,a1
00:0000616C 61000DD6        	   607: 	bsr PRTSTR2
00:00006170 60B8            	   608: 	bra PR3
                            	   609: 
                            	   610: FINISH
00:00006172 61000BCA        	   611: 	bsr	FIN			; Check end of command
00:00006176 60000BF2        	   612: 	BRA	QWHAT		; print "What?" if wrong
                            	   613: 
                            	   614: ;******************************************************************
                            	   615: ;
                            	   616: ; *** GOSUB *** & RETURN ***
                            	   617: ;
                            	   618: ; 'GOSUB expr:' or 'GOSUB expr<CR>' is like the 'GOTO' command,
                            	   619: ; except that the current text pointer, stack pointer, etc. are
                            	   620: ; saved so that execution can be continued after the subroutine
                            	   621: ; 'RETURN's.  In order that 'GOSUB' can be nested (and even
                            	   622: ; recursive), the save area must be stacked.  The stack pointer
                            	   623: ; is saved in 'STKGOS'.  The old 'STKGOS' is saved on the stack.
                            	   624: ; If we are in the main routine, 'STKGOS' is zero (this was done
                            	   625: ; in the initialization section of the interpreter), but we still
                            	   626: ; save it as a flag for no further 'RETURN's.
                            	   627: ;
                            	   628: ; 'RETURN<CR>' undoes everything that 'GOSUB' did, and thus
                            	   629: ; returns the execution to the command after the most recent
                            	   630: ; 'GOSUB'.  If 'STKGOS' is zero, it indicates that we never had
                            	   631: ; a 'GOSUB' and is thus an error.
                            	   632: 
                            	   633: GOSUB:
00:0000617A 4FEFFF80        	   634: 	sub.l #128,sp		; allocate storage for local variables
00:0000617E 2F3A0FF4        	   635: 	move.l STKFP,-(sp)
00:00006182 23CF00007174    	   636: 	move.l sp,STKFP
00:00006188 61000D62        	   637: 	bsr	PUSHA				; save the current 'FOR' parameters
00:0000618C 610003D0        	   638: 	bsr	INT_EXPR		; get line number
00:00006190 2F08            	   639: 	MOVE.L	A0,-(SP)	save text pointer
00:00006192 2200            	   640: 	move.l	d0,d1
00:00006194 61000CC8        	   641: 	bsr	FNDLN		find the target line
00:00006198 66000C1A        	   642: 	BNE	AHOW		if not there, say "How?"
00:0000619C 2F3A0FD2        	   643: 	MOVE.L	CURRNT,-(SP)	found it, save old 'CURRNT'...
00:000061A0 2F3A0FD6        	   644: 	MOVE.L	STKGOS,-(SP)	and 'STKGOS'
00:000061A4 42B900007180    	   645: 	CLR.L	LOPVAR		load new values
00:000061AA 23CF00007178    	   646: 	MOVE.L	SP,STKGOS
00:000061B0 6000FEB0        	   647: 	BRA	RUNTSL
                            	   648: 
                            	   649: RETURN:
00:000061B4 61000BA2        	   650: 	bsr	ENDCHK					; there should be just a <CR>
00:000061B8 223A0FBE        	   651: 	MOVE.L	STKGOS,D1		; get old stack pointer
00:000061BC 67000BAC        	   652: 	BEQ	QWHAT						; if zero, it doesn't exist
00:000061C0 2E41            	   653: 	MOVE.L	D1,SP				; else restore it
00:000061C2 23DF00007178    	   654: 	MOVE.L	(SP)+,STKGOS	; and the old 'STKGOS'
00:000061C8 23DF00007170    	   655: 	MOVE.L	(SP)+,CURRNT	; and the old 'CURRNT'
00:000061CE 205F            	   656: 	MOVE.L	(SP)+,A0		; and the old text pointer
00:000061D0 61000CDE        	   657: 	bsr	POPA						; and the old 'FOR' parameters
                            	   658: ;	move.l STKFP,sp
00:000061D4 23DF00007174    	   659: 	move.l (sp)+,STKFP
00:000061DA 4FEF0080        	   660: 	add.l #128,sp				; remove local variable storage
00:000061DE 6092            	   661: 	BRA	FINISH					; and we are back home
                            	   662: 
                            	   663: *******************************************************************
                            	   664: *
                            	   665: * *** FOR *** & NEXT ***
                            	   666: *
                            	   667: * 'FOR' has two forms:
                            	   668: * 'FOR var=exp1 TO exp2 STEP exp1' and 'FOR var=exp1 TO exp2'
                            	   669: * The second form means the same thing as the first form with a
                            	   670: * STEP of positive 1.  The interpreter will find the variable 'var'
                            	   671: * and set its value to the current value of 'exp1'.  It also
                            	   672: * evaluates 'exp2' and 'exp1' and saves all these together with
                            	   673: * the text pointer, etc. in the 'FOR' save area, which consisits of
                            	   674: * 'LOPVAR', 'LOPINC', 'LOPLMT', 'LOPLN', and 'LOPPT'.  If there is
                            	   675: * already something in the save area (indicated by a non-zero
                            	   676: * 'LOPVAR'), then the old save area is saved on the stack before
                            	   677: * the new values are stored.  The interpreter will then dig in the
                            	   678: * stack and find out if this same variable was used in another
                            	   679: * currently active 'FOR' loop.  If that is the case, then the old
                            	   680: * 'FOR' loop is deactivated. (i.e. purged from the stack)
                            	   681: *
                            	   682: * 'NEXT var' serves as the logical (not necessarily physical) end
                            	   683: * of the 'FOR' loop.  The control variable 'var' is checked with
                            	   684: * the 'LOPVAR'.  If they are not the same, the interpreter digs in
                            	   685: * the stack to find the right one and purges all those that didn't
                            	   686: * match.  Either way, it then adds the 'STEP' to that variable and
                            	   687: * checks the result with against the limit value.  If it is within
                            	   688: * the limit, control loops back to the command following the
                            	   689: * 'FOR'.  If it's outside the limit, the save area is purged and
                            	   690: * execution continues.
                            	   691: 
                            	   692: FOR
00:000061E0 61000D0A        	   693: 	bsr	PUSHA			; save the old 'FOR' save area
00:000061E4 61000B38        	   694: 	bsr	SETVAL		; set the control variable
00:000061E8 23CE00007180    	   695: 	move.l a6,LOPVAR		; save its address
00:000061EE 43FAFC5C        	   696: 	LEA	TAB5,A1 	; use 'EXEC' to test for 'TO'
00:000061F2 45FAFD1C        	   697: 	LEA	TAB5_1,A2
00:000061F6 6000FD6C        	   698: 	BRA	EXEC
                            	   699: FR1	
00:000061FA 61000354        	   700: 	bsr	NUM_EXPR		; evaluate the limit
00:000061FE F239680000007190	   701: 	FMOVE.X	FP0,LOPLMT	; save that
00:00006206 43FAFC47        	   702: 	LEA	TAB6,A1 		; use 'EXEC' to look for the
00:0000620A 45FAFD0C        	   703: 	LEA	TAB6_1,A2		; word 'STEP'
00:0000620E 6000FD54        	   704: 	BRA	EXEC
                            	   705: FR2
00:00006212 6100033C        	   706: 	bsr	NUM_EXPR		found it, get the step value
00:00006216 6006            	   707: 	BRA	FR4
                            	   708: FR3
00:00006218 F23C58000001    	   709: 	FMOVE.B #1,FP0	; not found, step defaults to 1
                            	   710: FR4
00:0000621E F239680000007184	   711: 	FMOVE.X	FP0,LOPINC	save that too
                            	   712: FR5	
00:00006226 23FA0F480000719C	   713: 	MOVE.L	CURRNT,LOPLN	save address of current line number
00:0000622E 23C8000071A0    	   714: 	MOVE.L	A0,LOPPT	and text pointer
00:00006234 2C4F            	   715: 	MOVE.L	SP,A6		dig into the stack to find 'LOPVAR'
00:00006236 600C            	   716: 	BRA	FR7
                            	   717: FR6
00:00006238 4DEE0024        	   718: 	lea 36(a6),a6			; look at next stack frame
00:0000623C BDFAFA0E        	   719: 	cmp.l ENDMEM,a6		; safety check
00:00006240 64000B28        	   720: 	bhs QWHAT
                            	   721: FR7
00:00006244 2016            	   722: 	MOVE.L	(A6),D0 	; is it zero?
00:00006246 6714            	   723: 	BEQ	FR8						; if so, we're done
00:00006248 B0BA0F36        	   724: 	CMP.L	LOPVAR,D0		; same as current LOPVAR?
00:0000624C 66EA            	   725: 	BNE	FR6						; nope, look some more
00:0000624E 244F            	   726: 	MOVE.L	SP,A2			; Else remove 9 long words from...
00:00006250 224E            	   727: 	MOVE.L	A6,A1			; inside the stack.
00:00006252 47E90024        	   728: 	lea	36(a1),a3
00:00006256 61000C50        	   729: 	bsr	MVDOWN
00:0000625A 2E4B            	   730: 	MOVE.L	A3,SP		set the SP 9 long words up
                            	   731: FR8
00:0000625C 6000FF14        	   732: 	BRA	FINISH		and continue execution
                            	   733: 
                            	   734: NEXT	
00:00006260 6100078A        	   735: 	bsr	TSTV						; get address of variable
00:00006264 65000B04        	   736: 	bcs	QWHAT						; if no variable, say "What?"
00:00006268 2240            	   737: 	move.l d0,a1				; save variable's address
                            	   738: NX0
00:0000626A 203A0F14        	   739: 	move.l LOPVAR,D0		; If 'LOPVAR' is zero, we never...
00:0000626E 67000AFA        	   740: 	beq	QWHAT						; had a FOR loop, so say "What?"
00:00006272 B3C0            	   741: 	cmp.l	d0,a1					; else we check them
00:00006274 6706            	   742: 	beq	NX3							; OK, they agree
00:00006276 61000C38        	   743: 	bsr	POPA						; nope, let's see the next frame
00:0000627A 60EE            	   744: 	bra	NX0
                            	   745: NX3	
00:0000627C F22948000004    	   746: 	fmove.x	4(a1),fp0		; get control variable's value
00:00006282 F23A48220EFE    	   747: 	fadd.x LOPINC,fp0		; add in loop increment
                            	   748: ;	BVS	QHOW		say "How?" for 32-bit overflow
00:00006288 F22968000004    	   749: 	fmove.x	fp0,4(a1)		; save control variable's new value
00:0000628E F23A48800EFE    	   750: 	fmove.x	LOPLMT,fp1	; get loop's limit value
00:00006294 F23A503A0EEC    	   751: 	ftst LOPINC
00:0000629A F293000E        	   752: 	FBGE NX1				; branch if loop increment is positive
00:0000629E F2276800        	   753: 	FMOVE.X FP0,-(a7)	; exchange FP0,FP1
00:000062A2 F2000400        	   754: 	FMOVE.X FP1,FP0
00:000062A6 F21F4880        	   755: 	FMOVE.X (a7)+,FP1
                            	   756: NX1	
00:000062AA F20000B8        	   757: 	FCMP FP0,FP1		;	test against limit
00:000062AE F2940012        	   758: 	FBLT NX2				; branch if outside limit
00:000062B2 23FA0EE800007170	   759: 	MOVE.L LOPLN,CURRNT	Within limit, go back to the...
00:000062BA 207A0EE4        	   760: 	MOVE.L LOPPT,A0	saved 'CURRNT' and text pointer.
00:000062BE 6000FEB2        	   761: 	BRA	FINISH
                            	   762: NX2
00:000062C2 61000BEC        	   763: 	bsr	POPA		purge this loop
00:000062C6 6000FEAA        	   764: 	BRA	FINISH
                            	   765: 
                            	   766: *******************************************************************
                            	   767: *
                            	   768: * *** REM *** IF *** INPUT *** LET (& DEFLT) ***
                            	   769: *
                            	   770: * 'REM' can be followed by anything and is ignored by the
                            	   771: * interpreter.
                            	   772: *
                            	   773: * 'IF' is followed by an expression, as a condition and one or
                            	   774: * more commands (including other 'IF's) separated by colons.
                            	   775: * Note that the word 'THEN' is not used.  The interpreter evaluates
                            	   776: * the expression.  If it is non-zero, execution continues.  If it
                            	   777: * is zero, the commands that follow are ignored and execution
                            	   778: * continues on the next line.
                            	   779: *
                            	   780: * 'INPUT' is like the 'PRINT' command, and is followed by a list
                            	   781: * of items.  If the item is a string in single or double quotes,
                            	   782: * or is an underline (back arrow), it has the same effect as in
                            	   783: * 'PRINT'.  If an item is a variable, this variable name is
                            	   784: * printed out followed by a colon, then the interpreter waits for
                            	   785: * an expression to be typed in.  The variable is then set to the
                            	   786: * value of this expression.  If the variable is preceeded by a
                            	   787: * string (again in single or double quotes), the string will be
                            	   788: * displayed followed by a colon.  The interpreter the waits for an
                            	   789: * expression to be entered and sets the variable equal to the
                            	   790: * expression's value.  If the input expression is invalid, the
                            	   791: * interpreter will print "What?", "How?", or "Sorry" and reprint
                            	   792: * the prompt and redo the input.  The execution will not terminate
                            	   793: * unless you press control-C.  This is handled in 'INPERR'.
                            	   794: *
                            	   795: * 'LET' is followed by a list of items separated by commas.
                            	   796: * Each item consists of a variable, an equals sign, and an
                            	   797: * expression.  The interpreter evaluates the expression and sets
                            	   798: * the variable to that value.  The interpreter will also handle
                            	   799: * 'LET' commands without the word 'LET'.  This is done by 'DEFLT'.
                            	   800: 
                            	   801: REM
00:000062CA 600A            	   802: 	BRA	IF2		skip the rest of the line
                            	   803: 
                            	   804: IF
00:000062CC 61000290        	   805: 	bsr	INT_EXPR		evaluate the expression
                            	   806: IF1
00:000062D0 4A80            	   807: 	TST.L	d0		is it zero?
00:000062D2 6600FD98        	   808: 	BNE	RUNSML		if not, continue
                            	   809: IF2
00:000062D6 2248            	   810: 	MOVE.L	A0,A1
00:000062D8 7200            	   811: 	CLR.L	D1
00:000062DA 61000BAA        	   812: 	bsr	FNDSKP		if so, skip the rest of the line
00:000062DE 6400FD82        	   813: 	BCC	RUNTSL		and run the next line
00:000062E2 6000F9D6        	   814: 	BRA	WSTART		if no next line, do a warm start
                            	   815: 
00:000062E6 2E7A0E94        	   816: INPERR	MOVE.L	STKINP,SP	restore the old stack pointer
00:000062EA 23DF00007170    	   817: 	MOVE.L	(SP)+,CURRNT	and old 'CURRNT'
00:000062F0 588F            	   818: 	ADDQ.L	#4,SP
00:000062F2 205F            	   819: 	MOVE.L	(SP)+,A0	and old text pointer
                            	   820: 
                            	   821: INPUT	
00:000062F4 2F08            	   822: 	MOVE.L	A0,-(SP)	save in case of error
00:000062F6 61000278        	   823: 	bsr EXPR
00:000062FA 0C000002        	   824: 	cmpi.b #DT_STRING,d0
00:000062FE 6622            	   825: 	bne IP6
00:00006300 F239680000040600	   826: 	fmove.x fp0,_fpWork
00:00006308 323900040600    	   827: 	move.w _fpWork,d1
00:0000630E 227900040604    	   828: 	move.l _fpWork+4,a1
00:00006314 61000C2E        	   829: 	bsr PRTSTR2
                            	   830: ;	bsr	QTSTG		is next item a string?
                            	   831: ;	BRA.S	IP2		nope
                            	   832: IP7
00:00006318 610006D2        	   833: 	bsr	TSTV		yes, but is it followed by a variable?
00:0000631C 655C            	   834: 	BCS	IP4		if not, branch
00:0000631E 2440            	   835: 	MOVE.L	D0,A2		put away the variable's address
00:00006320 601E            	   836: 	BRA	IP3		if so, input to variable
                            	   837: IP6
00:00006322 2057            	   838: 	move.l (sp),a0	; restore text pointer
00:00006324 60F2            	   839: 	bra IP7
                            	   840: IP2
00:00006326 2F08            	   841: 	MOVE.L	A0,-(SP)	save for 'PRTSTG'
00:00006328 610006C2        	   842: 	bsr	TSTV		must be a variable now
00:0000632C 65000A3C        	   843: 	BCS	QWHAT		"What?" it isn't?
00:00006330 2440            	   844: 	MOVE.L	D0,A2		put away the variable's address
00:00006332 1410            	   845: 	MOVE.B	(A0),D2 	get ready for 'PRTSTG'
00:00006334 4200            	   846: 	CLR.B	D0
00:00006336 1080            	   847: 	MOVE.B	D0,(A0)
00:00006338 225F            	   848: 	MOVE.L	(SP)+,A1
00:0000633A 61000BE6        	   849: 	bsr	PRTSTG		print string as prompt
00:0000633E 1082            	   850: 	MOVE.B	D2,(A0) 	restore text
                            	   851: IP3
00:00006340 2F08            	   852: 	MOVE.L	A0,-(SP)	save in case of error
00:00006342 2F3A0E2C        	   853: 	MOVE.L	CURRNT,-(SP)	also save 'CURRNT'
00:00006346 23FCFFFFFFFF0000	   854: 	MOVE.L	#-1,CURRNT	flag that we are in INPUT
00:0000634E 7170
00:00006350 23CF0000717C    	   855: 	MOVE.L	SP,STKINP	save the stack pointer too
00:00006356 2F0A            	   856: 	MOVE.L	A2,-(SP)	save the variable address
00:00006358 103C003A        	   857: 	MOVE.B	#':',D0         print a colon first
00:0000635C 61000A62        	   858: 	bsr	GETLN		then get an input line
00:00006360 41FA0E66        	   859: 	LEA	BUFFER,A0	point to the buffer
00:00006364 6100020A        	   860: 	bsr	EXPR		evaluate the input
00:00006368 245F            	   861: 	MOVE.L	(SP)+,A2	restore the variable address
00:0000636A 2480            	   862: 	move.l d0,(a2)			; save data type
00:0000636C F22A68000004    	   863: 	FMOVE.X	FP0,4(A2) 	; save value in variable
00:00006372 23DF00007170    	   864: 	MOVE.L	(SP)+,CURRNT	restore old 'CURRNT'
00:00006378 205F            	   865: 	MOVE.L	(SP)+,A0	and the old text pointer
                            	   866: IP4
00:0000637A 588F            	   867: 	ADDQ.L	#4,SP		clean up the stack
00:0000637C 61000C34        	   868: 	bsr	TSTC		is the next thing a comma?
00:00006380 2C              	   869: 	DC.B	',',IP5-*
00:00006381 05
00:00006382 6000FF70        	   870: 	BRA	INPUT		yes, more items
                            	   871: IP5
00:00006386 6000FDEA        	   872: 	BRA	FINISH
                            	   873: 
                            	   874: DEFLT
00:0000638A 0C10000D        	   875: 	CMP.B	#CR,(A0)	; empty line is OK
00:0000638E 6700FDE2        	   876: 	BEQ	FINISH			; else it is 'LET'
                            	   877: 
                            	   878: LET
00:00006392 6100098A        	   879: 	bsr	SETVAL		 	; do the assignment
00:00006396 61000C1A        	   880: 	bsr	TSTC				; check for more 'LET' items
00:0000639A 2C              	   881: 	DC.B	',',LT1-*
00:0000639B 03
00:0000639C 60F4            	   882: 	BRA	LET
                            	   883: LT1
00:0000639E 6000FDD2        	   884: 	BRA	FINISH			; until we are finished.
                            	   885: 
                            	   886: 
                            	   887: *******************************************************************
                            	   888: *
                            	   889: * *** LOAD *** & SAVE ***
                            	   890: *
                            	   891: * These two commands transfer a program to/from an auxiliary
                            	   892: * device such as a cassette, another computer, etc.  The program
                            	   893: * is converted to an easily-stored format: each line starts with
                            	   894: * a colon, the line no. as 4 hex digits, and the rest of the line.
                            	   895: * At the end, a line starting with an '@' sign is sent.  This
                            	   896: * format can be read back with a minimum of processing time by
                            	   897: * the 68000.
                            	   898: *
                            	   899: LOAD	
00:000063A2 207AF8A4        	   900: 	MOVE.L TXTBGN,A0	set pointer to start of prog. area
00:000063A6 103C000D        	   901: 	MOVE.B #CR,D0		For a CP/M host, tell it we're ready...
00:000063AA 6100F890        	   902: 	BSR	GOAUXO		by sending a CR to finish PIP command.
                            	   903: LOD1	
00:000063AE 6100F890        	   904: 	BSR	GOAUXI		look for start of line
00:000063B2 67FA            	   905: 	BEQ	LOD1
00:000063B4 B03C0040        	   906: 	CMP.B	#'@',D0         end of program?
00:000063B8 671E            	   907: 	BEQ	LODEND
00:000063BA B03C003A        	   908: 	CMP.B	#':',D0         if not, is it start of line?
00:000063BE 66EE            	   909: 	BNE	LOD1		if not, wait for it
00:000063C0 6120            	   910: 	BSR	GBYTE		get first byte of line no.
00:000063C2 10C1            	   911: 	MOVE.B	D1,(A0)+	store it
00:000063C4 611C            	   912: 	BSR	GBYTE		get 2nd bye of line no.
00:000063C6 10C1            	   913: 	MOVE.B	D1,(A0)+	store that, too
                            	   914: LOD2
00:000063C8 6100F876        	   915: 	BSR	GOAUXI		get another text char.
00:000063CC 67FA            	   916: 	BEQ	LOD2
00:000063CE 10C0            	   917: 	MOVE.B	D0,(A0)+	store it
00:000063D0 B03C000D        	   918: 	CMP.B	#CR,D0		is it the end of the line?
00:000063D4 66F2            	   919: 	BNE	LOD2		if not, go back for more
00:000063D6 60D6            	   920: 	BRA	LOD1		if so, start a new line
                            	   921: LODEND
00:000063D8 23C8000071B8    	   922: 	MOVE.L	A0,TXTUNF	set end-of program pointer
00:000063DE 6000F8DA        	   923: 	BRA	WSTART		back to direct mode
                            	   924: 
                            	   925: GBYTE
00:000063E2 7401            	   926: 	MOVEQ	#1,D2		get two hex characters from auxiliary
00:000063E4 7200            	   927: 	CLR.L	D1		and store them as a byte in D1
                            	   928: GBYTE1	
00:000063E6 6100F858        	   929: 	BSR	GOAUXI		get a char.
00:000063EA 67FA            	   930: 	BEQ	GBYTE1
00:000063EC B03C0041        	   931: 	CMP.B	#'A',D0
00:000063F0 6502            	   932: 	BCS	GBYTE2
00:000063F2 5F00            	   933: 	SUBQ.B	#7,D0		if greater than 9, adjust
                            	   934: GBYTE2
00:000063F4 C03C000F        	   935: 	AND.B	#$F,D0		strip ASCII
00:000063F8 E909            	   936: 	LSL.B	#4,D1		put nybble into the result
00:000063FA 8200            	   937: 	OR.B	D0,D1
00:000063FC 51CAFFE8        	   938: 	DBRA	D2,GBYTE1	get another char.
00:00006400 4E75            	   939: 	RTS
                            	   940: 
                            	   941: SAVE
00:00006402 207AF844        	   942: 	MOVE.L	TXTBGN,A0	set pointer to start of prog. area
00:00006406 227A0DB0        	   943: 	MOVE.L	TXTUNF,A1	set pointer to end of prog. area
                            	   944: SAVE1	
00:0000640A 103C000D        	   945: 	MOVE.B	#CR,D0		send out a CR & LF (CP/M likes this)
00:0000640E 6100F82C        	   946: 	BSR	GOAUXO
00:00006412 103C000A        	   947: 	MOVE.B	#LF,D0
00:00006416 6100F824        	   948: 	BSR	GOAUXO
00:0000641A B3C8            	   949: 	CMP.L	A0,A1		are we finished?
00:0000641C 631E            	   950: 	BLS	SAVEND
00:0000641E 103C003A        	   951: 	MOVE.B	#':',D0         if not, start a line
00:00006422 6100F818        	   952: 	BSR	GOAUXO
00:00006426 1218            	   953: 	MOVE.B	(A0)+,D1	send first half of line no.
00:00006428 6136            	   954: 	BSR	PBYTE
00:0000642A 1218            	   955: 	MOVE.B	(A0)+,D1	and send 2nd half
00:0000642C 6132            	   956: 	BSR	PBYTE
                            	   957: SAVE2
00:0000642E 1018            	   958: 	MOVE.B	(A0)+,D0	get a text char.
00:00006430 B03C000D        	   959: 	CMP.B	#CR,D0		is it the end of the line?
00:00006434 67D4            	   960: 	BEQ	SAVE1		if so, send CR & LF and start new line
00:00006436 6100F804        	   961: 	BSR	GOAUXO		send it out
00:0000643A 60F2            	   962: 	BRA	SAVE2		go back for more text
                            	   963: SAVEND
00:0000643C 103C0040        	   964: 	MOVE.B	#'@',D0         send end-of-program indicator
00:00006440 6100F7FA        	   965: 	BSR	GOAUXO
00:00006444 103C000D        	   966: 	MOVE.B	#CR,D0		followed by a CR & LF
00:00006448 6100F7F2        	   967: 	BSR	GOAUXO
00:0000644C 103C000A        	   968: 	MOVE.B	#LF,D0
00:00006450 6100F7EA        	   969: 	BSR	GOAUXO
00:00006454 103C001A        	   970: 	MOVE.B	#$1A,D0 	and a control-Z to end the CP/M file
00:00006458 6100F7E2        	   971: 	BSR	GOAUXO
00:0000645C 6000F85C        	   972: 	BRA	WSTART		then go do a warm start
                            	   973: 
00:00006460 7401            	   974: PBYTE	MOVEQ	#1,D2		send two hex characters from D1's low byte
00:00006462 E919            	   975: PBYTE1	ROL.B	#4,D1		get the next nybble
00:00006464 1001            	   976: 	MOVE.B	D1,D0
00:00006466 C03C000F        	   977: 	AND.B	#$F,D0		strip off garbage
00:0000646A D03C0030        	   978: 	ADD.B	#'0',D0         make it into ASCII
00:0000646E B03C0039        	   979: 	CMP.B	#'9',D0
00:00006472 6302            	   980: 	BLS	PBYTE2
00:00006474 5E00            	   981: 	ADDQ.B	#7,D0		adjust if greater than 9
00:00006476 6100F7C4        	   982: PBYTE2	BSR	GOAUXO		send it out
00:0000647A 51CAFFE6        	   983: 	DBRA	D2,PBYTE1	then send the next nybble
00:0000647E 4E75            	   984: 	RTS
                            	   985: 
                            	   986: *******************************************************************
                            	   987: *
                            	   988: * *** POKE *** & CALL ***
                            	   989: *
                            	   990: * 'POKE expr1,expr2' stores the byte from 'expr2' into the memory
                            	   991: * address specified by 'expr1'.
                            	   992: *
                            	   993: * 'CALL expr' jumps to the machine language subroutine whose
                            	   994: * starting address is specified by 'expr'.  The subroutine can use
                            	   995: * all registers but must leave the stack the way it found it.
                            	   996: * The subroutine returns to the interpreter by executing an RTS.
                            	   997: *
                            	   998: POKE
00:00006480 1E3C0042        	   999: 	move.b #'B',d7
00:00006484 1210            	  1000: 	move.b (a0),d1
00:00006486 0C01002E        	  1001: 	cmpi.b #'.',d1
00:0000648A 6620            	  1002: 	bne .0001
00:0000648C 5248            	  1003: 	addq #1,a0
00:0000648E 1210            	  1004: 	move.b (a0),d1
00:00006490 0C010042        	  1005: 	cmpi.b #'B',d1
00:00006494 6712            	  1006: 	beq .0002
00:00006496 0C010057        	  1007: 	cmpi.b #'W',d1
00:0000649A 670C            	  1008: 	beq .0002
00:0000649C 0C01004C        	  1009: 	cmpi.b #'L',d1
00:000064A0 6706            	  1010: 	beq .0002
00:000064A2 0C010046        	  1011: 	cmpi.b #'F',d1
00:000064A6 664E            	  1012: 	bne	PKER
                            	  1013: .0002
00:000064A8 5248            	  1014: 	addq #1,a0
00:000064AA 1E01            	  1015: 	move.b d1,d7
                            	  1016: .0001
00:000064AC 610000B0        	  1017: 	BSR	INT_EXPR		get the memory address
00:000064B0 61000B00        	  1018: 	bsr	TSTC		it must be followed by a comma
00:000064B4 2C              	  1019: 	DC.B	',',PKER-*
00:000064B5 41
00:000064B6 2F00            	  1020: 	move.l d0,-(sp)		; save the address
00:000064B8 61000096        	  1021: 	BSR	NUM_EXPR			; get the value to be POKE'd
00:000064BC 225F            	  1022: 	move.l	(sp)+,a1	; get the address back
00:000064BE 0C070042        	  1023: 	CMPI.B #'B',D7
00:000064C2 6608            	  1024: 	BNE .0003
00:000064C4 F2117800        	  1025: 	FMOVE.B	FP0,(A1) 	store the byte in memory
00:000064C8 6000FCA8        	  1026: 	BRA	FINISH
                            	  1027: .0003
00:000064CC 0C070057        	  1028: 	CMPI.B #'W',d7
00:000064D0 6608            	  1029: 	BNE .0004
00:000064D2 F2117000        	  1030: 	FMOVE.W FP0,(A1)
00:000064D6 6000FC9A        	  1031: 	BRA FINISH
                            	  1032: .0004
00:000064DA 0C07004C        	  1033: 	CMPI.B #'L',D7
00:000064DE 6608            	  1034: 	BNE .0005
00:000064E0 F2116000        	  1035: 	FMOVE.L FP0,(A1)
00:000064E4 6000FC8C        	  1036: 	BRA FINISH
                            	  1037: .0005
00:000064E8 0C070046        	  1038: 	CMPI.B #'F',D7
00:000064EC 6608            	  1039: 	BNE .0006
00:000064EE F2116800        	  1040: 	FMOVE.X FP0,(A1)
00:000064F2 6000FC7E        	  1041: 	BRA FINISH
                            	  1042: .0006
                            	  1043: PKER
00:000064F6 60000872        	  1044: 	BRA	QWHAT		if no comma, say "What?"
                            	  1045: 
                            	  1046: CALL	
00:000064FA 6162            	  1047: 	BSR	INT_EXPR		; get the subroutine's address
00:000064FC 4A80            	  1048: 	TST.l d0				; make sure we got a valid address
00:000064FE 670008B2        	  1049: 	BEQ QHOW				; if not, say "How?"
00:00006502 2F08            	  1050: 	MOVE.L A0,-(SP)	; save the text pointer
00:00006504 2240            	  1051: 	MOVE.L D0,A1
00:00006506 4E91            	  1052: 	JSR	(A1)				; jump to the subroutine
00:00006508 205F            	  1053: 	MOVE.L (SP)+,A0	; restore the text pointer
00:0000650A 6000FC66        	  1054: 	BRA	FINISH
                            	  1055: 
                            	  1056: ;******************************************************************
                            	  1057: ;
                            	  1058: ; *** EXPR ***
                            	  1059: ;
                            	  1060: ; 'EXPR' evaluates arithmetical or logical expressions.
                            	  1061: ; <EXPR>::=<EXPR2>
                            	  1062: ;	   <EXPR2><rel.op.><EXPR2>
                            	  1063: ; where <rel.op.> is one of the operators in TAB8 and the result
                            	  1064: ; of these operations is 1 if true and 0 if false.
                            	  1065: ; <EXPR2>::=(+ or -)<EXPR3>(+ or -)<EXPR3>(...
                            	  1066: ; where () are optional and (... are optional repeats.
                            	  1067: ; <EXPR3>::=<EXPR4>( <* or /><EXPR4> )(...
                            	  1068: ; <EXPR4>::=<variable>
                            	  1069: ;	    <function>
                            	  1070: ;	    (<EXPR>)
                            	  1071: ; <EXPR> is recursive so that the variable '@' can have an <EXPR>
                            	  1072: ; as an index, functions can have an <EXPR> as arguments, and
                            	  1073: ; <EXPR4> can be an <EXPR> in parenthesis.
                            	  1074: 
                            	  1075: ;-------------------------------------------------------------------------------
                            	  1076: ; Push a value on the stack.
                            	  1077: ;-------------------------------------------------------------------------------
                            	  1078: 
                            	  1079: XP_PUSH:
00:0000650E 225F            	  1080: 	move.l (sp)+,a1				; a1 = return address
00:00006510 2F3900040098    	  1081: 	move.l _canary,-(sp)	; push the canary
00:00006516 4FEFFFF0        	  1082: 	sub.l #16,sp					; allocate for value
00:0000651A 2E80            	  1083: 	move.l d0,(sp)				; push data type
00:0000651C F22F68000004    	  1084: 	fmove.x fp0,4(sp)			; and value
00:00006522 4ED1            	  1085: 	jmp (a1)
                            	  1086: 
                            	  1087: ;-------------------------------------------------------------------------------
                            	  1088: ; Pop value from stack into first operand.
                            	  1089: ;-------------------------------------------------------------------------------
                            	  1090: 	
                            	  1091: XP_POP:
00:00006524 225F            	  1092: 	move.l (sp)+,a1			; get return address
00:00006526 2017            	  1093: 	move.l (sp),d0			; pop data type
00:00006528 F22F48000004    	  1094: 	fmove.x 4(sp),fp0		; and data element
00:0000652E 4FEF0010        	  1095: 	add.l #16,sp
00:00006532 A2970003        	  1096: 	cchk (sp)						; check the canary
00:00006536 588F            	  1097: 	add.l #4,sp					; pop canary	
00:00006538 4ED1            	  1098: 	jmp (a1)
                            	  1099: 
                            	  1100: ;-------------------------------------------------------------------------------
                            	  1101: ; Pop value from stack into second operand.
                            	  1102: ;-------------------------------------------------------------------------------
                            	  1103: 
                            	  1104: XP_POP1:
00:0000653A 225F            	  1105: 	move.l (sp)+,a1			; get return address
00:0000653C 2217            	  1106: 	move.l (sp),d1			; pop data type
00:0000653E F22F48800004    	  1107: 	fmove.x 4(sp),fp1		; and data element
00:00006544 4FEF0010        	  1108: 	add.l #16,sp
00:00006548 A2970003        	  1109: 	cchk (sp)						; check the canary
00:0000654C 588F            	  1110: 	add.l #4,sp					; pop canary
00:0000654E 4ED1            	  1111: 	jmp (a1)
                            	  1112: 
                            	  1113: ;-------------------------------------------------------------------------------
                            	  1114: ; Get and expression and make sure it is numeric.
                            	  1115: ;-------------------------------------------------------------------------------
                            	  1116: 
                            	  1117: NUM_EXPR:
00:00006550 611E            	  1118: 	bsr EXPR
00:00006552 0C8000000001    	  1119: 	cmpi.l #DT_NUMERIC,d0
00:00006558 66000860        	  1120: 	bne ETYPE
00:0000655C 4E75            	  1121: 	rts
                            	  1122: 
                            	  1123: ;-------------------------------------------------------------------------------
                            	  1124: ; Get and expression and make sure it is numeric. Convert to integer.
                            	  1125: ;-------------------------------------------------------------------------------
                            	  1126: 
                            	  1127: INT_EXPR:
00:0000655E 6110            	  1128: 	bsr EXPR
00:00006560 0C8000000001    	  1129: 	cmpi.l #DT_NUMERIC,d0
00:00006566 66000852        	  1130: 	bne ETYPE
00:0000656A F2006000        	  1131: 	fmove.l fp0,d0
00:0000656E 4E75            	  1132: 	rts
                            	  1133: 
                            	  1134: ;-------------------------------------------------------------------------------
                            	  1135: ; The top level of the expression parser.
                            	  1136: ; Get an expression, string or numeric.
                            	  1137: ;
                            	  1138: ; EXEC will smash a lot of regs, so push the current expression value before
                            	  1139: ; doing EXEC
                            	  1140: ;-------------------------------------------------------------------------------
                            	  1141: 
                            	  1142: EXPR:
                            	  1143: EXPR_OR:
00:00006570 6124            	  1144: 	BSR EXPR_AND
00:00006572 619A            	  1145: 	BSR XP_PUSH
00:00006574 43FAF8ED        	  1146: 	LEA TAB10,A1
00:00006578 45FAF9CA        	  1147: 	LEA TAB10_1,A2
00:0000657C 6000F9E6        	  1148: 	BRA EXEC
                            	  1149: 	
                            	  1150: ;-------------------------------------------------------------------------------
                            	  1151: ; Boolean 'Or' level
                            	  1152: ;-------------------------------------------------------------------------------
                            	  1153: 
                            	  1154: XP_OR:
00:00006580 6114            	  1155: 	BSR EXPR_AND
00:00006582 61B6            	  1156: 	bsr XP_POP1
00:00006584 613E            	  1157: 	bsr CheckNumeric
00:00006586 F2016080        	  1158: 	FMOVE.L FP1,D1
00:0000658A F2006000        	  1159: 	FMOVE.L FP0,D0
00:0000658E 8081            	  1160: 	OR.L D1,D0
00:00006590 F2004000        	  1161: 	FMOVE.L D0,FP0
00:00006594 4E75            	  1162: 	rts
                            	  1163: 	
                            	  1164: ;-------------------------------------------------------------------------------
                            	  1165: ; Boolean 'And' level
                            	  1166: ;-------------------------------------------------------------------------------
                            	  1167: 
                            	  1168: EXPR_AND:
00:00006596 613E            	  1169: 	bsr EXPR_REL
00:00006598 6100FF74        	  1170: 	bsr XP_PUSH
00:0000659C 43FAF8C1        	  1171: 	LEA TAB9,A1
00:000065A0 45FAF99A        	  1172: 	LEA TAB9_1,A2
00:000065A4 6000F9BE        	  1173: 	BRA EXEC
                            	  1174: 
                            	  1175: XP_AND:
00:000065A8 612C            	  1176: 	BSR EXPR_REL
00:000065AA 618E            	  1177: 	bsr XP_POP1
00:000065AC 6116            	  1178: 	bsr CheckNumeric
00:000065AE F2016080        	  1179: 	FMOVE.L FP1,D1
00:000065B2 F2006000        	  1180: 	FMOVE.L FP0,D0
00:000065B6 C081            	  1181: 	AND.L D1,D0
00:000065B8 F2004000        	  1182: 	FMOVE.L D0,FP0
00:000065BC 4E75            	  1183: 	RTS
                            	  1184: 	
                            	  1185: XP_ANDX:
                            	  1186: XP_ORX
00:000065BE 6100FF64        	  1187: 	bsr XP_POP
00:000065C2 4E75            	  1188: 	rts
                            	  1189: 
                            	  1190: ;-------------------------------------------------------------------------------
                            	  1191: ; Check that two numeric values are being used.
                            	  1192: ;-------------------------------------------------------------------------------
                            	  1193: 
                            	  1194: CheckNumeric:
00:000065C4 0C010001        	  1195: 	CMPI.B #DT_NUMERIC,D1
00:000065C8 660007F0        	  1196: 	BNE ETYPE
00:000065CC 0C000001        	  1197: 	CMPI.B #DT_NUMERIC,D0
00:000065D0 660007E8        	  1198: 	BNE ETYPE
00:000065D4 4E75            	  1199: 	RTS
                            	  1200: 
                            	  1201: ;-------------------------------------------------------------------------------
                            	  1202: ; Relational operator level, <,<=,>=,>,=,<>
                            	  1203: ;-------------------------------------------------------------------------------
                            	  1204: 
                            	  1205: EXPR_REL:
00:000065D6 61000088        	  1206: 	bsr	EXPR2
00:000065DA 6100FF32        	  1207: 	bsr XP_PUSH
00:000065DE 43FAF874        	  1208: 	LEA	TAB8,A1 				; look up a relational operator
00:000065E2 45FAF93C        	  1209: 	LEA	TAB8_1,A2
00:000065E6 6000F97C        	  1210: 	bra	EXEC		go do it
                            	  1211: 
                            	  1212: XP11:
00:000065EA 6100FF38        	  1213: 	bsr XP_POP
00:000065EE 615C            	  1214: 	BSR	XP18		is it ">="?
00:000065F0 F2940044        	  1215: 	FBLT XPRT0		no, return D0=0
00:000065F4 6048            	  1216: 	BRA	XPRT1		else return D0=1
                            	  1217: 
                            	  1218: XP12:
00:000065F6 6100FF2C        	  1219: 	bsr XP_POP
00:000065FA 6150            	  1220: 	BSR	XP18		is it "<>"?
00:000065FC F2810038        	  1221: 	FBEQ XPRT0		no, return D0=0
00:00006600 603C            	  1222: 	BRA	XPRT1		else return D0=1
                            	  1223: 
                            	  1224: XP13:
00:00006602 6100FF20        	  1225: 	bsr XP_POP
00:00006606 6144            	  1226: 	BSR	XP18		is it ">"?
00:00006608 F295002C        	  1227: 	FBLE XPRT0		no, return D0=0
00:0000660C 6030            	  1228: 	BRA	XPRT1		else return D0=1
                            	  1229: 
                            	  1230: XP14:
00:0000660E 6100FF14        	  1231: 	bsr XP_POP
00:00006612 6138            	  1232: 	BSR	XP18		;is it "<="?
00:00006614 F2920020        	  1233: 	FBGT XPRT0	;	no, return D0=0
00:00006618 6024            	  1234: 	BRA	XPRT1		;else return D0=1
                            	  1235: 
                            	  1236: XP15:
00:0000661A 6100FF08        	  1237: 	bsr XP_POP
00:0000661E 612C            	  1238: 	BSR	XP18		; is it "="?
00:00006620 F28E0014        	  1239: 	FBNE XPRT0	;	if not, return D0=0
00:00006624 6018            	  1240: 	BRA	XPRT1		;else return D0=1
                            	  1241: XP15RT
00:00006626 4E75            	  1242: 	RTS
                            	  1243: 
                            	  1244: XP16:
00:00006628 6100FEFA        	  1245: 	bsr XP_POP
00:0000662C 611E            	  1246: 	BSR	XP18		; is it "<"?
00:0000662E F2930006        	  1247: 	FBGE XPRT0	;	if not, return D0=0
00:00006632 600A            	  1248: 	BRA	XPRT1		; else return D0=1
00:00006634 4E75            	  1249: 	RTS
                            	  1250: 
                            	  1251: XPRT0:
00:00006636 F23C58000000    	  1252: 	FMOVE.B #0,FP0	; return fp0 = 0 (false)
00:0000663C 4E75            	  1253: 	RTS
                            	  1254: 
                            	  1255: XPRT1:
00:0000663E F23C58000001    	  1256: 	FMOVE.B #1,FP0	; return fp0 = 1 (true)
00:00006644 4E75            	  1257: 	RTS
                            	  1258: 
                            	  1259: XP17:								; it's not a rel. operator
00:00006646 6100FEDC        	  1260: 	bsr XP_POP				;	return FP0=<EXPR2>
00:0000664A 4E75            	  1261: 	rts
                            	  1262: 
                            	  1263: XP18:
00:0000664C 6100FEC0        	  1264: 	bsr XP_PUSH
00:00006650 610E            	  1265: 	bsr	EXPR2					; do second <EXPR2>
00:00006652 6100FEE6        	  1266: 	bsr XP_POP1
00:00006656 6100FF6C        	  1267: 	bsr CheckNumeric
00:0000665A F20000B8        	  1268: 	fcmp fp0,fp1			; compare with the first result
00:0000665E 4E75            	  1269: 	rts								; return the result
                            	  1270: 
                            	  1271: ;-------------------------------------------------------------------------------
                            	  1272: ; Add/Subtract operator level, +,-
                            	  1273: ;-------------------------------------------------------------------------------
                            	  1274: 
                            	  1275: EXPR2
00:00006660 61000950        	  1276: 	bsr	TSTC		; negative sign?
00:00006664 2D              	  1277: 	DC.B	'-',XP21-*
00:00006665 09
00:00006666 F23C58000000    	  1278: 	FMOVE.B #0,FP0
00:0000666C 604C            	  1279: 	BRA	XP26
                            	  1280: XP21	
00:0000666E 61000942        	  1281: 	bsr	TSTC		; positive sign? ignore it
00:00006672 2B              	  1282: 	DC.B	'+',XP22-*
00:00006673 01
                            	  1283: XP22
00:00006674 610000C8        	  1284: 	BSR	EXPR3		; first <EXPR3>
                            	  1285: XP23
00:00006678 61000938        	  1286: 	bsr	TSTC		; add?
00:0000667C 2B              	  1287: 	DC.B	'+',XP25-*
00:0000667D 37
00:0000667E 6100FE8E        	  1288: 	bsr XP_PUSH
00:00006682 610000BA        	  1289: 	BSR	EXPR3					; get the second <EXPR3>
                            	  1290: XP24
00:00006686 6100FEB2        	  1291: 	bsr XP_POP1
00:0000668A B03C0001        	  1292: 	CMP.B #DT_NUMERIC,d0
00:0000668E 660C            	  1293: 	BNE .notNum
00:00006690 B23C0001        	  1294: 	CMP.B #DT_NUMERIC,d1
00:00006694 6606            	  1295: 	BNE .notNum
00:00006696 F2000422        	  1296: 	FADD FP1,FP0			; add it to the first <EXPR3>
                            	  1297: ;	FBVS	QHOW		branch if there's an overflow
00:0000669A 60DC            	  1298: 	BRA	XP23		else go back for more operations
                            	  1299: .notNum
00:0000669C B0BC00000002    	  1300: 	cmp.l #DT_STRING,d0
00:000066A2 66000716        	  1301: 	bne ETYPE
00:000066A6 B2BC00000002    	  1302: 	cmp.l #DT_STRING,d1
00:000066AC 6600070C        	  1303: 	bne ETYPE
00:000066B0 611E            	  1304: 	bsr ConcatString
00:000066B2 4E75            	  1305: 	rts
                            	  1306: 
                            	  1307: XP25
00:000066B4 610008FC        	  1308: 	bsr	TSTC							; subtract?
00:000066B8 2D              	  1309: 	dc.b	'-',XP27-*
00:000066B9 15
                            	  1310: XP26
00:000066BA 6100FE52        	  1311: 	bsr XP_PUSH
00:000066BE 617E            	  1312: 	BSR	EXPR3					; get second <EXPR3>
00:000066C0 0C000001        	  1313: 	cmpi.b #DT_NUMERIC,d0
00:000066C4 660006F4        	  1314: 	bne ETYPE
00:000066C8 F200001A        	  1315: 	FNEG FP0					; change its sign
00:000066CC 60B8            	  1316: 	JMP	XP24					; and do an addition
                            	  1317: 
                            	  1318: XP27
00:000066CE 4E75            	  1319: 	rts
                            	  1320: 
                            	  1321: ;-------------------------------------------------------------------------------
                            	  1322: ; Concatonate strings, for the '+' operator.
                            	  1323: ;
                            	  1324: ; Parameters:
                            	  1325: ;		fp0 = holds string descriptor for second string
                            	  1326: ;		fp1 = holds string descriptor for first string
                            	  1327: ;	Returns:
                            	  1328: ;		fp0 = string descriptor for combined strings
                            	  1329: ;-------------------------------------------------------------------------------
                            	  1330: 
                            	  1331: ConcatString:
00:000066D0 F239688000040600	  1332: 	fmove.x fp1,_fpWork		; save first string descriptor to memory
00:000066D8 F239680000040610	  1333: 	fmove.x fp0,_fpWork+16; save second string descriptor to memory
00:000066E0 343900040600    	  1334: 	move.w _fpWork,d2			; d2 = length of first string
00:000066E6 D47900040610    	  1335: 	add.w	_fpWork+16,d2		; add length of second string
00:000066EC 48C2            	  1336: 	ext.l d2							; make d2 a long word
00:000066EE 61000164        	  1337: 	bsr AllocateString		; allocate
00:000066F2 2849            	  1338: 	move.l a1,a4					; a4 = allocated string, saved for later
00:000066F4 2449            	  1339: 	move.l a1,a2					; a2 = allocated string
00:000066F6 3542FFFE        	  1340: 	move.w d2,-2(a2)			; save length of new string (a2)
00:000066FA 227900040604    	  1341: 	move.l _fpWork+4,a1		; a1 = pointer to string text of first string
00:00006700 2649            	  1342: 	move.l a1,a3					; compute pointer to end of first string
00:00006702 363900040600    	  1343: 	move.w _fpWork,d3			; d3 = length of first string
00:00006708 48C3            	  1344: 	ext.l d3
00:0000670A D7C3            	  1345: 	add.l d3,a3						; add length of first string
00:0000670C 61000786        	  1346: 	bsr MVUP							; move from A1 to A2 until A1=A3
00:00006710 227900040614    	  1347: 	move.l _fpWork+20,a1	; a1 = pointer to second string text
00:00006716 2649            	  1348: 	move.l a1,a3
00:00006718 363900040610    	  1349: 	move.w _fpWork+16,d3	; d3 = length of second string
00:0000671E 48C3            	  1350: 	ext.l d3
00:00006720 D7C3            	  1351: 	add.l d3,a3						; a3 points to end of second string
00:00006722 61000770        	  1352: 	bsr MVUP							; concatonate on second string
00:00006726 33C200040600    	  1353: 	move.w d2,_fpWork			; save total string length in fp work
00:0000672C 23CC00040604    	  1354: 	move.l a4,_fpWork+4		; save pointer in fp work area
00:00006732 7002            	  1355: 	moveq #DT_STRING,d0		; set return data type = string
00:00006734 F239480000040600	  1356: 	fmove.x _fpWork,fp0		; fp0 = string descriptor
00:0000673C 4E75            	  1357: 	rts
                            	  1358: 
                            	  1359: ;-------------------------------------------------------------------------------
                            	  1360: ; Multiply / Divide operator level, *,/,mod
                            	  1361: ;-------------------------------------------------------------------------------
                            	  1362: 
                            	  1363: EXPR3
00:0000673E 6168            	  1364: 	bsr	EXPR4					; get first <EXPR4>
                            	  1365: XP36
00:00006740 6100FDCC        	  1366: 	bsr XP_PUSH
                            	  1367: XP30
00:00006744 43FAF720        	  1368: 	lea TAB11,a1
00:00006748 45FAF802        	  1369: 	lea TAB11_1,a2
00:0000674C 6000F816        	  1370: 	bra EXEC
                            	  1371: XP31
00:00006750 61000860        	  1372: 	bsr	TSTC					; multiply?
00:00006754 2A              	  1373: 	dc.b	'*',XP34-*
00:00006755 11
00:00006756 6150            	  1374: 	bsr	EXPR4					; get second <EXPR4>
00:00006758 6100FDE0        	  1375: 	bsr XP_POP1
00:0000675C 6100FE66        	  1376: 	bsr CheckNumeric
00:00006760 F2000423        	  1377: 	fmul fp1,fp0			; multiply the two
00:00006764 60DA            	  1378: 	bra	XP36					; then look for more terms
                            	  1379: XP34
00:00006766 6100084A        	  1380: 	bsr	TSTC					; divide?
00:0000676A 2F              	  1381: 	dc.b	'/',XP35-*
00:0000676B 15
00:0000676C 613A            	  1382: 	bsr	EXPR4					; get second <EXPR4>
00:0000676E 6100FDCA        	  1383: 	bsr XP_POP1
00:00006772 6100FE50        	  1384: 	bsr CheckNumeric
00:00006776 F20000A0        	  1385: 	fdiv fp0,fp1			; do the division
00:0000677A F2000400        	  1386: 	fmove fp1,fp0
00:0000677E 60C0            	  1387: 	bra	XP36					; go back for any more terms
                            	  1388: XP35
00:00006780 6100FDA2        	  1389: 	bsr XP_POP
00:00006784 4E75            	  1390: 	rts
                            	  1391: XP_MOD:
00:00006786 6120            	  1392: 	bsr EXPR4
00:00006788 6100FDB0        	  1393: 	bsr XP_POP1
00:0000678C F20000A0        	  1394: 	fdiv fp0,fp1			; divide
00:00006790 F2006080        	  1395: 	fmove.l fp1,d0		; convert to integer
00:00006794 F2004180        	  1396: 	fmove.l d0,fp3		; convert back to float
00:00006798 F20001A3        	  1397: 	fmul fp0,fp3			; multiply quotient times divisor
00:0000679C F2000CA8        	  1398: 	fsub fp3,fp1			; subtract from original number
00:000067A0 F2000400        	  1399: 	fmove.x fp1,fp0		; return difference in fp0
00:000067A4 7001            	  1400: 	moveq #DT_NUMERIC,d0
00:000067A6 6098            	  1401: 	bra XP36					; go back and check for more multiply ops
                            	  1402: 	
                            	  1403: ;-------------------------------------------------------------------------------
                            	  1404: ; Lowest Level of expression evaluation.
                            	  1405: ;	Check for
                            	  1406: ;		a function or
                            	  1407: ;		a variable or
                            	  1408: ;		a number or
                            	  1409: ;		a string or
                            	  1410: ;		( expr )
                            	  1411: ;-------------------------------------------------------------------------------
                            	  1412: 
                            	  1413: EXPR4
00:000067A8 43FAF670        	  1414: 	LEA	TAB4,A1 			; find possible function
00:000067AC 45FAF72E        	  1415: 	LEA	TAB4_1,A2
00:000067B0 6000F7B2        	  1416: 	BRA	EXEC
                            	  1417: XP40
00:000067B4 61000236        	  1418: 	bsr	TSTV					; nope, not a function
00:000067B8 650C            	  1419: 	bcs	XP41					; nor a variable
00:000067BA 2240            	  1420: 	move.l d0,a1			; a1 = variable address
00:000067BC 2011            	  1421: 	move.l (a1),d0		; return type in d0
00:000067BE F22948000004    	  1422: 	fmove.x 4(a1),fp0	; if a variable, return its value in fp0
                            	  1423: EXP4RT
00:000067C4 4E75            	  1424: 	rts
                            	  1425: XP41
00:000067C6 61000802        	  1426: 	bsr	TSTNUM				; or is it a number?
00:000067CA F2000400        	  1427: 	fmove fp1,fp0
00:000067CE 0C8000000001    	  1428: 	cmpi.l #DT_NUMERIC,d0
00:000067D4 67EE            	  1429: 	beq	EXP4RT				; if so, return it in FP0
                            	  1430: XPSTNG
00:000067D6 610007DA        	  1431: 	bsr TSTC					; is it a string constant?
00:000067DA 22              	  1432: 	dc.b '"',XP44-*
00:000067DB 57
00:000067DC 163C0022        	  1433: 	move.b #'"',d3
                            	  1434: XP45
00:000067E0 2248            	  1435: 	move.l a0,a1			; record start of string in a1
00:000067E2 243C000001FF    	  1436: 	move.l #511,d2		; max 512 characters
                            	  1437: .0003	
00:000067E8 1018            	  1438: 	move.b (a0)+,d0		; get a character
00:000067EA 670E            	  1439: 	beq .0001					; should not be a NULL
00:000067EC 0C00000D        	  1440: 	cmpi.b #CR,d0			; CR means the end of line was hit without a close quote
00:000067F0 6708            	  1441: 	beq .0001
00:000067F2 B003            	  1442: 	cmp.b d3,d0				; close quote?
00:000067F4 6708            	  1443: 	beq .0002
00:000067F6 51CAFFF0        	  1444: 	dbra d2,.0003			; no close quote, go back for next char
                            	  1445: .0001
00:000067FA 600005B6        	  1446: 	bra QHOW
                            	  1447: .0002
00:000067FE 2008            	  1448: 	move.l a0,d0				; d0 = end of string pointer
00:00006800 9089            	  1449: 	sub.l a1,d0					; compute string length + 1
00:00006802 5340            	  1450: 	subq #1,d0					; subtract out closing quote
00:00006804 2400            	  1451: 	move.l d0,d2				; d2 = string length
00:00006806 2649            	  1452: 	move.l a1,a3				; a3 = pointer to string text
00:00006808 614A            	  1453: 	bsr AllocateString
00:0000680A 2449            	  1454: 	move.l a1,a2				; a2 points to new text area
00:0000680C 2849            	  1455: 	move.l a1,a4				; save a1 for later
00:0000680E 224B            	  1456: 	move.l a3,a1				; a1 = pointer to string in program
00:00006810 3542FFFE        	  1457: 	move.w d2,-2(a2)		; copy length into place
00:00006814 D7C2            	  1458: 	add.l d2,a3					; a3 points to end of string
00:00006816 6100067C        	  1459: 	bsr MVUP						; move from A1 to A2 until A1=A3
00:0000681A 33C200040600    	  1460: 	move.w d2,_fpWork		; copy length into place
00:00006820 23CC00040604    	  1461: 	move.l a4,_fpWork+4	; copy pointer to text into place
00:00006826 F239480000040600	  1462: 	fmove.x _fpWork,fp0	; put string descriptor into fp0
00:0000682E 7002            	  1463: 	moveq #DT_STRING,d0	; return string data type
00:00006830 4E75            	  1464: 	rts
                            	  1465: XP44
00:00006832 6100077E        	  1466: 	bsr TSTC					; alternate string constant?
00:00006836 27              	  1467: 	dc.b '''',PARN-*
00:00006837 07
00:00006838 163C0027        	  1468: 	move.b #'''',d3
00:0000683C 60A2            	  1469: 	bra XP45
                            	  1470: PARN
00:0000683E 61000772        	  1471: 	bsr	TSTC					; else look for ( EXPR )
00:00006842 28              	  1472: 	dc.b '(',XP43-*
00:00006843 0D
00:00006844 6100FD2A        	  1473: 	bsr	EXPR
00:00006848 61000768        	  1474: 	bsr	TSTC
00:0000684C 29              	  1475: 	dc.b ')',XP43-*
00:0000684D 03
                            	  1476: XP42	
00:0000684E 4E75            	  1477: 	rts
                            	  1478: XP43
00:00006850 60000518        	  1479: 	bra	QWHAT					; else say "What?"
                            	  1480: 
                            	  1481: ;-------------------------------------------------------------------------------	
                            	  1482: ; Allocate storage for a string variable.
                            	  1483: ;
                            	  1484: ; Parameters:
                            	  1485: ;		d2 = number of bytes needed
                            	  1486: ; Returns:
                            	  1487: ;		a1 = pointer to string text area
                            	  1488: ;-------------------------------------------------------------------------------	
                            	  1489: 
                            	  1490: AllocateString:
00:00006854 48E7383C        	  1491: 	movem.l d2-d4/a2-a5,-(sp)
00:00006858 283A0962        	  1492: 	move.l VARBGN,d4
00:0000685C 227A0956        	  1493: 	move.l LastStr,a1			; a1 = last string
00:00006860 3611            	  1494: 	move.w (a1),d3				; d3 = length of last string (0)
00:00006862 48C3            	  1495: 	ext.l d3
00:00006864 9883            	  1496: 	sub.l d3,d4						; subtract off length
00:00006866 5784            	  1497: 	subq.l #3,d4					; size of length field+1 for rounding
00:00006868 9889            	  1498: 	sub.l a1,d4						; and start position
00:0000686A B484            	  1499: 	cmp.l d4,d2						; is there enough room?
00:0000686C 6224            	  1500: 	bhi .needMoreRoom
                            	  1501: .0001
00:0000686E 227A0944        	  1502: 	move.l LastStr,a1
00:00006872 2649            	  1503: 	move.l a1,a3
00:00006874 5489            	  1504: 	addq.l #2,a1					; point a1 to text part of string
00:00006876 3682            	  1505: 	move.w d2,(a3)				; save the length
00:00006878 D7C2            	  1506: 	add.l d2,a3
00:0000687A 568B            	  1507: 	addq.l #3,a3					; 2 for length field, 1 for rounding
00:0000687C 260B            	  1508: 	move.l a3,d3
00:0000687E 0283FFFFFFFE    	  1509: 	andi.l #$FFFFFFFE,d3	; make pointer even wyde
00:00006884 23CB000071B4    	  1510: 	move.l a3,LastStr			; set new last str position
00:0000688A 4253            	  1511: 	clr.w (a3)						; set zero length
00:0000688C 4CDF3C1C        	  1512: 	movem.l (sp)+,d2-d4/a2-a5
00:00006890 4E75            	  1513: 	rts
                            	  1514: .needMoreRoom
00:00006892 611E            	  1515: 	bsr GarbageCollectStrings
00:00006894 283A0926        	  1516: 	move.l VARBGN,d4			; d4 = start of variables
00:00006898 227A091A        	  1517: 	move.l LastStr,a1			; a1 = pointer to last string
00:0000689C 3611            	  1518: 	move.w (a1),d3				; d3 = length of last string (likely 0)
00:0000689E 48C3            	  1519: 	ext.l d3
00:000068A0 D689            	  1520: 	add.l a1,d3						; d3 = pointer past end of last string
00:000068A2 5683            	  1521: 	addq.l #3,d3					; 2 for length, 1 for rounding
00:000068A4 9883            	  1522: 	sub.l d3,d4						; free = VARBGN - LastStr+length of (LastStr)
00:000068A6 B484            	  1523: 	cmp.l d4,d2						; request < free?
00:000068A8 65C4            	  1524: 	blo .0001
00:000068AA 4DFA089C        	  1525: 	lea NOSTRING,a6
00:000068AE 600004C0        	  1526: 	bra ERROR
                            	  1527: 		
                            	  1528: ;-------------------------------------------------------------------------------	
                            	  1529: ; Garbage collect strings. This copies all strings in use to the lower end of
                            	  1530: ; the string area and adjusts the string pointers in variables and on the
                            	  1531: ; stack to point to the new location.
                            	  1532: ;
                            	  1533: ; Modifies:
                            	  1534: ;		none
                            	  1535: ;-------------------------------------------------------------------------------	
                            	  1536: 
                            	  1537: GarbageCollectStrings:
00:000068B2 48E70074        	  1538: 	movem.l a1/a2/a3/a5,-(sp)
00:000068B6 227A08F8        	  1539: 	move.l StrArea,a1			; source area pointer
00:000068BA 247A08F4        	  1540: 	move.l StrArea,a2			; target area pointer
00:000068BE 2A7A08F4        	  1541: 	move.l LastStr,a5
                            	  1542: .0001
00:000068C2 6140            	  1543: 	bsr StringInVar				; check if the string is used by a variable
00:000068C4 6506            	  1544: 	bcs .moveString
00:000068C6 610000A6        	  1545: 	bsr StringOnStack			; check if string is on string expression stack
00:000068CA 641C            	  1546: 	bcc .nextString				; if not on stack or in a var then move to next string
                            	  1547: 	
                            	  1548: 	; The string is in use, copy to active string area
                            	  1549: .moveString:
00:000068CC 610000D0        	  1550: 	bsr UpdateStringPointers	; update pointer to string on stack or in variable
00:000068D0 611C            	  1551: 	bsr NextString				; a3 = pointer to next string
00:000068D2 610005CA        	  1552: 	bsr MVUPW							; will copy the length and string text
                            	  1553: .0005
00:000068D6 B3CD            	  1554: 	cmp.l a5,a1						; is it the last string?
00:000068D8 63E8            	  1555: 	bls .0001
00:000068DA 23CA000071B4    	  1556: 	move.l a2,LastStr			; update last string pointer
00:000068E0 4252            	  1557: 	clr.w (a2)						; set zero length
00:000068E2 4CDF2E00        	  1558: 	movem.l (sp)+,a1/a2/a3/a5
00:000068E6 4E75            	  1559: 	rts
                            	  1560: .nextString:
00:000068E8 6104            	  1561: 	bsr NextString
00:000068EA 224B            	  1562: 	move.l a3,a1
00:000068EC 60E8            	  1563: 	bra .0005
                            	  1564: 
                            	  1565: ;-------------------------------------------------------------------------------	
                            	  1566: ; Parameters:
                            	  1567: ;		a1 - pointer to current string
                            	  1568: ; Returns:
                            	  1569: ;		a3 - pointer to next string
                            	  1570: ;-------------------------------------------------------------------------------	
                            	  1571: 
                            	  1572: NextString:
00:000068EE 2F04            	  1573: 	move.l d4,-(sp)
00:000068F0 3811            	  1574: 	move.w (a1),d4				; d4 = string length
00:000068F2 48C4            	  1575: 	ext.l d4							; make d4 long
00:000068F4 5684            	  1576: 	addq.l #3,d4					; plus 2 for length field, 1 for rounding
00:000068F6 D889            	  1577: 	add.l a1,d4
00:000068F8 0284FFFFFFFE    	  1578: 	andi.l #$FFFFFFFE,d4	; make even wyde address
00:000068FE 2644            	  1579: 	move.l d4,a3
00:00006900 281F            	  1580: 	move.l (sp)+,d4
00:00006902 4E75            	  1581: 	rts
                            	  1582: 
                            	  1583: ;-------------------------------------------------------------------------------	
                            	  1584: ; Check if a variable is using a string
                            	  1585: ;
                            	  1586: ; Modifies:
                            	  1587: ;		d2,d3,a4
                            	  1588: ; Parameters:
                            	  1589: ;		a1 = pointer to string descriptor
                            	  1590: ; Returns:
                            	  1591: ;		cf = 1 if string in use, 0 otherwise
                            	  1592: ;-------------------------------------------------------------------------------	
                            	  1593: 
                            	  1594: StringInVar:
                            	  1595: 	; check global vars
00:00006904 287A08B6        	  1596: 	move.l VARBGN,a4
00:00006908 761F            	  1597: 	moveq #31,d3			; 32 vars
00:0000690A 6116            	  1598: 	bsr SIV1
                            	  1599: 	; now check local vars
00:0000690C 287A0866        	  1600: 	move.l STKFP,a4
                            	  1601: .0001
00:00006910 588C            	  1602: 	addq.l #4,a4			; point to variable area
00:00006912 7607            	  1603: 	moveq #7,d3
00:00006914 610C            	  1604: 	bsr SIV1					; check variable area
00:00006916 286CFFFC        	  1605: 	move.l -4(a4),a4	; get previous frame pointer
00:0000691A B9FAF330        	  1606: 	cmp.l ENDMEM,a4
00:0000691E 65F0            	  1607: 	blo .0001
00:00006920 4E75            	  1608: 	rts
                            	  1609: 
                            	  1610: ;-------------------------------------------------------------------------------	
                            	  1611: ; SIV1 - string in variable helper. This routine does a two-up return if the
                            	  1612: ; string is found in a variable. No need to keep searching.
                            	  1613: ;
                            	  1614: ; Modifies:
                            	  1615: ;		d2,d3,a4
                            	  1616: ; Parameters:
                            	  1617: ;		d3 = number of variables-1 to check
                            	  1618: ;		a4 = string space
                            	  1619: ;		a1 = pointer to string descriptor
                            	  1620: ; Returns:
                            	  1621: ;		cf = 1 if string in use, 0 otherwise
                            	  1622: ;-------------------------------------------------------------------------------	
                            	  1623: 
                            	  1624: SIV1:
                            	  1625: .0003
00:00006922 0C9400000002    	  1626: 	cmp.l #DT_STRING,(a4)
00:00006928 6612            	  1627: 	bne .0004
00:0000692A 242C0008        	  1628: 	move.l 8(a4),d2
00:0000692E 5582            	  1629: 	subq.l #2,d2
00:00006930 B3C2            	  1630: 	cmp.l d2,a1
00:00006932 6608            	  1631: 	bne .0004
00:00006934 588F            	  1632: 	addq.l #4,sp			; pop return address
00:00006936 003C0001        	  1633: 	ori #1,ccr
00:0000693A 4E75            	  1634: 	rts								; do two up return
                            	  1635: .0004
00:0000693C 508C            	  1636: 	addq.l #8,a4			;  increment pointer by 16
00:0000693E 508C            	  1637: 	addq.l #8,a4
00:00006940 51CBFFE0        	  1638: 	dbra d3,.0003
00:00006944 023C00FE        	  1639: 	andi #$FE,ccr
00:00006948 4E75            	  1640: 	rts
                            	  1641: 
                            	  1642: ;-------------------------------------------------------------------------------	
                            	  1643: ; Check if a value could be a pointer into the string area.
                            	  1644: ; Even if the data type indicated a string, it may not be. It could just be a
                            	  1645: ; coincidence. So check that the pointer portion is pointing into string
                            	  1646: ; memory. It is extremely unlikely to have a data type and a valid pointer
                            	  1647: ; match and it not be a string.
                            	  1648: ;
                            	  1649: ; Returns
                            	  1650: ;		d3 = pointer to string
                            	  1651: ;		cf=1 if points into string area, 0 otherwise
                            	  1652: ;-------------------------------------------------------------------------------	
                            	  1653: 
                            	  1654: PointsIntoStringArea:
00:0000694A 0C9400000002    	  1655: 	cmp.l #DT_STRING,(a4)		; is it a string data type?
00:00006950 6616            	  1656: 	bne .0001
00:00006952 262C0008        	  1657: 	move.l 8(a4),d3					; likely a string if
00:00006956 B6BA0858        	  1658: 	cmp.l StrArea,d3				; flagged as a string, and pointer is into string area
00:0000695A 650C            	  1659: 	blo .0001
00:0000695C B6BA085E        	  1660: 	cmp.l VARBGN,d3
00:00006960 6406            	  1661: 	bhs .0001
00:00006962 003C0001        	  1662: 	ori #1,ccr
00:00006966 4E75            	  1663: 	rts
                            	  1664: .0001
00:00006968 023C00FE        	  1665: 	andi #$FE,ccr
00:0000696C 4E75            	  1666: 	rts
                            	  1667: 
                            	  1668: ;-------------------------------------------------------------------------------	
                            	  1669: ; Check if the string is a temporary on stack
                            	  1670: ;
                            	  1671: ; Parameters:
                            	  1672: ;		a3 = pointer to old string text area
                            	  1673: ; Returns:
                            	  1674: ;		cf = 1 if string in use, 0 otherwise
                            	  1675: ;-------------------------------------------------------------------------------	
                            	  1676: 
                            	  1677: StringOnStack:
00:0000696E 48E72028        	  1678: 	movem.l d2/a2/a4,-(sp)
00:00006972 7607            	  1679: 	moveq #7,d3
00:00006974 284F            	  1680: 	move.l sp,a4
                            	  1681: .0002
00:00006976 61D2            	  1682: 	bsr PointsIntoStringArea
00:00006978 6408            	  1683: 	bcc .0003
00:0000697A 242C0008        	  1684: 	move.l 8(a4),d2			; d2 = string text pointer
00:0000697E B7C2            	  1685: 	cmp.l d2,a3					; compare string pointers
00:00006980 6712            	  1686: 	beq .0001						; same pointer?
                            	  1687: .0003
00:00006982 588C            	  1688: 	addq.l #4,a4				; bump pointer into stack
00:00006984 B9FAF2C6        	  1689: 	cmp.l ENDMEM,a4			; have we hit end of stack yet?
00:00006988 65EC            	  1690: 	blo .0002
00:0000698A 4CDF1404        	  1691: 	movem.l (sp)+,d2/a2/a4
00:0000698E 023C00FE        	  1692: 	andi #$FE,ccr
00:00006992 4E75            	  1693: 	rts
                            	  1694: .0001
00:00006994 4CDF1404        	  1695: 	movem.l (sp)+,d2/a2/a4
00:00006998 003C0001        	  1696: 	ori #1,ccr
00:0000699C 4E75            	  1697: 	rts
                            	  1698: 	
                            	  1699: ;-------------------------------------------------------------------------------	
                            	  1700: ; Update pointers to string to point to new area. All string areas must be
                            	  1701: ; completely checked because there may be more than one pointer to the string.
                            	  1702: ;
                            	  1703: ; Modifies:
                            	  1704: ;		d2,d3,d4,a4
                            	  1705: ; Parameters:
                            	  1706: ;		a1 = old pointer to string
                            	  1707: ;		a2 = new pointer to string
                            	  1708: ;-------------------------------------------------------------------------------	
                            	  1709: 
                            	  1710: UpdateStringPointers:
00:0000699E 2F0B            	  1711: 	move.l a3,-(sp)
00:000069A0 47E90002        	  1712: 	lea 2(a1),a3						; a3 points to old string text area
                            	  1713: 	; check global variable space
00:000069A4 287A0816        	  1714: 	move.l VARBGN,a4
00:000069A8 761F            	  1715: 	moveq #31,d3						; 32 vars to check
00:000069AA 611E            	  1716: 	bsr USP1
                            	  1717: 	; check stack for strings
00:000069AC 284F            	  1718: 	move.l sp,a4						; start at stack bottom and work towards top
                            	  1719: .0002
00:000069AE 619A            	  1720: 	bsr PointsIntoStringArea
00:000069B0 640C            	  1721: 	bcc .0001
                            	  1722: 	; Here we probably have a string, one last check
00:000069B2 B68A            	  1723: 	cmp.l a2,d3							; should be >= a2 as we are packing the space
00:000069B4 6508            	  1724: 	blo .0001
00:000069B6 294A0008        	  1725: 	move.l a2,8(a4)					; update pointer on stack with new address
00:000069BA 546C0008        	  1726: 	addi.w #2,8(a4)					; bump up to text part of string
                            	  1727: .0001
00:000069BE 588C            	  1728: 	addq.l #4,a4
00:000069C0 B9FAF28A        	  1729: 	cmp.l ENDMEM,a4
00:000069C4 65E8            	  1730: 	blo .0002
00:000069C6 265F            	  1731: 	move.l (sp)+,a3
00:000069C8 4E75            	  1732: 	rts
                            	  1733: 
                            	  1734: ;-------------------------------------------------------------------------------	
                            	  1735: ; Both global and local variable spaces are updated in the same manner.
                            	  1736: ;
                            	  1737: ; Parameters:
                            	  1738: ;		a1 = old pointer to string
                            	  1739: ;		a2 = new pointer to string
                            	  1740: ;		a4 = start of string space
                            	  1741: ;		d3 = number of string variables
                            	  1742: ;-------------------------------------------------------------------------------	
                            	  1743: 
                            	  1744: USP1:
                            	  1745: .0002
00:000069CA 0C9400000002    	  1746: 	cmp.l #DT_STRING,(a4)		; check the data type
00:000069D0 6610            	  1747: 	bne .0001								; not a string, go to next
00:000069D2 242C0008        	  1748: 	move.l 8(a4),d2					; d2 = pointer to string text
00:000069D6 B7C2            	  1749: 	cmp.l d2,a3							; does pointer match old pointer?
00:000069D8 6608            	  1750: 	bne .0001
00:000069DA 294A0008        	  1751: 	move.l a2,8(a4)					; copy in new pointer
00:000069DE 54AC0008        	  1752: 	addi.l #2,8(a4)					; point to string text
                            	  1753: .0001
00:000069E2 508C            	  1754: 	addq.l #8,a4						; increment pointer by 16
00:000069E4 508C            	  1755: 	addq.l #8,a4
00:000069E6 51CBFFE2        	  1756: 	dbra d3,.0002
00:000069EA 4E75            	  1757: 	rts
                            	  1758: 
                            	  1759: ;-------------------------------------------------------------------------------	
                            	  1760: ; ===== Test for a valid variable name.  Returns Carry=1 if not
                            	  1761: ;	found, else returns Carry=0 and the address of the
                            	  1762: ;	variable in D0.
                            	  1763: 
                            	  1764: TSTV:
00:000069EC 61000628        	  1765: 	bsr	IGNBLK
00:000069F0 7000            	  1766: 	CLR.L	D0
00:000069F2 1010            	  1767: 	MOVE.B (A0),D0 	 	; look at the program text
00:000069F4 903C0040        	  1768: 	SUB.B	#'@',D0
00:000069F8 6572            	  1769: 	BCS	TSTVRT				; C=1: not a variable
00:000069FA 6638            	  1770: 	BNE	TV1						; branch if not "@" array
00:000069FC 5248            	  1771: 	ADDQ #1,A0				; If it is, it should be
00:000069FE 6100FE3E        	  1772: 	BSR	PARN					; followed by (EXPR) as its index.
00:00006A02 D080            	  1773: 	ADD.L	D0,D0
00:00006A04 650003AC        	  1774: 	BCS	QHOW					; say "How?" if index is too big
00:00006A08 D080            	  1775: 	ADD.L	D0,D0
00:00006A0A 650003A6        	  1776: 	BCS	QHOW
00:00006A0E D080            	  1777: 	ADD.L	D0,D0
00:00006A10 650003A0        	  1778: 	BCS	QHOW
00:00006A14 D080            	  1779: 	ADD.L	D0,D0
00:00006A16 6500039A        	  1780: 	BCS	QHOW
00:00006A1A 2F00            	  1781: 	move.l d0,-(sp)		; save the index
00:00006A1C 6100012A        	  1782: 	bsr	SIZE					; get amount of free memory
00:00006A20 221F            	  1783: 	move.l (sp)+,d1		; get back the index
00:00006A22 F2006000        	  1784: 	fmove.l fp0,d0		; convert to integer
00:00006A26 B081            	  1785: 	cmp.l	d1,d0				; see if there's enough memory
00:00006A28 63000380        	  1786: 	bls	QSORRY				; if not, say "Sorry"
00:00006A2C 203A078E        	  1787: 	move.l VARBGN,d0	; put address of array element...
00:00006A30 9081            	  1788: 	sub.l	d1,d0				; into D0
00:00006A32 4E75            	  1789: 	rts
                            	  1790: TV1
00:00006A34 B03C001B        	  1791: 	CMP.B	#27,D0			; if not @, is it A through Z?
00:00006A38 0A3C0001        	  1792: 	EOR	#1,CCR
00:00006A3C 652E            	  1793: 	BCS	TSTVRT				; if not, set Carry and return
00:00006A3E 5248            	  1794: 	ADDQ #1,A0				; else bump the text pointer
00:00006A40 0C00004C        	  1795: 	cmpi.b #'L',d0		; is it a local? L0 to L7
00:00006A44 661E            	  1796: 	bne TV2
00:00006A46 1010            	  1797: 	move.b (a0),d0
00:00006A48 0C000030        	  1798: 	cmpi.b #'0',d0
00:00006A4C 6516            	  1799: 	blo TV2
00:00006A4E 0C000037        	  1800: 	cmpi.b #'7',d0
00:00006A52 6210            	  1801: 	bhi TV2
00:00006A54 903C0030        	  1802: 	sub.b #'0',d0
00:00006A58 5248            	  1803: 	addq #1,a0			; bump text pointer
00:00006A5A E988            	  1804: 	lsl.l #4,d0			; *16 bytes per var
00:00006A5C D0BA0716        	  1805: 	add.l STKFP,d0
00:00006A60 5880            	  1806: 	add.l #4,d0
00:00006A62 4E75            	  1807: 	rts
                            	  1808: TV2
00:00006A64 E988            	  1809: 	LSL.L #4,D0			; compute the variable's address
00:00006A66 223A0754        	  1810: 	MOVE.L VARBGN,D1
00:00006A6A D081            	  1811: 	ADD.L	D1,D0			; and return it in D0 with Carry=0
                            	  1812: TSTVRT
00:00006A6C 4E75            	  1813: 	RTS
                            	  1814: 
                            	  1815: 
                            	  1816: * ===== Divide the 32 bit value in D0 by the 32 bit value in D1.
                            	  1817: *	Returns the 32 bit quotient in D0, remainder in D1.
                            	  1818: *
                            	  1819: DIV32
00:00006A6E 4A81            	  1820: 	TST.L	D1		check for divide-by-zero
00:00006A70 67000340        	  1821: 	BEQ	QHOW		if so, say "How?"
00:00006A74 2401            	  1822: 	MOVE.L	D1,D2
00:00006A76 2801            	  1823: 	MOVE.L	D1,D4
00:00006A78 B184            	  1824: 	EOR.L	D0,D4		see if the signs are the same
00:00006A7A 4A80            	  1825: 	TST.L	D0		take absolute value of D0
00:00006A7C 6A02            	  1826: 	BPL	DIV1
00:00006A7E 4480            	  1827: 	NEG.L	D0
00:00006A80 4A81            	  1828: DIV1	TST.L	D1		take absolute value of D1
00:00006A82 6A02            	  1829: 	BPL	DIV2
00:00006A84 4481            	  1830: 	NEG.L	D1
00:00006A86 761F            	  1831: DIV2	MOVEQ	#31,D3		iteration count for 32 bits
00:00006A88 2200            	  1832: 	MOVE.L	D0,D1
00:00006A8A 7000            	  1833: 	CLR.L	D0
00:00006A8C D281            	  1834: DIV3	ADD.L	D1,D1		(This algorithm was translated from
00:00006A8E D180            	  1835: 	ADDX.L	D0,D0		; the divide routine in Ron Cain's
00:00006A90 6708            	  1836: 	BEQ	DIV4		Small-C run time library.)
00:00006A92 B082            	  1837: 	CMP.L	D2,D0
00:00006A94 6B04            	  1838: 	BMI	DIV4
00:00006A96 5281            	  1839: 	ADDQ.L	#1,D1
00:00006A98 9082            	  1840: 	SUB.L	D2,D0
00:00006A9A 51CBFFF0        	  1841: DIV4	DBRA	D3,DIV3
00:00006A9E C141            	  1842: 	EXG	D0,D1		put rem. & quot. in proper registers
00:00006AA0 4A84            	  1843: 	TST.L	D4		were the signs the same?
00:00006AA2 6A04            	  1844: 	BPL	DIVRT
00:00006AA4 4480            	  1845: 	NEG.L	D0		if not, results are negative
00:00006AA6 4481            	  1846: 	NEG.L	D1
00:00006AA8 4E75            	  1847: DIVRT	RTS
                            	  1848: 
                            	  1849: 
                            	  1850: ; ===== The PEEK function returns the byte stored at the address
                            	  1851: ;	contained in the following expression.
                            	  1852: 
                            	  1853: PEEK
00:00006AAA 1E3C0042        	  1854: 	MOVE.B #'B',d7
00:00006AAE 1210            	  1855: 	MOVE.B (a0),d1
00:00006AB0 0C01002E        	  1856: 	CMPI.B #'.',d1
00:00006AB4 6604            	  1857: 	BNE .0001
00:00006AB6 5248            	  1858: 	ADDQ #1,a0
00:00006AB8 1E18            	  1859: 	move.b (a0)+,d7
                            	  1860: .0001
00:00006ABA 6100FD82        	  1861: 	BSR	PARN		get the memory address
00:00006ABE 0C8000000001    	  1862: 	cmpi.l #DT_NUMERIC,d0
00:00006AC4 660002F4        	  1863: 	bne ETYPE
00:00006AC8 F2006000        	  1864: 	FMOVE.L FP0,D0
00:00006ACC 2240            	  1865: 	MOVE.L D0,A1
00:00006ACE 0C070042        	  1866: 	cmpi.b #'B',d7
00:00006AD2 660C            	  1867: 	bne .0002
                            	  1868: .0005
00:00006AD4 7000            	  1869: 	CLR.L	D0				; upper 3 bytes will be zero
00:00006AD6 1011            	  1870: 	MOVE.B (A1),D0
00:00006AD8 F2005800        	  1871: 	FMOVE.B	D0,FP0 	; get the addressed byte
00:00006ADC 7001            	  1872: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006ADE 4E75            	  1873: 	RTS							; and return it
                            	  1874: .0002
00:00006AE0 0C070057        	  1875: 	cmpi.b #'W',d7
00:00006AE4 660C            	  1876: 	bne .0003
00:00006AE6 7000            	  1877: 	CLR.L d0
00:00006AE8 3011            	  1878: 	MOVE.W (A1),D0
00:00006AEA F2005000        	  1879: 	FMOVE.W	D0,FP0	;	get the addressed word
00:00006AEE 7001            	  1880: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006AF0 4E75            	  1881: 	RTS							; and return it
                            	  1882: .0003
00:00006AF2 0C07004C        	  1883: 	cmpi.b #'L',d7
00:00006AF6 660C            	  1884: 	bne .0004
00:00006AF8 7000            	  1885: 	CLR.L d0
00:00006AFA 2011            	  1886: 	MOVE.L (A1),D0
00:00006AFC F2004000        	  1887: 	FMOVE.L	D0,FP0 	; get the lword
00:00006B00 7001            	  1888: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006B02 4E75            	  1889: 	RTS							; and return it
                            	  1890: .0004
00:00006B04 0C070046        	  1891: 	cmpi.b #'F',d7
00:00006B08 66CA            	  1892: 	bne .0005
00:00006B0A F2114800        	  1893: 	FMOVE.X	(A1),FP0 		; get the addressed float
00:00006B0E 7001            	  1894: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006B10 4E75            	  1895: 	RTS			and return it
                            	  1896: 
                            	  1897: ;-------------------------------------------------------------------------------
                            	  1898: ; The RND function returns a random number from 0 to the value of the following
                            	  1899: ; expression in fp0.
                            	  1900: ;-------------------------------------------------------------------------------
                            	  1901: 
                            	  1902: RND:
00:00006B12 6100FD2A        	  1903: 	bsr	PARN								; get the upper limit
00:00006B16 0C8000000001    	  1904: 	cmpi.l #DT_NUMERIC,d0		; must be numeric
00:00006B1C 6600029C        	  1905: 	bne ETYPE
00:00006B20 F200003A        	  1906: 	ftst.x fp0							; it must be positive and non-zero
00:00006B24 F281028C        	  1907: 	fbeq QHOW
00:00006B28 F2940288        	  1908: 	fblt QHOW
00:00006B2C F2000100        	  1909: 	fmove fp0,fp2
00:00006B30 7028            	  1910: 	moveq #40,d0						; function #40 get random float
00:00006B32 4E4F            	  1911: 	trap #15
00:00006B34 F2000823        	  1912: 	fmul fp2,fp0
00:00006B38 7001            	  1913: 	moveq #DT_NUMERIC,d0		; data type is a number
00:00006B3A 4E75            	  1914: 	rts
                            	  1915: 
                            	  1916: ; ===== The ABS function returns an absolute value in D0.
                            	  1917: 
                            	  1918: ABS:	
00:00006B3C 6100FD00        	  1919: 	bsr	PARN			; get the following expr.'s value
00:00006B40 F2000018        	  1920: 	fabs.x fp0
00:00006B44 7001            	  1921: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006B46 4E75            	  1922: 	rts
                            	  1923: 
                            	  1924: ; ===== The SIZE function returns the size of free memory in D0.
                            	  1925: 
                            	  1926: SIZE:
00:00006B48 203A0666        	  1927: 	move.l StrArea,d0		; get the number of free bytes...
00:00006B4C 90BA066A        	  1928: 	sub.l	 TXTUNF,d0		; between 'TXTUNF' and 'StrArea'
00:00006B50 F2004000        	  1929: 	fmove.l d0,fp0
00:00006B54 7001            	  1930: 	moveq #DT_NUMERIC,d0	; data type is a number
00:00006B56 4E75            	  1931: 	rts										; return the number in fp0
                            	  1932: 	
                            	  1933: ; ===== The TICK function returns the processor tick register in D0.
                            	  1934: 
                            	  1935: TICK:
00:00006B58 4E7A0FF0        	  1936: 	movec tick,d0
00:00006B5C F2004000        	  1937: 	fmove.l d0,fp0
00:00006B60 7001            	  1938: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006B62 4E75            	  1939: 	rts
                            	  1940: 
                            	  1941: ; ===== The CORENO function returns the core number in D0.
                            	  1942: 
                            	  1943: CORENO:
00:00006B64 4E7A0FE0        	  1944: 	movec coreno,d0
00:00006B68 F2004000        	  1945: 	fmove.l d0,fp0
00:00006B6C 7001            	  1946: 	moveq #DT_NUMERIC,d0					; data type is a number
00:00006B6E 4E75            	  1947: 	rts
                            	  1948: 
                            	  1949: ;-------------------------------------------------------------------------------
                            	  1950: ; Get a pair of argments for the LEFT$ and RIGHT$ functions.
                            	  1951: ; 	(STRING, NUM)
                            	  1952: ; Returns:
                            	  1953: ;		fp0 = number
                            	  1954: ;		fp1 = string
                            	  1955: ;-------------------------------------------------------------------------------
                            	  1956: 
                            	  1957: LorRArgs:
00:00006B70 61000440        	  1958: 	bsr	TSTC						; else look for ( STRING EXPR, NUM EXPR )
00:00006B74 28              	  1959: 	dc.b	'(',LorR1-*
00:00006B75 33
00:00006B76 6100F9F8        	  1960: 	bsr	EXPR
00:00006B7A 0C8000000002    	  1961: 	cmpi.l #DT_STRING,d0
00:00006B80 66000238        	  1962: 	bne ETYPE
00:00006B84 6100F988        	  1963: 	bsr XP_PUSH
00:00006B88 61000428        	  1964: 	bsr TSTC
00:00006B8C 2C              	  1965: 	dc.b ',',LorR1-*
00:00006B8D 1B
00:00006B8E 6100F9E0        	  1966: 	bsr EXPR
00:00006B92 0C8000000001    	  1967: 	cmpi.l #DT_NUMERIC,d0
00:00006B98 66000220        	  1968: 	bne ETYPE
00:00006B9C 61000414        	  1969: 	bsr	TSTC
00:00006BA0 29              	  1970: 	dc.b	')',LorR1-*
00:00006BA1 07
00:00006BA2 6100F996        	  1971: 	bsr XP_POP1
00:00006BA6 4E75            	  1972: 	rts
                            	  1973: LorR1
00:00006BA8 60000208        	  1974: 	bra QHOW
                            	  1975: 	
                            	  1976: ;-------------------------------------------------------------------------------
                            	  1977: ; MID$ function gets a substring of characters from start position for
                            	  1978: ; requested length.
                            	  1979: ;-------------------------------------------------------------------------------
                            	  1980: 
                            	  1981: MID:
00:00006BAC 61000404        	  1982: 	bsr	TSTC						; look for ( STRING EXPR, NUM EXPR [, NUM_EXPR] )
00:00006BB0 28              	  1983: 	dc.b	'(',MID1-*
00:00006BB1 C1
00:00006BB2 6100F9BC        	  1984: 	bsr	EXPR
00:00006BB6 0C8000000002    	  1985: 	cmpi.l #DT_STRING,d0
00:00006BBC 660001FC        	  1986: 	bne ETYPE
00:00006BC0 6100F94C        	  1987: 	bsr XP_PUSH
00:00006BC4 610003EC        	  1988: 	bsr TSTC
00:00006BC8 2C              	  1989: 	dc.b ',',MID1-*
00:00006BC9 A9
00:00006BCA 6100F9A4        	  1990: 	bsr EXPR
00:00006BCE 0C8000000001    	  1991: 	cmpi.l #DT_NUMERIC,d0
00:00006BD4 660001E4        	  1992: 	bne ETYPE
00:00006BD8 6100F934        	  1993: 	bsr XP_PUSH
00:00006BDC 7A02            	  1994: 	moveq #2,d5
00:00006BDE 610003D2        	  1995: 	bsr	TSTC
00:00006BE2 2C              	  1996: 	dc.b ',',MID2-*
00:00006BE3 11
00:00006BE4 6100F98A        	  1997: 	bsr EXPR
00:00006BE8 0C8000000001    	  1998: 	cmpi.l #DT_NUMERIC,d0
00:00006BEE 660001CA        	  1999: 	bne ETYPE
00:00006BF2 7A03            	  2000: 	moveq #3,d5					; d5 indicates 3 params
                            	  2001: MID2
00:00006BF4 610003BC        	  2002: 	bsr TSTC
00:00006BF8 29              	  2003: 	dc.b ')',MID1-*
00:00006BF9 79
00:00006BFA 6100F93E        	  2004: 	bsr XP_POP1
00:00006BFE 0C050003        	  2005: 	cmpi.b #3,d5				; did we have 3 arguments?
00:00006C02 6708            	  2006: 	beq MID5						; branch if did
00:00006C04 F23C40000000FFFF	  2007: 	fmove.l #$FFFF,fp0	; set length = max
                            	  2008: MID5
00:00006C0C F2000500        	  2009: 	fmove.x fp1,fp2			; fp2 = start pos
00:00006C10 6100F928        	  2010: 	bsr XP_POP1					; fp1 = string descriptor
                            	  2011: ;-------------------------------------------------------------------------------
                            	  2012: ; Perform MID$ function
                            	  2013: ; 	fp1 = string descriptor
                            	  2014: ; 	fp2 = starting position
                            	  2015: ; 	fp0 = length
                            	  2016: ;-------------------------------------------------------------------------------
                            	  2017: DOMID
00:00006C14 F239688000040600	  2018: 	fmove.x fp1,_fpWork	; _fpWork = string descriptor
00:00006C1C F2036100        	  2019: 	fmove.l fp2,d3			; d3 = start pos
00:00006C20 B67900040600    	  2020: 	cmp.w _fpWork,d3		; is start pos < length
00:00006C26 6400018A        	  2021: 	bhs QHOW
00:00006C2A F2026000        	  2022: 	fmove.l fp0,d2			; d2=length
00:00006C2E D682            	  2023: 	add.l d2,d3					; start pos + length < string length?
00:00006C30 B47900040600    	  2024: 	cmp.w _fpWork,d2
00:00006C36 6308            	  2025: 	bls MID4
00:00006C38 343900040600    	  2026: 	move.w _fpWork,d2		; move string length to d2
00:00006C3E 48C2            	  2027: 	ext.l d2
                            	  2028: MID4
00:00006C40 6100FC12        	  2029: 	bsr AllocateString	; a1 = pointer to new string
00:00006C44 2449            	  2030: 	move.l a1,a2				; a2 = pointer to new string
00:00006C46 227900040604    	  2031: 	move.l _fpWork+4,a1	; a1 = pointer to string
00:00006C4C F2036100        	  2032: 	fmove.l fp2,d3			; d3 = start pos
00:00006C50 D3C3            	  2033: 	add.l d3,a1					; a1 = pointer to start pos
00:00006C52 33C200040600    	  2034: 	move.w d2,_fpWork		; length
00:00006C58 23CA00040604    	  2035: 	move.l a2,_fpWork+4	; prep to return target string
00:00006C5E 2649            	  2036: 	move.l a1,a3				; a3 = pointer to start pos
00:00006C60 D7C2            	  2037: 	add.l d2,a3					; a3 = pointer to end pos
00:00006C62 61000230        	  2038: 	bsr MVUP						; move A1 to A2 until A1 = A3
00:00006C66 7002            	  2039: 	moveq #DT_STRING,d0	; data type is a string
00:00006C68 F239480000040600	  2040: 	fmove.x _fpWork,fp0	; string descriptor in fp0
00:00006C70 4E75            	  2041: 	rts
                            	  2042: MID1
00:00006C72 6000013E        	  2043: 	bra QHOW
                            	  2044: 	
                            	  2045: ;-------------------------------------------------------------------------------
                            	  2046: ; LEFT$ function truncates the string after fp0 characters.
                            	  2047: ; Just like MID$ but with a zero starting postion.
                            	  2048: ;-------------------------------------------------------------------------------
                            	  2049: 	
                            	  2050: LEFT:
00:00006C76 6100FEF8        	  2051: 	bsr LorRArgs				; get arguments
00:00006C7A F23C59000000    	  2052: 	fmove.b #0,fp2			; start pos = 0
00:00006C80 6092            	  2053: 	bra DOMID
                            	  2054: 
                            	  2055: ;-------------------------------------------------------------------------------
                            	  2056: ; RIGHT$ function gets the rightmost characters.
                            	  2057: ; The start position must be calculated based on the number of characters
                            	  2058: ; requested and the string length.
                            	  2059: ;-------------------------------------------------------------------------------
                            	  2060: 
                            	  2061: RIGHT:
00:00006C82 6100FEEC        	  2062: 	bsr LorRArgs				; get arguments
00:00006C86 F2026000        	  2063: 	fmove.l fp0,d2			; d2 = required length
00:00006C8A F239688000040600	  2064: 	fmove.x fp1,_fpWork	; _fpWork = string descriptor
00:00006C92 363900040600    	  2065: 	move.w _fpWork,d3		; d3 = string length
00:00006C98 48C3            	  2066: 	ext.l d3						; make d3 a long
00:00006C9A B682            	  2067: 	cmp.l d2,d3					; is length > right
00:00006C9C 6202            	  2068: 	bhi .0001
00:00006C9E 7400            	  2069: 	moveq #0,d2					; we want all the characters if length <= right
                            	  2070: .0001
00:00006CA0 9682            	  2071: 	sub.l d2,d3					; d3 = startpos = length - right
00:00006CA2 F2034100        	  2072: 	fmove.l d3,fp2			; fp2 = start position
00:00006CA6 6000FF6C        	  2073: 	bra DOMID
                            	  2074: 
                            	  2075: ;-------------------------------------------------------------------------------
                            	  2076: ; LEN( EXPR ) returns the length of a string expression.
                            	  2077: ;-------------------------------------------------------------------------------
                            	  2078: 
                            	  2079: LEN:
00:00006CAA 6100FB92        	  2080: 	bsr PARN
00:00006CAE 0C8000000002    	  2081: 	cmpi.l #DT_STRING,d0
00:00006CB4 66000104        	  2082: 	bne ETYPE
00:00006CB8 F239680000040600	  2083: 	fmove.x fp0,_fpWork
00:00006CC0 303900040600    	  2084: 	move.w _fpWork,d0
00:00006CC6 48C0            	  2085: 	ext.l d0
00:00006CC8 F2005000        	  2086: 	fmove.w d0,fp0
00:00006CCC 7001            	  2087: 	moveq #DT_NUMERIC,d0
00:00006CCE 4E75            	  2088: 	rts
                            	  2089: 
                            	  2090: ;-------------------------------------------------------------------------------
                            	  2091: ; INT( EXPR ) returns the integer value of the expression.
                            	  2092: ; the expression must be in the range of a 32-bit integer.
                            	  2093: ;-------------------------------------------------------------------------------
                            	  2094: 
                            	  2095: INT:
00:00006CD0 6100FB6C        	  2096: 	bsr PARN
00:00006CD4 0C8000000001    	  2097: 	cmpi.l #DT_NUMERIC,d0
00:00006CDA 660000DE        	  2098: 	bne ETYPE
00:00006CDE F2000003        	  2099: 	fintrz fp0,fp0
                            	  2100: ;	fmove.l fp0,d0
                            	  2101: ;	fmove.l d0,fp0
00:00006CE2 7001            	  2102: 	moveq #DT_NUMERIC,d0
00:00006CE4 4E75            	  2103: 	rts
                            	  2104: 
                            	  2105: 
                            	  2106: ;-------------------------------------------------------------------------------
                            	  2107: ; CHR$( EXPR ) returns a one byte string containing the character.
                            	  2108: ;-------------------------------------------------------------------------------
                            	  2109: 
                            	  2110: CHR:
00:00006CE6 6100FB56        	  2111: 	bsr PARN
00:00006CEA 0C8000000001    	  2112: 	cmpi.l #DT_NUMERIC,d0
00:00006CF0 660000C8        	  2113: 	bne ETYPE
00:00006CF4 F2006000        	  2114: 	fmove.l fp0,d0
00:00006CF8 7401            	  2115: 	moveq #1,d2
00:00006CFA 6100FB58        	  2116: 	bsr AllocateString
00:00006CFE 1280            	  2117: 	move.b d0,(a1)
00:00006D00 42290001        	  2118: 	clr.b 1(a1)
00:00006D04 7002            	  2119: 	moveq #DT_STRING,d0
00:00006D06 23C900040604    	  2120: 	move.l a1,_fpWork+4
00:00006D0C 33FC000100040600	  2121: 	move.w #1,_fpWork
00:00006D14 F239480000040600	  2122: 	fmove.x _fpWork,fp0
00:00006D1C 4E75            	  2123: 	rts
                            	  2124: 
                            	  2125: ********************************************************************
                            	  2126: *
                            	  2127: * *** SETVAL *** FIN *** ENDCHK *** ERROR (& friends) ***
                            	  2128: *
                            	  2129: * 'SETVAL' expects a variable, followed by an equal sign and then
                            	  2130: * an expression.  It evaluates the expression and sets the variable
                            	  2131: * to that value.
                            	  2132: *
                            	  2133: * 'FIN' checks the end of a command.  If it ended with ":",
                            	  2134: * execution continues.	If it ended with a CR, it finds the
                            	  2135: * the next line and continues from there.
                            	  2136: *
                            	  2137: * 'ENDCHK' checks if a command is ended with a CR. This is
                            	  2138: * required in certain commands, such as GOTO, RETURN, STOP, etc.
                            	  2139: *
                            	  2140: * 'ERROR' prints the string pointed to by A0. It then prints the
                            	  2141: * line pointed to by CURRNT with a "?" inserted at where the
                            	  2142: * old text pointer (should be on top of the stack) points to.
                            	  2143: * Execution of Tiny BASIC is stopped and a warm start is done.
                            	  2144: * If CURRNT is zero (indicating a direct command), the direct
                            	  2145: * command is not printed. If CURRNT is -1 (indicating
                            	  2146: * 'INPUT' command in progress), the input line is not printed
                            	  2147: * and execution is not terminated but continues at 'INPERR'.
                            	  2148: *
                            	  2149: * Related to 'ERROR' are the following:
                            	  2150: * 'QWHAT' saves text pointer on stack and gets "What?" message.
                            	  2151: * 'AWHAT' just gets the "What?" message and jumps to 'ERROR'.
                            	  2152: * 'QSORRY' and 'ASORRY' do the same kind of thing.
                            	  2153: * 'QHOW' and 'AHOW' also do this for "How?".
                            	  2154: 
                            	  2155: ; SETVAL
                            	  2156: ; Returns:
                            	  2157: ;		a6 pointer to variable
                            	  2158: 
                            	  2159: SETVAL	
00:00006D1E 6100FCCC        	  2160: 	bsr	TSTV					; variable name?
00:00006D22 6546            	  2161: 	bcs	QWHAT					; if not, say "What?"
00:00006D24 2F00            	  2162: 	move.l d0,-(sp)		; save the variable's address
00:00006D26 6100028A        	  2163: 	bsr	TSTC					; get past the "=" sign
00:00006D2A 3D              	  2164: 	dc.b	'=',SV1-*
00:00006D2B 11
00:00006D2C 6100F842        	  2165: 	bsr	EXPR					; evaluate the expression
00:00006D30 2C5F            	  2166: 	move.l (sp)+,a6
00:00006D32 2C80            	  2167: 	move.l d0,(a6)		; save type
00:00006D34 F22E68000004    	  2168: 	fmove.x fp0,4(a6) ; and save its value in the variable
00:00006D3A 4E75            	  2169: 	rts
                            	  2170: SV1
00:00006D3C 602C            	  2171: 	bra	QWHAT					; if no "=" sign
                            	  2172: 
                            	  2173: FIN
00:00006D3E 61000272        	  2174: 	bsr	TSTC					; *** FIN ***
00:00006D42 3A              	  2175: 	DC.B ':',FI1-*
00:00006D43 07
00:00006D44 588F            	  2176: 	ADDQ.L #4,SP			; if ":", discard return address
00:00006D46 6000F324        	  2177: 	BRA	RUNSML				; continue on the same line
                            	  2178: FI1
00:00006D4A 61000266        	  2179: 	bsr	TSTC					; not ":", is it a CR?
00:00006D4E 0D              	  2180: 	DC.B	CR,FI2-*
00:00006D4F 07
00:00006D50 588F            	  2181: 	ADDQ.L #4,SP			; yes, purge return address
00:00006D52 6000F2C2        	  2182: 	BRA	RUNNXL				; execute the next line
                            	  2183: FI2
00:00006D56 4E75            	  2184: 	RTS								; else return to the caller
                            	  2185: 
                            	  2186: ENDCHK
00:00006D58 610002BC        	  2187: 	bsr	IGNBLK
00:00006D5C 0C10003A        	  2188: 	CMP.B #':',(a0)
00:00006D60 6706            	  2189: 	BEQ ENDCHK1
00:00006D62 0C10000D        	  2190: 	CMP.B	#CR,(A0)		; does it end with a CR?
00:00006D66 6602            	  2191: 	BNE	QWHAT					; if not, say "WHAT?"
                            	  2192: ENDCHK1:
00:00006D68 4E75            	  2193: 	RTS
                            	  2194: 
                            	  2195: QWHAT
00:00006D6A 2F08            	  2196: 	MOVE.L A0,-(SP)
                            	  2197: AWHAT
00:00006D6C 4DFA03CA        	  2198: 	LEA	WHTMSG,A6
                            	  2199: ERROR
00:00006D70 6100030A        	  2200: 	bsr	PRMESG		display the error message
00:00006D74 205F            	  2201: 	MOVE.L	(SP)+,A0	restore the text pointer
00:00006D76 203A03F8        	  2202: 	MOVE.L	CURRNT,D0	get the current line number
00:00006D7A 6700EF3E        	  2203: 	BEQ	WSTART		if zero, do a warm start
00:00006D7E B0BCFFFFFFFF    	  2204: 	CMP.L	#-1,D0		is the line no. pointer = -1?
00:00006D84 6700F560        	  2205: 	BEQ	INPERR		if so, redo input
00:00006D88 1F10            	  2206: 	MOVE.B	(A0),-(SP)	save the char. pointed to
00:00006D8A 4210            	  2207: 	CLR.B	(A0)		put a zero where the error is
00:00006D8C 227A03E2        	  2208: 	MOVE.L	CURRNT,A1	point to start of current line
00:00006D90 61000202        	  2209: 	bsr	PRTLN		display the line in error up to the 0
00:00006D94 109F            	  2210: 	MOVE.B	(SP)+,(A0)	restore the character
00:00006D96 103C003F        	  2211: 	MOVE.B	#'?',D0         display a "?"
00:00006D9A 6100EE98        	  2212: 	BSR	GOOUT
00:00006D9E 4240            	  2213: 	CLR	D0
00:00006DA0 5389            	  2214: 	SUBQ.L	#1,A1		point back to the error char.
00:00006DA2 6100017E        	  2215: 	bsr	PRTSTG		display the rest of the line
00:00006DA6 6000EF12        	  2216: 	BRA	WSTART		and do a warm start
                            	  2217: QSORRY
00:00006DAA 2F08            	  2218: 	MOVE.L	A0,-(SP)
                            	  2219: ASORRY
00:00006DAC 4DFA03AC        	  2220: 	LEA	SRYMSG,A6
00:00006DB0 60BE            	  2221: 	BRA	ERROR
                            	  2222: QHOW
00:00006DB2 2F08            	  2223: 	MOVE.L	A0,-(SP)	Error: "How?"
                            	  2224: AHOW
00:00006DB4 4DFA037B        	  2225: 	LEA	HOWMSG,A6
00:00006DB8 60B6            	  2226: 	BRA	ERROR
                            	  2227: ETYPE
00:00006DBA 4DFA0384        	  2228: 	lea TYPMSG,a6
00:00006DBE 60B0            	  2229: 	bra ERROR
                            	  2230: 
                            	  2231: *******************************************************************
                            	  2232: *
                            	  2233: * *** GETLN *** FNDLN (& friends) ***
                            	  2234: *
                            	  2235: * 'GETLN' reads in input line into 'BUFFER'. It first prompts with
                            	  2236: * the character in D0 (given by the caller), then it fills the
                            	  2237: * buffer and echos. It ignores LF's but still echos
                            	  2238: * them back. Control-H is used to delete the last character
                            	  2239: * entered (if there is one), and control-X is used to delete the
                            	  2240: * whole line and start over again. CR signals the end of a line,
                            	  2241: * and causes 'GETLN' to return.
                            	  2242: *
                            	  2243: * 'FNDLN' finds a line with a given line no. (in D1) in the
                            	  2244: * text save area.  A1 is used as the text pointer. If the line
                            	  2245: * is found, A1 will point to the beginning of that line
                            	  2246: * (i.e. the high byte of the line no.), and flags are NC & Z.
                            	  2247: * If that line is not there and a line with a higher line no.
                            	  2248: * is found, A1 points there and flags are NC & NZ. If we reached
                            	  2249: * the end of the text save area and cannot find the line, flags
                            	  2250: * are C & NZ.
                            	  2251: * 'FNDLN' will initialize A1 to the beginning of the text save
                            	  2252: * area to start the search. Some other entries of this routine
                            	  2253: * will not initialize A1 and do the search.
                            	  2254: * 'FNDLNP' will start with A1 and search for the line no.
                            	  2255: * 'FNDNXT' will bump A1 by 2, find a CR and then start search.
                            	  2256: * 'FNDSKP' uses A1 to find a CR, and then starts the search.
                            	  2257: 
                            	  2258: GETLN
00:00006DC0 6100EE72        	  2259: 	BSR	GOOUT		display the prompt
00:00006DC4 103C0020        	  2260: 	MOVE.B	#' ',D0         and a space
00:00006DC8 6100EE6A        	  2261: 	BSR	GOOUT
00:00006DCC 41FA03FA        	  2262: 	LEA	BUFFER,A0	A0 is the buffer pointer
                            	  2263: GL1
00:00006DD0 61000298        	  2264: 	bsr	CHKIO		check keyboard
00:00006DD4 67FA            	  2265: 	BEQ	GL1		wait for a char. to come in
00:00006DD6 B03C0008        	  2266: 	CMP.B	#CTRLH,D0	delete last character?
00:00006DDA 6726            	  2267: 	BEQ	GL3		if so
00:00006DDC B03C0018        	  2268: 	CMP.B	#CTRLX,D0	delete the whole line?
00:00006DE0 6744            	  2269: 	BEQ	GL4		if so
00:00006DE2 B03C000D        	  2270: 	CMP.B	#CR,D0		accept a CR
00:00006DE6 6706            	  2271: 	BEQ	GL2
00:00006DE8 B03C0020        	  2272: 	CMP.B	#' ',D0         if other control char., discard it
00:00006DEC 65E2            	  2273: 	BCS	GL1
                            	  2274: GL2
00:00006DEE 10C0            	  2275: 	MOVE.B	D0,(A0)+	save the char.
00:00006DF0 6100EE42        	  2276: 	BSR	GOOUT		echo the char back out
00:00006DF4 B03C000D        	  2277: 	CMP.B	#CR,D0		if it's a CR, end the line
00:00006DF8 675C            	  2278: 	BEQ	GL7
00:00006DFA B1FC00007217    	  2279: 	CMP.L	#(BUFFER+BUFLEN-1),A0	any more room?
00:00006E00 65CE            	  2280: 	BCS	GL1		yes: get some more, else delete last char.
                            	  2281: GL3
00:00006E02 103C0008        	  2282: 	MOVE.B	#CTRLH,D0	delete a char. if possible
00:00006E06 6100EE2C        	  2283: 	BSR	GOOUT
00:00006E0A 103C0020        	  2284: 	MOVE.B	#' ',D0
00:00006E0E 6100EE24        	  2285: 	BSR	GOOUT
00:00006E12 B1FC000071C8    	  2286: 	CMP.L	#BUFFER,A0	any char.'s left?
00:00006E18 63B6            	  2287: 	BLS	GL1		if not
00:00006E1A 103C0008        	  2288: 	MOVE.B	#CTRLH,D0	if so, finish the BS-space-BS sequence
00:00006E1E 6100EE14        	  2289: 	BSR	GOOUT
00:00006E22 5388            	  2290: 	SUBQ.L	#1,A0		decrement the text pointer
00:00006E24 60AA            	  2291: 	BRA	GL1		back for more
                            	  2292: GL4
00:00006E26 2208            	  2293: 	MOVE.L	A0,D1		delete the whole line
00:00006E28 92BC000071C8    	  2294: 	SUB.L	#BUFFER,D1	figure out how many backspaces we need
00:00006E2E 671E            	  2295: 	BEQ	GL6		if none needed, branch
00:00006E30 5341            	  2296: 	SUBQ	#1,D1		adjust for DBRA
                            	  2297: GL5
00:00006E32 103C0008        	  2298: 	MOVE.B	#CTRLH,D0	and display BS-space-BS sequences
00:00006E36 6100EDFC        	  2299: 	BSR	GOOUT
00:00006E3A 103C0020        	  2300: 	MOVE.B	#' ',D0
00:00006E3E 6100EDF4        	  2301: 	BSR	GOOUT
00:00006E42 103C0008        	  2302: 	MOVE.B	#CTRLH,D0
00:00006E46 6100EDEC        	  2303: 	BSR	GOOUT
00:00006E4A 51C9FFE6        	  2304: 	DBRA	D1,GL5
                            	  2305: GL6
00:00006E4E 41FA0378        	  2306: 	LEA	BUFFER,A0	reinitialize the text pointer
00:00006E52 6000FF7C        	  2307: 	BRA	GL1		and go back for more
                            	  2308: GL7
00:00006E56 103C000A        	  2309: 	MOVE.B	#LF,D0		echo a LF for the CR
00:00006E5A 6000EDD8        	  2310: 	BRA	GOOUT
                            	  2311: 
                            	  2312: FNDLN
00:00006E5E B2BC0000FFFF    	  2313: 	CMP.L	#$FFFF,D1	line no. must be < 65535
00:00006E64 6400FF4C        	  2314: 	BCC	QHOW
00:00006E68 227AEDDE        	  2315: 	MOVE.L	TXTBGN,A1	init. the text save pointer
                            	  2316: 
                            	  2317: FNDLNP
00:00006E6C 247A034A        	  2318: 	MOVE.L	TXTUNF,A2	check if we passed the end
00:00006E70 538A            	  2319: 	SUBQ.L	#1,A2
00:00006E72 B5C9            	  2320: 	CMP.L	A1,A2
00:00006E74 650C            	  2321: 	BCS	FNDRET		if so, return with Z=0 & C=1
00:00006E76 1411            	  2322: 	MOVE.B	(A1),D2	if not, get a line no.
00:00006E78 E14A            	  2323: 	LSL	#8,D2
00:00006E7A 14290001        	  2324: 	MOVE.B	1(A1),D2
00:00006E7E B441            	  2325: 	CMP.W	D1,D2		is this the line we want?
00:00006E80 6502            	  2326: 	BCS	FNDNXT		no, not there yet
                            	  2327: FNDRET
00:00006E82 4E75            	  2328: 	RTS			return the cond. codes
                            	  2329: 
                            	  2330: FNDNXT
00:00006E84 5489            	  2331: 	ADDQ.L	#2,A1		find the next line
                            	  2332: 
                            	  2333: FNDSKP	
00:00006E86 0C19000D        	  2334: 	CMP.B	#CR,(A1)+	try to find a CR
00:00006E8A 67E0            	  2335: 	BEQ		FNDLNP
00:00006E8C B3FA032A        	  2336: 	CMP.L	TXTUNF,A1
00:00006E90 65F4            	  2337: 	BLO		FNDSKP
00:00006E92 60D8            	  2338: 	BRA		FNDLNP		check if end of text
                            	  2339: 
                            	  2340: ;******************************************************************
                            	  2341: ;
                            	  2342: ; *** MVUP *** MVDOWN *** POPA *** PUSHA ***
                            	  2343: ;
                            	  2344: ; 'MVUP' moves a block up from where A1 points to where A2 points
                            	  2345: ; until A1=A3
                            	  2346: ;
                            	  2347: ; 'MVDOWN' moves a block down from where A1 points to where A3
                            	  2348: ; points until A1=A2
                            	  2349: ;
                            	  2350: ; 'POPA' restores the 'FOR' loop variable save area from the stack
                            	  2351: ;
                            	  2352: ; 'PUSHA' stacks for 'FOR' loop variable save area onto the stack
                            	  2353: ;
                            	  2354: 
                            	  2355: MVUP
00:00006E94 B7C9            	  2356: 	CMP.L	A1,A3					; see the above description
00:00006E96 6304            	  2357: 	BLS	MVRET
00:00006E98 14D9            	  2358: 	MOVE.B	(A1)+,(A2)+
00:00006E9A 60F8            	  2359: 	BRA	MVUP
                            	  2360: MVRET
00:00006E9C 4E75            	  2361: 	RTS
                            	  2362: 
                            	  2363: ; For string movements only suitable in some circumstances
                            	  2364: 
                            	  2365: MVUPW
00:00006E9E B3CB            	  2366: 	cmp.l a3,a1
00:00006EA0 6404            	  2367: 	bhs .0001
00:00006EA2 34D9            	  2368: 	move.w (a1)+,(a2)+
00:00006EA4 60F8            	  2369: 	bra MVUPW
                            	  2370: .0001
00:00006EA6 4E75            	  2371: 	rts
                            	  2372: 
                            	  2373: MVDOWN
00:00006EA8 B5C9            	  2374: 	CMP.L	A1,A2		see the above description
00:00006EAA 67F0            	  2375: 	BEQ	MVRET
00:00006EAC 1721            	  2376: 	MOVE.B	-(A1),-(A3)
00:00006EAE 60F8            	  2377: 	BRA	MVDOWN
                            	  2378: 
                            	  2379: POPA
00:00006EB0 2C5F            	  2380: 	MOVE.L	(SP)+,A6			; A6 = return address
00:00006EB2 23DF00007180    	  2381: 	MOVE.L	(SP)+,LOPVAR	restore LOPVAR, but zero means no more
00:00006EB8 6730            	  2382: 	BEQ	.0001
00:00006EBA 23DF0000718C    	  2383: 	MOVE.L	(SP)+,LOPINC+8	if not zero, restore the rest
00:00006EC0 23DF00007188    	  2384: 	MOVE.L	(SP)+,LOPINC+4
00:00006EC6 23DF00007184    	  2385: 	MOVE.L	(SP)+,LOPINC
00:00006ECC 23DF00007198    	  2386: 	MOVE.L	(SP)+,LOPLMT+8
00:00006ED2 23DF00007194    	  2387: 	MOVE.L	(SP)+,LOPLMT+4
00:00006ED8 23DF00007190    	  2388: 	MOVE.L	(SP)+,LOPLMT
00:00006EDE 23DF0000719C    	  2389: 	MOVE.L	(SP)+,LOPLN
00:00006EE4 23DF000071A0    	  2390: 	MOVE.L	(SP)+,LOPPT
                            	  2391: .0001
00:00006EEA 4ED6            	  2392: 	JMP	(A6)		return
                            	  2393: 
                            	  2394: PUSHA
00:00006EEC 223A02D2        	  2395: 	MOVE.L	STKLMT,D1		; Are we running out of stack room?
00:00006EF0 928F            	  2396: 	SUB.L	SP,D1
00:00006EF2 6400FEB6        	  2397: 	BCC	QSORRY					; if so, say we're sorry
00:00006EF6 2C5F            	  2398: 	MOVE.L	(SP)+,A6		; else get the return address
00:00006EF8 223A0286        	  2399: 	MOVE.L	LOPVAR,D1		; save loop variables
00:00006EFC 6720            	  2400: 	BEQ	.0001						; if LOPVAR is zero, that's all
00:00006EFE 2F3A02A0        	  2401: 	MOVE.L	LOPPT,-(SP)	; else save all the others
00:00006F02 2F3A0298        	  2402: 	MOVE.L	LOPLN,-(SP)
00:00006F06 2F3A0288        	  2403: 	MOVE.L	LOPLMT,-(SP)
00:00006F0A 2F3A0288        	  2404: 	MOVE.L	LOPLMT+4,-(SP)
00:00006F0E 2F3A0288        	  2405: 	MOVE.L	LOPLMT+8,-(SP)
00:00006F12 2F3A0270        	  2406: 	MOVE.L	LOPINC,-(SP)
00:00006F16 2F3A0270        	  2407: 	MOVE.L	LOPINC+4,-(SP)
00:00006F1A 2F3A0270        	  2408: 	MOVE.L	LOPINC+8,-(SP)
                            	  2409: .0001
00:00006F1E 2F01            	  2410: 	MOVE.L	D1,-(SP)
00:00006F20 4ED6            	  2411: 	JMP	(A6)		return
                            	  2412: 
                            	  2413: *******************************************************************
                            	  2414: *
                            	  2415: * *** PRTSTG *** QTSTG *** PRTNUM *** PRTLN ***
                            	  2416: *
                            	  2417: * 'PRTSTG' prints a string pointed to by A1. It stops printing
                            	  2418: * and returns to the caller when either a CR is printed or when
                            	  2419: * the next byte is the same as what was passed in D0 by the
                            	  2420: * caller.
                            	  2421: *
                            	  2422: * 'QTSTG' looks for an underline (back-arrow on some systems),
                            	  2423: * single-quote, or double-quote.  If none of these are found, returns
                            	  2424: * to the caller.  If underline, outputs a CR without a LF.  If single
                            	  2425: * or double quote, prints the quoted string and demands a matching
                            	  2426: * end quote.  After the printing, the next 2 bytes of the caller are
                            	  2427: * skipped over (usually a short branch instruction).
                            	  2428: *
                            	  2429: * 'PRTNUM' prints the 32 bit number in D1, leading blanks are added if
                            	  2430: * needed to pad the number of spaces to the number in D4.
                            	  2431: * However, if the number of digits is larger than the no. in
                            	  2432: * D4, all digits are printed anyway. Negative sign is also
                            	  2433: * printed and counted in, positive sign is not.
                            	  2434: *
                            	  2435: * 'PRTLN' prints the saved text line pointed to by A1
                            	  2436: * with line no. and all.
                            	  2437: *
                            	  2438: PRTSTG:
00:00006F22 1200            	  2439: 	MOVE.B	D0,D1		save the stop character
                            	  2440: PS1
00:00006F24 1019            	  2441: 	MOVE.B	(A1)+,D0	get a text character
00:00006F26 B200            	  2442: 	CMP.B	D0,D1		same as stop character?
00:00006F28 6712            	  2443: 	BEQ	PRTRET		if so, return
00:00006F2A 6100ED08        	  2444: 	BSR	GOOUT		display the char.
00:00006F2E B03C000D        	  2445: 	CMP.B	#CR,D0		is it a C.R.?
00:00006F32 66F0            	  2446: 	BNE	PS1		no, go back for more
00:00006F34 103C000A        	  2447: 	MOVE.B	#LF,D0		yes, add a L.F.
00:00006F38 6100ECFA        	  2448: 	BSR	GOOUT
                            	  2449: PRTRET
00:00006F3C 4E75            	  2450: 	RTS			then return
                            	  2451: 
                            	  2452: PRTSTR2a
00:00006F3E 1019            	  2453: 	move.b (a1)+,d0
00:00006F40 6100ECF2        	  2454: 	bsr GOOUT
                            	  2455: PRTSTR2:
00:00006F44 51C9FFF8        	  2456: 	dbra d1,PRTSTR2a
00:00006F48 4E75            	  2457: 	rts
                            	  2458: 	
                            	  2459: 	if 0
                            	  2460: QTSTG
                            	  2461: 	bsr	TSTC		*** QTSTG ***
                            	  2462: 	DC.B	'"',QT3-*
                            	  2463: 	MOVE.B	#'"',D0         it is a "
                            	  2464: QT1
                            	  2465: 	MOVE.L	A0,A1
                            	  2466: 	BSR	PRTSTG		print until another
                            	  2467: 	MOVE.L	A1,A0
                            	  2468: 	MOVE.L	(SP)+,A1	pop return address
                            	  2469: 	CMP.B	#LF,D0		was last one a CR?
                            	  2470: 	BEQ	RUNNXL		if so, run next line
                            	  2471: QT2
                            	  2472: 	ADDQ.L	#2,A1		skip 2 bytes on return
                            	  2473: 	JMP	(A1)		return
                            	  2474: QT3
                            	  2475: 	bsr	TSTC		is it a single quote?
                            	  2476: 	DC.B	'''',QT4-*
                            	  2477: 	MOVE.B	#'''',D0        if so, do same as above
                            	  2478: 	BRA	QT1
                            	  2479: QT4
                            	  2480: 	bsr	TSTC		is it an underline?
                            	  2481: 	DC.B	'_',QT5-*
                            	  2482: 	MOVE.B	#CR,D0		if so, output a CR without LF
                            	  2483: 	bsr	GOOUT
                            	  2484: 	MOVE.L	(SP)+,A1	pop return address
                            	  2485: 	BRA	QT2
                            	  2486: QT5
                            	  2487: 	RTS			none of the above
                            	  2488: 	endif
                            	  2489: 
                            	  2490: PRTNUM:
00:00006F4A 4E52FFD0        	  2491: 	link a2,#-48
00:00006F4E 217900040098002C	  2492: 	move.l _canary,44(a0)
00:00006F56 48D7020F        	  2493: 	movem.l d0/d1/d2/d3/a1,(sp)
00:00006F5A F22F68000014    	  2494: 	fmove.x fp0,20(sp)
00:00006F60 F22F68800020    	  2495: 	fmove.x fp1,32(sp)
00:00006F66 F2000400        	  2496: 	fmove.x fp1,fp0					; fp0 = number to print
00:00006F6A 43F900040520    	  2497: 	lea _fpBuf,a1						; a1 = pointer to buffer to use
00:00006F70 7027            	  2498: 	moveq #39,d0						; d0 = function #39 print float
00:00006F72 2204            	  2499: 	move.l d4,d1						; d1 = width
00:00006F74 2404            	  2500: 	move.l d4,d2						; d2 = precision max
00:00006F76 7665            	  2501: 	moveq #'e',d3
00:00006F78 4E4F            	  2502: 	trap #15
00:00006F7A 4CD7020F        	  2503: 	movem.l (sp),d0/d1/d2/d3/a1
00:00006F7E F22F48000014    	  2504: 	fmove.x 20(sp),fp0
00:00006F84 F22F48800020    	  2505: 	fmove.x 32(sp),fp1
00:00006F8A A2A80003002C    	  2506: 	cchk 44(a0)
00:00006F90 4E5A            	  2507: 	unlk a2
00:00006F92 4E75            	  2508: 	rts
                            	  2509: 
                            	  2510: ; Debugging
                            	  2511: 	if 0
                            	  2512: PRTFP0:
                            	  2513: 	link a2,#-48
                            	  2514: 	move.l _canary,44(a0)
                            	  2515: 	movem.l d0/d1/d2/d3/a1,(sp)
                            	  2516: 	fmove.x fp0,20(sp)
                            	  2517: 	lea _fpBuf,a1						; a1 = pointer to buffer to use
                            	  2518: 	moveq #39,d0						; d0 = function #39 print float
                            	  2519: 	moveq #30,d1						; d1 = width
                            	  2520: 	moveq #25,d2						; d2 = precision max
                            	  2521: 	moveq #'e',d3
                            	  2522: 	trap #15
                            	  2523: 	movem.l (sp),d0/d1/d2/d3/a1
                            	  2524: 	fmove.x 20(sp),fp0
                            	  2525: 	cchk 44(a0)
                            	  2526: 	unlk a2
                            	  2527: 	rts
                            	  2528: 	endif
                            	  2529: 
                            	  2530: PRTLN:
00:00006F94 7200            	  2531: 	CLR.L	D1
00:00006F96 1219            	  2532: 	MOVE.B (A1)+,D1	get the binary line number
00:00006F98 E149            	  2533: 	LSL	#8,D1
00:00006F9A 1219            	  2534: 	MOVE.B (A1)+,D1
00:00006F9C F2015080        	  2535: 	FMOVE.W D1,FP1
00:00006FA0 7805            	  2536: 	MOVEQ	#5,D4			; display a 5 digit line no.
00:00006FA2 61A6            	  2537: 	BSR	PRTNUM
00:00006FA4 103C0020        	  2538: 	MOVE.B	#' ',D0         followed by a blank
00:00006FA8 6100EC8A        	  2539: 	BSR	GOOUT
00:00006FAC 4240            	  2540: 	CLR	D0		stop char. is a zero
00:00006FAE 6000FF72        	  2541: 	BRA	PRTSTG		display the rest of the line
                            	  2542: 
                            	  2543: 
                            	  2544: ; ===== Test text byte following the call to this subroutine. If it
                            	  2545: ; equals the byte pointed to by A0, return to the code following
                            	  2546: ; the call. If they are not equal, branch to the point
                            	  2547: ;	indicated by the offset byte following the text byte.
                            	  2548: 
                            	  2549: TSTC:
00:00006FB2 6162            	  2550: 	BSR	IGNBLK				; ignore leading blanks
00:00006FB4 225F            	  2551: 	MOVE.L (SP)+,A1		; get the return address
00:00006FB6 1219            	  2552: 	MOVE.B (A1)+,D1		; get the byte to compare
00:00006FB8 B210            	  2553: 	CMP.B	(A0),D1 		;	is it = to what A0 points to?
00:00006FBA 6708            	  2554: 	BEQ	TC1						; if so
00:00006FBC 7200            	  2555: 	CLR.L	D1					; If not, add the second
00:00006FBE 1211            	  2556: 	MOVE.B (A1),D1 		; byte following the call to
00:00006FC0 D3C1            	  2557: 	ADD.L	D1,A1				; the return address.
00:00006FC2 4ED1            	  2558: 	JMP	(A1)					; jump to the routine
                            	  2559: TC1
00:00006FC4 5288            	  2560: 	ADDQ.L #1,A0			; if equal, bump text pointer
00:00006FC6 5289            	  2561: 	ADDQ.L #1,A1			; Skip the 2 bytes following
00:00006FC8 4ED1            	  2562: 	JMP	(A1)					; the call and continue.
                            	  2563: 
                            	  2564: 
                            	  2565: ; ===== See if the text pointed to by A0 is a number. If so,
                            	  2566: ;	return the number in FP1 and the number of digits in D2,
                            	  2567: ;	else return zero in FP1 and D2.
                            	  2568: ; If text is not a number, then A0 is not updated, otherwise
                            	  2569: ; A0 is advanced past the number. Note A0 is always updated
                            	  2570: ; past leading spaces.
                            	  2571: 
                            	  2572: TSTNUM
00:00006FCA 4E52FFE0        	  2573: 	link a2,#-32
00:00006FCE 2F7900040098001C	  2574: 	move.l _canary,28(sp)
00:00006FD6 48D70202        	  2575: 	movem.l d1/a1,(sp)
00:00006FDA F22F68000010    	  2576: 	fmove.x fp0,16(sp)
00:00006FE0 7029            	  2577: 	moveq #41,d0						; function #41, get float
00:00006FE2 7201            	  2578: 	moveq #1,d1							; d1 = input stride
00:00006FE4 2248            	  2579: 	move.l a0,a1						; a1 = pointer to input buffer
00:00006FE6 4E4F            	  2580: 	trap #15								; call BIOS get float function
00:00006FE8 2049            	  2581: 	move.l a1,a0						; set text pointer
00:00006FEA 7001            	  2582: 	moveq #DT_NUMERIC,d0		; default data type = number
00:00006FEC F2000080        	  2583: 	fmove.x fp0,fp1					; return expected in fp1
00:00006FF0 4A41            	  2584: 	tst.w d1								; check if a number (digits > 0?)
00:00006FF2 6706            	  2585: 	beq .0002
00:00006FF4 7400            	  2586: 	clr.l d2								; d2.l = 0
00:00006FF6 3401            	  2587: 	move.w d1,d2						; d2 = number of digits
00:00006FF8 6008            	  2588: 	bra .0001
                            	  2589: .0002											; not a number, return with orignal text pointer
00:00006FFA 7000            	  2590: 	moveq #0,d0							; data type = not a number
00:00006FFC 7400            	  2591: 	moveq #0,d2							; d2 = 0
00:00006FFE F2024080        	  2592: 	fmove.l d2,fp1					; return a zero
                            	  2593: .0001
00:00007002 4CD70202        	  2594: 	movem.l (sp),d1/a1
00:00007006 F22F48000010    	  2595: 	fmove.x 16(sp),fp0
00:0000700C A2AF0003001C    	  2596: 	cchk 28(sp)
00:00007012 4E5A            	  2597: 	unlk a2
00:00007014 4E75            	  2598: 	rts
                            	  2599: 		
                            	  2600: ; ===== Skip over blanks in the text pointed to by A0.
                            	  2601: 
                            	  2602: IGNBLK
00:00007016 0C180020        	  2603: 	CMP.B	#' ',(A0)+		; see if it's a space
00:0000701A 67FA            	  2604: 	BEQ	IGNBLK					; if so, swallow it
00:0000701C 5388            	  2605: 	SUBQ.L #1,A0				; decrement the text pointer
00:0000701E 4E75            	  2606: 	RTS
                            	  2607: 
                            	  2608: *
                            	  2609: * ===== Convert the line of text in the input buffer to upper
                            	  2610: *	case (except for stuff between quotes).
                            	  2611: *
00:00007020 41FA01A6        	  2612: TOUPBUF LEA	BUFFER,A0	set up text pointer
00:00007024 4201            	  2613: 	CLR.B	D1		clear quote flag
                            	  2614: TOUPB1	
00:00007026 1018            	  2615: 	MOVE.B	(A0)+,D0	get the next text char.
00:00007028 B03C000D        	  2616: 	CMP.B	#CR,D0		is it end of line?
00:0000702C 6718            	  2617: 	BEQ	TOUPBRT 	if so, return
00:0000702E B03C0022        	  2618: 	CMP.B	#'"',D0         a double quote?
00:00007032 6714            	  2619: 	BEQ	DOQUO
00:00007034 B03C0027        	  2620: 	CMP.B	#'''',D0        or a single quote?
00:00007038 670E            	  2621: 	BEQ	DOQUO
00:0000703A 4A01            	  2622: 	TST.B	D1		inside quotes?
00:0000703C 66E8            	  2623: 	BNE	TOUPB1		if so, do the next one
00:0000703E 6118            	  2624: 	BSR	TOUPPER 	convert to upper case
00:00007040 1100            	  2625: 	MOVE.B	D0,-(A0)	store it
00:00007042 5288            	  2626: 	ADDQ.L	#1,A0
00:00007044 60E0            	  2627: 	BRA	TOUPB1		and go back for more
                            	  2628: TOUPBRT
00:00007046 4E75            	  2629: 	RTS
                            	  2630: 
00:00007048 4A01            	  2631: DOQUO	TST.B	D1		are we inside quotes?
00:0000704A 6604            	  2632: 	BNE	DOQUO1
00:0000704C 1200            	  2633: 	MOVE.B	D0,D1		if not, toggle inside-quotes flag
00:0000704E 60D6            	  2634: 	BRA	TOUPB1
00:00007050 B200            	  2635: DOQUO1	CMP.B	D0,D1		make sure we're ending proper quote
00:00007052 66D2            	  2636: 	BNE	TOUPB1		if not, ignore it
00:00007054 4201            	  2637: 	CLR.B	D1		else clear quote flag
00:00007056 60CE            	  2638: 	BRA	TOUPB1
                            	  2639: 
                            	  2640: *
                            	  2641: * ===== Convert the character in D0 to upper case
                            	  2642: *
00:00007058 B03C0061        	  2643: TOUPPER CMP.B	#'a',D0         is it < 'a'?
00:0000705C 650A            	  2644: 	BCS	TOUPRET
00:0000705E B03C007A        	  2645: 	CMP.B	#'z',D0         or > 'z'?
00:00007062 6204            	  2646: 	BHI	TOUPRET
00:00007064 903C0020        	  2647: 	SUB.B	#32,D0		if not, make it upper case
00:00007068 4E75            	  2648: TOUPRET RTS
                            	  2649: 
                            	  2650: *
                            	  2651: * 'CHKIO' checks the input. If there's no input, it will return
                            	  2652: * to the caller with the Z flag set. If there is input, the Z
                            	  2653: * flag is cleared and the input byte is in D0. However, if a
                            	  2654: * control-C is read, 'CHKIO' will warm-start BASIC and will not
                            	  2655: * return to the caller.
                            	  2656: *
                            	  2657: CHKIO
00:0000706A 6100EBCC        	  2658: 	bsr	GOIN		get input if possible
00:0000706E 670A            	  2659: 	BEQ	CHKRET		if Zero, no input
00:00007070 B03C0003        	  2660: 	CMP.B	#CTRLC,D0	is it control-C?
00:00007074 6604            	  2661: 	BNE	CHKRET		if not
00:00007076 6000EC42        	  2662: 	BRA	WSTART		if so, do a warm start
                            	  2663: CHKRET
00:0000707A 4E75            	  2664: 	RTS
                            	  2665: 
                            	  2666: *
                            	  2667: * ===== Display a CR-LF sequence
                            	  2668: *
                            	  2669: ;CRLF	LEA	CLMSG,A6
                            	  2670: 
                            	  2671: 
                            	  2672: ; ===== Display a zero-ended string pointed to by register A6
                            	  2673: 
                            	  2674: PRMESG
00:0000707C 101E            	  2675: 	MOVE.B (A6)+,D0		; get the char.
00:0000707E 6706            	  2676: 	BEQ	PRMRET				; if it's zero, we're done
00:00007080 6100EBB2        	  2677: 	BSR	GOOUT					; else display it
00:00007084 60F6            	  2678: 	BRA	PRMESG
                            	  2679: PRMRET
00:00007086 4E75            	  2680: 	RTS
                            	  2681: 
                            	  2682: ******************************************************
                            	  2683: * The following routines are the only ones that need *
                            	  2684: * to be changed for a different I/O environment.     *
                            	  2685: ******************************************************
                            	  2686: 
                            	  2687: ; ===== Clear screen and home cursor
                            	  2688: 
                            	  2689: CLS:
00:00007088 700B            	  2690: 	moveq #11,d0			; set cursor position
00:0000708A 323CFF00        	  2691: 	move.w #$FF00,d1	; home cursor and clear screen
00:0000708E 4E4F            	  2692: 	trap #15
00:00007090 6000F0E0        	  2693: 	bra FINISH
                            	  2694: 
                            	  2695: ; ===== Output character to the console (Port 1) from register D0
                            	  2696: ;(Preserves all registers.)
                            	  2697: 
                            	  2698: OUTC:
00:00007094 48E7C000        	  2699: 	movem.l d0/d1,-(sp)
00:00007098 2200            	  2700: 	move.l d0,d1
00:0000709A 7006            	  2701: 	moveq #6,d0
00:0000709C 4E4F            	  2702: 	trap #15
00:0000709E 4CDF0003        	  2703: 	movem.l (sp)+,d0/d1
00:000070A2 4E75            	  2704: 	rts
                            	  2705: 
                            	  2706: * ===== Input a character from the console into register D0 (or
                            	  2707: *	return Zero status if there's no character available).
                            	  2708: *
                            	  2709: INC
00:000070A4 2F0E            	  2710: 	move.l	a6,-(a7)
00:000070A6 2C7A00C0        	  2711: 	move.l	INPPTR,a6
00:000070AA 4E96            	  2712: 	jsr			(a6)
00:000070AC 2C5F            	  2713: 	move.l	(a7)+,a6
00:000070AE 4E75            	  2714: 	rts
                            	  2715: 
                            	  2716: INC1
00:000070B0 2F01            	  2717: 	move.l	d1,-(a7)
00:000070B2 7005            	  2718: 	moveq.l	#5,d0			* function 5 GetKey
00:000070B4 4E4F            	  2719: 	trap		#15
00:000070B6 2001            	  2720: 	move.l	d1,d0
00:000070B8 221F            	  2721: 	move.l	(a7)+,d1
00:000070BA 0C0000FF        	  2722: 	cmpi.b	#-1,d0
00:000070BE 6602            	  2723: 	bne			.0001
00:000070C0 4200            	  2724: 	clr.b		d0
                            	  2725: .0001:
00:000070C2 4E75            	  2726: 	rts
                            	  2727: 
                            	  2728: *INC	BTST	#0,$10040	is character ready?
                            	  2729: *	BEQ	INCRET		if not, return Zero status
                            	  2730: *	MOVE.B	$10042,D0	else get the character
                            	  2731: *	AND.B	#$7F,D0 	zero out the high bit
                            	  2732: *INCRET	RTS
                            	  2733: 
                            	  2734: * ===== Output character to the host (Port 2) from register D0
                            	  2735: *	(Preserves all registers.)
                            	  2736: *
                            	  2737: AUXOUT:
00:000070C4 13FC0002000400A8	  2738: 	move.b #2,OutputDevice
00:000070CC 61C6            	  2739: 	bsr OUTC
00:000070CE 13FC0001000400A8	  2740: 	move.b #1,OutputDevice
00:000070D6 4E75            	  2741: 	rts
                            	  2742: 
                            	  2743: *AUXOUT	BTST	#1,$10041	is port 2 ready for a character?
                            	  2744: *	BEQ	AUXOUT		if not, wait for it
                            	  2745: *	MOVE.B	D0,$10043	out it goes.
                            	  2746: *	RTS
                            	  2747: 
                            	  2748: *
                            	  2749: * ===== Input a character from the host into register D0 (or
                            	  2750: *	return Zero status if there's no character available).
                            	  2751: *
                            	  2752: AUXIN:
00:000070D8 2F01            	  2753: 	move.l	d1,-(a7)
00:000070DA 7024            	  2754: 	moveq		#36,d0				; serial get char from buffer
00:000070DC 4E4F            	  2755: 	trap		#15
00:000070DE 2001            	  2756: 	move.l	d1,d0
00:000070E0 221F            	  2757: 	move.l	(a7)+,d1
00:000070E2 0C40FFFF        	  2758: 	cmpi.w	#-1,d0
00:000070E6 670A            	  2759: 	beq			.0001
00:000070E8 0200007F        	  2760: 	andi.b	#$7F,d0				; clear high bit
00:000070EC 4880            	  2761: 	ext.w		d0						; return character in d0
00:000070EE 48C0            	  2762: 	ext.l		d0
00:000070F0 4E75            	  2763: 	rts
                            	  2764: .0001:
00:000070F2 7000            	  2765: 	moveq		#0,d0					; return zf=1 if no character available
00:000070F4 4E75            	  2766: 	rts
                            	  2767: 
                            	  2768: ;AUXIN
                            	  2769: *AUXIN	BTST	#0,$10041	is character ready?
                            	  2770: *	BEQ	AXIRET		if not, return Zero status
                            	  2771: *	MOVE.B	$10043,D0	else get the character
                            	  2772: *	AND.B	#$7F,D0 	zero out the high bit
00:000070F6 4E75            	  2773: AXIRET	RTS
                            	  2774: 
                            	  2775: ; ===== Return to the resident monitor, operating system, etc.
                            	  2776: ;
                            	  2777: BYEBYE	
00:000070F8 23FC000000080004	  2778: 	move.l #8,_fpTextIncr
00:00007100 0094
00:00007102 60000784        	  2779: 	bra		Monitor
                            	  2780: ;	MOVE.B	#228,D7 	return to Tutor
                            	  2781: ;	TRAP	#14
                            	  2782: 
00:00007106 0D              	  2783: INITMSG DC.B	CR,LF,'MC68000 Tiny Float BASIC, v1.0',CR,LF,LF,0
00:00007107 0A
00:00007108 4D43363830303020
00:00007110 54696E7920466C6F
00:00007118 6174204241534943
00:00007120 2C2076312E30
00:00007126 0D
00:00007127 0A
00:00007128 0A
00:00007129 00
00:0000712A 0D              	  2784: OKMSG	DC.B	CR,LF,'OK',CR,LF,0
00:0000712B 0A
00:0000712C 4F4B
00:0000712E 0D
00:0000712F 0A
00:00007130 00
00:00007131 486F773F        	  2785: HOWMSG	DC.B	'How?',CR,LF,0
00:00007135 0D
00:00007136 0A
00:00007137 00
00:00007138 576861743F      	  2786: WHTMSG	DC.B	'What?',CR,LF,0
00:0000713D 0D
00:0000713E 0A
00:0000713F 00
00:00007140 547970653F      	  2787: TYPMSG	DC.B	'Type?',CR,LF,0
00:00007145 0D
00:00007146 0A
00:00007147 00
00:00007148 4E6F20737472696E	  2788: NOSTRING	DC.B 'No string space',CR,LF,0
00:00007150 67207370616365
00:00007157 0D
00:00007158 0A
00:00007159 00
00:0000715A 536F7272792E    	  2789: SRYMSG	DC.B	'Sorry.'
00:00007160 0D              	  2790: CLMSG	DC.B	CR,LF,0
00:00007161 0A
00:00007162 00
00:00007163 00              	  2791: 	DC.B	0	<- for aligning on a word boundary
                            	  2792: LSTROM	EQU	*		end of possible ROM area
                            	  2793: *
                            	  2794: * Internal variables follow:
                            	  2795: *
                            	  2796: 	align 2
00:00007164 00005C2E        	  2797: RANPNT	DC.L	START		random number pointer
00:00007168 00000000        	  2798: INPPTR	DS.L	1		input pointer
00:0000716C 00000000        	  2799: OUTPTR	DS.L	1 	output pointer
00:00007170 00000000        	  2800: CURRNT	DS.L	1		; Current line pointer
00:00007174 00000000        	  2801: STKFP		DS.L	1		; saves frame pointer
00:00007178 00000000        	  2802: STKGOS	DS.L	1		Saves stack pointer in 'GOSUB'
00:0000717C 00000000        	  2803: STKINP	DS.L	1		Saves stack pointer during 'INPUT'
00:00007180 00000000        	  2804: LOPVAR	DS.L	1		'FOR' loop save area
00:00007184 00000000        	  2805: LOPINC	DS.L	3		increment
00:00007188 *
00:00007190 00000000        	  2806: LOPLMT	DS.L	3		limit
00:00007194 *
00:0000719C 00000000        	  2807: LOPLN	DS.L	1		line number
00:000071A0 00000000        	  2808: LOPPT	DS.L	1		text pointer
00:000071A4 00000000        	  2809: IRQROUT	DS.L	1
00:000071A8 00000000        	  2810: STRSTK	DS.L	1		; string pointer stack area, 8 entries
00:000071AC 00000000        	  2811: StrSp		DS.L	1		; string stack stack pointer
00:000071B0 00000000        	  2812: StrArea	DS.L	1		; pointer to string area
00:000071B4 00000000        	  2813: LastStr	DS.L	1		; pointer to last used string in area
00:000071B8 00000000        	  2814: TXTUNF	DS.L	1		points to unfilled text area
00:000071BC 00000000        	  2815: VARBGN	DS.L	1		points to variable area
00:000071C0 00000000        	  2816: STKLMT	DS.L	1		holds lower limit for stack growth
00:000071C4 00000000        	  2817: DIRFLG	DS.L	1		; indicates 1=DIRECT mode
00:000071C8 00              	  2818: BUFFER	DS.B	BUFLEN		Keyboard input buffer
00:000071C9 *
                            	  2819: TXT	EQU	*		Beginning of program area
                            	  2820: ;	END
                            	  2821: 

Source: "boot.x68"
                            	   896: 
                            	   897: ; -----------------------------------------------------------------------------
                            	   898: ; -----------------------------------------------------------------------------
                            	   899: 
                            	   900: set_text_mode:
00:00007218 7040            	   901: 	moveq #TEXTCOL,d0
00:0000721A 13C0FD080000    	   902: 	move.b d0,TEXTREG					; number of columns
00:00007220 7020            	   903: 	moveq #TEXTROW,d0
00:00007222 13C0FD080001    	   904: 	move.b d0,TEXTREG+1				; number of rows
00:00007228 7000            	   905: 	moveq #0,d0
00:0000722A 13C0FD080003    	   906: 	move.b d0,TEXTREG+3				; text mode
00:00007230 7011            	   907: 	moveq #17,d0
00:00007232 13C0FD080008    	   908: 	move.b d0,TEXTREG+8				; max row scan
00:00007238 700B            	   909: 	moveq #11,d0
00:0000723A 13C0FD08000A    	   910: 	move.b d0,TEXTREG+10			; max pix
00:00007240 4E75            	   911: 	rts
                            	   912: 	
                            	   913: set_graphics_mode:
00:00007242 7080            	   914: 	moveq #TEXTCOL*2,d0
00:00007244 13C0FD080000    	   915: 	move.b d0,TEXTREG					; number of columns
00:0000724A 7040            	   916: 	moveq #TEXTROW*2,d0
00:0000724C 13C0FD080001    	   917: 	move.b d0,TEXTREG+1				; number of rows
00:00007252 7001            	   918: 	moveq #1,d0
00:00007254 13C0FD080003    	   919: 	move.b d0,TEXTREG+3				; graphics mode
00:0000725A 7007            	   920: 	moveq #7,d0
00:0000725C 13C0FD080008    	   921: 	move.b d0,TEXTREG+8				; max row scan
00:00007262 7007            	   922: 	moveq #7,d0
00:00007264 13C0FD08000A    	   923: 	move.b d0,TEXTREG+10			; max pix
00:0000726A 4E75            	   924: 	rts
                            	   925: 
                            	   926: ; -----------------------------------------------------------------------------
                            	   927: ; -----------------------------------------------------------------------------
                            	   928: 
                            	   929: get_screen_address:
00:0000726C 48E7E300        	   930: 	movem.l d0/d1/d2/d6/d7,-(a7)
00:00007270 7E02            	   931: 	moveq #2,d7
00:00007272 7C10            	   932: 	moveq #DEV_GETBUF1,d6
00:00007274 4E40            	   933: 	trap #0
00:00007276 2041            	   934: 	move.l d1,a0
00:00007278 4CDF00C7        	   935: 	movem.l (a7)+,d0/d1/d2/d6/d7
00:0000727C 4E75            	   936: 	rts
                            	   937: 	
                            	   938: 
                            	   939: CRLF:
00:0000727E 48E7C000        	   940: 	movem.l d0/d1,-(a7)
00:00007282 123C000D        	   941: 	move.b #13,d1
00:00007286 7006            	   942: 	moveq #6,d0						; output character function
00:00007288 4E4F            	   943: 	trap #15
00:0000728A 123C000A        	   944: 	move.b #10,d1
00:0000728E 7006            	   945: 	moveq #6,d0						; output character function
00:00007290 4E4F            	   946: 	trap #15
00:00007292 4CDF0003        	   947: 	movem.l (a7)+,d0/d1
00:00007296 4E75            	   948: 	rts
                            	   949: 
                            	   950: ;------------------------------------------------------------------------------
                            	   951: ; Display a string on standard output.
                            	   952: ;------------------------------------------------------------------------------
                            	   953: 
                            	   954: DisplayString:
00:00007298 48E7C040        	   955: 	movem.l	d0/d1/a1,-(a7)
                            	   956: dspj1:
00:0000729C 7200            	   957: 	clr.l d1							; clear upper bits of d1
00:0000729E 1219            	   958: 	move.b (a1)+,d1				; move string char into d1
00:000072A0 6706            	   959: 	beq.s dsret						; is it end of string ?
00:000072A2 7006            	   960: 	moveq #6,d0						; output character function
00:000072A4 4E4F            	   961: 	trap #15
00:000072A6 60F4            	   962: 	bra.s	dspj1						; go back for next character
                            	   963: dsret:
00:000072A8 4CDF0203        	   964: 	movem.l	(a7)+,d0/d1/a1
00:000072AC 4E75            	   965: 	rts
                            	   966: 
                            	   967: ;------------------------------------------------------------------------------
                            	   968: ; Display a string on the screen followed by carriage return / linefeed.
                            	   969: ;------------------------------------------------------------------------------
                            	   970: 
                            	   971: DisplayStringCRLF:
00:000072AE 61E8            	   972: 	bsr		DisplayString
00:000072B0 60CC            	   973: 	bra		CRLF
                            	   974: 
                            	   975: ;------------------------------------------------------------------------------
                            	   976: ; Display a string on the screen limited to 255 chars max.
                            	   977: ;------------------------------------------------------------------------------
                            	   978: 
                            	   979: DisplayStringLimited:
00:000072B2 48E7E040        	   980: 	movem.l	d0/d1/d2/a1,-(a7)
00:000072B6 3401            	   981: 	move.w	d1,d2					; d2 = max count
00:000072B8 024200FF        	   982: 	andi.w	#$00FF,d2			; limit to 255 chars
00:000072BC 600A            	   983: 	bra.s		.0003					; enter loop at bottom
                            	   984: .0001:
00:000072BE 7200            	   985: 	clr.l d1							; clear upper bits of d1
00:000072C0 1219            	   986: 	move.b (a1)+,d1				; move string char into d1
00:000072C2 6708            	   987: 	beq.s .0002						; is it end of string ?
00:000072C4 7006            	   988: 	moveq #6,d0						; output character function
00:000072C6 4E4F            	   989: 	trap #15
                            	   990: .0003:
00:000072C8 51CAFFF4        	   991: 	dbra		d2,.0001			; go back for next character
                            	   992: .0002:
00:000072CC 4CDF0207        	   993: 	movem.l	(a7)+,d0/d1/d2/a1
00:000072D0 4E75            	   994: 	rts
                            	   995: 
                            	   996: DisplayStringLimitedCRLF:
00:000072D2 61DE            	   997: 	bsr		DisplayStringLimited
00:000072D4 60A8            	   998: 	bra		CRLF
                            	   999: 	
                            	  1000: 
                            	  1001: ;==============================================================================
                            	  1002: ; TRAP #15 handler
                            	  1003: ;
                            	  1004: ; Parameters:
                            	  1005: ;		d0.w = function number to perform
                            	  1006: ;==============================================================================
                            	  1007: 
                            	  1008: TRAP15:
00:000072D6 48E78080        	  1009: 	movem.l	d0/a0,-(a7)
00:000072DA 41FA0010        	  1010: 	lea T15DispatchTable,a0
00:000072DE E580            	  1011: 	asl.l #2,d0
00:000072E0 20700000        	  1012: 	move.l (a0,d0.w),a0
00:000072E4 4E90            	  1013: 	jsr (a0)
00:000072E6 4CDF0101        	  1014: 	movem.l (a7)+,d0/a0
00:000072EA 4E73            	  1015: 	rte
                            	  1016: 
                            	  1017: 		align	2
                            	  1018: T15DispatchTable:
00:000072EC 000072D2        	  1019: 	dc.l	DisplayStringLimitedCRLF
00:000072F0 000072B2        	  1020: 	dc.l	DisplayStringLimited
00:000072F4 0000774C        	  1021: 	dc.l	StubRout
00:000072F8 0000774C        	  1022: 	dc.l	StubRout
00:000072FC 0000774C        	  1023: 	dc.l	StubRout
00:00007300 00000808        	  1024: 	dc.l	GetKey
00:00007304 00008FEA        	  1025: 	dc.l	OutputChar
00:00007308 000007FC        	  1026: 	dc.l	CheckForKey
00:0000730C 0000748C        	  1027: 	dc.l	GetTick
00:00007310 0000774C        	  1028: 	dc.l	StubRout
                            	  1029: 	; 10
00:00007314 0000774C        	  1030: 	dc.l	StubRout
00:00007318 00007714        	  1031: 	dc.l	Cursor1
00:0000731C 000007F4        	  1032: 	dc.l	SetKeyboardEcho
00:00007320 000072AE        	  1033: 	dc.l	DisplayStringCRLF
00:00007324 00007298        	  1034: 	dc.l	DisplayString
00:00007328 0000774C        	  1035: 	dc.l	StubRout
00:0000732C 0000774C        	  1036: 	dc.l	StubRout
00:00007330 0000774C        	  1037: 	dc.l	StubRout
00:00007334 0000774C        	  1038: 	dc.l	StubRout
00:00007338 000007FC        	  1039: 	dc.l	CheckForKey
                            	  1040: 	; 20
00:0000733C 0000774C        	  1041: 	dc.l	StubRout
00:00007340 0000774C        	  1042: 	dc.l	StubRout
00:00007344 0000774C        	  1043: 	dc.l	StubRout
00:00007348 0000774C        	  1044: 	dc.l	StubRout
00:0000734C 0000774C        	  1045: 	dc.l	StubRout
00:00007350 0000774C        	  1046: 	dc.l	StubRout
00:00007354 0000774C        	  1047: 	dc.l	StubRout
00:00007358 0000774C        	  1048: 	dc.l	StubRout
00:0000735C 0000774C        	  1049: 	dc.l	StubRout
00:00007360 0000774C        	  1050: 	dc.l	StubRout
                            	  1051: 	; 30
00:00007364 0000774C        	  1052: 	dc.l	StubRout
00:00007368 0000774C        	  1053: 	dc.l	StubRout
00:0000736C 0000747C        	  1054: 	dc.l	SimHardware	;rotate_iofocus
00:00007370 00001680        	  1055: 	dc.l	SerialPeekCharDirect
00:00007374 0000169A        	  1056: 	dc.l	SerialPutChar
00:00007378 00001644        	  1057: 	dc.l	SerialPeekChar
00:0000737C 000015CC        	  1058: 	dc.l	SerialGetChar
00:00007380 00002062        	  1059: 	dc.l	T15LockSemaphore
00:00007384 00002068        	  1060: 	dc.l	T15UnlockSemaphore
00:00007388 00008F4A        	  1061: 	dc.l	prtflt
                            	  1062: 	; 40
00:0000738C 00001FAC        	  1063: 	dc.l  _GetRand
00:00007390 0000206E        	  1064: 	dc.l	T15GetFloat
00:00007394 0000207C        	  1065: 	dc.l	T15Abort
00:00007398 00008F90        	  1066: 	dc.l	T15FloatToString
00:0000739C 0000774C        	  1067: 	dc.l	StubRout
00:000073A0 0000774C        	  1068: 	dc.l	StubRout
00:000073A4 0000774C        	  1069: 	dc.l	StubRout
00:000073A8 0000774C        	  1070: 	dc.l	StubRout
00:000073AC 0000774C        	  1071: 	dc.l	StubRout
00:000073B0 0000774C        	  1072: 	dc.l	StubRout
                            	  1073: 	; 50
00:000073B4 0000774C        	  1074: 	dc.l	StubRout
00:000073B8 0000774C        	  1075: 	dc.l	StubRout
00:000073BC 0000774C        	  1076: 	dc.l	StubRout
00:000073C0 0000774C        	  1077: 	dc.l	StubRout
00:000073C4 0000774C        	  1078: 	dc.l	StubRout
00:000073C8 0000774C        	  1079: 	dc.l	StubRout
00:000073CC 0000774C        	  1080: 	dc.l	StubRout
00:000073D0 0000774C        	  1081: 	dc.l	StubRout
00:000073D4 0000774C        	  1082: 	dc.l	StubRout
00:000073D8 0000774C        	  1083: 	dc.l	StubRout
                            	  1084: 	; 60
00:000073DC 0000774C        	  1085: 	dc.l	StubRout
00:000073E0 0000774C        	  1086: 	dc.l	StubRout
00:000073E4 0000774C        	  1087: 	dc.l	StubRout
00:000073E8 0000774C        	  1088: 	dc.l	StubRout
00:000073EC 0000774C        	  1089: 	dc.l	StubRout
00:000073F0 0000774C        	  1090: 	dc.l	StubRout
00:000073F4 0000774C        	  1091: 	dc.l	StubRout
00:000073F8 0000774C        	  1092: 	dc.l	StubRout
00:000073FC 0000774C        	  1093: 	dc.l	StubRout
00:00007400 0000774C        	  1094: 	dc.l	StubRout
                            	  1095: 	; 70
00:00007404 0000774C        	  1096: 	dc.l	StubRout
00:00007408 0000774C        	  1097: 	dc.l	StubRout
00:0000740C 0000774C        	  1098: 	dc.l	StubRout
00:00007410 0000774C        	  1099: 	dc.l	StubRout
00:00007414 0000774C        	  1100: 	dc.l	StubRout
00:00007418 0000774C        	  1101: 	dc.l	StubRout
00:0000741C 0000774C        	  1102: 	dc.l	StubRout
00:00007420 0000774C        	  1103: 	dc.l	StubRout
00:00007424 0000774C        	  1104: 	dc.l	StubRout
00:00007428 0000774C        	  1105: 	dc.l	StubRout
                            	  1106: 	; 80
00:0000742C 000074B6        	  1107: 	dc.l	SetPenColor
00:00007430 0000774C        	  1108: 	dc.l	StubRout
00:00007434 0000774C        	  1109: 	dc.l	StubRout
00:00007438 0000774C        	  1110: 	dc.l	StubRout
00:0000743C 0000774C        	  1111: 	dc.l	StubRout
00:00007440 00007634        	  1112: 	dc.l	DrawToXY
00:00007444 00007626        	  1113: 	dc.l	MoveToXY
00:00007448 0000774C        	  1114: 	dc.l	StubRout
00:0000744C 0000774C        	  1115: 	dc.l	StubRout
00:00007450 0000774C        	  1116: 	dc.l	StubRout
                            	  1117: 	; 90
00:00007454 0000774C        	  1118: 	dc.l	StubRout
00:00007458 0000774C        	  1119: 	dc.l	StubRout
00:0000745C 00007494        	  1120: 	dc.l	SetDrawMode
00:00007460 0000774C        	  1121: 	dc.l	StubRout
00:00007464 000074BE        	  1122: 	dc.l	GRBufferToScreen
00:00007468 0000774C        	  1123: 	dc.l	StubRout
00:0000746C 0000774C        	  1124: 	dc.l	StubRout
00:00007470 0000774C        	  1125: 	dc.l	StubRout
00:00007474 0000774C        	  1126: 	dc.l	StubRout
00:00007478 0000774C        	  1127: 	dc.l	StubRout
                            	  1128: 
                            	  1129: ;------------------------------------------------------------------------------
                            	  1130: 
                            	  1131: SimHardware:
00:0000747C 0C410003        	  1132: 	cmpi.w #3,d1
00:00007480 6608            	  1133: 	bne.s .0001
00:00007482 223C000408B8    	  1134: 	move.l #sys_switches,d1
00:00007488 4E75            	  1135: 	rts
                            	  1136: .0001:
00:0000748A 4E75            	  1137: 	rts
                            	  1138: 
                            	  1139: ;------------------------------------------------------------------------------
                            	  1140: ;
                            	  1141: GetTick:
00:0000748C 22390004009C    	  1142: 	move.l tickcnt,d1
00:00007492 4E75            	  1143: 	rts
                            	  1144: 
                            	  1145: ;------------------------------------------------------------------------------
                            	  1146: ;
                            	  1147: SetDrawMode:
00:00007494 0C41000A        	  1148: 	cmpi.w #10,d1
00:00007498 660A            	  1149: 	bne.s .0001
00:0000749A 13FC000500040D80	  1150: 	move.b #5,framebuf_dcb+DCB_OPCODE			; 'OR' operation
00:000074A2 4E75            	  1151: 	rts
                            	  1152: .0001:
00:000074A4 0C410011        	  1153: 	cmpi.w #17,d1
00:000074A8 660A            	  1154: 	bne.s .0002
00:000074AA 33FC0001000408AC	  1155: 	move.w #1,gr_double_buffer
00:000074B2 4E75            	  1156: 	rts
                            	  1157: .0002:
00:000074B4 4E75            	  1158: 	rts
                            	  1159: 	
                            	  1160: SetPenColor:
00:000074B6 33C100040D7C    	  1161: 	move.w d1,framebuf_dcb+DCB_FGCOLOR
00:000074BC 4E75            	  1162: 	rts
                            	  1163: 
                            	  1164: ;------------------------------------------------------------------------------
                            	  1165: ; Page flip between two buffers.
                            	  1166: ;------------------------------------------------------------------------------
                            	  1167: 
                            	  1168: GRBufferToScreen:
00:000074BE 7E06            	  1169: 	move.l #6,d7						; framebuffer device
00:000074C0 7C0D            	  1170: 	move.l #DEV_SWAPBUF,d6	; swap buffers
00:000074C2 4E40            	  1171: 	trap #0
00:000074C4 4E75            	  1172: 	rts
                            	  1173: 
00:000074C6 48E740C0        	  1174: 	movem.l d1/a0/a1,-(a7)
00:000074CA 1239FD200003    	  1175: 	move.b FRAMEBUF+3,d1
00:000074D0 0A010001        	  1176: 	eor.b #1,d1
00:000074D4 13C1FD200003    	  1177: 	move.b d1,FRAMEBUF+3					; page flip
00:000074DA 2279000408B0    	  1178: 	move.l gr_bitmap_buffer,a1
00:000074E0 2079000408A4    	  1179: 	move.l gr_bitmap_screen,a0
00:000074E6 23C8000408B0    	  1180: 	move.l a0,gr_bitmap_buffer
00:000074EC 23C9000408A4    	  1181: 	move.l a1,gr_bitmap_screen
00:000074F2 4CDF0302        	  1182: 	movem.l (a7)+,d1/a0/a1
00:000074F6 4E75            	  1183: 	rts
                            	  1184: 
                            	  1185: ; The following copies the buffer, why? Not needed if page flipping.
                            	  1186: ;	movem.l d0/a0/a1,-(a7)
                            	  1187: ;	move.l gr_bitmap_buffer,a1
                            	  1188: ;	move.l gr_bitmap_screen,a0
                            	  1189: ;	move.w gr_width,d0
                            	  1190: ;	mulu gr_height,d0
                            	  1191: ;	lsr.l #4,d0							; moving 16 pixels per iteration
                            	  1192: ;	move.l #0,$BFFFFFF8			; set burst length zero
                            	  1193: ;	bra.s .loop
                            	  1194: ;.loop2:
                            	  1195: ;	swap d0
                            	  1196: ;.loop:
                            	  1197: ;	move.l a1,$BFFFFFF0			; set source address
                            	  1198: ;	tst.l $BFFFFFFC					; do a read op, no value needed
                            	  1199: ;	move.l a0,$BFFFFFF4			; set destination address
                            	  1200: ;	move.l d0,$BFFFFFFC			; do a write operation (any value)
                            	  1201: ;	dbra d0,.loop
                            	  1202: ;	swap d0									; might go over 32/64 kB
                            	  1203: ;	dbra d0,.loop2
                            	  1204: ;	movem.l (a7)+,d0/a0/a1
                            	  1205: ;	rts
                            	  1206: 
                            	  1207: 
                            	  1208: TestBitmap:
                            	  1209: ;	move.w #$0700,pen_color		; dark blue
00:000074F8 33FC070000040D78	  1210: 	move.w #$0700,framebuf_dcb+DCB_BKCOLOR
00:00007500 7E06            	  1211: 	move.l #6,d7
00:00007502 7C0C            	  1212: 	move.l #DEV_CLEAR,d6
00:00007504 4E40            	  1213: 	trap #0
                            	  1214: ;	bsr clear_bitmap_screen4
00:00007506 705E            	  1215: 	moveq #94,d0							; page flip (display blank screen)
00:00007508 4E4F            	  1216: 	trap #15
00:0000750A 33FC007C00040890	  1217: 	move.w #$007c,pen_color		; red pen
00:00007512 7E06            	  1218: 	moveq #6,d7
00:00007514 7C07            	  1219: 	moveq #DEV_SET_OUTPOS,d6
00:00007516 7200            	  1220: 	moveq #0,d1
00:00007518 7401            	  1221: 	moveq #1,d2
00:0000751A 4E40            	  1222: 	trap #0
00:0000751C 7C14            	  1223: 	moveq #DEV_GET_DIMEN,d6
00:0000751E 4E40            	  1224: 	trap #0
00:00007520 5381            	  1225: 	subq.l #1,d1
00:00007522 2601            	  1226: 	move.l d1,d3
00:00007524 7801            	  1227: 	moveq #1,d4
00:00007526 6100018A        	  1228: 	bsr DrawHorizTo
00:0000752A 42B900040894    	  1229: 	clr.l gr_x
00:00007530 42B900040898    	  1230: 	clr.l gr_y
00:00007536 7600            	  1231: 	move.l #0,d3
00:00007538 2839000408A0    	  1232: 	move.l gr_height,d4
00:0000753E 5384            	  1233: 	subq.l #1,d4
00:00007540 610001A2        	  1234: 	bsr DrawVertTo
00:00007544 33FCE00100040890	  1235: 	move.w #$E001,pen_color		; green pen
00:0000754C 23FC000000020004	  1236: 	move.l #2,gr_x
00:00007554 0894
00:00007556 42B900040898    	  1237: 	clr.l gr_y
00:0000755C 7602            	  1238: 	move.l #2,d3
00:0000755E 2839000408A0    	  1239: 	move.l gr_height,d4
00:00007564 5384            	  1240: 	subq.l #1,d4
00:00007566 6100017C        	  1241: 	bsr DrawVertTo
00:0000756A 42B900040894    	  1242: 	clr.l gr_x
00:00007570 42B900040898    	  1243: 	clr.l gr_y
00:00007576 26390004089C    	  1244: 	move.l gr_width,d3
00:0000757C 5383            	  1245: 	subq.l #1,d3
00:0000757E 23C300040894    	  1246: 	move.l d3,gr_x
00:00007584 2839000408A0    	  1247: 	move.l gr_height,d4
00:0000758A 5384            	  1248: 	subq.l #1,d4
00:0000758C 610000A6        	  1249: 	bsr DrawToXY
00:00007590 705E            	  1250: 	moveq #94,d0							; page flip again
00:00007592 4E4F            	  1251: 	trap #15
00:00007594 600002F2        	  1252: 	bra Monitor
                            	  1253: 
                            	  1254: Diagonal1:
00:00007598 42B900040894    	  1255: 	clr.l gr_x
00:0000759E 42B900040898    	  1256: 	clr.l gr_y
00:000075A4 26390004089C    	  1257: 	move.l gr_width,d3
00:000075AA 5383            	  1258: 	subq.l #1,d3
00:000075AC 2839000408A0    	  1259: 	move.l gr_height,d4
00:000075B2 5384            	  1260: 	subq.l #1,d4
00:000075B4 617E            	  1261: 	bsr DrawToXY
00:000075B6 4E75            	  1262: 	rts
                            	  1263: 
                            	  1264: Diagonal2:
00:000075B8 26390004089C    	  1265: 	move.l gr_width,d3
00:000075BE 5383            	  1266: 	subq.l #1,d3
00:000075C0 23C300040894    	  1267: 	move.l d3,gr_x
00:000075C6 42B900040898    	  1268: 	clr.l gr_y
00:000075CC 2639000408A0    	  1269: 	move.l gr_height,d3
00:000075D2 5383            	  1270: 	subq.l #1,d3
00:000075D4 7800            	  1271: 	moveq #0,d4
00:000075D6 33FCE00100040890	  1272: 	move.w #$E001,pen_color
00:000075DE 6154            	  1273: 	bsr DrawToXY
00:000075E0 4E75            	  1274: 	rts
                            	  1275: 
                            	  1276: Vertical1:
00:000075E2 42B900040894    	  1277: 	clr.l gr_x
00:000075E8 42B900040898    	  1278: 	clr.l gr_y
00:000075EE 7600            	  1279: 	move.l #0,d3
00:000075F0 2839000408A0    	  1280: 	move.l gr_height,d4
00:000075F6 5384            	  1281: 	subq.l #1,d4
00:000075F8 610000EA        	  1282: 	bsr DrawVertTo
00:000075FC 4E75            	  1283: 	rts
                            	  1284: 
                            	  1285: Vertical2:
00:000075FE 33FCE00100040890	  1286: 	move.w #$E001,pen_color		; green pen
00:00007606 23FC000000020004	  1287: 	move.l #2,gr_x
00:0000760E 0894
00:00007610 42B900040898    	  1288: 	clr.l gr_y
00:00007616 7602            	  1289: 	move.l #2,d3
00:00007618 2839000408A0    	  1290: 	move.l gr_height,d4
00:0000761E 5384            	  1291: 	subq.l #1,d4
00:00007620 610000C2        	  1292: 	bsr DrawVertTo
00:00007624 4E75            	  1293: 	rts
                            	  1294: 
                            	  1295: ;------------------------------------------------------------------------------
                            	  1296: ; Plot on bitmap screen using current pen color.
                            	  1297: ;
                            	  1298: ;	Parameters:
                            	  1299: ;		d1 = x co-ordinate
                            	  1300: ;		d2 = y co-ordinate
                            	  1301: ;------------------------------------------------------------------------------
                            	  1302: 	
                            	  1303: ;parameter OPBLACK = 4'd0;
                            	  1304: ;parameter OPCOPY = 4'd1;
                            	  1305: ;parameter OPINV = 4'd2;
                            	  1306: ;parameter OPAND = 4'd4;
                            	  1307: ;parameter OPOR = 4'd5;
                            	  1308: ;parameter OPXOR = 4'd6;
                            	  1309: ;parameter OPANDN = 4'd7;
                            	  1310: ;parameter OPNAND = 4'd8;
                            	  1311: ;parameter OPNOR = 4'd9;
                            	  1312: ;parameter OPXNOR = 4'd10;
                            	  1313: ;parameter OPORN = 4'd11;
                            	  1314: ;parameter OPWHITE = 4'd15;
                            	  1315: 
                            	  1316: ;------------------------------------------------------------------------------
                            	  1317: ; Set graphics cursor position.
                            	  1318: ;------------------------------------------------------------------------------
                            	  1319: 
                            	  1320: MoveToXY:
00:00007626 23C300040894    	  1321: 	move.l d3,gr_x
00:0000762C 23C400040898    	  1322: 	move.l d4,gr_y
00:00007632 4E75            	  1323: 	rts
                            	  1324: 
                            	  1325: ;------------------------------------------------------------------------------
                            	  1326: ; Draw a line from the current graphics position to x1,y1.
                            	  1327: ;
                            	  1328: ; Register Usage:
                            	  1329: ;		d1 = x0
                            	  1330: ;		d2 = y0
                            	  1331: ;		d3 = x1
                            	  1332: ;		d4 = y1
                            	  1333: ;		d5 = dx
                            	  1334: ;		d6 = dy
                            	  1335: ;		d7 = sx
                            	  1336: ;		d0 = sy
                            	  1337: ;		a0 = err
                            	  1338: ;		a1 = 2*err
                            	  1339: ;------------------------------------------------------------------------------
                            	  1340: 
                            	  1341: DrawToXY:
00:00007634 48E7E7C0        	  1342: 	movem.l d0/d1/d2/d5/d6/d7/a0/a1,-(a7)
00:00007638 223900040894    	  1343: 	move.l gr_x,d1
00:0000763E 243900040898    	  1344: 	move.l gr_y,d2
00:00007644 2A03            	  1345: 	move.l d3,d5
00:00007646 2C04            	  1346: 	move.l d4,d6
00:00007648 9A81            	  1347: 	sub.l d1,d5			; d5 = x1-x0
00:0000764A 6608            	  1348: 	bne.s .notVert
00:0000764C 4CDF03E7        	  1349: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:00007650 60000092        	  1350: 	bra DrawVertTo
                            	  1351: .notVert:
00:00007654 6A02            	  1352: 	bpl.s .0001
00:00007656 4485            	  1353: 	neg.l d5				
                            	  1354: .0001:						; d5 = dx = abs(x1-x0)
00:00007658 9C82            	  1355: 	sub.l d2,d6			; d6 = y1-y0
00:0000765A 6606            	  1356: 	bne.s .notHoriz
00:0000765C 4CDF03E7        	  1357: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:00007660 6050            	  1358: 	bra DrawHorizTo
                            	  1359: .notHoriz:
00:00007662 6B02            	  1360: 	bmi.s .0002
00:00007664 4486            	  1361: 	neg.l d6
                            	  1362: .0002:						; d6 = dy = -abs(y1-y0)
00:00007666 7E01            	  1363: 	move.l #1,d7		; d7 = sx (x0 < x1 ? 1 : -1)
00:00007668 B681            	  1364: 	cmp.l d1,d3
00:0000766A 6202            	  1365: 	bhi.s .0004
00:0000766C 4487            	  1366: 	neg.l d7
                            	  1367: .0004:
00:0000766E 7001            	  1368: 	move.l #1,d0		; d0 = sy (y0 < y1) ? 1 : -1)
00:00007670 B882            	  1369: 	cmp.l d2,d4
00:00007672 6202            	  1370: 	bhi.s .0006
00:00007674 4480            	  1371: 	neg.l d0
                            	  1372: .0006:
00:00007676 2045            	  1373: 	move.l d5,a0		; a0 = error = dx + dy
00:00007678 D1C6            	  1374: 	adda.l d6,a0
                            	  1375: .loop:
00:0000767A 610091C6        	  1376: 	bsr CheckForCtrlC
00:0000767E 6100A41E        	  1377: 	bsr plot				; plot(x0,y0)
00:00007682 2248            	  1378: 	move.l a0,a1
00:00007684 D3C9            	  1379: 	adda.l a1,a1		; a1 = error *2
00:00007686 BC89            	  1380: 	cmp.l a1,d6			; e2 >= dy?
00:00007688 6E08            	  1381: 	bgt.s .0008
00:0000768A B681            	  1382: 	cmp.l d1,d3			; x0==x1?
00:0000768C 6712            	  1383: 	beq.s .brkloop
00:0000768E D1C6            	  1384: 	adda.l d6,a0		; err = err + dy
00:00007690 D287            	  1385: 	add.l d7,d1			; x0 = x0 + sx
                            	  1386: .0008:
00:00007692 BA89            	  1387: 	cmp.l a1,d5			; err2 <= dx?
00:00007694 6D08            	  1388: 	blt.s .0009
00:00007696 B882            	  1389: 	cmp.l d2,d4			; y0==y1?
00:00007698 6706            	  1390: 	beq.s .brkloop
00:0000769A D1C5            	  1391: 	adda.l d5,a0		; err = err + dx
00:0000769C D480            	  1392: 	add.l d0,d2			; y0 = y0 + sy
                            	  1393: .0009:
00:0000769E 60DA            	  1394: 	bra.s .loop
                            	  1395: .brkloop:
00:000076A0 23C300040894    	  1396: 	move.l d3,gr_x
00:000076A6 23C400040898    	  1397: 	move.l d4,gr_y
00:000076AC 4CDF03E7        	  1398: 	movem.l (a7)+,d0/d1/d2/d5/d6/d7/a0/a1
00:000076B0 4E75            	  1399: 	rts
                            	  1400: 
                            	  1401: ; Parameters:
                            	  1402: ;		d3 = x1
                            	  1403: ;		d4 = y1
                            	  1404: 
                            	  1405: DrawHorizTo:
00:000076B2 48E76400        	  1406: 	movem.l d1/d2/d5,-(a7)
00:000076B6 7E06            	  1407: 	moveq #6,d7
00:000076B8 7C17            	  1408: 	moveq #DEV_GET_OUTPOS,d6
00:000076BA 4E40            	  1409: 	trap #0
00:000076BC 7A01            	  1410: 	move.l #1,d5			; assume increment
00:000076BE B681            	  1411: 	cmp.l d1,d3
00:000076C0 6202            	  1412: 	bhi.s .0001
00:000076C2 4485            	  1413: 	neg.l d5					; switch to decrement
                            	  1414: .0001:
00:000076C4 7E06            	  1415: 	moveq #6,d7
00:000076C6 7C12            	  1416: 	moveq #DEV_WRITEAT,d6
00:000076C8 4E40            	  1417: 	trap #0
00:000076CA B681            	  1418: 	cmp.l d1,d3
00:000076CC 670A            	  1419: 	beq.s .0002
00:000076CE D285            	  1420: 	add.l d5,d1
00:000076D0 7E06            	  1421: 	moveq #6,d7
00:000076D2 7C07            	  1422: 	moveq #DEV_SET_OUTPOS,d6
00:000076D4 4E40            	  1423: 	trap #0
00:000076D6 60EC            	  1424: 	bra.s .0001
                            	  1425: .0002:
00:000076D8 7E06            	  1426: 	moveq #6,d7
00:000076DA 7C07            	  1427: 	moveq #DEV_SET_OUTPOS,d6	; update output position
00:000076DC 4E40            	  1428: 	trap #0
00:000076DE 4CDF0026        	  1429: 	movem.l (a7)+,d1/d2/d5
00:000076E2 4E75            	  1430: 	rts
                            	  1431: 	
                            	  1432: 	
                            	  1433: ; Parameters:
                            	  1434: ;		d3 = x1
                            	  1435: ;		d4 = y1
                            	  1436: 
                            	  1437: DrawVertTo:
00:000076E4 48E76400        	  1438: 	movem.l d1/d2/d5,-(a7)
00:000076E8 223900040894    	  1439: 	move.l gr_x,d1
00:000076EE 243900040898    	  1440: 	move.l gr_y,d2
00:000076F4 7A01            	  1441: 	move.l #1,d5			; assume increment
00:000076F6 B882            	  1442: 	cmp.l d2,d4
00:000076F8 6202            	  1443: 	bhi.s .0001
00:000076FA 4485            	  1444: 	neg.l d5					; switch to decrement
                            	  1445: .0001:
00:000076FC 6100A3A0        	  1446: 	bsr plot
00:00007700 B882            	  1447: 	cmp.l d2,d4
00:00007702 6704            	  1448: 	beq.s .0002
00:00007704 D485            	  1449: 	add.l d5,d2
00:00007706 60F4            	  1450: 	bra.s .0001
                            	  1451: .0002:
00:00007708 23C200040898    	  1452: 	move.l d2,gr_y
00:0000770E 4CDF0026        	  1453: 	movem.l (a7)+,d1/d2/d5
00:00007712 4E75            	  1454: 	rts
                            	  1455: 	
                            	  1456: 	
                            	  1457: ;plotLine(x0, y0, x1, y1)
                            	  1458: ;    dx = abs(x1 - x0)
                            	  1459: ;    sx = x0 < x1 ? 1 : -1
                            	  1460: ;    dy = -abs(y1 - y0)
                            	  1461: ;    sy = y0 < y1 ? 1 : -1
                            	  1462: ;    error = dx + dy
                            	  1463: ;    
                            	  1464: ;    while true
                            	  1465: ;        plot(x0, y0)
                            	  1466: ;        e2 = 2 * error
                            	  1467: ;        if e2 >= dy
                            	  1468: ;            if x0 == x1 break
                            	  1469: ;            error = error + dy
                            	  1470: ;            x0 = x0 + sx
                            	  1471: ;        end if
                            	  1472: ;        if e2 <= dx
                            	  1473: ;            if y0 == y1 break
                            	  1474: ;            error = error + dx
                            	  1475: ;            y0 = y0 + sy
                            	  1476: ;        end if
                            	  1477: ;    end while
                            	  1478:     
                            	  1479: ;------------------------------------------------------------------------------
                            	  1480: ; Cursor positioning / Clear screen
                            	  1481: ; - out of range settings are ignored
                            	  1482: ;
                            	  1483: ; Parameters:
                            	  1484: ;		d1.w cursor position, bits 0 to 7 are row, bits 8 to 15 are column.
                            	  1485: ;	Returns:
                            	  1486: ;		none
                            	  1487: ;------------------------------------------------------------------------------
                            	  1488: 
                            	  1489: Cursor1:
00:00007714 48E7F300        	  1490: 	movem.l d0/d1/d2/d3/d6/d7,-(a7)
00:00007718 0C41FF00        	  1491: 	cmpi.w #$FF00,d1
00:0000771C 6616            	  1492: 	bne.s .0002
00:0000771E 7E02            	  1493: 	moveq #2,d7
00:00007720 7C0C            	  1494: 	moveq #DEV_CLEAR,d6	; clear screen
00:00007722 4E40            	  1495: 	trap #0
00:00007724 7C07            	  1496: 	moveq #DEV_SET_OUTPOS,d6
00:00007726 7200            	  1497: 	moveq #0,d1
00:00007728 7400            	  1498: 	moveq #0,d2
00:0000772A 7600            	  1499: 	moveq #0,d3
00:0000772C 4E40            	  1500: 	trap #0
00:0000772E 4CDF00CF        	  1501: 	movem.l (a7)+,d0/d1/d2/d3/d6/d7
00:00007732 4E75            	  1502: 	rts
                            	  1503: .0002:
00:00007734 7E02            	  1504: 	moveq #2,d7
00:00007736 7C07            	  1505: 	moveq #DEV_SET_OUTPOS,d6
00:00007738 7400            	  1506: 	clr.l d2
00:0000773A 1401            	  1507: 	move.b d1,d2		; d2 = row (y pos)
00:0000773C E049            	  1508: 	lsr.w #8,d1			; d1 = col (x pos)
00:0000773E 4881            	  1509: 	ext.w d1
00:00007740 48C1            	  1510: 	ext.l d1
00:00007742 7600            	  1511: 	moveq #0,d3
00:00007744 4E40            	  1512: 	trap #0
00:00007746 4CDF00CF        	  1513: 	movem.l (a7)+,d0/d1/d2/d3/d6/d7
00:0000774A 4E75            	  1514: 	rts
                            	  1515: 
                            	  1516: ;------------------------------------------------------------------------------
                            	  1517: ; Stub routine for unimplemented functionality.
                            	  1518: ;------------------------------------------------------------------------------
                            	  1519: 
                            	  1520: StubRout:
00:0000774C 4E75            	  1521: 	rts
                            	  1522: 
                            	  1523: ;------------------------------------------------------------------------------
                            	  1524: ; Select a specific IO focus.
                            	  1525: ;------------------------------------------------------------------------------
                            	  1526: 
                            	  1527: select_iofocus:
00:0000774E 0C010002        	  1528: 	cmpi.b	#2,d1
00:00007752 650A            	  1529: 	blo.s		.0001
00:00007754 0C010005        	  1530: 	cmpi.b	#NCORES+1,d1
00:00007758 6204            	  1531: 	bhi.s		.0001
00:0000775A 2001            	  1532: 	move.l	d1,d0
00:0000775C 6014            	  1533: 	bra.s		select_focus1
                            	  1534: .0001:
00:0000775E 4E75            	  1535: 	rts
                            	  1536: 
                            	  1537: ;------------------------------------------------------------------------------
                            	  1538: ; Rotate the IO focus, done when ALT-Tab is pressed.
                            	  1539: ;
                            	  1540: ; Modifies:
                            	  1541: ;		d0, IOFocus BIOS variable
                            	  1542: ;		updates the text screen pointer
                            	  1543: ;------------------------------------------------------------------------------
                            	  1544: 
                            	  1545: rotate_iofocus:
00:00007760 103900100000    	  1546: 	move.b IOFocus,d0					; d0 = focus, we can trash d0
00:00007766 5200            	  1547: 	add.b	#1,d0								; increment the focus
00:00007768 B03C0005        	  1548: 	cmp.b	#NCORES+1,d0				; limit to 2 to 9
00:0000776C 6304            	  1549: 	bls.s	.0001
00:0000776E 103C0002        	  1550: 	move.b #2,d0
                            	  1551: .0001:
                            	  1552: select_focus1:
00:00007772 13C000100000    	  1553: 	move.b	d0,IOFocus				; set IO focus
                            	  1554: 	; reset keyboard processor to focus core
                            	  1555: ;	move.l #$3C060500,d0			; core=??,level sensitive,enabled,irq6,inta
                            	  1556: ;	or.b IOFocus,d0
                            	  1557: ;	move.l d0,PLIC+$80+4*30		; set register
                            	  1558: 	; Adjust text screen pointer
00:00007778 5500            	  1559: 	subi.b #2,d0							; screen is 0 to 7, focus is 2 to 9
00:0000777A 4880            	  1560: 	ext.w	d0									; make into word value
00:0000777C C0FC0800        	  1561: 	mulu #2048,d0							; * 2048	cells per screen
00:00007780 E158            	  1562: 	rol.w	#8,d0								; swap byte order
00:00007782 4840            	  1563: 	swap d0										; get bits 16-31
00:00007784 E158            	  1564: 	rol.w	#8,d0								; swap byte order
00:00007786 23C0FD080028    	  1565: 	move.l d0,TEXTREG+$28			; update screen address in text controller
00:0000778C 60009CAE        	  1566: 	bra	SyncCursor						; set cursor position
                            	  1567: 
                            	  1568: ;==============================================================================
                            	  1569: ; PLIC - platform level interrupt controller
                            	  1570: ;
                            	  1571: ; Register layout:
                            	  1572: ;   bits 0 to 7  = cause code to issue (vector number)
                            	  1573: ;   bits 8 to 11 = irq level to issue
                            	  1574: ;   bit 16 = irq enable
                            	  1575: ;   bit 17 = edge sensitivity
                            	  1576: ;   bit 18 = 0=vpa, 1=inta
                            	  1577: ;		bit 24 to 29 target core
                            	  1578: ;
                            	  1579: ; Note byte order must be reversed for PLIC.
                            	  1580: ;==============================================================================
                            	  1581: 
                            	  1582: init_plic:
00:00007790 41F9FD090000    	  1583: 	lea	PLIC,a0							; a0 points to PLIC
00:00007796 43E800F4        	  1584: 	lea	$80+4*29(a0),a1			; point to timer registers (29)
00:0000779A 22BC0006033F    	  1585: 	move.l #$0006033F,(a1)	; initialize, core=63,edge sensitive,enabled,irq6,vpa
00:000077A0 5889            	  1586: 	lea	4(a1),a1						; point to keyboard registers (30)
00:000077A2 22BC3C060502    	  1587: 	move.l #$3C060502,(a1)	; core=2,level sensitive,enabled,irq6,inta
00:000077A8 5889            	  1588: 	lea	4(a1),a1						; point to nmi button register (31)
00:000077AA 22BC00070302    	  1589: 	move.l #$00070302,(a1)	; initialize, core=2,edge sensitive,enabled,irq7,vpa
00:000077B0 43E800C0        	  1590: 	lea	$80+4*16(a0),a1			; a1 points to ACIA register
00:000077B4 22BC3D030502    	  1591: 	move.l #$3D030502,(a1)	; core=2,level sensitive,enabled,irq3,inta	
00:000077BA 43E80090        	  1592: 	lea	$80+4*4(a0),a1			; a1 points to io_bitmap irq
00:000077BE 22BC3B060702    	  1593: 	move.l #$3B060702,(a1)	; core=2,edge sensitive,enabled,irq6,inta	
00:000077C4 4E75            	  1594: 	rts
                            	  1595: 
                            	  1596: 
                            	  1597: ;==============================================================================
                            	  1598: ;==============================================================================
                            	  1599: ; Monitor
                            	  1600: ;==============================================================================
                            	  1601: ;==============================================================================
                            	  1602: 
                            	  1603: cmdString:
00:000077C6 BF              	  1604: 	dc.b	'?'+$80						; ? display help
00:000077C7 41              	  1605: 	dc.b	'A','S'+$80				; AS = asteroids
00:000077C8 D3
00:000077C9 CC              	  1606: 	dc.b	'L'+$80						; L load S19 file
00:000077CA 46              	  1607: 	dc.b	'F','B'+$80				; FB fill with byte
00:000077CB C2
00:000077CC 46              	  1608: 	dc.b	'F','W'+$80				; FW fill with wyde
00:000077CD D7
00:000077CE 46              	  1609: 	dc.b	'F','L'+$80				; FL fill with long wyde
00:000077CF CC
00:000077D0 464D54          	  1610: 	dc.b	'FMT','K'+$80			; FMTK run Femtiki OS
00:000077D3 CB
00:000077D4 42              	  1611: 	dc.b	'B','A'+$80				; BA start Tiny Basic
00:000077D5 C1
00:000077D6 42              	  1612: 	dc.b	'B','R'+$80				; BR breakpoint
00:000077D7 D2
00:000077D8 44              	  1613: 	dc.b	'D','I'+$80				; DI disassemble
00:000077D9 C9
00:000077DA 44              	  1614: 	dc.b	'D','R'+$80				; DR dump registers
00:000077DB D2
00:000077DC C4              	  1615: 	dc.b	'D'+$80						; D dump memory
00:000077DD CA              	  1616: 	dc.b	'J'+$80						; J jump to code
00:000077DE C5              	  1617: 	dc.b	'E'+$80						; : edit memory
00:000077DF 434C            	  1618: 	dc.b	"CL",'S'+$80			; CLS clear screen
00:000077E1 D3
00:000077E2 434F52          	  1619: 	dc.b	"COR",'E'+$80			; CORE <n> switch to core
00:000077E5 C5
00:000077E6 5446            	  1620: 	dc.b	"TF",'P'+$80			; TFP test fp
00:000077E8 D0
00:000077E9 5447            	  1621: 	dc.b  "TG",'F'+$80			; TGF test get float
00:000077EB C6
00:000077EC 545241          	  1622: 	dc.b  "TRA",'M'+$80			; TRAM test RAM
00:000077EF CD
00:000077F0 54              	  1623: 	dc.b	'T','R'+$80				; TR test serial receive
00:000077F1 D2
00:000077F2 D4              	  1624: 	dc.b	'T'+$80						; T test CPU
00:000077F3 D3              	  1625: 	dc.b	'S'+$80						; S send serial
00:000077F4 52455345        	  1626: 	dc.b	"RESE",'T'+$80		; RESET <n>
00:000077F8 D4
00:000077F9 434C4F43        	  1627: 	dc.b	"CLOC",'K'+$80		; CLOCK <n>
00:000077FD CB
00:000077FE D2              	  1628: 	dc.b	'R'+$80						; R receive serial
00:000077FF D6              	  1629: 	dc.b	'V'+$80
00:00007800 47              	  1630: 	dc.b	'G','R'+$80				; graphics demo
00:00007801 D2
00:00007802 00              	  1631: 	dc.b	0,0
00:00007803 00
                            	  1632: 
                            	  1633: 	align	2
                            	  1634: cmdTable:
00:00007804 00007B0E        	  1635: 	dc.l	cmdHelp
00:00007808 00007990        	  1636: 	dc.l	cmdAsteroids
00:0000780C 00008962        	  1637: 	dc.l	cmdLoadS19
00:00007810 00007DCA        	  1638: 	dc.l	cmdFillB
00:00007814 00007E1E        	  1639: 	dc.l	cmdFillW
00:00007818 00007E72        	  1640: 	dc.l	cmdFillL
00:0000781C 000079DC        	  1641: 	dc.l	cmdFMTK
00:00007820 00007998        	  1642: 	dc.l	cmdTinyBasic
00:00007824 0000796C        	  1643: 	dc.l	cmdBreakpoint
00:00007828 0000805C        	  1644: 	dc.l	cmdDisassemble
00:0000782C 00008176        	  1645: 	dc.l	cmdDumpRegs
00:00007830 000080AC        	  1646: 	dc.l	cmdDumpMemory
00:00007834 00007F92        	  1647: 	dc.l	cmdJump
00:00007838 00007F1E        	  1648: 	dc.l	cmdEditMemory
00:0000783C 000079AC        	  1649: 	dc.l	cmdClearScreen
00:00007840 000079B8        	  1650: 	dc.l	cmdCore
00:00007844 000079E4        	  1651: 	dc.l  cmdTestFP
00:00007848 00007A70        	  1652: 	dc.l	cmdTestGF
00:0000784C 0000889A        	  1653: 	dc.l  cmdTestRAM
00:00007850 00008220        	  1654: 	dc.l	cmdTestSerialReceive
00:00007854 0000799C        	  1655: 	dc.l	cmdTestCPU
00:00007858 00007D66        	  1656: 	dc.l	cmdSendSerial
00:0000785C 00007ABC        	  1657: 	dc.l	cmdReset
00:00007860 00007A9E        	  1658: 	dc.l	cmdClock
00:00007864 00007D96        	  1659: 	dc.l	cmdReceiveSerial	
00:00007868 0000792A        	  1660: 	dc.l	cmdVideoMode
00:0000786C 00007FA2        	  1661: 	dc.l	cmdGrDemo
00:00007870 00007888        	  1662: 	dc.l	cmdMonitor
                            	  1663: 
                            	  1664: ; Get a word from screen memory and swap byte order
                            	  1665: 
                            	  1666: FromScreen:
00:00007874 2210            	  1667: 	move.l (a0),d1
00:00007876 6100130C        	  1668: 	bsr	rbo
                            	  1669: 	if (SCREEN_FORMAT==1)
00:0000787A 5888            	  1670: 		lea	4(a0),a0	; increment screen pointer
                            	  1671: 	else
                            	  1672: 		lea	8(a0),a0	; increment screen pointer
                            	  1673: 	endif
00:0000787C 4E75            	  1674: 	rts
                            	  1675: 
                            	  1676: StartMon:
00:0000787E 427900040202    	  1677: 	clr.w	NumSetBreakpoints
00:00007884 61001630        	  1678: 	bsr	ClearBreakpointList
                            	  1679: cmdMonitor:
                            	  1680: Monitor:
                            	  1681: 	; Reset the stack pointer on each entry into the monitor
00:00007888 2E7C00047FFC    	  1682: 	move.l #$47FFC,sp		; reset core's stack
00:0000788E 487AFFF8        	  1683: 	pea Monitor					; Cause any RTS to go here
00:00007892 46FC2200        	  1684: 	move.w #$2200,sr		; enable level 2 and higher interrupts
00:00007896 4E7A0FE0        	  1685: 	movec	coreno,d0
00:0000789A 4840            	  1686: 	swap d0
00:0000789C 7201            	  1687: 	moveq	#1,d1
00:0000789E 6100A7A6        	  1688: 	bsr	UnlockSemaphore
00:000078A2 42390004000C    	  1689: 	clr.b KeybdEcho			; turn off keyboard echo
                            	  1690: PromptLn:
00:000078A8 6100F9D4        	  1691: 	bsr	CRLF
00:000078AC 123C0024        	  1692: 	move.b #'$',d1
00:000078B0 61001738        	  1693: 	bsr OutputChar
                            	  1694: 
                            	  1695: ; Get characters until a CR is keyed
                            	  1696: ;
                            	  1697: Prompt3:
00:000078B4 61008F52        	  1698: 	bsr	GetKey
00:000078B8 0C0100FF        	  1699: 	cmpi.b #-1,d1
00:000078BC 67F6            	  1700: 	beq.s	Prompt3
00:000078BE 0C01000D        	  1701: 	cmpi.b #CR,d1
00:000078C2 6706            	  1702: 	beq.s	Prompt1
00:000078C4 61001724        	  1703: 	bsr	OutputChar
00:000078C8 60EA            	  1704: 	bra.s	Prompt3
                            	  1705: 
                            	  1706: ; Process the screen line that the CR was keyed on
                            	  1707: 
                            	  1708: Prompt1:
00:000078CA 7E02            	  1709: 	moveq #2,d7
00:000078CC 7C17            	  1710: 	moveq #DEV_GET_OUTPOS,d6
00:000078CE 4E40            	  1711: 	trap #0
                            	  1712: ;	clr.b	CursorCol				; go back to the start of the line
00:000078D0 7C07            	  1713: 	moveq #DEV_SET_OUTPOS,d6
00:000078D2 7200            	  1714: 	moveq #0,d1						; go back to the start of the line
00:000078D4 4E40            	  1715: 	trap #0
00:000078D6 7C18            	  1716: 	moveq #DEV_GET_OUTPTR,d6
00:000078D8 4E40            	  1717: 	trap #0
00:000078DA 2041            	  1718: 	move.l d1,a0					; a0 = pointer to buffer
                            	  1719: ;	bsr	CalcScreenLoc			; a0 = screen memory location
                            	  1720: .0001:
00:000078DC 6196            	  1721: 	bsr	FromScreen				; grab character off screen
00:000078DE 0C010024        	  1722: 	cmpi.b #'$',d1				; skip over '$' prompt character
00:000078E2 67F8            	  1723: 	beq.s	.0001
                            	  1724: 
                            	  1725: ; Dispatch based on command string
                            	  1726: 
                            	  1727: cmdDispatch:
00:000078E4 45FAFEE0        	  1728: 	lea	cmdString,a2
00:000078E8 7800            	  1729: 	clr.l	d4							; command counter
                            	  1730: 	if (SCREEN_FORMAT==1)
00:000078EA 5988            	  1731: 		lea	-4(a0),a0				; backup a character
                            	  1732: 	else
                            	  1733: 		lea	-8(a0),a0				; backup a character
                            	  1734: 	endif
00:000078EC 2648            	  1735: 	move.l	a0,a3					; a3 = start of command on screen
                            	  1736: .checkNextCmd:
00:000078EE 6184            	  1737: 	bsr	FromScreen				; d1 = char from input screen
00:000078F0 1A1A            	  1738: 	move.b (a2)+,d5
00:000078F2 BB01            	  1739: 	eor.b	d5,d1						; does it match with command string?
00:000078F4 67F8            	  1740: 	beq.s	.checkNextCmd		; If it does, keep matching for longest match
00:000078F6 0C010080        	  1741: 	cmpi.b #$80,d1				; didn't match, was it the end of the command?
00:000078FA 6724            	  1742: 	beq.s	.foundCmd
00:000078FC 4A2AFFFF        	  1743: 	tst.b	-1(a2)					; was end of table hit?
00:00007900 6712            	  1744: 	beq.s	.endOfTable
00:00007902 5844            	  1745: 	addi.w #4,d4					; increment command counter
00:00007904 204B            	  1746: 	move.l a3,a0					; reset input pointer
00:00007906 4A2AFFFF        	  1747: 	tst.b	-1(a2)					; were we at the end of the command?
00:0000790A 6BE2            	  1748: 	bmi.s	.checkNextCmd		; if were at end continue, otherwise scan for end of cmd
                            	  1749: .scanToEndOfCmd
00:0000790C 4A1A            	  1750: 	tst.b	(a2)+						; scan to end of command
00:0000790E 6704            	  1751: 	beq.s	.endOfTable
00:00007910 6AFA            	  1752: 	bpl.s	.scanToEndOfCmd
00:00007912 6BDA            	  1753: 	bmi.s	.checkNextCmd
                            	  1754: .endOfTable
00:00007914 43FA038A        	  1755: 	lea	msgUnknownCmd,a1
00:00007918 6100F994        	  1756: 	bsr	DisplayStringCRLF
00:0000791C 6000FF6A        	  1757: 	bra	Monitor
                            	  1758: .foundCmd:
00:00007920 43FAFEE2        	  1759: 	lea	cmdTable,a1				; a1 = pointer to command address table
00:00007924 22714000        	  1760: 	move.l (a1,d4.w),a1		; fetch command routine address from table
00:00007928 4ED1            	  1761: 	jmp	(a1)							; go execute command
                            	  1762: 
                            	  1763: cmdVideoMode:
00:0000792A 61000592        	  1764: 	bsr ignBlanks
00:0000792E 61000910        	  1765: 	bsr GetHexNumber
00:00007932 4A01            	  1766: 	cmpi.b #0,d1
00:00007934 660E            	  1767: 	bne.s .0001
00:00007936 6100F8E0        	  1768: 	bsr set_text_mode
00:0000793A 7E02            	  1769: 	move.l #2,d7
00:0000793C 7C0C            	  1770: 	move.l #DEV_CLEAR,d6
00:0000793E 4E40            	  1771: 	trap #0
00:00007940 6000FF46        	  1772: 	bra Monitor
                            	  1773: .0001:
00:00007944 6100F8FC        	  1774: 	bsr set_graphics_mode
00:00007948 6100F922        	  1775: 	bsr get_screen_address
00:0000794C 42B9FD0FFD04    	  1776: 	move.l #0,RAND+4		; select stream 0
00:00007952 343C1D4B        	  1777: 	move.w #7499,d2
                            	  1778: .0002:
00:00007956 2239FD0FFD00    	  1779: 	move.l RAND,d1
00:0000795C 42B9FD0FFD00    	  1780: 	move.l #0,RAND			; cause new number generation
00:00007962 20C1            	  1781: 	move.l d1,(a0)+			; random display
00:00007964 51CAFFF0        	  1782: 	dbra d2,.0002
00:00007968 6000FF1E        	  1783: 	bra Monitor
                            	  1784: 
                            	  1785: cmdBreakpoint:
00:0000796C 61000550        	  1786: 	bsr	ignBlanks
00:00007970 6100FF02        	  1787: 	bsr	FromScreen
00:00007974 0C01002B        	  1788: 	cmpi.b	#'+',d1
00:00007978 6700144A        	  1789: 	beq	ArmBreakpoint
00:0000797C 0C01002D        	  1790: 	cmpi.b	#'-',d1
00:00007980 670014C0        	  1791: 	beq	DisarmBreakpoint
00:00007984 0C01004C        	  1792: 	cmpi.b	#'L',d1
00:00007988 6700150C        	  1793: 	beq	ListBreakpoints
00:0000798C 6000FEFA        	  1794: 	bra	Monitor
                            	  1795: 
                            	  1796: cmdAsteroids:
00:00007990 487AFEF6        	  1797: 	pea Monitor
00:00007994 600025F2        	  1798: 	jmp asteroids_start
                            	  1799: 
                            	  1800: cmdTinyBasic:
00:00007998 6000E2B6        	  1801: 	bra	CSTART
                            	  1802: 
                            	  1803: cmdTestCPU:
00:0000799C 6100A742        	  1804: 	bsr	cpu_test
00:000079A0 43FA1825        	  1805: 	lea	msg_test_done,a1
00:000079A4 6100F908        	  1806: 	bsr	DisplayStringCRLF
00:000079A8 6000FEDE        	  1807: 	bra	Monitor
                            	  1808: 
                            	  1809: cmdClearScreen:
00:000079AC 610011CE        	  1810: 	bsr	ClearScreen
00:000079B0 61009A78        	  1811: 	bsr	HomeCursor
00:000079B4 6000FED2        	  1812: 	bra	Monitor
                            	  1813: 
                            	  1814: cmdCore:
00:000079B8 61000504        	  1815: 	bsr			ignBlanks
00:000079BC 6100FEB6        	  1816: 	bsr			FromScreen
00:000079C0 0C010032        	  1817: 	cmpi.b	#'2',d1					; check range
00:000079C4 6500FEC2        	  1818: 	blo			Monitor
00:000079C8 0C010035        	  1819: 	cmpi.b	#'0'+NCORES+1,d1
00:000079CC 6200FEBA        	  1820: 	bhi			Monitor
00:000079D0 04010030        	  1821: 	subi.b	#'0',d1					; convert ascii to binary
00:000079D4 6100FD78        	  1822: 	bsr			select_iofocus
00:000079D8 6000FEAE        	  1823: 	bra			Monitor
                            	  1824: 
                            	  1825: cmdFMTK:
00:000079DC 61008842        	  1826: 	bsr FemtikiInit
00:000079E0 6000FEA6        	  1827: 	bra Monitor
                            	  1828: 
                            	  1829: cmdTestFP:
00:000079E4 7029            	  1830: 	moveq #41,d0						; function #41, get float
00:000079E6 7208            	  1831: 	moveq #8,d1							; d1 = input stride
00:000079E8 2248            	  1832: 	move.l a0,a1						; a1 = pointer to input buffer
00:000079EA 4E4F            	  1833: 	trap #15
00:000079EC 2049            	  1834: 	move.l a1,a0
00:000079EE F2000200        	  1835: 	fmove.x fp0,fp4
00:000079F2 610004CA        	  1836: 	bsr ignBlanks
00:000079F6 6100FE7C        	  1837: 	bsr FromScreen
00:000079FA 1E01            	  1838: 	move.b d1,d7
00:000079FC 7029            	  1839: 	moveq #41,d0						; function #41, get float
00:000079FE 7208            	  1840: 	move.l #8,d1						; d1 = input stride
00:00007A00 2248            	  1841: 	move.l a0,a1						; a1 = pointer to input buffer
00:00007A02 4E4F            	  1842: 	trap #15
00:00007A04 2049            	  1843: 	move.l a1,a0
00:00007A06 F2000100        	  1844: 	fmove.x fp0,fp2
00:00007A0A 6100F872        	  1845: 	bsr CRLF
                            	  1846: ;	moveq #39,d0
                            	  1847: ;	moveq #40,d1
                            	  1848: ;	moveq #30,d2
                            	  1849: ;	moveq #'e',d3
                            	  1850: ;	trap #15
                            	  1851: ;	bsr CRLF
00:00007A0E F2396A00000402C0	  1852: 	fmove.x fp4,fpBuf
00:00007A16 F2396900000402D0	  1853: 	fmove.x fp2,fpBuf+16
00:00007A1E 0C07002B        	  1854: 	cmpi.b #'+',d7
00:00007A22 6606            	  1855: 	bne .0001
00:00007A24 F2000A22        	  1856: 	fadd fp2,fp4
00:00007A28 6022            	  1857: 	bra .0002
                            	  1858: .0001
00:00007A2A 0C07002D        	  1859: 	cmpi.b #'-',d7
00:00007A2E 6606            	  1860: 	bne .0003
00:00007A30 F2000A28        	  1861: 	fsub fp2,fp4
00:00007A34 6016            	  1862: 	bra .0002
                            	  1863: .0003
00:00007A36 0C07002A        	  1864: 	cmpi.b #'*',d7
00:00007A3A 6606            	  1865: 	bne .0004
00:00007A3C F2000A23        	  1866: 	fmul fp2,fp4
00:00007A40 600A            	  1867: 	bra .0002
                            	  1868: .0004
00:00007A42 0C07002F        	  1869: 	cmpi.b #'/',d7
00:00007A46 6620            	  1870: 	bne .0005
00:00007A48 F2000A20        	  1871: 	fdiv fp2,fp4
                            	  1872: 	bra .0002
                            	  1873: .0002
00:00007A4C F2396A00000402E0	  1874: 	fmove.x fp4,fpBuf+32
00:00007A54 F2001000        	  1875: 	fmove.x fp4,fp0
00:00007A58 43F900040520    	  1876: 	lea _fpBuf,a1						; a0 = pointer to buffer to use
00:00007A5E 7027            	  1877: 	moveq #39,d0						; function #39 print float
00:00007A60 7228            	  1878: 	moveq #40,d1						; width
00:00007A62 741E            	  1879: 	moveq #30,d2						; precision
00:00007A64 7665            	  1880: 	moveq #'e',d3
00:00007A66 4E4F            	  1881: 	trap #15
                            	  1882: .0005
00:00007A68 6100F814        	  1883: 	bsr CRLF
00:00007A6C 6000FE1A        	  1884: 	bra Monitor
                            	  1885: 
                            	  1886: cmdTestGF:
00:00007A70 6100F80C        	  1887: 	bsr CRLF
00:00007A74 7029            	  1888: 	moveq #41,d0						; function #41, get float
00:00007A76 7208            	  1889: 	move.l #8,d1						; d1 = input stride
00:00007A78 2248            	  1890: 	move.l a0,a1						; a1 = pointer to input buffer
00:00007A7A 4E4F            	  1891: 	trap #15
00:00007A7C F2396800000402E0	  1892: 	fmove.x fp0,fpBuf+32
00:00007A84 43F900040520    	  1893: 	lea _fpBuf,a1						; a0 = pointer to buffer to use
00:00007A8A 7027            	  1894: 	moveq #39,d0
00:00007A8C 7228            	  1895: 	moveq #40,d1
00:00007A8E 741E            	  1896: 	moveq #30,d2
00:00007A90 7665            	  1897: 	moveq #'e',d3
00:00007A92 4E4F            	  1898: 	trap #15
00:00007A94 2049            	  1899: 	move.l a1,a0
00:00007A96 6100F7E6        	  1900: 	bsr CRLF
00:00007A9A 6000FDEC        	  1901: 	bra Monitor
                            	  1902: 		
                            	  1903: ;-------------------------------------------------------------------------------
                            	  1904: ; CLOCK <n>
                            	  1905: ;    Set the clock register to n which will turn off or on clocks to the CPUs.
                            	  1906: ;-------------------------------------------------------------------------------
                            	  1907: 
                            	  1908: cmdClock:
00:00007A9E 6100041E        	  1909: 	bsr			ignBlanks
00:00007AA2 6100079C        	  1910: 	bsr			GetHexNumber
00:00007AA6 4A00            	  1911: 	tst.b		d0							; was there a number?
00:00007AA8 6700FDDE        	  1912: 	beq			Monitor
00:00007AAC 00400004        	  1913: 	ori.w		#4,d0						; primary core's clock cannot be turned off
00:00007AB0 E159            	  1914: 	rol.w		#8,d1						; switch byte order
00:00007AB2 33C1FD0FFC02    	  1915: 	move.w	d1,RST_REG+2
00:00007AB8 6000FDCE        	  1916: 	bra			Monitor
                            	  1917: 
                            	  1918: ;-------------------------------------------------------------------------------
                            	  1919: ; RESET <n>
                            	  1920: ;    Reset the specified core. Resetting the core automatically turns on the 
                            	  1921: ; core's clock.
                            	  1922: ;-------------------------------------------------------------------------------
                            	  1923: 
                            	  1924: cmdReset:
00:00007ABC 61000400        	  1925: 	bsr			ignBlanks
00:00007AC0 6100FDB2        	  1926: 	bsr			FromScreen
00:00007AC4 0C010032        	  1927: 	cmpi.b	#'2',d1					; check range
00:00007AC8 6500FDBE        	  1928: 	blo			Monitor
00:00007ACC 0C010039        	  1929: 	cmpi.b	#'9',d1
00:00007AD0 6200FDB6        	  1930: 	bhi			Monitor
00:00007AD4 04010030        	  1931: 	subi.b	#'0',d1					; convert ascii to binary
00:00007AD8 E349            	  1932: 	lsl.w		#1,d1						; make into index
00:00007ADA 43FA0012        	  1933: 	lea			tblPow2,a1
00:00007ADE 32311000        	  1934: 	move.w	(a1,d1.w),d1
00:00007AE2 E159            	  1935: 	rol.w		#8,d1						; reverse byte order
00:00007AE4 33C1FD0FFC00    	  1936: 	move.w	d1,RST_REG
00:00007AEA 6000FD9C        	  1937: 	bra			Monitor
                            	  1938: 
                            	  1939: tblPow2:
00:00007AEE 0001            	  1940: 	dc.w		1
00:00007AF0 0002            	  1941: 	dc.w		2
00:00007AF2 0004            	  1942: 	dc.w		4
00:00007AF4 0008            	  1943: 	dc.w		8
00:00007AF6 0010            	  1944: 	dc.w		16
00:00007AF8 0020            	  1945: 	dc.w		32
00:00007AFA 0040            	  1946: 	dc.w		64
00:00007AFC 0080            	  1947: 	dc.w		128
00:00007AFE 0100            	  1948: 	dc.w		256
00:00007B00 0200            	  1949: 	dc.w		512
00:00007B02 0400            	  1950: 	dc.w		1024
00:00007B04 0800            	  1951: 	dc.w		2048
00:00007B06 1000            	  1952: 	dc.w		4096
00:00007B08 2000            	  1953: 	dc.w		8192
00:00007B0A 4000            	  1954: 	dc.w		16384
00:00007B0C 8000            	  1955: 	dc.w		32768
                            	  1956: 	even
                            	  1957: 	
                            	  1958: cmdHelp:
                            	  1959: DisplayHelp:
00:00007B0E 43FA000A        	  1960: 	lea			HelpMsg,a1
00:00007B12 6100F784        	  1961: 	bsr			DisplayString
00:00007B16 6000FD70        	  1962: 	bra			Monitor
                            	  1963: 
                            	  1964: HelpMsg:
00:00007B1A 3F203D2044697370	  1965: 	dc.b	"? = Display help",LF,CR
00:00007B22 6C61792068656C70
00:00007B2A 0A
00:00007B2B 0D
00:00007B2C 434F5245206E203D	  1966: 	dc.b  "CORE n = switch to core n, n = 2 to 9",LF,CR
00:00007B34 2073776974636820
00:00007B3C 746F20636F726520
00:00007B44 6E2C206E203D2032
00:00007B4C 20746F2039
00:00007B51 0A
00:00007B52 0D
00:00007B53 5245534554206E20	  1967: 	dc.b  "RESET n = reset core n",LF,CR
00:00007B5B 3D20726573657420
00:00007B63 636F7265206E
00:00007B69 0A
00:00007B6A 0D
00:00007B6B 434C53203D20636C	  1968: 	dc.b	"CLS = clear screen",LF,CR
00:00007B73 6561722073637265
00:00007B7B 656E
00:00007B7D 0A
00:00007B7E 0D
00:00007B7F 4542203D20456469	  1969: 	dc.b	"EB = Edit memory bytes, EW, EL",LF,CR
00:00007B87 74206D656D6F7279
00:00007B8F 2062797465732C20
00:00007B97 45572C20454C
00:00007B9D 0A
00:00007B9E 0D
00:00007B9F 4642203D2046696C	  1970: 	dc.b	"FB = Fill memory bytes, FW, FL",LF,CR
00:00007BA7 6C206D656D6F7279
00:00007BAF 2062797465732C20
00:00007BB7 46572C20464C
00:00007BBD 0A
00:00007BBE 0D
00:00007BBF 464D544B203D2072	  1971: 	dc.b	"FMTK = run Femtiki OS",LF,CR
00:00007BC7 756E2046656D7469
00:00007BCF 6B69204F53
00:00007BD4 0A
00:00007BD5 0D
00:00007BD6 4C203D204C6F6164	  1972: 	dc.b	"L = Load S19 file",LF,CR
00:00007BDE 205331392066696C
00:00007BE6 65
00:00007BE7 0A
00:00007BE8 0D
00:00007BE9 44203D2044756D70	  1973: 	dc.b	"D = Dump memory, DR = dump registers",LF,CR
00:00007BF1 206D656D6F72792C
00:00007BF9 204452203D206475
00:00007C01 6D70207265676973
00:00007C09 74657273
00:00007C0D 0A
00:00007C0E 0D
00:00007C0F 4449203D20446973	  1974: 	dc.b	"DI = Disassemble",LF,CR
00:00007C17 617373656D626C65
00:00007C1F 0A
00:00007C20 0D
00:00007C21 4241203D20737461	  1975: 	dc.b	"BA = start tiny basic",LF,CR
00:00007C29 72742074696E7920
00:00007C31 6261736963
00:00007C36 0A
00:00007C37 0D
00:00007C38 4252203D20736574	  1976: 	dc.b  "BR = set breakpoint",LF,CR
00:00007C40 20627265616B706F
00:00007C48 696E74
00:00007C4B 0A
00:00007C4C 0D
00:00007C4D 4A203D204A756D70	  1977: 	dc.b	"J = Jump to code",LF,CR
00:00007C55 20746F20636F6465
00:00007C5D 0A
00:00007C5E 0D
00:00007C5F 53203D2073656E64	  1978: 	dc.b  "S = send to serial port",LF,CR
00:00007C67 20746F2073657269
00:00007C6F 616C20706F7274
00:00007C76 0A
00:00007C77 0D
00:00007C78 54203D2063707520	  1979: 	dc.b	"T = cpu test program",LF,CR
00:00007C80 746573742070726F
00:00007C88 6772616D
00:00007C8C 0A
00:00007C8D 0D
00:00007C8E 5452414D203D2074	  1980: 	dc.b	"TRAM = test RAM",LF,CR,0
00:00007C96 6573742052414D
00:00007C9D 0A
00:00007C9E 0D
00:00007C9F 00
                            	  1981: 
                            	  1982: msgUnknownCmd:
00:00007CA0 636F6D6D616E6420	  1983: 	dc.b	"command unknown",0
00:00007CA8 756E6B6E6F776E
00:00007CAF 00
                            	  1984: 
                            	  1985: msgHello:
00:00007CB0 0A              	  1986: 	dc.b	LF,CR,"Hello World!",LF,CR,0
00:00007CB1 0D
00:00007CB2 48656C6C6F20576F
00:00007CBA 726C6421
00:00007CBE 0A
00:00007CBF 0D
00:00007CC0 00
                            	  1987: 	even
                            	  1988: 
                            	  1989: ;------------------------------------------------------------------------------
                            	  1990: ; This routine borrowed from Gordo's Tiny Basic interpreter.
                            	  1991: ; Used to fetch a command line. (Not currently used).
                            	  1992: ;
                            	  1993: ; d0.b	- command prompt
                            	  1994: ;------------------------------------------------------------------------------
                            	  1995: 
                            	  1996: GetCmdLine:
00:00007CC2 61001326        	  1997: 		bsr		OutputChar		; display prompt
00:00007CC6 103C0020        	  1998: 		move.b	#' ',d0
00:00007CCA 6100131E        	  1999: 		bsr		OutputChar
00:00007CCE 41F900040040    	  2000: 		lea		CmdBuf,a0
                            	  2001: .0001:
00:00007CD4 61008B32        	  2002: 		bsr		GetKey
00:00007CD8 B03C0008        	  2003: 		cmp.b	#CTRLH,d0
00:00007CDC 6728            	  2004: 		beq.s	.0003
00:00007CDE B03C0018        	  2005: 		cmp.b	#CTRLX,d0
00:00007CE2 6746            	  2006: 		beq.s	.0004
00:00007CE4 B03C000D        	  2007: 		cmp.b	#CR,d0
00:00007CE8 6706            	  2008: 		beq.s	.0002
00:00007CEA B03C0020        	  2009: 		cmp.b	#' ',d0
00:00007CEE 65E4            	  2010: 		bcs.s	.0001
                            	  2011: .0002:
00:00007CF0 1080            	  2012: 		move.b	d0,(a0)
00:00007CF2 5088            	  2013: 		lea			8(a0),a0
00:00007CF4 610012F4        	  2014: 		bsr		OutputChar
00:00007CF8 B03C000D        	  2015: 		cmp.b	#CR,d0
00:00007CFC 675E            	  2016: 		beq		.0007
00:00007CFE B1FC0004007F    	  2017: 		cmp.l	#CmdBufEnd-1,a0
00:00007D04 65CE            	  2018: 		bcs.s	.0001
                            	  2019: .0003:
00:00007D06 103C0008        	  2020: 		move.b	#CTRLH,d0
00:00007D0A 610012DE        	  2021: 		bsr		OutputChar
00:00007D0E 103C0020        	  2022: 		move.b	#' ',d0
00:00007D12 610012D6        	  2023: 		bsr		OutputChar
00:00007D16 B1FC00040040    	  2024: 		cmp.l	#CmdBuf,a0
00:00007D1C 63B6            	  2025: 		bls.s	.0001
00:00007D1E 103C0008        	  2026: 		move.b	#CTRLH,d0
00:00007D22 610012C6        	  2027: 		bsr		OutputChar
00:00007D26 5388            	  2028: 		subq.l	#1,a0
00:00007D28 60AA            	  2029: 		bra.s	.0001
                            	  2030: .0004:
00:00007D2A 2208            	  2031: 		move.l	a0,d1
00:00007D2C 92BC00040040    	  2032: 		sub.l	#CmdBuf,d1
00:00007D32 671E            	  2033: 		beq.s	.0006
00:00007D34 5341            	  2034: 		subq	#1,d1
                            	  2035: .0005:
00:00007D36 103C0008        	  2036: 		move.b	#CTRLH,d0
00:00007D3A 610012AE        	  2037: 		bsr		OutputChar
00:00007D3E 103C0020        	  2038: 		move.b	#' ',d0
00:00007D42 610012A6        	  2039: 		bsr		OutputChar
00:00007D46 103C0008        	  2040: 		move.b	#CTRLH,d0
00:00007D4A 6100129E        	  2041: 		bsr		OutputChar
00:00007D4E 51C9FFE6        	  2042: 		dbra	d1,.0005
                            	  2043: .0006:
00:00007D52 41F900040040    	  2044: 		lea		CmdBuf,a0
00:00007D58 6000FF7A        	  2045: 		bra		.0001
                            	  2046: .0007:
00:00007D5C 103C000A        	  2047: 		move.b	#LF,d0
00:00007D60 61001288        	  2048: 		bsr		OutputChar
00:00007D64 4E75            	  2049: 		rts
                            	  2050: 
                            	  2051: ;------------------------------------------------------------------------------
                            	  2052: ; S <address> <length>
                            	  2053: ; Send data buffer to serial port
                            	  2054: ; S 40000 40
                            	  2055: ;------------------------------------------------------------------------------
                            	  2056: 
                            	  2057: cmdSendSerial:
00:00007D66 61000156        	  2058: 	bsr			ignBlanks
00:00007D6A 610004D4        	  2059: 	bsr			GetHexNumber
00:00007D6E 6700FB18        	  2060: 	beq			Monitor
00:00007D72 2C01            	  2061: 	move.l	d1,d6					; d6 points to buffer
00:00007D74 61000148        	  2062: 	bsr			ignBlanks
00:00007D78 610004C6        	  2063: 	bsr			GetHexNumber
00:00007D7C 6602            	  2064: 	bne.s		.0003
00:00007D7E 7210            	  2065: 	moveq		#16,d1
                            	  2066: .0003:
00:00007D80 2246            	  2067: 	move.l	d6,a1					; a1 points to buffer
00:00007D82 2401            	  2068: 	move.l	d1,d2					; d2 = count of bytes to send
00:00007D84 6008            	  2069: 	bra.s		.0002					; enter loop at bottom
                            	  2070: .0001:
00:00007D86 1219            	  2071: 	move.b	(a1)+,d1
00:00007D88 303C0022        	  2072: 	move.w	#34,d0				; serial putchar
00:00007D8C 4E4F            	  2073: 	trap		#15
                            	  2074: .0002:
00:00007D8E 51CAFFF6        	  2075: 	dbra		d2,.0001
00:00007D92 6000FAF4        	  2076: 	bra			Monitor
                            	  2077: 		
                            	  2078: ;------------------------------------------------------------------------------
                            	  2079: ; R <address> <length>
                            	  2080: ; Send data buffer to serial port
                            	  2081: ; R 10000 40
                            	  2082: ;------------------------------------------------------------------------------
                            	  2083: 
                            	  2084: cmdReceiveSerial:
00:00007D96 61000126        	  2085: 	bsr			ignBlanks
00:00007D9A 610004A4        	  2086: 	bsr			GetHexNumber
00:00007D9E 6700FAE8        	  2087: 	beq			Monitor
00:00007DA2 2C01            	  2088: 	move.l	d1,d6					; d6 points to buffer
00:00007DA4 61000118        	  2089: 	bsr			ignBlanks
00:00007DA8 61000496        	  2090: 	bsr			GetHexNumber
00:00007DAC 6602            	  2091: 	bne.s		.0003
00:00007DAE 7210            	  2092: 	moveq		#16,d1
                            	  2093: .0003:
00:00007DB0 2246            	  2094: 	move.l	d6,a1					; a1 points to buffer
00:00007DB2 2401            	  2095: 	move.l	d1,d2					; d2 = count of bytes to send
00:00007DB4 600C            	  2096: 	bra.s		.0002					; enter loop at bottom
                            	  2097: .0001:
00:00007DB6 303C0024        	  2098: 	move.w	#36,d0				; serial peek char
00:00007DBA 4E4F            	  2099: 	trap		#15
00:00007DBC 4A81            	  2100: 	tst.l		d1
00:00007DBE 6BF6            	  2101: 	bmi.s		.0001
00:00007DC0 12C1            	  2102: 	move.b	d1,(a1)+
                            	  2103: .0002:
00:00007DC2 51CAFFF2        	  2104: 	dbra		d2,.0001
00:00007DC6 6000FAC0        	  2105: 	bra			Monitor
                            	  2106: 		
                            	  2107: ;------------------------------------------------------------------------------
                            	  2108: ; Fill memory
                            	  2109: ;
                            	  2110: ; FB = fill bytes		FB 00000010 100 FF	; fill starting at 10 for 256 bytes
                            	  2111: ; FB = fill bytes		FB 00000010 100 R		; fill with random bytes
                            	  2112: ; FW = fill words
                            	  2113: ; FL = fill longs
                            	  2114: ; F = fill bytes
                            	  2115: ;------------------------------------------------------------------------------
                            	  2116: 
                            	  2117: cmdFillB:
00:00007DCA 610000F2        	  2118: 	bsr			ignBlanks
00:00007DCE 61000470        	  2119: 	bsr			GetHexNumber
00:00007DD2 2241            	  2120: 	move.l	d1,a1					; a1 = start
00:00007DD4 610000E8        	  2121: 	bsr			ignBlanks
00:00007DD8 61000466        	  2122: 	bsr			GetHexNumber
00:00007DDC 2601            	  2123: 	move.l	d1,d3					; d3 = count
00:00007DDE 6700FAA8        	  2124: 	beq			Monitor
00:00007DE2 610000DA        	  2125: 	bsr			ignBlanks
00:00007DE6 610000E8        	  2126: 	bsr PeekScreenChar
00:00007DEA 0C010052        	  2127: 	cmpi.b #'R',d1
00:00007DEE 660A            	  2128: 	bne.s .0002
00:00007DF0 6100FA82        	  2129: 	bsr FromScreen
00:00007DF4 1A3C0052        	  2130: 	move.b #'R',d5
00:00007DF8 6006            	  2131: 	bra.s .fmem
                            	  2132: .0002:
00:00007DFA 61000444        	  2133: 	bsr	GetHexNumber		; fill value
00:00007DFE 1801            	  2134: 	move.b d1,d4
                            	  2135: .fmem:
00:00007E00 3409            	  2136: 	move.w a1,d2
00:00007E02 4A42            	  2137: 	tst.w d2
00:00007E04 6604            	  2138: 	bne.s .0001
00:00007E06 61008A3A        	  2139: 	bsr	CheckForCtrlC
                            	  2140: .0001:	
00:00007E0A 0C050052        	  2141: 	cmpi.b #'R',d5
00:00007E0E 6604            	  2142: 	bne.s .0003
00:00007E10 6100A16C        	  2143: 	bsr RandGetNum
                            	  2144: .0003:
00:00007E14 12C4            	  2145: 	move.b d4,(a1)+
00:00007E16 5383            	  2146: 	sub.l	#1,d3
00:00007E18 66E6            	  2147: 	bne.s	.fmem
00:00007E1A 6000FA6C        	  2148: 	bra	Monitor
                            	  2149: 	
                            	  2150: cmdFillW:
00:00007E1E 6100009E        	  2151: 	bsr			ignBlanks
00:00007E22 6100041C        	  2152: 	bsr			GetHexNumber
00:00007E26 2241            	  2153: 	move.l	d1,a1					; a1 = start
00:00007E28 61000094        	  2154: 	bsr			ignBlanks
00:00007E2C 61000412        	  2155: 	bsr			GetHexNumber
00:00007E30 2601            	  2156: 	move.l	d1,d3					; d3 = count
00:00007E32 6700FA54        	  2157: 	beq			Monitor
00:00007E36 61000086        	  2158: 	bsr			ignBlanks
00:00007E3A 61000094        	  2159: 	bsr PeekScreenChar
00:00007E3E 0C010052        	  2160: 	cmpi.b #'R',d1
00:00007E42 660A            	  2161: 	bne.s .0002
00:00007E44 6100FA2E        	  2162: 	bsr FromScreen
00:00007E48 1A3C0052        	  2163: 	move.b #'R',d5
00:00007E4C 6006            	  2164: 	bra.s .fmem
                            	  2165: .0002:
00:00007E4E 610003F0        	  2166: 	bsr	GetHexNumber			; fill value
00:00007E52 3801            	  2167: 	move.w d1,d4
                            	  2168: .fmem:
00:00007E54 3409            	  2169: 	move.w a1,d2
00:00007E56 4A42            	  2170: 	tst.w d2
00:00007E58 6604            	  2171: 	bne.s .0001
00:00007E5A 610089E6        	  2172: 	bsr	CheckForCtrlC
                            	  2173: .0001:	
00:00007E5E 0C050052        	  2174: 	cmpi.b #'R',d5
00:00007E62 6604            	  2175: 	bne.s .0003
00:00007E64 6100A118        	  2176: 	bsr RandGetNum
                            	  2177: .0003:
00:00007E68 32C4            	  2178: 	move.w d4,(a1)+
00:00007E6A 5383            	  2179: 	sub.l	#1,d3
00:00007E6C 66E6            	  2180: 	bne.s	.fmem
00:00007E6E 6000FA18        	  2181: 	bra	Monitor
                            	  2182: 	
                            	  2183: cmdFillL:
00:00007E72 614A            	  2184: 	bsr			ignBlanks
00:00007E74 610003CA        	  2185: 	bsr			GetHexNumber
00:00007E78 2241            	  2186: 	move.l	d1,a1					; a1 = start
00:00007E7A 6142            	  2187: 	bsr			ignBlanks
00:00007E7C 610003C2        	  2188: 	bsr			GetHexNumber
00:00007E80 2601            	  2189: 	move.l	d1,d3					; d3 = count
00:00007E82 6700FA04        	  2190: 	beq			Monitor
00:00007E86 6136            	  2191: 	bsr			ignBlanks
00:00007E88 6146            	  2192: 	bsr PeekScreenChar
00:00007E8A 0C010052        	  2193: 	cmpi.b #'R',d1
00:00007E8E 660A            	  2194: 	bne.s .0002
00:00007E90 6100F9E2        	  2195: 	bsr FromScreen
00:00007E94 1A3C0052        	  2196: 	move.b #'R',d5
00:00007E98 6006            	  2197: 	bra.s .fmem
                            	  2198: .0002:
00:00007E9A 610003A4        	  2199: 	bsr			GetHexNumber	; fill value
00:00007E9E 2801            	  2200: 	move.l d1,d4
                            	  2201: .fmem:
00:00007EA0 3409            	  2202: 	move.w a1,d2
00:00007EA2 4A42            	  2203: 	tst.w d2
00:00007EA4 6604            	  2204: 	bne.s .0001
00:00007EA6 6100899A        	  2205: 	bsr	CheckForCtrlC
                            	  2206: .0001:	
00:00007EAA 0C050052        	  2207: 	cmpi.b #'R',d5
00:00007EAE 6604            	  2208: 	bne.s .0003
00:00007EB0 6100A0CC        	  2209: 	bsr RandGetNum
                            	  2210: .0003:
00:00007EB4 22C4            	  2211: 	move.l d4,(a1)+
00:00007EB6 5383            	  2212: 	sub.l	#1,d3
00:00007EB8 66E6            	  2213: 	bne.s	.fmem
00:00007EBA 6000F9CC        	  2214: 	bra	Monitor
                            	  2215: 	
                            	  2216: ;------------------------------------------------------------------------------
                            	  2217: ; Modifies:
                            	  2218: ;	a0	- text pointer
                            	  2219: ;------------------------------------------------------------------------------
                            	  2220: 
                            	  2221: ignBlanks:
00:00007EBE 2F01            	  2222: 	move.l d1,-(a7)
                            	  2223: .0001:
00:00007EC0 6100F9B2        	  2224: 	bsr	FromScreen
00:00007EC4 0C010020        	  2225: 	cmpi.b #' ',d1
00:00007EC8 67F6            	  2226: 	beq.s .0001
                            	  2227: 	if (SCREEN_FORMAT==1)
00:00007ECA 5988            	  2228: 		lea	-4(a0),a0
                            	  2229: 	else
                            	  2230: 		lea	-8(a0),a0
                            	  2231: 	endif
00:00007ECC 221F            	  2232: 	move.l (a7)+,d1
00:00007ECE 4E75            	  2233: 	rts
                            	  2234: 
                            	  2235: 
                            	  2236: ;------------------------------------------------------------------------------
                            	  2237: ;------------------------------------------------------------------------------
                            	  2238: 
                            	  2239: PeekScreenChar:
00:00007ED0 2210            	  2240: 	move.l (a0),d1
00:00007ED2 60000CB0        	  2241: 	bra rbo
                            	  2242: 
                            	  2243: ;------------------------------------------------------------------------------
                            	  2244: ; Get the size character
                            	  2245: ; If the size is not recognized, assume a byte size
                            	  2246: ;
                            	  2247: ; Modifies:
                            	  2248: ;		a0	- text pointer
                            	  2249: ;		d1
                            	  2250: ; Returns:
                            	  2251: ;		d4 = size character 'B','W' or 'L'
                            	  2252: ;------------------------------------------------------------------------------
                            	  2253: 
                            	  2254: GetSzChar:
00:00007ED6 61E6            	  2255: 	bsr	ignBlanks
00:00007ED8 7842            	  2256: 	moveq #'B',d4		; assume byte
00:00007EDA 2210            	  2257: 	move.l (a0),d1
00:00007EDC 61000CA6        	  2258: 	bsr	rbo
00:00007EE0 0C010042        	  2259: 	cmpi.b #'B',d1
00:00007EE4 670E            	  2260: 	beq.s .0002
00:00007EE6 0C010057        	  2261: 	cmpi.b #'W',d1
00:00007EEA 6708            	  2262: 	beq.s .0002
00:00007EEC 0C01004C        	  2263: 	cmpi.b #'L',d1
00:00007EF0 6702            	  2264: 	beq.s .0002
00:00007EF2 4E75            	  2265: 	rts
                            	  2266: .0002:
00:00007EF4 6100F97E        	  2267: 	bsr FromScreen
00:00007EF8 1801            	  2268: 	move.b d1,d4
00:00007EFA 4E75            	  2269: 	rts
                            	  2270: 
                            	  2271: ;------------------------------------------------------------------------------
                            	  2272: ; Edit memory byte.
                            	  2273: ;    Bytes are built into long words in case the memory is only longword
                            	  2274: ; accessible.
                            	  2275: ;------------------------------------------------------------------------------
                            	  2276: 
                            	  2277: EditMemHelper:
00:00007EFC 61C0            	  2278: 	bsr ignBlanks
00:00007EFE 61000340        	  2279: 	bsr GetHexNumber
00:00007F02 0C04004C        	  2280: 	cmpi.b #'L',d4
00:00007F06 6604            	  2281: 	bne.s .0001
00:00007F08 2401            	  2282: 	move.l d1,d2
00:00007F0A 4E75            	  2283: 	rts
                            	  2284: .0001:
00:00007F0C 0C040057        	  2285: 	cmpi.b #'W',d4
00:00007F10 6606            	  2286: 	bne.s .0002
00:00007F12 4842            	  2287: 	swap d2
00:00007F14 3401            	  2288: 	move.w d1,d2
00:00007F16 4E75            	  2289: 	rts
                            	  2290: .0002:
00:00007F18 E18A            	  2291: 	lsl.l #8,d2
00:00007F1A 1401            	  2292: 	move.b d1,d2
00:00007F1C 4E75            	  2293: 	rts
                            	  2294: 	
                            	  2295: cmdEditMemory:
00:00007F1E 61B6            	  2296: 	bsr GetSzChar
00:00007F20 619C            	  2297: 	bsr ignBlanks
00:00007F22 6100031C        	  2298: 	bsr	GetHexNumber
00:00007F26 2241            	  2299: 	move.l d1,a1
                            	  2300: edtmem1:
00:00007F28 0C04004C        	  2301: 	cmpi.b #'L',d4
00:00007F2C 6610            	  2302: 	bne.s .0004
00:00007F2E 7400            	  2303: 	clr.l	d2
00:00007F30 61CA            	  2304: 	bsr EditMemHelper
00:00007F32 22C2            	  2305: 	move.l d2,(a1)+
00:00007F34 7400            	  2306: 	clr.l	d2
00:00007F36 61C4            	  2307: 	bsr EditMemHelper
00:00007F38 22C2            	  2308: 	move.l d2,(a1)+
00:00007F3A 6000F94C        	  2309: 	bra Monitor
                            	  2310: .0004:
00:00007F3E 0C040057        	  2311: 	cmpi.b #'W',d4
00:00007F42 6618            	  2312: 	bne.s .0005
00:00007F44 7400            	  2313: 	clr.l	d2
00:00007F46 61B4            	  2314: 	bsr EditMemHelper
00:00007F48 61B2            	  2315: 	bsr EditMemHelper
00:00007F4A 4842            	  2316: 	swap d2
00:00007F4C 22C2            	  2317: 	move.l d2,(a1)+
00:00007F4E 7400            	  2318: 	clr.l	d2
00:00007F50 61AA            	  2319: 	bsr EditMemHelper
00:00007F52 61A8            	  2320: 	bsr EditMemHelper
00:00007F54 4842            	  2321: 	swap d2
00:00007F56 22C2            	  2322: 	move.l d2,(a1)+
00:00007F58 6000F92E        	  2323: 	bra Monitor
                            	  2324: .0005:
00:00007F5C 7400            	  2325: 	clr.l	d2
00:00007F5E 619C            	  2326: 	bsr EditMemHelper
00:00007F60 619A            	  2327: 	bsr EditMemHelper
00:00007F62 6198            	  2328: 	bsr EditMemHelper
00:00007F64 6196            	  2329: 	bsr EditMemHelper
00:00007F66 C342            	  2330: 	exg d1,d2
00:00007F68 61000C1A        	  2331: 	bsr rbo
00:00007F6C 22C1            	  2332: 	move.l d1,(a1)+
00:00007F6E 61000C14        	  2333: 	bsr rbo
00:00007F72 C342            	  2334: 	exg d1,d2
00:00007F74 7400            	  2335: 	clr.l	d2
00:00007F76 6184            	  2336: 	bsr EditMemHelper
00:00007F78 6182            	  2337: 	bsr EditMemHelper
00:00007F7A 6180            	  2338: 	bsr EditMemHelper
00:00007F7C 6100FF7E        	  2339: 	bsr EditMemHelper
00:00007F80 C342            	  2340: 	exg d1,d2
00:00007F82 61000C00        	  2341: 	bsr rbo
00:00007F86 22C1            	  2342: 	move.l d1,(a1)+
00:00007F88 61000BFA        	  2343: 	bsr rbo
00:00007F8C C342            	  2344: 	exg d1,d2
00:00007F8E 6000F8F8        	  2345: 	bra Monitor
                            	  2346: 
                            	  2347: ;------------------------------------------------------------------------------
                            	  2348: ; Execute code at the specified address.
                            	  2349: ;------------------------------------------------------------------------------
                            	  2350: 
                            	  2351: cmdJump:
                            	  2352: ExecuteCode:
00:00007F92 6100FF2A        	  2353: 	bsr	ignBlanks
00:00007F96 610002A8        	  2354: 	bsr	GetHexNumber
00:00007F9A 2041            	  2355: 	move.l d1,a0
00:00007F9C 4E90            	  2356: 	jsr	(a0)
00:00007F9E 6000F8E8        	  2357: 	bra Monitor
                            	  2358: 
                            	  2359: cmdGrDemo:
00:00007FA2 61009CD0        	  2360: 	bsr setup_gfxaccel
00:00007FA6 263C00000438    	  2361: 	move.l #1080,d3
00:00007FAC 287C40000000    	  2362: 	move.l #$40000000,a4
                            	  2363: .0002:
00:00007FB2 243CFF7FFF7F    	  2364: 	move.l #$FF7FFF7F,d2	; white
00:00007FB8 3882            	  2365: 	move.w d2,(a4)
00:00007FBA 49EC0F02        	  2366: 	add.l #3842,a4
00:00007FBE 51CBFFF2        	  2367: 	dbra d3,.0002
                            	  2368: ;	bra Monitor
00:00007FC2 223C7F127F12    	  2369: 	move.l #$7F127F12,d1
00:00007FC8 61000BBA        	  2370: 	bsr rbo
00:00007FCC 61009D1C        	  2371: 	bsr gfxaccel_set_color
                            	  2372: ;	move.l #800,d1
                            	  2373: ;	move.l #600,d2
                            	  2374: ;	move.l #1800,d3
                            	  2375: ;	move.l #900,d4
                            	  2376: ;	bsr gfxaccel_rectangle
00:00007FD0 2A3C00002710    	  2377: 	move.l #10000,d5
                            	  2378: .0001:
00:00007FD6 61009FA6        	  2379: 	bsr RandGetNum
00:00007FDA 61009D0E        	  2380: 	bsr gfxaccel_set_color
00:00007FDE 61009F9E        	  2381: 	bsr RandGetNum
00:00007FE2 2801            	  2382: 	move.l d1,d4
00:00007FE4 0284000003FF    	  2383: 	andi.l #$3ff,d4
00:00007FEA 61009F92        	  2384: 	bsr RandGetNum
00:00007FEE 2601            	  2385: 	move.l d1,d3
00:00007FF0 0283000007FF    	  2386: 	andi.l #$7ff,d3
00:00007FF6 61009F86        	  2387: 	bsr RandGetNum
00:00007FFA 2401            	  2388: 	move.l d1,d2
00:00007FFC 0282000003FF    	  2389: 	andi.l #$3ff,d2
00:00008002 61009F7A        	  2390: 	bsr RandGetNum
00:00008006 0281000007FF    	  2391: 	andi.l #$7ff,d1
00:0000800C 61009D24        	  2392: 	bsr gfxaccel_draw_line
00:00008010 51CDFFC4        	  2393: 	dbra d5,.0001
00:00008014 2A3C00002710    	  2394: 	move.l #10000,d5
                            	  2395: .0003:
00:0000801A 61009F62        	  2396: 	bsr RandGetNum
00:0000801E 61009CCA        	  2397: 	bsr gfxaccel_set_color
00:00008022 61009F5A        	  2398: 	bsr RandGetNum
00:00008026 2801            	  2399: 	move.l d1,d4
00:00008028 0284000003FF    	  2400: 	andi.l #$3ff,d4
00:0000802E 61009F4E        	  2401: 	bsr RandGetNum
00:00008032 2601            	  2402: 	move.l d1,d3
00:00008034 0283000007FF    	  2403: 	andi.l #$7ff,d3
00:0000803A 61009F42        	  2404: 	bsr RandGetNum
00:0000803E 2401            	  2405: 	move.l d1,d2
00:00008040 0282000003FF    	  2406: 	andi.l #$3ff,d2
00:00008046 61009F36        	  2407: 	bsr RandGetNum
00:0000804A 0281000007FF    	  2408: 	andi.l #$7ff,d1
00:00008050 61009D50        	  2409: 	bsr gfxaccel_draw_rectangle
00:00008054 51CDFFC4        	  2410: 	dbra d5,.0003
00:00008058 6000F82E        	  2411: 	bra Monitor
                            	  2412: 
                            	  2413: ;------------------------------------------------------------------------------
                            	  2414: ; Disassemble code
                            	  2415: ; DI 1000
                            	  2416: ;------------------------------------------------------------------------------
                            	  2417: ;        CALLING SEQUENCE:
                            	  2418: ;   D0,D1,D2 = CODE TO BE DISASSEMBLED
                            	  2419: ;   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
                            	  2420: ;   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
                            	  2421: ;        JSR       DCODE68K
                            	  2422: ;
                            	  2423: ;        RETURN:
                            	  2424: ;   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
                            	  2425: ;   A5 = POINTER TO LINE AS DISASSEMBLED
                            	  2426: ;   A6 = POINTER TO END OF LINE
                            	  2427: 
                            	  2428: 
                            	  2429: cmdDisassemble:
00:0000805C 6100FE60        	  2430: 	bsr ignBlanks
00:00008060 610001DE        	  2431: 	bsr GetHexNumber
00:00008064 6700F822        	  2432: 	beq Monitor
00:00008068 363C0014        	  2433: 	move.w #20,d3			; number of lines to disassemble
                            	  2434: .0002:
00:0000806C 2F03            	  2435: 	move.l d3,-(a7)
00:0000806E 2041            	  2436: 	move.l d1,a0
00:00008070 2841            	  2437: 	move.l d1,a4			; a4 = PC of code
00:00008072 3018            	  2438: 	move.w (a0)+,d0		; d0 to d2 = bytes of instruction to decode
00:00008074 4840            	  2439: 	swap d0
00:00008076 3018            	  2440: 	move.w (a0)+,d0
00:00008078 3218            	  2441: 	move.w (a0)+,d1		; d0 to d2 = bytes of instruction to decode
00:0000807A 4841            	  2442: 	swap d1
00:0000807C 3218            	  2443: 	move.w (a0)+,d1
00:0000807E 3418            	  2444: 	move.w (a0)+,d2		; d0 to d2 = bytes of instruction to decode
00:00008080 4842            	  2445: 	swap d2
00:00008082 3418            	  2446: 	move.w (a0)+,d2
00:00008084 4BF900040800    	  2447: 	lea _dasmbuf,a5		; a5 = pointer to disassembly buffer
00:0000808A 61001A56        	  2448: 	bsr DCODE68K	
00:0000808E 383C003E        	  2449: 	move.w #62,d4
                            	  2450: .0001:
00:00008092 121D            	  2451: 	move.b (a5)+,d1
00:00008094 61000F54        	  2452: 	bsr OutputChar
00:00008098 51CCFFF8        	  2453: 	dbra d4,.0001
00:0000809C 6100F1E0        	  2454: 	bsr CRLF
00:000080A0 220C            	  2455: 	move.l a4,d1
00:000080A2 261F            	  2456: 	move.l (a7)+,d3
00:000080A4 51CBFFC6        	  2457: 	dbra d3,.0002
00:000080A8 6000F7DE        	  2458: 	bra Monitor
                            	  2459: 	
                            	  2460: ;------------------------------------------------------------------------------
                            	  2461: ; Do a memory dump of the requested location.
                            	  2462: ; DB 0800 0850
                            	  2463: ;------------------------------------------------------------------------------
                            	  2464: 
                            	  2465: cmdDumpMemory:
00:000080AC 6100FE28        	  2466: 	bsr GetSzChar
00:000080B0 6100FE0C        	  2467: 	bsr ignBlanks
00:000080B4 6100018A        	  2468: 	bsr	GetHexNumber
00:000080B8 6700F7CE        	  2469: 	beq	Monitor					; was there a number ? no, other garbage, just ignore
00:000080BC 2601            	  2470: 	move.l d1,d3				; save off start of range
00:000080BE 6100FDFE        	  2471: 	bsr	ignBlanks
00:000080C2 6100017C        	  2472: 	bsr	GetHexNumber
00:000080C6 6608            	  2473: 	bne.s	DumpMem1
00:000080C8 2203            	  2474: 	move.l d3,d1
00:000080CA 068100000040    	  2475: 	addi.l #64,d1				;	no end specified, just dump 64 bytes
                            	  2476: DumpMem1:
00:000080D0 2043            	  2477: 	move.l d3,a0
00:000080D2 2241            	  2478: 	move.l d1,a1
00:000080D4 6100F1A8        	  2479: 	bsr	CRLF
                            	  2480: .0001:
00:000080D8 B3C8            	  2481: 	cmpa.l a0,a1
00:000080DA 6300F7AC        	  2482: 	bls	Monitor
00:000080DE 6102            	  2483: 	bsr	DisplayMem
00:000080E0 60F6            	  2484: 	bra.s	.0001
                            	  2485: 
                            	  2486: ;------------------------------------------------------------------------------
                            	  2487: ; Display memory dump in a format suitable for edit.
                            	  2488: ;
                            	  2489: ;	EB 12345678 00 11 22 33 44 55 66 77  "........"
                            	  2490: ;
                            	  2491: ; Modifies:
                            	  2492: ;		d1,d2,a0
                            	  2493: ;------------------------------------------------------------------------------
                            	  2494: 	
                            	  2495: DisplayMem:
00:000080E2 123C0045        	  2496: 	move.b #'E',d1
00:000080E6 61000F02        	  2497: 	bsr	OutputChar
00:000080EA 1204            	  2498: 	move.b d4,d1
00:000080EC 61000EFC        	  2499: 	bsr OutputChar
00:000080F0 6100072A        	  2500: 	bsr DisplaySpace
00:000080F4 2208            	  2501: 	move.l a0,d1
00:000080F6 6100072C        	  2502: 	bsr	DisplayTetra
00:000080FA 7407            	  2503: 	moveq #7,d2						; assume bytes
00:000080FC 0C04004C        	  2504: 	cmpi.b #'L',d4
00:00008100 6604            	  2505: 	bne.s .0004
00:00008102 7401            	  2506: 	moveq	#1,d2
00:00008104 6008            	  2507: 	bra.s dspmem1
                            	  2508: .0004:
00:00008106 0C040057        	  2509: 	cmpi.b #'W',d4
00:0000810A 6602            	  2510: 	bne.s dspmem1
00:0000810C 7403            	  2511: 	moveq #3,d2
                            	  2512: dspmem1:
00:0000810E 123C0020        	  2513: 	move.b #' ',d1
00:00008112 61000ED6        	  2514: 	bsr	OutputChar
00:00008116 0C04004C        	  2515: 	cmpi.b #'L',d4
00:0000811A 6608            	  2516: 	bne.s .0005
00:0000811C 2218            	  2517: 	move.l (a0)+,d1
00:0000811E 61000704        	  2518: 	bsr	DisplayTetra
00:00008122 6014            	  2519: 	bra.s .0006
                            	  2520: .0005:
00:00008124 0C040057        	  2521: 	cmpi.b #'W',d4
00:00008128 6608            	  2522: 	bne.s .0007
00:0000812A 3218            	  2523: 	move.w (a0)+,d1
00:0000812C 610006FC        	  2524: 	bsr	DisplayWyde
00:00008130 6006            	  2525: 	bra.s .0006
                            	  2526: .0007:
00:00008132 1218            	  2527: 	move.b (a0)+,d1
00:00008134 610006FA        	  2528: 	bsr DisplayByte
                            	  2529: .0006:
00:00008138 51CAFFD4        	  2530: 	dbra d2,dspmem1
00:0000813C 610006CC        	  2531: 	bsr	DisplayTwoSpaces
00:00008140 123C0022        	  2532: 	move.b #34,d1
00:00008144 61000EA4        	  2533: 	bsr	OutputChar
00:00008148 5188            	  2534: 	lea	-8(a0),a0
00:0000814A 7407            	  2535: 	moveq	#7,d2
                            	  2536: .0002:
00:0000814C 1218            	  2537: 	move.b (a0)+,d1
00:0000814E B23C0020        	  2538: 	cmp.b	#' ',d1
00:00008152 6506            	  2539: 	blo.s	.0003
00:00008154 B23C007F        	  2540: 	cmp.b	#127,d1
00:00008158 6304            	  2541: 	bls.s	.0001
                            	  2542: .0003:
00:0000815A 123C002E        	  2543: 	move.b #'.',d1
                            	  2544: .0001:
00:0000815E 61000E8A        	  2545: 	bsr	OutputChar
00:00008162 51CAFFE8        	  2546: 	dbra d2,.0002
00:00008166 123C0022        	  2547: 	move.b #34,d1
00:0000816A 61000E7E        	  2548: 	bsr	OutputChar
00:0000816E 610086D2        	  2549: 	bsr	CheckForCtrlC
00:00008172 6000F10A        	  2550: 	bra	CRLF
                            	  2551: 
                            	  2552: ;------------------------------------------------------------------------------
                            	  2553: ; Dump Registers
                            	  2554: ;    The dump is in a format that allows the register value to be edited.
                            	  2555: ;
                            	  2556: ; RegD0 12345678
                            	  2557: ; RegD1 77777777
                            	  2558: ;	... etc
                            	  2559: ;------------------------------------------------------------------------------
                            	  2560: 
                            	  2561: cmdDumpRegs:
00:00008176 6100F106        	  2562: 	bsr	CRLF
00:0000817A 363C000F        	  2563: 	move.w #15,d3						; number of registers-1
00:0000817E 41FA007A        	  2564: 	lea	msg_reglist,a0			;
00:00008182 43FA0072        	  2565: 	lea	msg_regs,a1
00:00008186 45F900040100    	  2566: 	lea	Regsave,a2					; a2 points to register save area
                            	  2567: .0001:
00:0000818C 6100F10A        	  2568: 	bsr			DisplayString
00:00008190 1218            	  2569: 	move.b	(a0)+,d1
00:00008192 61000E56        	  2570: 	bsr			OutputChar
00:00008196 1218            	  2571: 	move.b	(a0)+,d1
00:00008198 61000E50        	  2572: 	bsr			OutputChar
00:0000819C 6100067E        	  2573: 	bsr			DisplaySpace
00:000081A0 221A            	  2574: 	move.l	(a2)+,d1
00:000081A2 61000680        	  2575: 	bsr			DisplayTetra
00:000081A6 6100F0D6        	  2576: 	bsr			CRLF
00:000081AA 51CBFFE0        	  2577: 	dbra		d3,.0001
00:000081AE 6100F0E8        	  2578: 	bsr			DisplayString
00:000081B2 1218            	  2579: 	move.b	(a0)+,d1
00:000081B4 61000E34        	  2580: 	bsr			OutputChar
00:000081B8 1218            	  2581: 	move.b	(a0)+,d1
00:000081BA 61000E2E        	  2582: 	bsr			OutputChar
00:000081BE 6100065C        	  2583: 	bsr			DisplaySpace
00:000081C2 223900040144    	  2584: 	move.l	Regsave+$44,d1
00:000081C8 6100065A        	  2585: 	bsr			DisplayTetra
00:000081CC 6100F0B0        	  2586: 	bsr			CRLF
00:000081D0 6100F0C6        	  2587: 	bsr			DisplayString
00:000081D4 1218            	  2588: 	move.b	(a0)+,d1
00:000081D6 61000E12        	  2589: 	bsr			OutputChar
00:000081DA 1218            	  2590: 	move.b	(a0)+,d1
00:000081DC 61000E0C        	  2591: 	bsr			OutputChar
00:000081E0 6100063A        	  2592: 	bsr			DisplaySpace
00:000081E4 323900040140    	  2593: 	move.w	Regsave+$40,d1
00:000081EA 6100063E        	  2594: 	bsr			DisplayWyde
00:000081EE 6100F08E        	  2595: 	bsr			CRLF
00:000081F2 6000F694        	  2596: 	bra			Monitor
                            	  2597: 
                            	  2598: msg_regs:
00:000081F6 526567          	  2599: 	dc.b	"Reg",0
00:000081F9 00
                            	  2600: msg_reglist:
00:000081FA 4430443144324433	  2601: 	dc.b	"D0D1D2D3D4D5D6D7A0A1A2A3A4A5A6A7PCSR",0
00:00008202 4434443544364437
00:0000820A 4130413141324133
00:00008212 4134413541364137
00:0000821A 50435352
00:0000821E 00
                            	  2602: 
                            	  2603: 	align	1
                            	  2604: 
                            	  2605: ;------------------------------------------------------------------------------
                            	  2606: ;------------------------------------------------------------------------------
                            	  2607: 
                            	  2608: cmdTestSerialReceive:
                            	  2609: .0002:
00:00008220 7024            	  2610: 	moveq		#36,d0				; serial get char from buffer
00:00008222 4E4F            	  2611: 	trap		#15
                            	  2612: ;	bsr			SerialPeekCharDirect
00:00008224 4A41            	  2613: 	tst.w		d1
00:00008226 6B0A            	  2614: 	bmi.s		.0001
00:00008228 0C01001A        	  2615: 	cmpi.b	#CTRLZ,d1
00:0000822C 670A            	  2616: 	beq			.0003
00:0000822E 61000DBA        	  2617: 	bsr			OutputChar
                            	  2618: .0001:	
00:00008232 6100860E        	  2619: 	bsr			CheckForCtrlC
00:00008236 60E8            	  2620: 	bra			.0002
                            	  2621: .0003:
00:00008238 6100840E        	  2622: 	bsr			_KeybdInit
00:0000823C 6000F64A        	  2623: 	bra			Monitor
                            	  2624: 
                            	  2625: ;------------------------------------------------------------------------------
                            	  2626: ; Get a hexidecimal number. Maximum of eight digits.
                            	  2627: ;
                            	  2628: ; Returns:
                            	  2629: ;		d0 = number of digits
                            	  2630: ;		d1 = value of number
                            	  2631: ;		zf = number of digits == 0
                            	  2632: ;------------------------------------------------------------------------------
                            	  2633: 
                            	  2634: GetHexNumber:
00:00008240 2F02            	  2635: 	move.l d2,-(a7)
00:00008242 7400            	  2636: 	clr.l	d2
00:00008244 7000            	  2637: 	moveq	#0,d0
                            	  2638: .0002
00:00008246 6100F62C        	  2639: 	bsr	FromScreen
00:0000824A 61000584        	  2640: 	bsr	AsciiToHexNybble
00:0000824E 0C0100FF        	  2641: 	cmpi.b #$ff,d1
00:00008252 6712            	  2642: 	beq.s	.0001
00:00008254 E98A            	  2643: 	lsl.l	#4,d2
00:00008256 02810000000F    	  2644: 	andi.l #$0f,d1
00:0000825C 8481            	  2645: 	or.l d1,d2
00:0000825E 5240            	  2646: 	addq #1,d0
00:00008260 0C000008        	  2647: 	cmpi.b #8,d0
00:00008264 65E0            	  2648: 	blo.s	.0002
                            	  2649: .0001
00:00008266 2202            	  2650: 	move.l d2,d1
00:00008268 241F            	  2651: 	move.l (a7)+,d2
00:0000826A 4A00            	  2652: 	tst.b	d0
00:0000826C 4E75            	  2653: 	rts	
                            	  2654: 
                            	  2655: GetDecNumber:
00:0000826E 48E73000        	  2656: 	movem.l d2/d3,-(a7)
00:00008272 7400            	  2657: 	clr.l d2
00:00008274 7000            	  2658: 	clr.l d0
                            	  2659: .0002
00:00008276 6100F5FC        	  2660: 	bsr FromScreen					; grab a character off the screen
00:0000827A 61000554        	  2661: 	bsr	AsciiToHexNybble		; convert to an ascii nybble
00:0000827E 0C0100FF        	  2662: 	cmpi.b #$ff,d1
00:00008282 6718            	  2663: 	beq.s	.0001
00:00008284 02810000000F    	  2664: 	andi.l #$0F,d1					; d1 = 0 to 9
00:0000828A 2602            	  2665: 	move.l d2,d3						; d3 = current number
00:0000828C D683            	  2666: 	add.l d3,d3							; d3*2
00:0000828E E78A            	  2667: 	lsl.l #3,d2							; current number * 8
00:00008290 D483            	  2668: 	add.l d3,d2							; current number * 10
00:00008292 D481            	  2669: 	add.l d1,d2							; add in new digit
00:00008294 5240            	  2670: 	addq #1,d0							; increment number of digits
00:00008296 0C000009        	  2671: 	cmpi.b #9,d0						; make sure 9 or fewer
00:0000829A 65DA            	  2672: 	blo .0002
                            	  2673: .0001
00:0000829C 2202            	  2674: 	move.l d2,d1						; return number in d1
00:0000829E 4CDF000C        	  2675: 	movem.l (a7)+,d2/d3
00:000082A2 4A00            	  2676: 	tst.b d0
00:000082A4 4E75            	  2677: 	rts
                            	  2678: 	
                            	  2679: 	include "FloatToString.x68"

Source: "FloatToString.x68"
                            	     1: 	code
                            	     2: ;==============================================================================
                            	     3: ; Decimal-Floating point to string conversion routine.
                            	     4: ;
                            	     5: ; Modifies
                            	     6: ;		_fpWork work area
                            	     7: ; Register Usage:
                            	     8: ; 	fp0 = input decimal-float to convert
                            	     9: ;		fp1 = constant holder, 1.0, 10.0
                            	    10: ;		fp2 = 1.0e<fp0 exponent> value for conversion
                            	    11: ;		fp3 = holds digit value during significand conversion
                            	    12: ; 	a0 = pointer to string buffer, updated to point to NULL at end of string
                            	    13: ;		a1 = pointer to "Nan" or "Inf" message string
                            	    14: ;		d0 = temporary
                            	    15: ;		d1 = digit value during exponent, significand conversion
                            	    16: ; 	d6 = exponent
                            	    17: ;==============================================================================
                            	    18: 	align 4
00:000082B0 25FF0000        	    19: _dfOne	dc.l $25ff0000,$00000000,$00000000
00:000082B4 00000000
00:000082B8 00000000
00:000082BC 2600C000        	    20: _dfTen	dc.l $2600C000,$00000000,$00000000
00:000082C0 00000000
00:000082C4 00000000
00:000082C8 2606DDFA        	    21: _dfMil  dc.l $2606DDFA,$1C000000,$00000000
00:000082CC 1C000000
00:000082D0 00000000
                            	    22: 
00:000082D4 4E614E          	    23: _msgNan	dc.b "NaN",0
00:000082D7 00
00:000082D8 496E66          	    24: _msgInf dc.b "Inf",0
00:000082DB 00
                            	    25: 	even
                            	    26: 
                            	    27: ;------------------------------------------------------------------------------
                            	    28: ; Check for the special Nan and infinity values. Output the appropriate string.
                            	    29: ;
                            	    30: ; Modifies
                            	    31: ;		_fpWork area
                            	    32: ;		a0
                            	    33: ; Parameters:
                            	    34: ;		fp0 = dbl
                            	    35: ;------------------------------------------------------------------------------
                            	    36: 
                            	    37: _CheckNan:
00:000082DC 4E52FFF4        	    38: 	link a2,#-12
00:000082E0 48D70201        	    39: 	movem.l d0/a1,(sp)
00:000082E4 2F79000400980008	    40: 	move.l _canary,8(sp)
00:000082EC F239680000040600	    41: 	fmove.x fp0,_fpWork
00:000082F4 103900040600    	    42: 	move.b _fpWork,d0				; get sign+combo
00:000082FA 0200007C        	    43: 	andi.b #$7C,d0					; mask for combo bits
00:000082FE 0C00007C        	    44: 	cmpi.b #$7C,d0					; is it the Nan combo?
00:00008302 6606            	    45: 	bne .notNan
00:00008304 43FAFFCE        	    46: 	lea _msgNan,a1					; output "Nan"
00:00008308 600A            	    47: 	bra .outStr
                            	    48: .notNan
00:0000830A 0C000078        	    49: 	cmpi.b #$78,d0					; is it infinity combo?
00:0000830E 661E            	    50: 	bne .notInf
00:00008310 43FAFFC6        	    51: 	lea _msgInf,a1
                            	    52: .outStr
00:00008314 10D9            	    53: 	move.b (a1)+,(a0)+			; output "Inf"
00:00008316 10D9            	    54: 	move.b (a1)+,(a0)+
00:00008318 10D9            	    55: 	move.b (a1)+,(a0)+
00:0000831A 4210            	    56: 	clr.b (a0)
00:0000831C 4CD70201        	    57: 	movem.l (sp),d0/a1
00:00008320 A2AF00030008    	    58: 	cchk 8(sp)
00:00008326 4E5A            	    59: 	unlk a2
00:00008328 003C0001        	    60: 	ori #1,ccr							; set carry and return
00:0000832C 4E75            	    61: 	rts
                            	    62: .notInf
00:0000832E 4CD70201        	    63: 	movem.l (sp),d0/a1
00:00008332 A2AF00030008    	    64: 	cchk 8(sp)
00:00008338 4E5A            	    65: 	unlk a2
00:0000833A 023C00FE        	    66: 	andi #$FE,ccr						; clear carry and return
00:0000833E 4E75            	    67: 	rts
                            	    68: 
                            	    69: ;------------------------------------------------------------------------------
                            	    70: ; Check for a zero value. Output a single "0" if zero,
                            	    71: ;
                            	    72: ; Modifies:
                            	    73: ;		a0
                            	    74: ; Parameters:
                            	    75: ;		fp0 = dbl
                            	    76: ;------------------------------------------------------------------------------
                            	    77: 
                            	    78: _CheckZero:
00:00008340 F200003A        	    79: 	ftst fp0								; check if number is zero
00:00008344 F28E000E        	    80: 	fbne .0003
00:00008348 10FC0030        	    81: 	move.b #'0',(a0)+				; if zero output "0"
00:0000834C 4210            	    82: 	clr.b (a0)
00:0000834E 003C0004        	    83: 	ori #4,ccr							; set zf
00:00008352 4E75            	    84: 	rts
                            	    85: .0003
00:00008354 023C00FB        	    86: 	andi #$FB,ccr						; clear zf
00:00008358 4E75            	    87: 	rts
                            	    88: 
                            	    89: ;------------------------------------------------------------------------------
                            	    90: ; Check for a negative number. This includes Nans and Infinities. Output a "-"
                            	    91: ; if negative.
                            	    92: ;
                            	    93: ;	Modifies
                            	    94: ;		a0
                            	    95: ; Parameters:
                            	    96: ;		fp0 = dbl
                            	    97: ;------------------------------------------------------------------------------
                            	    98: 
                            	    99: _CheckNegative:
00:0000835A F200003A        	   100: 	ftst fp0								; is number negative?
00:0000835E F293000A        	   101: 	fbge .0002
00:00008362 10FC002D        	   102: 	move.b #'-',(a0)+				; yes, output '-'
00:00008366 F200001A        	   103: 	fneg fp0								; make fp0 positive
                            	   104: .0002
00:0000836A 4E75            	   105: 	rts
                            	   106: 
                            	   107: ;------------------------------------------------------------------------------
                            	   108: ; Make the input value larger so that digits may appear before the decimal
                            	   109: ; point.
                            	   110: ;
                            	   111: ; Modifies:
                            	   112: ;		fp0,fp1,d6
                            	   113: ; Parameters:
                            	   114: ;		fp0 = dbl
                            	   115: ;------------------------------------------------------------------------------
                            	   116: 
                            	   117: ;	if (dbl < 1.0) {
                            	   118: ;		while (dbl < 1.0) {
                            	   119: ;			dbl *= 1000000.0;
                            	   120: ;			exp -= 6;  
                            	   121: ;		}
                            	   122: ;	}
                            	   123: 
                            	   124: _MakeBig:
00:0000836C F23C50800001    	   125: 	fmove.w #1,fp1
                            	   126: .0002
00:00008372 F2000438        	   127: 	fcmp fp1,fp0						; is fp0 > 1?
00:00008376 F293000E        	   128: 	fbge .0001							; yes, return
00:0000837A F23C402600000006	   129: 	fscale.l #6,fp0					; multiply fp0 by a million
00:00008382 5D46            	   130: 	subi.w #6,d6						; decrement exponent by six
00:00008384 60EC            	   131: 	bra .0002								; keep trying until number is > 1
                            	   132: .0001
00:00008386 4E75            	   133: 	rts
                            	   134: 	
                            	   135: ;------------------------------------------------------------------------------
                            	   136: ;	Create a number dbl2 on the same order of magnitude as dbl, but
                            	   137: ;	less than dbl. The number will be 1.0e<dbl's exponent>
                            	   138: ;
                            	   139: ; Modifies:
                            	   140: ;		d6,fp2
                            	   141: ; Parameters:
                            	   142: ;		fp0 = dbl
                            	   143: ;------------------------------------------------------------------------------
                            	   144: 
                            	   145: ;	// The following is similar to using log10() and pow() functions.
                            	   146: ;	// Now dbl is >= 1.0
                            	   147: ;	// Create a number dbl2 on the same order of magnitude as dbl, but
                            	   148: ;	// less than dbl.
                            	   149: ;	dbl2 = 1.0;
                            	   150: ;	dbla = dbl2;
                            	   151: ;	if (dbl > dbl2) {	// dbl > 1.0 ?
                            	   152: ;		while (dbl2 <= dbl) {
                            	   153: ;			dbla = dbl2;
                            	   154: ;			dbl2 *= 10.0;	// increase power of 10
                            	   155: ;			exp++;
                            	   156: ;		}
                            	   157: ;		// The above loop goes one too far, we want the last value less
                            	   158: ;		// than dbl.
                            	   159: ;		dbl2 = dbla;
                            	   160: ;		exp--;
                            	   161: ;	}
                            	   162: 
                            	   163: _LessThanDbl:
00:00008388 F23C51000001    	   164: 	fmove.w #1,fp2			; setup fp2 = 1
00:0000838E F2000838        	   165: 	fcmp fp2,fp0				; if (dbl > dbl2)
00:00008392 F295001E        	   166: 	fble .0004
                            	   167: .0006
00:00008396 F2000138        	   168: 	fcmp fp0,fp2				; while (dbl2 <= dbl)
00:0000839A F292000C        	   169: 	fbgt .0005
00:0000839E F23C51260001    	   170: 	fscale.w #1,fp2			; dbl2 *= 10 (increase exponent by one)
00:000083A4 5246            	   171: 	addi.w #1,d6				; exp++
00:000083A6 60EE            	   172: 	bra .0006
                            	   173: .0005
00:000083A8 F23C4126FFFFFFFF	   174: 	fscale.l #-1,fp2		; dbl2 /= 10 (decrease exponent by one)
00:000083B0 5346            	   175: 	subi.w #1,d6				; exp--;
                            	   176: .0004	
                            	   177: ;	fmove.x fp0,_fpWork	; debugging
                            	   178: ;	fmove.x fp2,_fpWork+12
00:000083B2 4E75            	   179: 	rts
                            	   180: 
                            	   181: ;------------------------------------------------------------------------------
                            	   182: ; Compute the number of digits before the decimal point.
                            	   183: ;
                            	   184: ; Modifies:
                            	   185: ;		d0,d6,_digits_before_decpt
                            	   186: ; Parameters:
                            	   187: ;		d6 = exponent
                            	   188: ;------------------------------------------------------------------------------
                            	   189: 
                            	   190: ; if (exp >= 0 && exp < 6) {
                            	   191: ;   digits_before_decpt = exp+1;
                            	   192: ;		exp = 0;
                            	   193: ;	}
                            	   194: ;	else if (exp >= -7)
                            	   195: ;		digits_before_decpt = 1;
                            	   196: ;	else
                            	   197: ;		digits_before_decpt = -1;
                            	   198: 
                            	   199: _ComputeDigitsBeforeDecpt:
00:000083B4 2F00            	   200: 	move.l d0,-(a7)
00:000083B6 4A46            	   201: 	tst.w d6
00:000083B8 6B16            	   202: 	bmi .0007
00:000083BA 0C460006        	   203: 	cmpi.w #6,d6
00:000083BE 6C10            	   204: 	bge .0007
00:000083C0 3006            	   205: 	move.w d6,d0
00:000083C2 5240            	   206: 	addi.w #1,d0
00:000083C4 33C000040510    	   207: 	move.w d0,_digits_before_decpt	
00:000083CA 4246            	   208: 	clr.w d6
00:000083CC 201F            	   209: 	move.l (a7)+,d0
00:000083CE 4E75            	   210: 	rts
                            	   211: .0007
00:000083D0 0C46FFF9        	   212: 	cmpi.w #-7,d6
00:000083D4 6D0C            	   213: 	blt .0009
00:000083D6 33FC000100040510	   214: 	move.w #1,_digits_before_decpt
00:000083DE 201F            	   215: 	move.l (a7)+,d0
00:000083E0 4E75            	   216: 	rts
                            	   217: .0009
00:000083E2 33FCFFFF00040510	   218: 	move.w #-1,_digits_before_decpt
00:000083EA 201F            	   219: 	move.l (a7)+,d0
00:000083EC 4E75            	   220: 	rts
                            	   221: 
                            	   222: ;------------------------------------------------------------------------------
                            	   223: ;	Spit out a leading zero before the decimal point for a small number.
                            	   224: ;
                            	   225: ; Modifies:
                            	   226: ;		a0
                            	   227: ; Parameters:
                            	   228: ;		d6 = exponent
                            	   229: ;------------------------------------------------------------------------------
                            	   230: 
                            	   231: ;  if (exp < -7) {
                            	   232: ;		 buf[ndx] = '0';
                            	   233: ;		 ndx++;
                            	   234: ;    buf[ndx] = '.';
                            	   235: ;    ndx++;
                            	   236: ;  }
                            	   237: 
                            	   238: _LeadingZero:
00:000083EE 0C46FFF9        	   239: 	cmpi.w #-7,d6
00:000083F2 6C08            	   240: 	bge .0010
00:000083F4 10FC0030        	   241: 	move.b #'0',(a0)+
00:000083F8 10FC002E        	   242: 	move.b #'.',(a0)+
                            	   243: .0010
00:000083FC 4E75            	   244: 	rts
                            	   245: 
                            	   246: ;------------------------------------------------------------------------------
                            	   247: ; Extract the digits of the significand.
                            	   248: ;
                            	   249: ; Modifies:
                            	   250: ;		_precision variable
                            	   251: ; Register Usage
                            	   252: ;		d0 = counter
                            	   253: ;		d1 = digit
                            	   254: ;		fp0 = dbl
                            	   255: ;		fp2 = dbl2
                            	   256: ;		fp3 = digit as decimal float
                            	   257: ;		fp7 = dbla
                            	   258: ; Parameters:
                            	   259: ;		fp0, fp2
                            	   260: ;------------------------------------------------------------------------------
                            	   261: 
                            	   262: ;	// Now loop processing one digit at a time.
                            	   263: ;  for (nn = 0; nn < 25 && precision > 0; nn++) {
                            	   264: ;    digit = 0;
                            	   265: ;		dbla = dbl;
                            	   266: ;		// dbl is on the same order of magnitude as dbl2 so
                            	   267: ;		// a repeated subtract can be used to find the digit.
                            	   268: ;    while (dbl >= dbl2) {
                            	   269: ;      dbl -= dbl2;
                            	   270: ;      digit++;
                            	   271: ;    }
                            	   272: ;    buf[ndx] = digit + '0';
                            	   273: ;		// Now go back and perform just a single subtract and
                            	   274: ;		// a multiply to find out how much to reduce dbl by.
                            	   275: ;		// This should improve the accuracy
                            	   276: ;		if (digit > 2)
                            	   277: ;			dbl = dbla - dbl2 * digit;
                            	   278: ;    ndx++;
                            	   279: ;    digits_before_decpt--;
                            	   280: ;    if (digits_before_decpt==0) {
                            	   281: ;			buf[ndx] = '.';
                            	   282: ;			ndx++;
                            	   283: ;    }
                            	   284: ;    else if (digits_before_decpt < 0)
                            	   285: ;      precision--;
                            	   286: ;		// Shift the next digit to be tested into position.
                            	   287: ;    dbl *= 10.0;
                            	   288: ;  }
                            	   289: 	
                            	   290: _SpitOutDigits:
00:000083FE 4E52FFE8        	   291: 	link a2,#-24
00:00008402 2F79000400980014	   292: 	move.l _canary,20(sp)
00:0000840A F2176B80        	   293: 	fmove.x fp7,(sp)
00:0000840E 48EF0003000C    	   294: 	movem.l d0/d1,12(sp)
00:00008414 303C0018        	   295: 	move.w #24,d0			; d0 = nn
                            	   296: .0017	
00:00008418 4AB900040514    	   297: 	tst.l _precision
00:0000841E 6F46            	   298: 	ble .0011
00:00008420 7200            	   299: 	moveq #0,d1				; digit = 0
00:00008422 F2000380        	   300: 	fmove fp0,fp7			; dbla = dbl
                            	   301: .0013
00:00008426 F2000838        	   302: 	fcmp fp2,fp0
00:0000842A F294000A        	   303: 	fblt .0012
00:0000842E F2000828        	   304: 	fsub fp2,fp0			; dbl -= dbl2
00:00008432 5201            	   305: 	addi.b #1,d1			; digit++
00:00008434 60F0            	   306: 	bra .0013
                            	   307: .0012
00:00008436 06010030        	   308: 	addi.b #'0',d1		; convert digit to ascii
00:0000843A 10C1            	   309: 	move.b d1,(a0)+		; and store
00:0000843C 04010030        	   310: 	subi.b #'0',d1		; d1 = binary digit again
                            	   311: ;	cmpi.b #2,d1
                            	   312: ;	ble .0014
                            	   313: 
                            	   314: ;	ext.w d1
                            	   315: ;	ext.l d1
                            	   316: ;	fmove.l d1,fp3		; fp3 = digit
                            	   317: ;	fmul fp2,fp3			; fp3 = dbl2 * digit
                            	   318: ;	fmove fp7,fp0
                            	   319: ;	fsub fp3,fp0			; dbl = dbla - dbl2 * digit
                            	   320: .0014
00:00008440 537900040510    	   321: 	subi.w #1,_digits_before_decpt
00:00008446 6604            	   322: 	bne .0015
00:00008448 10FC002E        	   323: 	move.b #'.',(a0)+
                            	   324: .0015
00:0000844C 4A7900040510    	   325: 	tst.w _digits_before_decpt
00:00008452 6C06            	   326: 	bge .0016
00:00008454 53B900040514    	   327: 	subi.l #1,_precision
                            	   328: .0016
00:0000845A F23C4126FFFFFFFF	   329: 	fscale.l #-1,fp2		; dbl *= 10.0
00:00008462 51C8FFB4        	   330: 	dbra d0,.0017
                            	   331: .0011
00:00008466 4CEF0003000C    	   332: 	movem.l 12(sp),d0/d1
00:0000846C F2174B80        	   333: 	fmove.x (sp),fp7
00:00008470 A2AF00030014    	   334: 	cchk 20(sp)
00:00008476 4E5A            	   335: 	unlk a2
00:00008478 4E75            	   336: 	rts
                            	   337: 
                            	   338: ;------------------------------------------------------------------------------
                            	   339: ; If the number ends in a decimal point, trim off the point.
                            	   340: ;
                            	   341: ; Registers Modified:
                            	   342: ;		none
                            	   343: ; Parameters:
                            	   344: ;		a0 = pointer to end of number
                            	   345: ; Returns:
                            	   346: ;		a0 = updated to point just past last digit.
                            	   347: ;------------------------------------------------------------------------------
                            	   348: 
                            	   349: _TrimTrailingPoint:
00:0000847A 0C28002EFFFF    	   350: 	cmpi.b #'.',-1(a0)
00:00008480 6604            	   351: 	bne .0001
00:00008482 4220            	   352: 	clr.b -(a0)
00:00008484 4E75            	   353: 	rts
                            	   354: .0001
00:00008486 0C10002E        	   355: 	cmpi.b #'.',(a0)
00:0000848A 660A            	   356: 	bne .0002
00:0000848C 4A280001        	   357: 	cmpi.b #0,1(a0)
00:00008490 6604            	   358: 	bne .0002
00:00008492 4210            	   359: 	clr.b (a0)
00:00008494 5348            	   360: 	subq #1,a0
                            	   361: .0002
00:00008496 4E75            	   362: 	rts
                            	   363: 	
                            	   364: ;------------------------------------------------------------------------------
                            	   365: ; If the number ends in .0 get rid of the .0
                            	   366: ;
                            	   367: ; Registers Modified:
                            	   368: ;		none
                            	   369: ; Parameters:
                            	   370: ;		a0 = pointer to last digits of number
                            	   371: ; Returns:
                            	   372: ;		a0 = updated to point just past last digit.
                            	   373: ;------------------------------------------------------------------------------
                            	   374: 
                            	   375: _TrimDotZero:
00:00008498 4A10            	   376: 	tst.b (a0)
00:0000849A 6616            	   377: 	bne .0004
00:0000849C 0C280030FFFF    	   378: 	cmpi.b #'0',-1(a0)
00:000084A2 660E            	   379: 	bne .0004
00:000084A4 0C28002EFFFE    	   380: 	cmpi.b #'.',-2(a0)
00:000084AA 6606            	   381: 	bne .0004
00:000084AC 4228FFFE        	   382: 	clr.b -2(a0)
00:000084B0 5548            	   383: 	subq #2,a0
                            	   384: .0004
00:000084B2 4E75            	   385: 	rts
                            	   386: 
                            	   387: ;------------------------------------------------------------------------------
                            	   388: ; Trim trailing zeros from the number. Generally there is no need to display
                            	   389: ; trailing zeros.
                            	   390: ; Turns a number like 652.000000000000000000000 into 650.0
                            	   391: ;
                            	   392: ; Registers Modified:
                            	   393: ;		none
                            	   394: ; Parameters:
                            	   395: ;		a0 = pointer to last digits of number
                            	   396: ; Returns:
                            	   397: ;		a0 = updated to point just past last digit.
                            	   398: ;------------------------------------------------------------------------------
                            	   399: 
                            	   400: ;	// Trim trailing zeros from the number
                            	   401: ;  do {
                            	   402: ;      ndx--;
                            	   403: ;  } while(buf[ndx]=='0');
                            	   404: ;  ndx++;
                            	   405: 
                            	   406: _TrimTrailingZeros:
                            	   407: .0018	
00:000084B4 0C200030        	   408: 	cmpi.b #'0',-(a0)		; if the last digit was a zero, backup
00:000084B8 67FA            	   409: 	beq .0018
00:000084BA 5248            	   410: 	addq #1,a0					; now advance by one
00:000084BC 4210            	   411: 	move.b #0,(a0)			; NULL terminate string
00:000084BE 4E75            	   412: 	rts
                            	   413: 
                            	   414: ;------------------------------------------------------------------------------
                            	   415: ; Output 'e+' or 'e-'
                            	   416: ;
                            	   417: ; Registers Modified:
                            	   418: ;		d6.w (if negative)
                            	   419: ; Parameters:
                            	   420: ;		a0 = pointer to last digits of number
                            	   421: ; Returns:
                            	   422: ;		a0 = updated to point just past '+' or '-'.
                            	   423: ;------------------------------------------------------------------------------
                            	   424: 
                            	   425: ;	// Spit out +/-E
                            	   426: ;  buf[ndx] = E;
                            	   427: ;  ndx++;
                            	   428: ;  if (exp < 0) {
                            	   429: ;    buf[ndx]='-';
                            	   430: ;    ndx++;
                            	   431: ;    exp = -exp;
                            	   432: ;  }
                            	   433: ;  else {
                            	   434: ;		buf[ndx]='+';
                            	   435: ;		ndx++;
                            	   436: ;  }
                            	   437: 
                            	   438: _SpitOutE:	
00:000084C0 10F90004050C    	   439: 	move.b _E,(a0)+
00:000084C6 4A46            	   440: 	tst.w d6
00:000084C8 6C08            	   441: 	bge .0021
00:000084CA 10FC002D        	   442: 	move.b #'-',(a0)+
00:000084CE 4446            	   443: 	neg.w d6
00:000084D0 6004            	   444: 	bra .0022
                            	   445: .0021
00:000084D2 10FC002B        	   446: 	move.b #'+',(a0)+
                            	   447: .0022
00:000084D6 4E75            	   448: 	rts
                            	   449: 
                            	   450: ;------------------------------------------------------------------------------
                            	   451: ; Extract a single digit of the exponent. Extract works from the leftmost digit
                            	   452: ; to the rightmost.
                            	   453: ;
                            	   454: ; Register Usage
                            	   455: ;		d2 = history of zeros
                            	   456: ;		d3 = digit
                            	   457: ; Modifies
                            	   458: ;		d2,d6,a0
                            	   459: ; Parameter
                            	   460: ; 	d1.w = power of ten
                            	   461: ;		d6.w = exponent
                            	   462: ;------------------------------------------------------------------------------
                            	   463: 
                            	   464: _ExtExpDigit:
00:000084D8 2F03            	   465: 	move.l d3,-(a7)
00:000084DA 48C6            	   466: 	ext.l d6				; make d6 a long
00:000084DC 8CC1            	   467: 	divu d1,d6			; divide by power of ten
00:000084DE 1606            	   468: 	move.b d6,d3		; d3 = quotient (0 to 9)
00:000084E0 4846            	   469: 	swap d6					; d6 = remainder, setup for next digit
00:000084E2 8403            	   470: 	or.b d3,d2
00:000084E4 4A03            	   471: 	tst.b d3
00:000084E6 6604            	   472: 	bne .0003
00:000084E8 4A02            	   473: 	tst.b d2	
00:000084EA 6706            	   474: 	beq .0004
                            	   475: .0003
00:000084EC 06030030        	   476: 	addi.b #'0',d3	; convert to ascii
00:000084F0 10C3            	   477: 	move.b d3,(a0)+
                            	   478: .0004
00:000084F2 261F            	   479: 	move.l (a7)+,d3
00:000084F4 4E75            	   480: 	rts
                            	   481: 
                            	   482: ;------------------------------------------------------------------------------
                            	   483: ; Extract all the digits of the exponent.
                            	   484: ;
                            	   485: ; Register Usage
                            	   486: ;		d1 = power of 10
                            	   487: ;		d2 = history of zeros
                            	   488: ; Parameters
                            	   489: ;		a0 = pointer to string buffer
                            	   490: ;		d6 = exponent
                            	   491: ;------------------------------------------------------------------------------
                            	   492: 
                            	   493: ;	// If the number is times 10^0 don't output the exponent
                            	   494: ;  if (exp==0) {
                            	   495: ;    buf[ndx]='\0';
                            	   496: ;    goto prt;
                            	   497: ;  }
                            	   498: 
                            	   499: _ExtExpDigits:
00:000084F6 2F01            	   500: 	move.l d1,-(a7)
00:000084F8 4A46            	   501: 	tst.w d6							; is exponent zero?
00:000084FA 671C            	   502: 	beq .0002
00:000084FC 61C2            	   503: 	bsr _SpitOutE					; exponent is non-zero e+
00:000084FE 4202            	   504: 	clr.b d2							; d2 = history of zeros
00:00008500 323C03E8        	   505: 	move.w #1000,d1
00:00008504 61D2            	   506: 	bsr _ExtExpDigit
00:00008506 323C0064        	   507: 	move.w #100,d1
00:0000850A 61CC            	   508: 	bsr _ExtExpDigit
00:0000850C 323C000A        	   509: 	move.w #10,d1
00:00008510 61C6            	   510: 	bsr _ExtExpDigit
00:00008512 323C0001        	   511: 	move.w #1,d1
00:00008516 61C0            	   512: 	bsr _ExtExpDigit
                            	   513: .0002:
00:00008518 221F            	   514: 	move.l (a7)+,d1
00:0000851A 4210            	   515: 	move.b #0,(a0)				; NULL terminate string
00:0000851C 4E75            	   516: 	rts										; and return
                            	   517: 
                            	   518: ;------------------------------------------------------------------------------
                            	   519: ; Pad the left side of the output string.
                            	   520: ;
                            	   521: ; Modifies:
                            	   522: ;		d0,d1,d2,d3
                            	   523: ;------------------------------------------------------------------------------
                            	   524: 
                            	   525: ;  // pad left
                            	   526: ;  if (width > 0) {
                            	   527: ;    if (ndx < width) {
                            	   528: ;      for (nn = 39; nn >= width-ndx; nn--)
                            	   529: ;        buf[nn] = buf[nn-(width-ndx)];
                            	   530: ;      for (; nn >= 0; nn--)
                            	   531: ;        buf[nn] = ' ';
                            	   532: ;    }
                            	   533: ;  }
                            	   534: 	
                            	   535: _PadLeft:
00:0000851E 48E7F000        	   536: 	movem.l d0/d1/d2/d3,-(a7)
00:00008522 4A3900040508    	   537: 	tst.b _width
00:00008528 6F3E            	   538: 	ble .0041
00:0000852A 2008            	   539: 	move.l a0,d0
00:0000852C 90BC00040520    	   540: 	sub.l #_fpBuf,d0	; d0 = ndx
00:00008532 B03900040508    	   541: 	cmp.b _width,d0
00:00008538 6C2E            	   542: 	bge .0041
00:0000853A 323C0031        	   543: 	move.w #49,d1			; d1 = nn
                            	   544: .0040
00:0000853E 143900040508    	   545: 	move.b _width,d2
00:00008544 4882            	   546: 	ext.w d2
00:00008546 9440            	   547: 	sub.w d0,d2				; d2 = width-ndx
00:00008548 B242            	   548: 	cmp.w d2,d1
00:0000854A 6D0E            	   549: 	blt .0039
00:0000854C 3601            	   550: 	move.w d1,d3			; d3 = nn
00:0000854E 9642            	   551: 	sub.w d2,d3				; d3 = nn-(width-ndx)
00:00008550 11B030001000    	   552: 	move.b (a0,d3.w),(a0,d1.w)
00:00008556 5341            	   553: 	subi.w #1,d1
00:00008558 60E4            	   554: 	bra .0040
                            	   555: .0039
00:0000855A 4A41            	   556: 	tst.w d1
00:0000855C 6B0A            	   557: 	bmi .0041
00:0000855E 11BC00201000    	   558: 	move.b #' ',(a0,d1.w)
00:00008564 5341            	   559: 	subi.w #1,d1
00:00008566 60F2            	   560: 	bra .0039
                            	   561: .0041
00:00008568 4CDF000F        	   562: 	movem.l (a7)+,d0/d1/d2/d3
00:0000856C 4E75            	   563: 	rts
                            	   564: 
                            	   565: ;------------------------------------------------------------------------------
                            	   566: ; Pad the right side of the output string.
                            	   567: ;
                            	   568: ; Parameters:
                            	   569: ;		a0 = pointer to end of string
                            	   570: ; Modifies:
                            	   571: ;		none
                            	   572: ; Returns:
                            	   573: ;		none
                            	   574: ;------------------------------------------------------------------------------
                            	   575: 
                            	   576: ;  // pad right
                            	   577: ;  if (width < 0) {
                            	   578: ;    width = -width;
                            	   579: ;    while (ndx < width) {
                            	   580: ;      buf[ndx]=' ';
                            	   581: ;      ndx++;
                            	   582: ;    }
                            	   583: ;    buf[ndx]='\0';
                            	   584: ;  }
                            	   585: ;  return (ndx);
                            	   586: 
                            	   587: _PadRight:
00:0000856E 2F00            	   588: 	move.l d0,-(a7)
00:00008570 4A3900040508    	   589: 	tst.b _width
00:00008576 6A24            	   590: 	bpl .0042
00:00008578 443900040508    	   591: 	neg.b _width
00:0000857E 2008            	   592: 	move.l a0,d0
00:00008580 90BC00040520    	   593: 	sub.l #_fpBuf,d0	; d0 = ndx
                            	   594: .0044
00:00008586 B03900040508    	   595: 	cmp.b _width,d0
00:0000858C 6C0A            	   596: 	bge .0043
00:0000858E 11BC00200000    	   597: 	move.b #' ',(a0,d0.w)
00:00008594 5240            	   598: 	addi.w #1,d0
00:00008596 60EE            	   599: 	bra .0044
                            	   600: .0043
00:00008598 42300000        	   601: 	move.b #0,(a0,d0.w)
                            	   602: .0042
00:0000859C 201F            	   603: 	move.l (a7)+,d0
00:0000859E 4E75            	   604: 	rts
                            	   605: 
                            	   606: ;------------------------------------------------------------------------------
                            	   607: ; Output a string representation of a decimal floating point number to a 
                            	   608: ; buffer.
                            	   609: ;
                            	   610: ; Register Usage
                            	   611: ;		a0 = pointer to string buffer
                            	   612: ;		d6 = exponent
                            	   613: ; Modifies:
                            	   614: ;		a0 = points to end of string
                            	   615: ; Parameters:
                            	   616: ;		fp0 = number to convert
                            	   617: ; Returns:
                            	   618: ;		none
                            	   619: ;------------------------------------------------------------------------------
                            	   620: 
                            	   621: _FloatToString:
00:000085A0 2F06            	   622: 	move.l d6,-(a7)
00:000085A2 6100FDB6        	   623: 	bsr _CheckNegative			; is number negative?
00:000085A6 6100FD98        	   624: 	bsr _CheckZero					; check for zero
00:000085AA 6732            	   625: 	beq .0001								; branch since already output "0"
00:000085AC 6100FD2E        	   626: 	bsr _CheckNan						; check for Nan or infinity
00:000085B0 652C            	   627: 	bcs .0001								; branch if nan/inf string output
                            	   628: 	; Now the fun begins
00:000085B2 7C00            	   629: 	clr.l d6								; exponent = 0
00:000085B4 6100FDB6        	   630: 	bsr _MakeBig
00:000085B8 6100FDCE        	   631: 	bsr _LessThanDbl
00:000085BC 6100FDF6        	   632: 	bsr _ComputeDigitsBeforeDecpt
00:000085C0 6100FE2C        	   633: 	bsr _LeadingZero
00:000085C4 6100FE38        	   634: 	bsr _SpitOutDigits
00:000085C8 6100FEEA        	   635: 	bsr _TrimTrailingZeros
00:000085CC 6100FEAC        	   636: 	bsr _TrimTrailingPoint
00:000085D0 6100FEC6        	   637: 	bsr _TrimDotZero
00:000085D4 6100FF20        	   638: 	bsr _ExtExpDigits				; extract exponent digits
00:000085D8 6100FF44        	   639: 	bsr _PadLeft						; pad the number to the left or right
00:000085DC 6190            	   640: 	bsr _PadRight
                            	   641: .0001
00:000085DE 2C1F            	   642: 	move.l (a7)+,d6
00:000085E0 4E75            	   643: 	rts
                            	   644: 
                            	   645: 

Source: "boot.x68"
                            	  2680: 	include "GetFloat.asm"

Source: "GetFloat.asm"
                            	     1: ; ============================================================================
                            	     2: ;        __
                            	     3: ;   \\__/ o\    (C) 2022  Robert Finch, Waterloo
                            	     4: ;    \  __ /    All rights reserved.
                            	     5: ;     \/_//     robfinch<remove>@opencores.org
                            	     6: ;       ||
                            	     7: ;  
                            	     8: ;
                            	     9: ; BSD 3-Clause License
                            	    10: ; Redistribution and use in source and binary forms, with or without
                            	    11: ; modification, are permitted provided that the following conditions are met:
                            	    12: ;
                            	    13: ; 1. Redistributions of source code must retain the above copyright notice, this
                            	    14: ;    list of conditions and the following disclaimer.
                            	    15: ;
                            	    16: ; 2. Redistributions in binary form must reproduce the above copyright notice,
                            	    17: ;    this list of conditions and the following disclaimer in the documentation
                            	    18: ;    and/or other materials provided with the distribution.
                            	    19: ;
                            	    20: ; 3. Neither the name of the copyright holder nor the names of its
                            	    21: ;    contributors may be used to endorse or promote products derived from
                            	    22: ;    this software without specific prior written permission.
                            	    23: ;
                            	    24: ; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
                            	    25: ; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
                            	    26: ; IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
                            	    27: ; DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
                            	    28: ; FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
                            	    29: ; DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
                            	    30: ; SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
                            	    31: ; CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
                            	    32: ; OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
                            	    33: ; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
                            	    34: ;                                                                          
                            	    35: ; ============================================================================
                            	    36: ;
                            	    37: ; Get a floating point number
                            	    38: ;
                            	    39: _GetFloatGetChar:
00:000085E2 1210            	    40: 	move.b (a0),d1
00:000085E4 D1C0            	    41: 	add.l d0,a0
00:000085E6 4E75            	    42: 	rts
                            	    43: _GetFloatIgnBlanks:
                            	    44: .0001
00:000085E8 61F8            	    45: 	bsr _GetFloatGetChar
00:000085EA 0C010020        	    46: 	cmpi.b #' ',d1
00:000085EE 67F8            	    47: 	beq .0001
                            	    48: _GetFloatBackupChar:
00:000085F0 91C0            	    49: 	sub.l d0,a0
00:000085F2 4E75            	    50: 	rts
                            	    51: 
                            	    52: ;-------------------------------------------------------------------------------
                            	    53: ; Get fractional part of a number, 25 digits max, into a float register.
                            	    54: ;
                            	    55: ; Register Usage:
                            	    56: ;		d1 = digit from input screen
                            	    57: ;		d4 = digit count
                            	    58: ;		d6 = digit scaling factor
                            	    59: ;		fp1 = digit as float number
                            	    60: ; Returns:
                            	    61: ;		fp0 = fraction
                            	    62: ;-------------------------------------------------------------------------------
                            	    63: 
                            	    64: _GetFraction:
00:000085F4 4E52FFE4        	    65: 	link a2,#-28
00:000085F8 2F79000400980018	    66: 	move.l _canary,24(sp)
00:00008600 48D70052        	    67: 	movem.l d1/d4/d6,(sp)
00:00008604 F22F6880000C    	    68: 	fmove.x fp1,12(sp)
00:0000860A 7C00            	    69: 	clr.l d6							; d6 = scale factor
00:0000860C F23C50000000    	    70: 	fmove.w #0,fp0				; fract = 0.0
00:00008612 7818            	    71: 	moveq #24,d4
                            	    72: .0002
00:00008614 61CC            	    73: 	bsr _GetFloatGetChar
00:00008616 0C010030        	    74: 	cmpi.b #'0',d1
00:0000861A 6520            	    75: 	blo .0001
00:0000861C 0C010039        	    76: 	cmpi.b #'9',d1				; make sure between 0 and 9
00:00008620 621A            	    77: 	bhi .0001
00:00008622 04010030        	    78: 	subi.b #'0',d1
00:00008626 F23C50260001    	    79: 	fscale.w #1,fp0				; fract * 10.0
00:0000862C 5246            	    80: 	addq #1,d6						; record scaling
00:0000862E F2015880        	    81: 	fmove.b d1,fp1				; fp1 = digit
00:00008632 F2000422        	    82: 	fadd fp1,fp0					; fract += digit
00:00008636 5245            	    83: 	addq.w #1,d5					; increment number of digits in number
00:00008638 51CCFFDA        	    84: 	dbra d4,.0002
                            	    85: .0001
00:0000863C 61B2            	    86: 	bsr _GetFloatBackupChar
00:0000863E 4446            	    87: 	neg d6
00:00008640 F2064026        	    88: 	fscale.l d6,fp0				; fract /= scale
00:00008644 4CD70052        	    89: 	movem.l (sp),d1/d4/d6
00:00008648 F22F4880000C    	    90: 	fmove.x 12(sp),fp1
00:0000864E A2AF00030018    	    91: 	cchk 24(sp)
00:00008654 4E5A            	    92: 	unlk a2
00:00008656 4E75            	    93: 	rts
                            	    94: 
                            	    95: ;-------------------------------------------------------------------------------
                            	    96: ; Get exponent part of a number, 4 digits max, into a float register.
                            	    97: ;
                            	    98: ; Register Usage:
                            	    99: ;		d1 = digit from input screen
                            	   100: ;		d2 = exponent
                            	   101: ;		d3 = temp, number times 2
                            	   102: ;		d4 = digit counter
                            	   103: ; Parameters:
                            	   104: ;		fp0 = float number
                            	   105: ; Returns:
                            	   106: ;		fp0 = float number with exponent factored in
                            	   107: ;-------------------------------------------------------------------------------
                            	   108: 
                            	   109: _GetExponent:
00:00008658 4E52FFE0        	   110: 	link a2,#-32
00:0000865C 2F7900040098001C	   111: 	move.l _canary,28(sp)
00:00008664 48D7001E        	   112: 	movem.l d1/d2/d3/d4,(sp)
00:00008668 F22F69000010    	   113: 	fmove.x fp2,16(sp)
00:0000866E 7400            	   114: 	clr.l d2							; d2 = number = 0
00:00008670 F23C51000000    	   115: 	fmove.w #0,fp2				; fp2 = exp = 0.0
00:00008676 7601            	   116: 	moveq #1,d3						; d3 = exscale = 1
00:00008678 6100FF68        	   117: 	bsr _GetFloatGetChar
00:0000867C 0C01002D        	   118: 	cmpi.b #'-',d1
00:00008680 6608            	   119: 	bne .0001
00:00008682 4483            	   120: 	neg.l d3							; exscale = -1
                            	   121: .0006
00:00008684 6100FF62        	   122: 	bsr _GetFloatIgnBlanks
00:00008688 600A            	   123: 	bra .0002
                            	   124: .0001
00:0000868A 0C01002B        	   125: 	cmpi.b #'+',d1
00:0000868E 67F4            	   126: 	beq .0006
00:00008690 6100FF5E        	   127: 	bsr _GetFloatBackupChar
                            	   128: .0002	
00:00008694 7803            	   129: 	moveq #3,d4						; d4 = max 4 digits
                            	   130: .0004
00:00008696 6100FF4A        	   131: 	bsr _GetFloatGetChar	; d1 = digit char
00:0000869A 0C010030        	   132: 	cmpi.b #'0',d1
00:0000869E 651E            	   133: 	blo .0003
00:000086A0 0C010039        	   134: 	cmpi.b #'9',d1				; ensure between 0 and 9
00:000086A4 6218            	   135: 	bhi .0003
00:000086A6 04010030        	   136: 	subi.b #'0',d1
00:000086AA D482            	   137: 	add.l d2,d2						; number *2
00:000086AC 2602            	   138: 	move.l d2,d3
00:000086AE E58A            	   139: 	lsl.l #2,d2						; number *8
00:000086B0 D483            	   140: 	add.l d3,d2						; number *10	
00:000086B2 4881            	   141: 	ext.w d1
00:000086B4 48C1            	   142: 	ext.l d1
00:000086B6 D481            	   143: 	add.l d1,d2						; number + digit
00:000086B8 5245            	   144: 	addq.w #1,d5					; increment number of digits in number
00:000086BA 51CCFFDA        	   145: 	dbra d4,.0004
                            	   146: .0003
00:000086BE 6100FF30        	   147: 	bsr _GetFloatBackupChar	; backup a character
00:000086C2 C4C3            	   148: 	mulu d3,d2						; *1 or *-1
00:000086C4 48C2            	   149: 	ext.l d2
00:000086C6 F2024126        	   150: 	fscale.l d2,fp2				; exp * exmul
00:000086CA F2000823        	   151: 	fmul fp2,fp0					; rval *= exp
00:000086CE 4CD7001E        	   152: 	movem.l (sp),d1/d2/d3/d4
00:000086D2 F22F49000010    	   153: 	fmove.x 16(sp),fp2
00:000086D8 A2AF0003001C    	   154: 	cchk 28(sp)
00:000086DE 4E5A            	   155: 	unlk a2
00:000086E0 4E75            	   156: 	rts	
                            	   157: 
                            	   158: ;-------------------------------------------------------------------------------
                            	   159: ; Get an integer number, positive or negative, 25 digits max, into a float
                            	   160: ; register.
                            	   161: ;
                            	   162: ; Register Usage:
                            	   163: ;		d1 = digit from input screen
                            	   164: ;		d2 = digit down counter
                            	   165: ;		d3 = sign of number '+' or '-'
                            	   166: ;		fp1 = digit
                            	   167: ; Modifies:
                            	   168: ;		a0,fp0
                            	   169: ; Returns:
                            	   170: ;		a0 = updated buffer pointer
                            	   171: ;		fp0 = integer number
                            	   172: ;-------------------------------------------------------------------------------
                            	   173: 
                            	   174: _GetInteger:
00:000086E2 4E52FFE4        	   175: 	link a2,#-28
00:000086E6 2F79000400980018	   176: 	move.l _canary,24(sp)
00:000086EE 48D7000E        	   177: 	movem.l d1/d2/d3,(sp)
00:000086F2 F22F6880000C    	   178: 	fmove.x fp1,12(sp)
00:000086F8 F23C50000000    	   179: 	fmove.w #0,fp0
00:000086FE 7418            	   180: 	moveq #24,d2					; d2 = digit count (25 max)
00:00008700 6100FEE6        	   181: 	bsr _GetFloatIgnBlanks
00:00008704 6100FEDC        	   182: 	bsr _GetFloatGetChar	; get the sign of the number
00:00008708 0C01002B        	   183: 	cmpi.b #'+',d1
00:0000870C 670A            	   184: 	beq .0002
                            	   185: .0003
00:0000870E 0C01002D        	   186: 	cmpi.b #'-',d1
00:00008712 6608            	   187: 	bne .0004
00:00008714 1E3C002D        	   188: 	move.b #'-',d7
                            	   189: .0002
00:00008718 6100FEC8        	   190: 	bsr _GetFloatGetChar
                            	   191: .0004
00:0000871C 0C010030        	   192: 	cmpi.b #'0',d1				; only characters 0 to 9 valid
00:00008720 651E            	   193: 	blo .0001
00:00008722 0C010039        	   194: 	cmpi.b #'9',d1
00:00008726 6218            	   195: 	bhi .0001
00:00008728 04010030        	   196: 	subi.b #'0',d1
00:0000872C F23C50260001    	   197: 	fscale.w #1,fp0				; number *10
00:00008732 F2015880        	   198: 	fmove.b d1,fp1				; fp1 = digit
00:00008736 F2000422        	   199: 	fadd fp1,fp0
00:0000873A 5245            	   200: 	addq.w #1,d5
00:0000873C 51CAFFDA        	   201: 	dbra d2,.0002
                            	   202: .0001
00:00008740 6100FEAE        	   203: 	bsr _GetFloatBackupChar
00:00008744 4CD7000E        	   204: 	movem.l (sp),d1/d2/d3
00:00008748 F22F4880000C    	   205: 	fmove.x 12(sp),fp1
00:0000874E A2AF00030018    	   206: 	cchk 24(sp)
00:00008754 4E5A            	   207: 	unlk a2
00:00008756 4E75            	   208: 	rts
                            	   209: 		
                            	   210: ;-------------------------------------------------------------------------------
                            	   211: ; Get a floating point number off the input screen.
                            	   212: ;
                            	   213: ; Parameters:
                            	   214: ;		a0 = pointer to buffer containing string
                            	   215: ;		d0 = stride of buffer (increment / decrement amount)
                            	   216: ; Register Usage:
                            	   217: ;		d1 = character from input screen
                            	   218: ;		d5.lo = number of digits in number, d5.hi = number of characters fetched
                            	   219: ; Returns:
                            	   220: ;		fp0 = number
                            	   221: ;		a0 = updated buffer pointer
                            	   222: ;		d0 = length of number >0 if a number
                            	   223: ;-------------------------------------------------------------------------------
                            	   224: 
                            	   225: _GetFloat:
00:00008758 4E52FFE0        	   226: 	link a2,#-32
00:0000875C 2F7900040098001C	   227: 	move.l _canary,28(sp)
00:00008764 48D702A2        	   228: 	movem.l d1/d5/d7/a1,(sp)
00:00008768 F22F69000010    	   229: 	fmove.x fp2,16(sp)
00:0000876E 7A00            	   230: 	clr.l d5
00:00008770 1E3C002B        	   231: 	move.b #'+',d7				; assume a positive number
00:00008774 2248            	   232: 	move.l a0,a1					; a1 = copy of pointer to buffer
00:00008776 6100FF6A        	   233: 	bsr _GetInteger				; rval = integer
00:0000877A F2000100        	   234: 	fmove.x fp0,fp2
00:0000877E 6100FE62        	   235: 	bsr _GetFloatGetChar
00:00008782 0C01002E        	   236: 	cmpi.b #'.',d1
00:00008786 6706            	   237: 	beq .0004
                            	   238: .0005
00:00008788 6100FE66        	   239: 	bsr _GetFloatBackupChar
00:0000878C 601C            	   240: 	bra .0002
                            	   241: .0004
00:0000878E 6100FE64        	   242: 	bsr _GetFraction
00:00008792 F2000822        	   243: 	fadd fp2,fp0					; rval += fraction
00:00008796 6100FE4A        	   244: 	bsr _GetFloatGetChar
00:0000879A 0C010065        	   245: 	cmpi.b #'e',d1				; accept either 'e' or 'E' indicating exponent
00:0000879E 6706            	   246: 	beq .0001
00:000087A0 0C010045        	   247: 	cmpi.b #'E',d1
00:000087A4 66E2            	   248: 	bne .0005
                            	   249: .0001
00:000087A6 6100FEB0        	   250: 	bsr _GetExponent			; factor exponent into fp0
                            	   251: .0002
00:000087AA 0C07002D        	   252: 	cmpi.b #'-',d7				; adjust number for sign
00:000087AE 6604            	   253: 	bne .0003
00:000087B0 F200001A        	   254: 	fneg fp0
                            	   255: .0003
00:000087B4 93C8            	   256: 	suba.l a0,a1					; compute number of characters fetched
00:000087B6 3009            	   257: 	move.w a1,d0					; move it to d0.hi
00:000087B8 4840            	   258: 	swap d0
00:000087BA 3005            	   259: 	move.w d5,d0					; return digit/character count in d0 (non zero for a number)
00:000087BC 4CD702A2        	   260: 	movem.l (sp),d1/d5/d7/a1
00:000087C0 F22F49000010    	   261: 	fmove.x 16(sp),fp2
00:000087C6 A2AF0003001C    	   262: 	cchk 28(sp)
00:000087CC 4E5A            	   263: 	unlk a2
00:000087CE 4E75            	   264: 	rts	
                            	   265: 
                            	   266: 		

Source: "boot.x68"
                            	  2681: 
                            	  2682: ;------------------------------------------------------------------------------
                            	  2683: ; Convert ASCII character in the range '0' to '9', 'a' tr 'f' or 'A' to 'F'
                            	  2684: ; to a hex nybble.
                            	  2685: ;------------------------------------------------------------------------------
                            	  2686: 
                            	  2687: AsciiToHexNybble:
00:000087D0 0C010030        	  2688: 	cmpi.b	#'0',d1
00:000087D4 6530            	  2689: 	blo.s		gthx3
00:000087D6 0C010039        	  2690: 	cmpi.b	#'9',d1
00:000087DA 6206            	  2691: 	bhi.s		gthx5
00:000087DC 04010030        	  2692: 	subi.b	#'0',d1
00:000087E0 4E75            	  2693: 	rts
                            	  2694: gthx5:
00:000087E2 0C010041        	  2695: 	cmpi.b	#'A',d1
00:000087E6 651E            	  2696: 	blo.s		gthx3
00:000087E8 0C010046        	  2697: 	cmpi.b	#'F',d1
00:000087EC 6206            	  2698: 	bhi.s		gthx6
00:000087EE 060100C9        	  2699: 	addi.b	#10-'A',d1
00:000087F2 4E75            	  2700: 	rts
                            	  2701: gthx6:
00:000087F4 0C010061        	  2702: 	cmpi.b	#'a',d1
00:000087F8 650C            	  2703: 	blo.s		gthx3
00:000087FA 0C010066        	  2704: 	cmpi.b	#'f',d1
00:000087FE 6206            	  2705: 	bhi.s		gthx3
00:00008800 060100A9        	  2706: 	addi.b	#10-'a',d1
00:00008804 4E75            	  2707: 	rts
                            	  2708: gthx3:
00:00008806 72FF            	  2709: 	moveq	#-1,d1		; not a hex number
00:00008808 4E75            	  2710: 	rts
                            	  2711: 
                            	  2712: ;------------------------------------------------------------------------------
                            	  2713: ;------------------------------------------------------------------------------
                            	  2714: 
                            	  2715: DisplayTwoSpaces:
00:0000880A 2F01            	  2716: 	move.l	d1,-(a7)
00:0000880C 123C0020        	  2717: 	move.b	#' ',d1
00:00008810 610007D8        	  2718: 	bsr			OutputChar
                            	  2719: dspspc1:
00:00008814 610007D4        	  2720: 	bsr			OutputChar
00:00008818 221F            	  2721: 	move.l	(a7)+,d1
00:0000881A 4E75            	  2722: 	rts
                            	  2723: 
                            	  2724: DisplaySpace:
00:0000881C 2F01            	  2725: 	move.l	d1,-(a7)
00:0000881E 123C0020        	  2726: 	move.b	#' ',d1
00:00008822 60F0            	  2727: 	bra			dspspc1
                            	  2728: 
                            	  2729: ;------------------------------------------------------------------------------
                            	  2730: ; Display the 32 bit word in D1.L
                            	  2731: ;------------------------------------------------------------------------------
                            	  2732: 
                            	  2733: DisplayTetra:
00:00008824 4841            	  2734: 	swap	d1
00:00008826 6102            	  2735: 	bsr		DisplayWyde
00:00008828 4841            	  2736: 	swap	d1
                            	  2737: 
                            	  2738: ;------------------------------------------------------------------------------
                            	  2739: ; Display the byte in D1.W
                            	  2740: ;------------------------------------------------------------------------------
                            	  2741: 
                            	  2742: DisplayWyde:
00:0000882A E059            	  2743: 	ror.w		#8,d1
00:0000882C 6102            	  2744: 	bsr			DisplayByte
00:0000882E E159            	  2745: 	rol.w		#8,d1
                            	  2746: 
                            	  2747: ;------------------------------------------------------------------------------
                            	  2748: ; Display the byte in D1.B
                            	  2749: ;------------------------------------------------------------------------------
                            	  2750: 
                            	  2751: DisplayByte:
00:00008830 E819            	  2752: 	ror.b		#4,d1
00:00008832 6102            	  2753: 	bsr			DisplayNybble
00:00008834 E919            	  2754: 	rol.b		#4,d1
                            	  2755: 
                            	  2756: ;------------------------------------------------------------------------------
                            	  2757: ; Display nybble in D1.B
                            	  2758: ;------------------------------------------------------------------------------
                            	  2759: 
                            	  2760: DisplayNybble:
00:00008836 2F01            	  2761: 	move.l	d1,-(a7)
00:00008838 0201000F        	  2762: 	andi.b	#$F,d1
00:0000883C 06010030        	  2763: 	addi.b	#'0',d1
00:00008840 0C010039        	  2764: 	cmpi.b	#'9',d1
00:00008844 6302            	  2765: 	bls.s		.0001
00:00008846 5E01            	  2766: 	addi.b	#7,d1
                            	  2767: .0001:
00:00008848 610007A0        	  2768: 	bsr			OutputChar
00:0000884C 221F            	  2769: 	move.l	(a7)+,d1
00:0000884E 4E75            	  2770: 	rts
                            	  2771: 
                            	  2772: ;------------------------------------------------------------------------------
                            	  2773: ; Buffer tetra in d0 to buffer pointed to by a6
                            	  2774: ;------------------------------------------------------------------------------
                            	  2775: 
                            	  2776: BufTetra:
00:00008850 4840            	  2777: 	swap d0
00:00008852 6102            	  2778: 	bsr BufWyde
00:00008854 4840            	  2779: 	swap d0
                            	  2780: 
                            	  2781: BufWyde:
00:00008856 E058            	  2782: 	ror.w #8,d0
00:00008858 6102            	  2783: 	bsr BufByte
00:0000885A E158            	  2784: 	rol.w #8,d0
                            	  2785: 	
                            	  2786: BufByte:
00:0000885C E818            	  2787: 	ror.b #4,d0
00:0000885E 6102            	  2788: 	bsr BufNybble
00:00008860 E918            	  2789: 	rol.b #4,d0
                            	  2790: 
                            	  2791: BufNybble:
00:00008862 2F00            	  2792: 	move.l d0,-(a7)
00:00008864 0200000F        	  2793: 	andi.b #$F,d0
00:00008868 06000030        	  2794: 	addi.b #'0',d0
00:0000886C 0C000039        	  2795: 	cmpi.b #'9',d0
00:00008870 6302            	  2796: 	bls.s .0001
00:00008872 5E00            	  2797: 	addi.b #7,d0
                            	  2798: .0001:
00:00008874 1CC0            	  2799: 	move.b d0,(a6)+
00:00008876 201F            	  2800: 	move.l (a7)+,d0
00:00008878 4E75            	  2801: 	rts
                            	  2802: 
                            	  2803: ;------------------------------------------------------------------------------
                            	  2804: ;------------------------------------------------------------------------------
                            	  2805: ;
                            	  2806: ;DisplayHexNumber:
                            	  2807: ;	move.w	#$A6A6,leds		; diagnostics
                            	  2808: ;	move.l	#VDGREG,a6
                            	  2809: ;	move.w	#7,d2		; number-1 of digits to display
                            	  2810: ;disphnum1:
                            	  2811: ;	move.b	d1,d0		; get digit into d0.b
                            	  2812: ;	andi.w	#$0f,d0
                            	  2813: ;	cmpi.w	#$09,d0
                            	  2814: ;	bls.s	disphnum2
                            	  2815: ;	addi.w	#7,d0
                            	  2816: ;disphnum2:
                            	  2817: ;	addi.w	#$30,d0	; convert to display char
                            	  2818: ;	move.w	d2,d3		; char count into d3
                            	  2819: ;	asl.w	#3,d3		; scale * 8
                            	  2820: ;disphnum3:
                            	  2821: ;	move.w	$42C(a6),d4			; read character queue index into d4
                            	  2822: ;	cmp.w	#28,d4					; allow up 28 entries to be in progress
                            	  2823: ;	bhs.s	disphnum3				; branch if too many chars queued
                            	  2824: ;	ext.w	d0						; zero out high order bits
                            	  2825: ;	move.w	d0,$420(a6)			; set char code
                            	  2826: ;	move.w	#WHITE,$422(a6)		; set fg color
                            	  2827: ;	move.w	#DARK_BLUE,$424(a6)	; set bk color
                            	  2828: ;	move.w	d3,$426(a6)			; set x pos
                            	  2829: ;	move.w	#8,$428(a6)			; set y pos
                            	  2830: ;	move.w	#$0707,$42A(a6)		; set font x,y extent
                            	  2831: ;	move.w	#0,$42E(a6)			; pulse character queue write signal
                            	  2832: ;	ror.l	#4,d1					; rot to next digit
                            	  2833: ;	dbeq	d2,disphnum1
                            	  2834: ;	jmp		(a5)
                            	  2835: 
                            	  2836: 	include "ramtest.x68"

Source: "ramtest.x68"
                            	     1: ;===============================================================================
                            	     2: ;    Perform ram test. (Uses checkerboard testing).
                            	     3: ; 
                            	     4: ;    Local ram, which does not get tested, is used for the stack.
                            	     5: ;===============================================================================
                            	     6: 	code
                            	     7: 	even
                            	     8: DisplayAddr:
00:0000887A 2208            	     9: 	move.l a0,d1
00:0000887C E089            	    10: 	lsr.l #8,d1
00:0000887E E089            	    11: 	lsr.l #8,d1
00:00008880 E889            	    12: 	lsr.l #4,d1
00:00008882 04410400        	    13: 	subi.w #1024,d1
00:00008886 A2C10000        	    14: 	bin2bcd d1
00:0000888A 619E            	    15: 	bsr	DisplayWyde
00:0000888C 618E            	    16: 	bsr DisplaySpace
00:0000888E 123C000D        	    17: 	move.b #CR,d1
00:00008892 61000756        	    18: 	bsr OutputChar
00:00008896 08000083        	    19: 	btst #$83,d0
                            	    20: 	
                            	    21: cmdTestRAM:
                            	    22: ramtest:
00:0000889A 33FCA5A5FD0FFF00	    23: 	move.w	#$A5A5,leds		; diagnostics
00:000088A2 263CAAAAAAAA    	    24:   move.l #$aaaaaaaa,d3
00:000088A8 283C55555555    	    25:   move.l #$55555555,d4
00:000088AE 6134            	    26:   bsr ramtest0
                            	    27:   ; switch checkerboard pattern and repeat test.
00:000088B0 C744            	    28:   exg d3,d4
00:000088B2 6130            	    29:   bsr ramtest0
                            	    30: 	; Save last ram address in end of memory pointer.
                            	    31: rmtst5:
00:000088B4 7025            	    32: 	moveq #37,d0					; lock semaphore
00:000088B6 7206            	    33: 	moveq #MEMORY_SEMA,d1
                            	    34: ;	trap #15
00:000088B8 207C7FFFFFF8    	    35:   movea.l #$7FFFFFF8,a0
00:000088BE 23C800100004    	    36:   move.l a0,memend
                            	    37: 	; Create very first memory block.
00:000088C4 207C3FFFFFF4    	    38:   movea.l #$3FFFFFF4,a0
00:000088CA 23C840000004    	    39:   move.l a0,$40000004		; length of block
00:000088D0 23FC465245454000	    40:   move.l #$46524545,$40000000
00:000088D8 0000
00:000088DA 7026            	    41: 	moveq #38,d0					; unlock semaphore
00:000088DC 7206            	    42: 	moveq #MEMORY_SEMA,d1
00:000088DE 4E4F            	    43: 	trap #15
00:000088E0 6000EFA6        	    44: 	bra Monitor
                            	    45: ;  rts
                            	    46: 
                            	    47: ramtest0:
00:000088E4 2003            	    48: 	move.l d3,d0
00:000088E6 207C40000000    	    49:   movea.l #$40000000,a0
                            	    50: ;-----------------------------------------------------------
                            	    51: ;   Write checkerboard pattern to ram then read it back to
                            	    52: ; find the highest usable ram address (maybe). This address
                            	    53: ; must be lower than the start of the rom (0xe00000).
                            	    54: ;-----------------------------------------------------------
                            	    55: ramtest1:
00:000088EC 20C3            	    56:   move.l d3,(a0)+
00:000088EE 20C4            	    57:   move.l d4,(a0)+
00:000088F0 2208            	    58:   move.l a0,d1
00:000088F2 4A41            	    59:   tst.w	d1
00:000088F4 6608            	    60:   bne.s rmtst1
00:000088F6 6182            	    61:   bsr DisplayAddr
00:000088F8 4EB900000842    	    62:   bsr CheckForCtrlC
                            	    63: rmtst1:
00:000088FE B1FC7FFFFFF8    	    64:   cmpa.l #$7FFFFFF8,a0
00:00008904 65E6            	    65:   blo.s ramtest1
00:00008906 6100E976        	    66:   bsr	CRLF
                            	    67: ;------------------------------------------------------
                            	    68: ;   Save maximum useable address for later comparison.
                            	    69: ;------------------------------------------------------
                            	    70: ramtest6:
00:0000890A 33FCA7A7FD0FFF00	    71: 	move.w	#$A7A7,leds		; diagnostics
00:00008912 2448            	    72:   movea.l a0,a2
00:00008914 207C40000000    	    73:   movea.l #$40000000,a0
                            	    74: ;--------------------------------------------
                            	    75: ;   Read back checkerboard pattern from ram.
                            	    76: ;--------------------------------------------
                            	    77: ramtest2
00:0000891A 2A18            	    78:   move.l (a0)+,d5
00:0000891C 2C18            	    79:   move.l (a0)+,d6
00:0000891E B1CA            	    80:   cmpa.l a2,a0
00:00008920 643E            	    81:   bhs.s	ramtest3
00:00008922 2208            	    82:   move.l a0,d1
00:00008924 4A41            	    83:   tst.w	d1
00:00008926 660A            	    84:   bne.s	rmtst2
00:00008928 6100FF50        	    85:   bsr	DisplayAddr
00:0000892C 4EB900000842    	    86: 	bsr CheckForCtrlC
                            	    87: rmtst2
00:00008932 BA83            	    88:   cmp.l d3,d5
00:00008934 6604            	    89:   bne.s rmtst3
00:00008936 BC84            	    90:   cmp.l d4,d6
00:00008938 67E0            	    91:   beq.s ramtest2
                            	    92: ;----------------------------------
                            	    93: ; Report error in ram.
                            	    94: ;----------------------------------
                            	    95: rmtst3
00:0000893A 6100E942        	    96: 	bsr CRLF
00:0000893E 7245            	    97: 	moveq	#'E',d1
00:00008940 610006A8        	    98: 	bsr OutputChar
00:00008944 6100FED6        	    99: 	bsr DisplaySpace
00:00008948 2208            	   100: 	move.l a0,d1
00:0000894A 6100FED8        	   101: 	bsr DisplayTetra
00:0000894E 6100FECC        	   102: 	bsr DisplaySpace
00:00008952 2205            	   103: 	move.l d5,d1
00:00008954 6100FECE        	   104: 	bsr DisplayTetra
00:00008958 4EB900000842    	   105: 	bsr CheckForCtrlC
00:0000895E 60BA            	   106: 	bra ramtest2
                            	   107: ramtest3
00:00008960 4E75            	   108: 	rts
                            	   109: 

Source: "boot.x68"
                            	  2837: 	include "LoadS19.x68"

Source: "LoadS19.x68"
                            	     1: ;==============================================================================
                            	     2: ; Load an S19 format file
                            	     3: ;==============================================================================
                            	     4: 	code
                            	     5: 	even
                            	     6: cmdLoadS19:
00:00008962 6100E91A        	     7: 	bsr			CRLF					; move display to next line
00:00008966 6012            	     8: 	bra			ProcessRec
                            	     9: NextRec:
00:00008968 610001E4        	    10: 	bsr			sGetChar			; get character from serial port routines
00:0000896C 0C01000A        	    11: 	cmpi.b	#LF,d1				; look for a line-feed
00:00008970 66F6            	    12: 	bne			NextRec
00:00008972 123C002E        	    13: 	move.b	#'.',d1				; progress display
00:00008976 61000672        	    14: 	bsr			OutputChar
                            	    15: ProcessRec:
00:0000897A 4EB900000842    	    16: 	bsr			CheckForCtrlC	; check for CTRL-C once per record
00:00008980 610001CC        	    17: 	bsr			sGetChar
00:00008984 0C01000D        	    18: 	cmpi.b	#CR,d1
00:00008988 67F0            	    19: 	beq.s		ProcessRec
00:0000898A 423900100150    	    20: 	clr.b		S19Checksum		; clear the checksum
00:00008990 1801            	    21: 	move.b	d1,d4
00:00008992 0C04001A        	    22: 	cmpi.b	#CTRLZ,d4			; CTRL-Z ?
00:00008996 6700EEF0        	    23: 	beq			Monitor
00:0000899A 0C040053        	    24: 	cmpi.b	#'S',d4				; All records must begin with an 'S'
00:0000899E 66C8            	    25: 	bne.s		NextRec
00:000089A0 610001AC        	    26: 	bsr			sGetChar
00:000089A4 1801            	    27: 	move.b	d1,d4
00:000089A6 0C040030        	    28: 	cmpi.b	#'0',d4				; Record type must be between '0' and '9'
00:000089AA 65BC            	    29: 	blo.s		NextRec
00:000089AC 0C040039        	    30: 	cmpi.b	#'9',d4				; d4 = record type
00:000089B0 62B6            	    31: 	bhi.s		NextRec
00:000089B2 6100019A        	    32: 	bsr			sGetChar			; get byte count for record
00:000089B6 6100FE18        	    33: 	bsr			AsciiToHexNybble
00:000089BA 1401            	    34: 	move.b	d1,d2
00:000089BC 61000190        	    35: 	bsr			sGetChar
00:000089C0 6100FE0E        	    36: 	bsr			AsciiToHexNybble
00:000089C4 E90A            	    37: 	lsl.b		#4,d2
00:000089C6 8202            	    38: 	or.b		d2,d1					; d1 = byte count
00:000089C8 1601            	    39: 	move.b	d1,d3					; d3 = byte count
00:000089CA D73900100150    	    40: 	add.b		d3,S19Checksum
00:000089D0 0C040030        	    41: 	cmpi.b	#'0',d4				; manufacturer ID record, ignore
00:000089D4 6792            	    42: 	beq			NextRec
00:000089D6 0C040031        	    43: 	cmpi.b	#'1',d4
00:000089DA 670000A2        	    44: 	beq			ProcessS1
00:000089DE 0C040032        	    45: 	cmpi.b	#'2',d4
00:000089E2 6700009E        	    46: 	beq			ProcessS2
00:000089E6 0C040033        	    47: 	cmpi.b	#'3',d4
00:000089EA 6700009A        	    48: 	beq			ProcessS3
00:000089EE 0C040035        	    49: 	cmpi.b	#'5',d4				; record count record, ignore
00:000089F2 6700FF74        	    50: 	beq			NextRec
00:000089F6 0C040037        	    51: 	cmpi.b	#'7',d4
00:000089FA 6700008E        	    52: 	beq			ProcessS7
00:000089FE 0C040038        	    53: 	cmpi.b	#'8',d4
00:00008A02 67000098        	    54: 	beq			ProcessS8
00:00008A06 0C040039        	    55: 	cmpi.b	#'9',d4
00:00008A0A 670000A2        	    56: 	beq			ProcessS9
00:00008A0E 6000FF58        	    57: 	bra			NextRec
                            	    58: 
                            	    59: pcssxa:
00:00008A12 2209            	    60: 	move.l	a1,d1
00:00008A14 6100FE0E        	    61: 	bsr			DisplayTetra
00:00008A18 123C000D        	    62: 	move.b	#CR,d1
00:00008A1C 610005CC        	    63: 	bsr			OutputChar
00:00008A20 024300FF        	    64: 	andi.w	#$ff,d3
00:00008A24 5343            	    65: 	subi.w	#1,d3			; one less for dbra
                            	    66: .0001:
00:00008A26 7400            	    67: 	clr.l		d2
00:00008A28 61000124        	    68: 	bsr			sGetChar
00:00008A2C 6100FDA2        	    69: 	bsr			AsciiToHexNybble
00:00008A30 E98A            	    70: 	lsl.l		#4,d2
00:00008A32 8401            	    71: 	or.b		d1,d2
00:00008A34 61000118        	    72: 	bsr			sGetChar
00:00008A38 6100FD96        	    73: 	bsr			AsciiToHexNybble
00:00008A3C E98A            	    74: 	lsl.l		#4,d2
00:00008A3E 8401            	    75: 	or.b		d1,d2
00:00008A40 D53900100150    	    76: 	add.b		d2,S19Checksum
00:00008A46 12C2            	    77: 	move.b	d2,(a1)+			; move byte to memory
00:00008A48 51CBFFDC        	    78: 	dbra		d3,.0001
                            	    79: 	; Get the checksum byte
00:00008A4C 7400            	    80: 	clr.l		d2
00:00008A4E 610000FE        	    81: 	bsr			sGetChar
00:00008A52 6100FD7C        	    82: 	bsr			AsciiToHexNybble
00:00008A56 E98A            	    83: 	lsl.l		#4,d2
00:00008A58 8401            	    84: 	or.b		d1,d2
00:00008A5A 610000F2        	    85: 	bsr			sGetChar
00:00008A5E 6100FD70        	    86: 	bsr			AsciiToHexNybble
00:00008A62 E98A            	    87: 	lsl.l		#4,d2
00:00008A64 8401            	    88: 	or.b		d1,d2
00:00008A66 4602            	    89: 	eor.b		#$FF,d2
00:00008A68 B43900100150    	    90: 	cmp.b		S19Checksum,d2
00:00008A6E 6700FEF8        	    91: 	beq			NextRec
00:00008A72 123C0045        	    92: 	move.b	#'E',d1
00:00008A76 61000572        	    93: 	bsr			OutputChar
00:00008A7A 6000FEEC        	    94: 	bra			NextRec
                            	    95: 
                            	    96: ProcessS1:
00:00008A7E 6140            	    97: 	bsr			S19Get16BitAddress
00:00008A80 6090            	    98: 	bra			pcssxa
                            	    99: ProcessS2:
00:00008A82 614A            	   100: 	bsr			S19Get24BitAddress
00:00008A84 608C            	   101: 	bra			pcssxa
                            	   102: ProcessS3:
00:00008A86 6152            	   103: 	bsr			S19Get32BitAddress
00:00008A88 6088            	   104: 	bra			pcssxa
                            	   105: ProcessS7:
00:00008A8A 614E            	   106: 	bsr			S19Get32BitAddress
00:00008A8C 23C900040008    	   107: 	move.l	a1,S19StartAddress
00:00008A92 4EB900000648    	   108: 	bsr			_KeybdInit
00:00008A98 6000EDEE        	   109: 	bra			Monitor
                            	   110: ProcessS8:
00:00008A9C 6130            	   111: 	bsr			S19Get24BitAddress
00:00008A9E 23C900040008    	   112: 	move.l	a1,S19StartAddress
00:00008AA4 4EB900000648    	   113: 	bsr			_KeybdInit
00:00008AAA 6000EDDC        	   114: 	bra			Monitor
                            	   115: ProcessS9:
00:00008AAE 6110            	   116: 	bsr			S19Get16BitAddress
00:00008AB0 23C900040008    	   117: 	move.l	a1,S19StartAddress
00:00008AB6 4EB900000648    	   118: 	bsr			_KeybdInit
00:00008ABC 6000EDCA        	   119: 	bra			Monitor
                            	   120: 
                            	   121: S19Get16BitAddress:
00:00008AC0 7400            	   122: 	clr.l		d2
00:00008AC2 6100008A        	   123: 	bsr			sGetChar
00:00008AC6 6100FD08        	   124: 	bsr			AsciiToHexNybble
00:00008ACA 1401            	   125: 	move.b	d1,d2
00:00008ACC 603E            	   126: 	bra			S1932b
                            	   127: 
                            	   128: S19Get24BitAddress:
00:00008ACE 7400            	   129: 	clr.l		d2
00:00008AD0 617C            	   130: 	bsr			sGetChar
00:00008AD2 6100FCFC        	   131: 	bsr			AsciiToHexNybble
00:00008AD6 1401            	   132: 	move.b	d1,d2
00:00008AD8 601E            	   133: 	bra			S1932a
                            	   134: 
                            	   135: S19Get32BitAddress:
00:00008ADA 7400            	   136: 	clr.l		d2
00:00008ADC 6170            	   137: 	bsr			sGetChar
00:00008ADE 6100FCF0        	   138: 	bsr			AsciiToHexNybble
00:00008AE2 1401            	   139: 	move.b	d1,d2
00:00008AE4 6168            	   140: 	bsr			sGetChar
00:00008AE6 6100FCE8        	   141: 	bsr			AsciiToHexNybble
00:00008AEA E98A            	   142: 	lsl.l		#4,d2
00:00008AEC 8401            	   143: 	or.b		d1,d2
00:00008AEE 615E            	   144: 	bsr			sGetChar
00:00008AF0 6100FCDE        	   145: 	bsr			AsciiToHexNybble
00:00008AF4 E98A            	   146: 	lsl.l		#4,d2
00:00008AF6 8401            	   147: 	or.b		d1,d2
                            	   148: S1932a:
00:00008AF8 6154            	   149: 	bsr			sGetChar
00:00008AFA 6100FCD4        	   150: 	bsr			AsciiToHexNybble
00:00008AFE E98A            	   151: 	lsl.l		#4,d2
00:00008B00 8401            	   152: 	or.b		d1,d2
00:00008B02 614A            	   153: 	bsr			sGetChar
00:00008B04 6100FCCA        	   154: 	bsr			AsciiToHexNybble
00:00008B08 E98A            	   155: 	lsl.l		#4,d2
00:00008B0A 8401            	   156: 	or.b		d1,d2
                            	   157: S1932b:
00:00008B0C 6140            	   158: 	bsr			sGetChar
00:00008B0E 6100FCC0        	   159: 	bsr			AsciiToHexNybble
00:00008B12 E98A            	   160: 	lsl.l		#4,d2
00:00008B14 8401            	   161: 	or.b		d1,d2
00:00008B16 6136            	   162: 	bsr			sGetChar
00:00008B18 6100FCB6        	   163: 	bsr			AsciiToHexNybble
00:00008B1C E98A            	   164: 	lsl.l		#4,d2
00:00008B1E 8401            	   165: 	or.b		d1,d2
00:00008B20 612C            	   166: 	bsr			sGetChar
00:00008B22 6100FCAC        	   167: 	bsr			AsciiToHexNybble
00:00008B26 E98A            	   168: 	lsl.l		#4,d2
00:00008B28 8401            	   169: 	or.b		d1,d2
00:00008B2A 7800            	   170: 	clr.l		d4
00:00008B2C 2242            	   171: 	move.l	d2,a1
                            	   172: 	; Add bytes from address value to checksum
00:00008B2E D53900100150    	   173: 	add.b		d2,S19Checksum
00:00008B34 E08A            	   174: 	lsr.l		#8,d2
00:00008B36 D53900100150    	   175: 	add.b		d2,S19Checksum
00:00008B3C E08A            	   176: 	lsr.l		#8,d2
00:00008B3E D53900100150    	   177: 	add.b		d2,S19Checksum
00:00008B44 E08A            	   178: 	lsr.l		#8,d2
00:00008B46 D53900100150    	   179: 	add.b		d2,S19Checksum
00:00008B4C 4E75            	   180: 	rts
                            	   181: 
                            	   182: ;------------------------------------------------------------------------------
                            	   183: ; Get a character from auxillary input. Waiting for a character is limited to
                            	   184: ; 32000 tries. If a character is not available within the limit, then a return
                            	   185: ; to the monitor is done.
                            	   186: ;
                            	   187: ;	Parameters:
                            	   188: ;		none
                            	   189: ; Returns:
                            	   190: ;		d1 = character from receive buffer or -1 if no char available
                            	   191: ;------------------------------------------------------------------------------
                            	   192: 
                            	   193: sGetChar:
00:00008B4E 48E7A000        	   194: 	movem.l	d0/d2,-(a7)
00:00008B52 343C7D00        	   195: 	move.w	#32000,d2
                            	   196: .0001:
00:00008B56 7024            	   197: 	moveq		#36,d0				; serial get char from buffer
00:00008B58 4E4F            	   198: 	trap		#15
00:00008B5A 4A41            	   199: 	tst.w		d1						; was there a char available?
00:00008B5C 6A0C            	   200: 	bpl.s		.0002
00:00008B5E 51CAFFF6        	   201: 	dbra		d2,.0001			; no - try again
00:00008B62 4CDF0005        	   202: 	movem.l	(a7)+,d0/d2
                            	   203: .0003:
                            	   204: ;	bsr			_KeybdInit
00:00008B66 6000ED20        	   205: 	bra			Monitor				; ran out of tries
                            	   206: .0002:
00:00008B6A 4CDF0005        	   207: 	movem.l	(a7)+,d0/d2
00:00008B6E 0C01001A        	   208: 	cmpi.b	#CTRLZ,d1			; receive end of file?
00:00008B72 67F2            	   209: 	beq			.0003
00:00008B74 4E75            	   210: 	rts
                            	   211: 
                            	   212: 

Source: "boot.x68"
                            	  2838: 	
                            	  2839: AudioInputTest:
00:00008B76 4E75            	  2840: 	rts
                            	  2841: BouncingBalls:
00:00008B78 4E75            	  2842: 	rts
                            	  2843: GraphicsDemo:
00:00008B7A 4E75            	  2844: 	rts
                            	  2845: ClearScreen:
00:00008B7C 7E02            	  2846: 	move.l #2,d7
00:00008B7E 7C0C            	  2847: 	move.l #DEV_CLEAR,d6
00:00008B80 4E40            	  2848: 	trap #0
00:00008B82 4E75            	  2849: 	rts
                            	  2850: 
                            	  2851: ;------------------------------------------------------------------------------
                            	  2852: ; Reverse the order of bytes in d1.
                            	  2853: ;------------------------------------------------------------------------------
                            	  2854: 
                            	  2855: rbo:
00:00008B84 E159            	  2856: 	rol.w	#8,d1
00:00008B86 4841            	  2857: 	swap d1
00:00008B88 E159            	  2858: 	rol.w	#8,d1
00:00008B8A 4E75            	  2859: 	rts
                            	  2860: 
                            	  2861: ;===============================================================================
                            	  2862: ; Generic I2C routines
                            	  2863: ;===============================================================================
                            	  2864: 
                            	  2865: 	even
                            	  2866: ; i2c
                            	  2867: i2c_setup:
                            	  2868: ;		lea		I2C,a6				
                            	  2869: ;		move.w	#19,I2C_PREL(a6)	; setup prescale for 400kHz clock
                            	  2870: ;		move.w	#0,I2C_PREH(a6)
                            	  2871: init_i2c:
00:00008B8C 4DF9FD069000    	  2872: 	lea	I2C2,a6				
00:00008B92 1CBC0013        	  2873: 	move.b #19,I2C_PREL(a6)	; setup prescale for 400kHz clock, 40MHz master
00:00008B96 422E0001        	  2874: 	move.b #0,I2C_PREH(a6)
00:00008B9A 4E75            	  2875: 	rts
                            	  2876: 
                            	  2877: ; Wait for I2C transfer to complete
                            	  2878: ;
                            	  2879: ; Parameters
                            	  2880: ; 	a6 - I2C controller base address
                            	  2881: 
                            	  2882: i2c_wait_tip:
00:00008B9C 2F00            	  2883: 	move.l d0,-(a7)
                            	  2884: .0001				
00:00008B9E 102E0004        	  2885: 	move.b I2C_STAT(a6),d0		; wait for tip to clear
00:00008BA2 08000001        	  2886: 	btst #1,d0
00:00008BA6 66F6            	  2887: 	bne.s	.0001
00:00008BA8 201F            	  2888: 	move.l (a7)+,d0
00:00008BAA 4E75            	  2889: 	rts
                            	  2890: 
                            	  2891: ; Parameters
                            	  2892: ;	d0.b - data to transmit
                            	  2893: ;	d1.b - command value
                            	  2894: ;	a6	 - I2C controller base address
                            	  2895: ;
                            	  2896: i2c_wr_cmd:
00:00008BAC 1D400003        	  2897: 	move.b d0,I2C_TXR(a6)
00:00008BB0 1D410004        	  2898: 	move.b d1,I2C_CMD(a6)
00:00008BB4 61E6            	  2899: 	bsr	i2c_wait_tip
00:00008BB6 102E0004        	  2900: 	move.b I2C_STAT(a6),d0
00:00008BBA 4E75            	  2901: 	rts
                            	  2902: 
                            	  2903: i2c_xmit1:
00:00008BBC 2F00            	  2904: 	move.l d0,-(a7)
00:00008BBE 1D7C00010002    	  2905: 	move.b #1,I2C_CTRL(a6)		; enable the core
00:00008BC4 7076            	  2906: 	moveq	#$76,d0				; set slave address = %0111011
00:00008BC6 323C0090        	  2907: 	move.w #$90,d1				; set STA, WR
00:00008BCA 61E0            	  2908: 	bsr i2c_wr_cmd
00:00008BCC 610C            	  2909: 	bsr	i2c_wait_rx_nack
00:00008BCE 201F            	  2910: 	move.l (a7)+,d0
00:00008BD0 323C0050        	  2911: 	move.w #$50,d1				; set STO, WR
00:00008BD4 61D6            	  2912: 	bsr i2c_wr_cmd
00:00008BD6 61000002        	  2913: 	bsr	i2c_wait_rx_nack
                            	  2914: 
                            	  2915: i2c_wait_rx_nack:
00:00008BDA 2F00            	  2916: 	move.l d0,-(a7)
                            	  2917: .0001						
00:00008BDC 102E0004        	  2918: 	move.b I2C_STAT(a6),d0		; wait for RXack = 0
00:00008BE0 08000007        	  2919: 	btst #7,d0
00:00008BE4 66F6            	  2920: 	bne.s	.0001
00:00008BE6 201F            	  2921: 	move.l (a7)+,d0
00:00008BE8 4E75            	  2922: 	rts
                            	  2923: 
                            	  2924: ;===============================================================================
                            	  2925: ; Realtime clock routines
                            	  2926: ;===============================================================================
                            	  2927: 
                            	  2928: rtc_read:
00:00008BEA 2C7CFD069000    	  2929: 	movea.l	#I2C2,a6
00:00008BF0 4BF900100200    	  2930: 	lea	RTCBuf,a5
00:00008BF6 1D7C00800002    	  2931: 	move.b	#$80,I2C_CTRL(a6)	; enable I2C
00:00008BFC 103C00DE        	  2932: 	move.b	#$DE,d0				; read address, write op
00:00008C00 123C0090        	  2933: 	move.b	#$90,d1				; STA + wr bit
00:00008C04 61A6            	  2934: 	bsr	i2c_wr_cmd
00:00008C06 4A00            	  2935: 	tst.b	d0
00:00008C08 6B66            	  2936: 	bmi	.rxerr
00:00008C0A 4200            	  2937: 	move.b #$00,d0				; address zero
00:00008C0C 123C0010        	  2938: 	move.b #$10,d1				; wr bit
00:00008C10 619A            	  2939: 	bsr	i2c_wr_cmd
00:00008C12 4A00            	  2940: 	tst.b	d0
00:00008C14 6B5A            	  2941: 	bmi	.rxerr
00:00008C16 103C00DF        	  2942: 	move.b #$DF,d0				; read address, read op
00:00008C1A 123C0090        	  2943: 	move.b #$90,d1				; STA + wr bit
00:00008C1E 618C            	  2944: 	bsr i2c_wr_cmd
00:00008C20 4A00            	  2945: 	tst.b	d0
00:00008C22 6B4C            	  2946: 	bmi	.rxerr
                            	  2947: 		
00:00008C24 343C0020        	  2948: 	move.w #$20,d2
                            	  2949: .0001
00:00008C28 1D7C00200004    	  2950: 	move.b #$20,I2C_CMD(a6)	; rd bit
00:00008C2E 6100FF6C        	  2951: 	bsr	i2c_wait_tip
00:00008C32 61A6            	  2952: 	bsr	i2c_wait_rx_nack
00:00008C34 102E0004        	  2953: 	move.b I2C_STAT(a6),d0
00:00008C38 4A00            	  2954: 	tst.b	d0
00:00008C3A 6B34            	  2955: 	bmi	.rxerr
00:00008C3C 102E0003        	  2956: 	move.b I2C_RXR(a6),d0
00:00008C40 1B802000        	  2957: 	move.b d0,(a5,d2.w)
00:00008C44 5242            	  2958: 	addi.w #1,d2
00:00008C46 0C42005F        	  2959: 	cmpi.w #$5F,d2
00:00008C4A 66DC            	  2960: 	bne	.0001
00:00008C4C 1D7C00680004    	  2961: 	move.b #$68,I2C_CMD(a6)	; STO, rd bit + nack
00:00008C52 6100FF48        	  2962: 	bsr i2c_wait_tip
00:00008C56 6182            	  2963: 	bsr i2c_wait_rx_nack
00:00008C58 102E0004        	  2964: 	move.b I2C_STAT(a6),d0
00:00008C5C 4A00            	  2965: 	tst.b	d0
00:00008C5E 6B10            	  2966: 	bmi	.rxerr
00:00008C60 102E0003        	  2967: 	move.b I2C_RXR(a6),d0
00:00008C64 1B802000        	  2968: 	move.b d0,(a5,d2.w)
00:00008C68 422E0002        	  2969: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return 0
00:00008C6C 7000            	  2970: 	moveq	#0,d0
00:00008C6E 4E75            	  2971: 	rts
                            	  2972: .rxerr
00:00008C70 422E0002        	  2973: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return status
00:00008C74 4E75            	  2974: 	rts
                            	  2975: 
                            	  2976: rtc_write:
00:00008C76 2C7CFD069000    	  2977: 	movea.l	#I2C2,a6
00:00008C7C 4BF900100200    	  2978: 	lea	RTCBuf,a5
00:00008C82 1D7C00800002    	  2979: 	move.b #$80,I2C_CTRL(a6)	; enable I2C
00:00008C88 103C00DE        	  2980: 	move.b #$DE,d0				; read address, write op
00:00008C8C 123C0090        	  2981: 	move.b #$90,d1				; STA + wr bit
00:00008C90 6100FF1A        	  2982: 	bsr	i2c_wr_cmd
00:00008C94 4A00            	  2983: 	tst.b	d0
00:00008C96 6B42            	  2984: 	bmi	.rxerr
00:00008C98 4200            	  2985: 	move.b #$00,d0				; address zero
00:00008C9A 123C0010        	  2986: 	move.b #$10,d1				; wr bit
00:00008C9E 6100FF0C        	  2987: 	bsr	i2c_wr_cmd
00:00008CA2 4A00            	  2988: 	tst.b	d0
00:00008CA4 6B34            	  2989: 	bmi	.rxerr
00:00008CA6 343C0020        	  2990: 	move.w #$20,d2
                            	  2991: .0001
00:00008CAA 10352000        	  2992: 	move.b (a5,d2.w),d0
00:00008CAE 123C0010        	  2993: 	move.b #$10,d1
00:00008CB2 6100FEF8        	  2994: 	bsr	i2c_wr_cmd
00:00008CB6 4A00            	  2995: 	tst.b	d0
00:00008CB8 6B20            	  2996: 	bmi	.rxerr
00:00008CBA 5242            	  2997: 	addi.w #1,d2
00:00008CBC 0C42005F        	  2998: 	cmpi.w #$5F,d2
00:00008CC0 66E8            	  2999: 	bne.s	.0001
00:00008CC2 10352000        	  3000: 	move.b (a5,d2.w),d0
00:00008CC6 123C0050        	  3001: 	move.b #$50,d1				; STO, wr bit
00:00008CCA 6100FEE0        	  3002: 	bsr	i2c_wr_cmd
00:00008CCE 4A00            	  3003: 	tst.b	d0
00:00008CD0 6B08            	  3004: 	bmi	.rxerr
00:00008CD2 422E0002        	  3005: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return 0
00:00008CD6 7000            	  3006: 	moveq	#0,d0
00:00008CD8 4E75            	  3007: 	rts
                            	  3008: .rxerr:
00:00008CDA 422E0002        	  3009: 	move.b #0,I2C_CTRL(a6)		; disable I2C and return status
00:00008CDE 4E75            	  3010: 	rts
                            	  3011: 
                            	  3012: msgRtcReadFail:
00:00008CE0 5254432072656164	  3013: 	dc.b	"RTC read/write failed.",$0A,$0D,$00
00:00008CE8 2F77726974652066
00:00008CF0 61696C65642E
00:00008CF6 0A
00:00008CF7 0D
00:00008CF8 00
                            	  3014: 
                            	  3015: msgBusErr:
00:00008CF9 0A              	  3016: 	dc.b	$0A,$0D,"Bus error at: ",$00
00:00008CFA 0D
00:00008CFB 427573206572726F
00:00008D03 722061743A20
00:00008D09 00
                            	  3017: 	even
                            	  3018: 
                            	  3019: ;------------------------------------------------------------------------------
                            	  3020: ;------------------------------------------------------------------------------
                            	  3021: 	even
                            	  3022: 
                            	  3023: bus_err:
00:00008D0A 4E71            	  3024: 	nop
00:00008D0C 43FAFFEB        	  3025: 	lea.l msgBusErr,a1
00:00008D10 6100E586        	  3026: 	bsr DisplayString
00:00008D14 222F0002        	  3027: 	move.l 2(a7),d1
00:00008D18 6100FB0A        	  3028: 	bsr DisplayTetra
00:00008D1C 6100E560        	  3029: 	bsr CRLF
00:00008D20 6000EB66        	  3030: 	bra	Monitor
                            	  3031: 
                            	  3032: trap3:
                            	  3033: 	; First save all registers
00:00008D24 48F9FFFF00040100	  3034: 	movem.l		d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
00:00008D2C 33DF00040140    	  3035: 	move.w		(a7)+,Regsave+$40
00:00008D32 23DF00040144    	  3036: 	move.l		(a7)+,Regsave+$44
00:00008D38 2E7C00040FFC    	  3037: 	move.l		#$40FFC,a7			; reset stack pointer
00:00008D3E 46FC2500        	  3038: 	move.w		#$2500,sr				; enable interrupts
00:00008D42 303900040202    	  3039: 	move.w		NumSetBreakpoints,d0
00:00008D48 5340            	  3040: 	subi.w		#1,d0
00:00008D4A 41F900040220    	  3041: 	lea				Breakpoints,a0
00:00008D50 223900040144    	  3042: 	move.l		Regsave+$44,d1
                            	  3043: .0001:
00:00008D56 B298            	  3044: 	cmp.l			(a0)+,d1
00:00008D58 6708            	  3045: 	beq.s			ProcessBreakpoint
00:00008D5A 51C8FFFA        	  3046: 	dbra			d0,.0001
00:00008D5E 6000EB28        	  3047: 	bra				Monitor					; not a breakpoint
                            	  3048: ProcessBreakpoint:
00:00008D62 6104            	  3049: 	bsr				DisarmAllBreakpoints
00:00008D64 6000F410        	  3050: 	bra				cmdDumpRegs
                            	  3051: 
                            	  3052: ;------------------------------------------------------------------------------
                            	  3053: ; DisarmAllBreakpoints, used when entering the monitor.
                            	  3054: ;------------------------------------------------------------------------------
                            	  3055: 
                            	  3056: DisarmAllBreakpoints:
00:00008D68 48E780E0        	  3057: 	movem.l	d0/a0/a1/a2,-(a7)			; stack some regs
00:00008D6C 303900040202    	  3058: 	move.w	NumSetBreakpoints,d0	; d0 = number of breakpoints that are set
00:00008D72 0C400008        	  3059: 	cmpi.w	#numBreakpoints,d0		; check for valid number
00:00008D76 641A            	  3060: 	bhs.s		.0001
00:00008D78 45F900040220    	  3061: 	lea			Breakpoints,a2				; a2 = pointer to breakpoint address table
00:00008D7E 41F900040280    	  3062: 	lea			BreakpointWords,a0		; a0 = pointer to breakpoint instruction word table
00:00008D84 6004            	  3063: 	bra.s		.0003									; enter loop at bottom
                            	  3064: .0002:
00:00008D86 225A            	  3065: 	move.l	(a2)+,a1							; a1 = address of breakpoint
00:00008D88 3298            	  3066: 	move.w	(a0)+,(a1)						; copy instruction word back to code
                            	  3067: .0003:
00:00008D8A 51C8FFFA        	  3068: 	dbra		d0,.0002
00:00008D8E 4CDF0701        	  3069: 	movem.l	(a7)+,d0/a0/a1/a2			; restore regs
                            	  3070: .0001:
00:00008D92 4E75            	  3071: 	rts	
                            	  3072: 
                            	  3073: ;------------------------------------------------------------------------------
                            	  3074: ; ArmAllBreakpoints, used when entering the monitor.
                            	  3075: ;------------------------------------------------------------------------------
                            	  3076: 
                            	  3077: ArmAllBreakpoints:
00:00008D94 48E780E0        	  3078: 	movem.l		d0/a0/a1/a2,-(a7)			; stack some regs
00:00008D98 303900040202    	  3079: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00008D9E 0C400008        	  3080: 	cmpi.w		#numBreakpoints,d0		; is the number valid?
00:00008DA2 641E            	  3081: 	bhs.s			.0001
00:00008DA4 45F900040220    	  3082: 	lea				Breakpoints,a2				; a2 = pointer to breakpoint address table
00:00008DAA 41F900040280    	  3083: 	lea				BreakpointWords,a0		; a0 = pointer to instruction word table
00:00008DB0 6008            	  3084: 	bra.s			.0003									; enter loop at bottom
                            	  3085: .0002:
00:00008DB2 225A            	  3086: 	move.l		(a2)+,a1							; a1 = address of breakpoint
00:00008DB4 3091            	  3087: 	move.w		(a1),(a0)							; copy instruction word to table
00:00008DB6 30FC4E43        	  3088: 	move.w		#$4E43,(a0)+					; set instruction = TRAP3
                            	  3089: .0003:
00:00008DBA 51C8FFF6        	  3090: 	dbra			d0,.0002
00:00008DBE 4CDF0701        	  3091: 	movem.l		(a7)+,d0/a0/a1/a2			; restore regs
                            	  3092: .0001:
00:00008DC2 4E75            	  3093: 	rts	
                            	  3094: 
                            	  3095: ;------------------------------------------------------------------------------
                            	  3096: ;------------------------------------------------------------------------------
                            	  3097: 
                            	  3098: ArmBreakpoint:
00:00008DC4 48E7E0E0        	  3099: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
00:00008DC8 303900040202    	  3100: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00008DCE 0C400008        	  3101: 	cmpi.w		#numBreakpoints,d0		; check if too many
00:00008DD2 645A            	  3102: 	bhs.s			.0001
00:00008DD4 527900040202    	  3103: 	addi.w		#1,NumSetBreakpoints	; increment number of breakpoints
00:00008DDA 2400            	  3104: 	move.l		d0,d2
00:00008DDC 6100F0E0        	  3105: 	bsr				ignBlanks
00:00008DE0 6100F45E        	  3106: 	bsr				GetHexNumber
00:00008DE4 6748            	  3107: 	beq.s			.0001									; was there an address?
00:00008DE6 08010000        	  3108: 	btst			#0,d1									; address value must be even
00:00008DEA 6642            	  3109: 	bne.s			.0001
                            	  3110: 	; See if the breakpoint is in the table already
00:00008DEC 43F900040220    	  3111: 	lea				Breakpoints,a1				; a1 points to breakpoint table
00:00008DF2 343C0007        	  3112: 	move.w		#numBreakpoints-1,d2
                            	  3113: .0002:
00:00008DF6 B299            	  3114: 	cmp.l			(a1)+,d1
00:00008DF8 673A            	  3115: 	beq.s			.0003									; breakpoint is in table already
00:00008DFA 51CAFFFA        	  3116: 	dbra			d2,.0002
                            	  3117: 	; Add breakpoint to table
                            	  3118: 	; Search for empty entry
00:00008DFE 43F900040220    	  3119: 	lea				Breakpoints,a1				; a1 = pointer to breakpoint address table
00:00008E04 4242            	  3120: 	clr.w			d2										; d2 = count
                            	  3121: .0006:
00:00008E06 4A91            	  3122: 	tst.l			(a1)									; is the entry empty?
00:00008E08 670C            	  3123: 	beq.s			.0005									; branch if found empty entry
00:00008E0A 5889            	  3124: 	lea				4(a1),a1							; point to next entry
00:00008E0C 5242            	  3125: 	addi.w		#1,d2									; increment count
00:00008E0E 0C420008        	  3126: 	cmpi.w		#numBreakpoints,d2		; safety: check against max number
00:00008E12 65F2            	  3127: 	blo.s			.0006
00:00008E14 6018            	  3128: 	bra.s			.0001									; what? no empty entries found, table corrupt?
                            	  3129: .0005:
00:00008E16 E542            	  3130: 	asl.w			#2,d2									; d2 = long word index
00:00008E18 23812000        	  3131: 	move.l		d1,(a1,d2.w)					; move breakpoint address to table
00:00008E1C 2441            	  3132: 	move.l		d1,a2
00:00008E1E E24A            	  3133: 	lsr.w			#1,d2									; d2 = word index
                            	  3134: .0004:
00:00008E20 43F900040280    	  3135: 	lea				BreakpointWords,a1
00:00008E26 33922000        	  3136: 	move.w		(a2),(a1,d2.w)				; copy instruction word to table
00:00008E2A 34BC4E43        	  3137: 	move.w		#$4E43,(a2)						; replace word with TRAP3
                            	  3138: .0001:
00:00008E2E 4CDF0707        	  3139: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
00:00008E32 4E75            	  3140: 	rts
                            	  3141: .0003:
00:00008E34 2469FFFC        	  3142: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
00:00008E38 0C524E43        	  3143: 	cmpi.w		#$4E43,(a2)						; see if breakpoint already armed
00:00008E3C 67F0            	  3144: 	beq.s			.0001
00:00008E3E D482            	  3145: 	asl.l			#1,d2									; d2 = word index
00:00008E40 60DE            	  3146: 	bra.s			.0004
                            	  3147: 
                            	  3148: 
                            	  3149: ;------------------------------------------------------------------------------
                            	  3150: ;------------------------------------------------------------------------------
                            	  3151: 
                            	  3152: DisarmBreakpoint:
00:00008E42 48E7E0E0        	  3153: 	movem.l		d0/d1/d2/a0/a1/a2,-(a7)
00:00008E46 303900040202    	  3154: 	move.w		NumSetBreakpoints,d0	; d0 = number of breakpoints
00:00008E4C 0C400008        	  3155: 	cmpi.w		#numBreakpoints,d0		; check if too many
00:00008E50 623E            	  3156: 	bhi.s			.0001
00:00008E52 2400            	  3157: 	move.l		d0,d2
00:00008E54 6100F068        	  3158: 	bsr				ignBlanks
00:00008E58 6100F3E6        	  3159: 	bsr				GetHexNumber
00:00008E5C 6732            	  3160: 	beq.s			.0001									; was there an address?
00:00008E5E 08010000        	  3161: 	btst			#0,d1									; address value must be even
00:00008E62 662C            	  3162: 	bne.s			.0001
                            	  3163: 	; See if the breakpoint is in the table already
00:00008E64 43F900040220    	  3164: 	lea				Breakpoints,a1				; a1 points to breakpoint table
00:00008E6A 5342            	  3165: 	subi.w		#1,d2
                            	  3166: .0002:
00:00008E6C B299            	  3167: 	cmp.l			(a1)+,d1
00:00008E6E 6706            	  3168: 	beq.s			.0003									; breakpoint is in table already
00:00008E70 51CAFFFA        	  3169: 	dbra			d2,.0002
00:00008E74 601A            	  3170: 	bra				.0001									; breakpoint was not in table
                            	  3171: .0003:
                            	  3172: 	; Remove breakpoint from table
00:00008E76 537900040202    	  3173: 	subi.w		#1,NumSetBreakpoints	; decrement number of breakpoints
00:00008E7C 2469FFFC        	  3174: 	move.l		-4(a1),a2							; a2 = pointer to breakpoint address from table
00:00008E80 42A9FFFC        	  3175: 	clr.l			-4(a1)								; empty out breakpoint
00:00008E84 43F900040280    	  3176: 	lea				BreakpointWords,a1
00:00008E8A D482            	  3177: 	asl.l			#1,d2									; d2 = word index
00:00008E8C 34B12000        	  3178: 	move.w		(a1,d2.w),(a2)				; copy instruction from table back to code
                            	  3179: .0001:
00:00008E90 4CDF0707        	  3180: 	movem.l		(a7)+,d0/d1/d2/a0/a1/a2
00:00008E94 4E75            	  3181: 	rts
                            	  3182: 
                            	  3183: ;------------------------------------------------------------------------------
                            	  3184: ;------------------------------------------------------------------------------
                            	  3185: 
                            	  3186: ListBreakpoints:
00:00008E96 6100E3E6        	  3187: 	bsr			CRLF
00:00008E9A 343C0008        	  3188: 	move.w	#numBreakpoints,d2
00:00008E9E 43F900040220    	  3189: 	lea			Breakpoints,a1
                            	  3190: .0001:
00:00008EA4 2219            	  3191: 	move.l	(a1)+,d1
00:00008EA6 6100F97C        	  3192: 	bsr			DisplayTetra
00:00008EAA 6100E3D2        	  3193: 	bsr			CRLF
00:00008EAE 51CAFFF4        	  3194: 	dbra		d2,.0001
00:00008EB2 6000E9D4        	  3195: 	bra			Monitor
                            	  3196: 
                            	  3197: ;------------------------------------------------------------------------------
                            	  3198: ;------------------------------------------------------------------------------
                            	  3199: 
                            	  3200: ClearBreakpointList:
00:00008EB6 343C0008        	  3201: 	move.w	#numBreakpoints,d2
00:00008EBA 43F900040220    	  3202: 	lea			Breakpoints,a1
                            	  3203: .0001:
00:00008EC0 4299            	  3204: 	clr.l		(a1)+
00:00008EC2 51CAFFFC        	  3205: 	dbra		d2,.0001
00:00008EC6 4E75            	  3206: 	rts
                            	  3207: 
                            	  3208: ;------------------------------------------------------------------------------
                            	  3209: ; SendMsg
                            	  3210: ; 00100xy0
                            	  3211: ;
                            	  3212: ; Parameters:
                            	  3213: ;		d1 = target core number
                            	  3214: ;		d2 = argument 1
                            	  3215: ;		d3 = argument 2
                            	  3216: ;		d4 = argument 3
                            	  3217: ;
                            	  3218: ;------------------------------------------------------------------------------
                            	  3219: 
                            	  3220: SendMsg:
00:00008EC8 48E70440        	  3221: 	movem.l	d5/a1,-(a7)
00:00008ECC E149            	  3222: 	lsl.w		#8,d1
00:00008ECE 4E7A5FE0        	  3223: 	movec		coreno,d5
00:00008ED2 E94D            	  3224: 	lsl.w		#4,d5
00:00008ED4 8245            	  3225: 	or.w		d5,d1
00:00008ED6 43F900100000    	  3226: 	lea			$00100000,a1
00:00008EDC 4AB11000        	  3227: 	tst.l		0(a1,d1.w)
00:00008EE0 661C            	  3228: 	bne			.msgFull
00:00008EE2 4E7A5FE0        	  3229: 	movec		coreno,d5
00:00008EE6 23851000        	  3230: 	move.l	d5,0(a1,d1.w)
00:00008EEA 23821004        	  3231: 	move.l	d2,4(a1,d1.w)
00:00008EEE 23831008        	  3232: 	move.l	d3,8(a1,d1.w)
00:00008EF2 2384100C        	  3233: 	move.l	d4,12(a1,d1.w)
00:00008EF6 4CDF0220        	  3234: 	movem.l	(a7)+,d5/a1
00:00008EFA 7200            	  3235: 	moveq		#0,d1
00:00008EFC 4E75            	  3236: 	rts
                            	  3237: .msgFull:
00:00008EFE 4CDF0220        	  3238: 	movem.l	(a7)+,d5/a1
00:00008F02 72FF            	  3239: 	moveq		#-1,d1
00:00008F04 4E75            	  3240: 	rts
                            	  3241: 
                            	  3242: ;------------------------------------------------------------------------------
                            	  3243: ; ReceiveMsg
                            	  3244: ;		Scan the message table for messages and dispatch them.
                            	  3245: ; 00100xy0
                            	  3246: ;
                            	  3247: ; Parameters:
                            	  3248: ;------------------------------------------------------------------------------
                            	  3249: 
                            	  3250: ReceiveMsg:
00:00008F06 48E77F40        	  3251: 	movem.l		d1/d2/d3/d4/d5/d6/d7/a1,-(a7)
00:00008F0A 43F900100000    	  3252: 	lea				$00100000,a1
00:00008F10 4E7A5FE0        	  3253: 	movec			coreno,d5
00:00008F14 E14D            	  3254: 	lsl.w			#8,d5
00:00008F16 7C02            	  3255: 	moveq			#2,d6
                            	  3256: .nextCore:
00:00008F18 3E06            	  3257: 	move.w		d6,d7
00:00008F1A E94F            	  3258: 	lsl.w			#4,d7
00:00008F1C DE45            	  3259: 	add.w			d5,d7
00:00008F1E 4AB17000        	  3260: 	tst.l			0(a1,d7.w)			; Is there a message from core d6?
00:00008F22 6716            	  3261: 	beq.s			.noMsg
00:00008F24 22317000        	  3262: 	move.l		0(a1,d7.w),d1
00:00008F28 24317004        	  3263: 	move.l		4(a1,d7.w),d2
00:00008F2C 26317008        	  3264: 	move.l		8(a1,d7.w),d3
00:00008F30 2831700C        	  3265: 	move.l		12(a1,d7.w),d4
00:00008F34 42B17000        	  3266: 	clr.l			0(a1,d7.w)			; indicate message was received
00:00008F38 610E            	  3267: 	bsr				DispatchMsg
                            	  3268: .noMsg:
00:00008F3A 5246            	  3269: 	addq			#1,d6
00:00008F3C BC7C0009        	  3270: 	cmp.w			#9,d6
00:00008F40 63D6            	  3271: 	bls				.nextCore
00:00008F42 4CDF02FE        	  3272: 	movem.l		(a7)+,d1/d2/d3/d4/d5/d6/d7/a1
00:00008F46 4E75            	  3273: 	rts
                            	  3274: 
                            	  3275: ;------------------------------------------------------------------------------
                            	  3276: ;------------------------------------------------------------------------------
                            	  3277: 
                            	  3278: DispatchMsg:
00:00008F48 4E75            	  3279: 	rts
                            	  3280: 
                            	  3281: ;------------------------------------------------------------------------------
                            	  3282: ; Trap #15, function 39 - convert floating-point to string and display
                            	  3283: ;
                            	  3284: ; Parameters
                            	  3285: ;		a1 = pointer to buffer
                            	  3286: ;		fp0 = number to print
                            	  3287: ;		d1 = width of print field
                            	  3288: ;		d2 = precision
                            	  3289: ;		d3 = 'E' or 'e'
                            	  3290: ;------------------------------------------------------------------------------
                            	  3291: 
                            	  3292: prtflt:
00:00008F4A 4E52FFD0        	  3293: 	link a2,#-48
00:00008F4E 2F7900040098002C	  3294: 	move.l _canary,44(sp)
00:00008F56 48D7074F        	  3295: 	movem.l d0/d1/d2/d3/d6/a0/a1/a2,(sp)
00:00008F5A F22F68000020    	  3296: 	fmove.x fp0,32(sp)
00:00008F60 2049            	  3297: 	move.l a1,a0						; a0 = pointer to buffer to use
00:00008F62 13C100040508    	  3298: 	move.b d1,_width
00:00008F68 23C200040514    	  3299: 	move.l d2,_precision
00:00008F6E 13C30004050C    	  3300: 	move.b d3,_E
00:00008F74 6100F62A        	  3301: 	bsr _FloatToString
00:00008F78 6100E31E        	  3302: 	bsr DisplayString
00:00008F7C F22F48000020    	  3303: 	fmove.x 32(sp),fp0
00:00008F82 4CD7074F        	  3304: 	movem.l (sp),d0/d1/d2/d3/d6/a0/a1/a2
00:00008F86 A2AF0003002C    	  3305: 	cchk 44(sp)
00:00008F8C 4E5A            	  3306: 	unlk a2
00:00008F8E 4E75            	  3307: 	rts
                            	  3308: 
                            	  3309: T15FloatToString:
00:00008F90 4E52FFD4        	  3310: 	link a2,#-44
00:00008F94 48D7034F        	  3311: 	movem.l d0/d1/d2/d3/d6/a0/a1,(sp)
00:00008F98 F22F6800001C    	  3312: 	fmove.x fp0,28(sp)
00:00008F9E 2049            	  3313: 	move.l a1,a0						; a0 = pointer to buffer to use
00:00008FA0 13C100040508    	  3314: 	move.b d1,_width
00:00008FA6 23C200040514    	  3315: 	move.l d2,_precision
00:00008FAC 13C30004050C    	  3316: 	move.b d3,_E
00:00008FB2 6100F5EC        	  3317: 	bsr _FloatToString
00:00008FB6 F22F4800001C    	  3318: 	fmove.x 28(sp),fp0
00:00008FBC 4CD7034F        	  3319: 	movem.l (sp),d0/d1/d2/d3/d6/a0/a1
00:00008FC0 4E5A            	  3320: 	unlk a2
00:00008FC2 4E75            	  3321: 	rts
                            	  3322: 
                            	  3323: ;==============================================================================
                            	  3324: ; Parameters:
                            	  3325: ;		d7 = device number
                            	  3326: ;		d6 = function number
                            	  3327: ;		d0 to d5 = arguments
                            	  3328: ;==============================================================================
                            	  3329: 
                            	  3330: io_trap:
00:00008FC4 0C070007        	  3331: 	cmpi.b #7,d7							; make sure legal device
00:00008FC8 621C            	  3332: 	bhi.s .0002
00:00008FCA 48E70180        	  3333: 	movem.l d7/a0,-(a7)
00:00008FCE 4887            	  3334: 	ext.w d7
00:00008FD0 CEFC0084        	  3335: 	mulu #DCB_SIZE,d7					; index to DCB
00:00008FD4 207C00040A00    	  3336: 	move.l #null_dcb,a0
00:00008FDA 20707018        	  3337: 	move.l DCB_CMDPROC(a0,d7.w),a0
00:00008FDE 4E90            	  3338: 	jsr (a0)
00:00008FE0 4CDF0180        	  3339: 	movem.l (a7)+,d7/a0
00:00008FE4 4E73            	  3340: 	rte
                            	  3341: .0002:
00:00008FE6 7020            	  3342: 	moveq #E_BadDevNum,d0
00:00008FE8 4E73            	  3343: 	rte
                            	  3344: 
                            	  3345: ;==============================================================================
                            	  3346: ; Output a character to the current output device.
                            	  3347: ;
                            	  3348: ; Parameters:
                            	  3349: ;		d1.b	 character to output
                            	  3350: ; Returns:
                            	  3351: ;		none
                            	  3352: ;==============================================================================
                            	  3353: 
                            	  3354: OutputChar:
00:00008FEA 48E78300        	  3355: 	movem.l d0/d6/d7,-(a7)
00:00008FEE 7E00            	  3356: 	clr.l d7
00:00008FF0 7C00            	  3357: 	clr.l d6
00:00008FF2 1E39000400A8    	  3358: 	move.b OutputDevice,d7		; d7 = output device
00:00008FF8 3C3C0002        	  3359: 	move.w #DEV_PUTCHAR,d6		; d6 = function
00:00008FFC 4E40            	  3360: 	trap #0
00:00008FFE 4CDF00C1        	  3361: 	movem.l (a7)+,d0/d6/d7
00:00009002 4E75            	  3362: 	rts
                            	  3363: 
                            	  3364: ;------------------------------------------------------------------------------
                            	  3365: ;------------------------------------------------------------------------------
                            	  3366: 
                            	  3367: InitIRQ:
00:00009004 7006            	  3368: 	moveq		#6,d0
00:00009006 41F900000B0E    	  3369: 	lea			KeybdIRQ,a0
00:0000900C 610C            	  3370: 	bsr			InstallIRQ
00:0000900E 41FA004E        	  3371: 	lea			TickIRQ,a0
00:00009012 6106            	  3372: 	bsr			InstallIRQ
00:00009014 7003            	  3373: 	moveq		#3,d0
00:00009016 41FA872A        	  3374: 	lea			SerialIRQ,a0
                            	  3375: 	; fall through
                            	  3376: 
                            	  3377: ;------------------------------------------------------------------------------
                            	  3378: ; Install an IRQ handler.
                            	  3379: ;
                            	  3380: ; Parameters:
                            	  3381: ;		a0 = pointer to bucket containing vector
                            	  3382: ;		d0 = vector (64 to 255)
                            	  3383: ; Returns:
                            	  3384: ;		d0 = 0 if successfully added, otherwise E_NotAlloc
                            	  3385: ;		nf = 0, zf = 1 if successfully added, otherwise nf = 1, zf = 0
                            	  3386: ;------------------------------------------------------------------------------
                            	  3387: 
                            	  3388: InstallIRQ:
00:0000901A 48E70060        	  3389: 	movem.l a1/a2,-(a7)				; save working register
00:0000901E 4A90            	  3390: 	tst.l (a0)								; link field must be NULL
00:00009020 6634            	  3391: 	bne.s .0003
00:00009022 0C400040        	  3392: 	cmpi.w #64,d0							; is vector in range (64 to 255)?
00:00009026 652E            	  3393: 	blo.s .0003
00:00009028 0C4000FF        	  3394: 	cmpi.w #255,d0
00:0000902C 6228            	  3395: 	bhi.s .0003
00:0000902E 45F80400        	  3396: 	lea	irq_list_tbl,a2				; a2 points to installed IRQ list
00:00009032 E748            	  3397: 	lsl.w	#3,d0								; multiply by 2 long words
00:00009034 22720000        	  3398: 	move.l (a2,d0.w),a1				; get first link
00:00009038 45F20000        	  3399: 	lea (a2,d0.w),a2					; 
                            	  3400: .0002:
00:0000903C B1C9            	  3401: 	cmpa.l a1,a0							; installed already?
00:0000903E 6716            	  3402: 	beq.s .0003
00:00009040 B2FC0000        	  3403: 	cmpa.l #0,a1							; is link NULL?
00:00009044 6706            	  3404: 	beq.s .0001
00:00009046 2449            	  3405: 	move.l a1,a2							; save previous link
00:00009048 2251            	  3406: 	move.l (a1),a1						; get next link
00:0000904A 60F0            	  3407: 	bra .0002
                            	  3408: .0001:
00:0000904C 2488            	  3409: 	move.l a0,(a2)						; set link
00:0000904E 225F245F        	  3410: 	movem.l (a7)+,a1/a2
00:00009052 7000            	  3411: 	moveq #E_Ok,d0
00:00009054 4E75            	  3412: 	rts
                            	  3413: .0003:
00:00009056 225F245F        	  3414: 	movem.l (a7)+,a1/a2
00:0000905A 7009            	  3415: 	moveq #E_NotAlloc,d0			; return failed to add
00:0000905C 4E75            	  3416: 	rts
                            	  3417: 
                            	  3418: ;------------------------------------------------------------------------------
                            	  3419: ; TickIRQ
                            	  3420: ; - this IRQ is processed by all cores.
                            	  3421: ; - reset the edge circuit.
                            	  3422: ; - an IRQ live indicator is updated on the text screen for the core
                            	  3423: ;------------------------------------------------------------------------------
                            	  3424: 
                            	  3425: TickIRQ:
00:0000905E 46FC2600        	  3426: 	move.w #$2600,sr					; disable lower level IRQs
00:00009062 48E77080        	  3427: 	movem.l	d1/d2/d3/a0,-(a7)
00:00009066 52B90004009C    	  3428: 	addi.l #1,tickcnt
00:0000906C 13FC0001000400A0	  3429: 	move.b #1,IRQFlag					; tick interrupt indicator in local memory
00:00009074 4E7A1FE0        	  3430: 	movec	coreno,d1						; d1 = core number
00:00009078 2601            	  3431: 	move.l d1,d3
                            	  3432: 	if (SCREEN_FORMAT==1)
00:0000907A E583            	  3433: 		asl.l #2,d3								; 4 bytes per text cell
                            	  3434: 	else
                            	  3435: 		asl.l #3,d3								; 8 bytes per text cell
                            	  3436: 	endif
00:0000907C 23FC1D000000FD09	  3437: 	move.l #$1D000000,PLIC+$14	; reset edge sense circuit
00:00009084 0014
00:00009086 41F9FD0000C8    	  3438: 	lea $FD0000C8,a0					; display field address
00:0000908C 24303004        	  3439: 	move.l 4(a0,d3.w),d2			; get char from screen
                            	  3440: ;	rol.l #8,d2								; extract char field
                            	  3441: ;	clr.b d2									; clear char field
                            	  3442: ;	addi.b #'0',d1						; binary to ascii core number
                            	  3443: ;	or.b	d1,d2								; insert core number
                            	  3444: ;	ror.l #8,d2								; reposition to proper place
                            	  3445: ;	addi.w #1,d2							; flashy colors
00:00009090 5282            	  3446: 	addi.l #$0001,d2
00:00009092 21823004        	  3447: 	move.l d2,4(a0,d3.w)			; update onscreen IRQ flag
00:00009096 6100FE6E        	  3448: 	bsr	ReceiveMsg
00:0000909A 4CDF010E        	  3449: 	movem.l	(a7)+,d1/d2/d3/a0
00:0000909E 4E73            	  3450: 	rte
                            	  3451: 
                            	  3452: ;------------------------------------------------------------------------------
                            	  3453: ;------------------------------------------------------------------------------
                            	  3454: 
                            	  3455: irq3_rout:
                            	  3456: ;	movem.l	d0/d1/a0/a1,-(a7)
                            	  3457: ;	lea			InstalledIRQ+8*4*3,a0
                            	  3458: ;	bra			irq_rout
                            	  3459: 
                            	  3460: irq6_rout:
                            	  3461: ;	movem.l	d0/d1/a0/a1,-(a7)
                            	  3462: ;	lea			InstalledIRQ+8*4*6,a0
                            	  3463: irq_rout:
00:000090A0 7007            	  3464: 	moveq		#7,d0
                            	  3465: .nextHandler:
00:000090A2 2258            	  3466: 	move.l	(a0)+,a1
00:000090A4 6706            	  3467: 	beq.s		.0003
00:000090A6 4E91            	  3468: 	jsr			(a1)
00:000090A8 4A81            	  3469: 	tst.l		d1								; was IRQ handled?
00:000090AA 6B04            	  3470: 	bmi.s		.0002							; first one to return handled quits loop
                            	  3471: .0003:
00:000090AC 51C8FFF4        	  3472: 	dbra		d0,.nextHandler
                            	  3473: .0002:
00:000090B0 4CDF0303        	  3474: 	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3475: 
                            	  3476: ; Load head of list into an address register, then branch to a generic routine.
                            	  3477: 
                            	  3478: ;	rept 192
                            	  3479: ;	macIRQ_proc_label REPTN
                            	  3480: ;	movem.l a0/a1,-(a7)
                            	  3481: ;	move.l irq_list_tbl+REPTN*4,a1	; get the head of the list
                            	  3482: ;	jmp irq_proc_generic
                            	  3483: ;	endr
                            	  3484: 
                            	  3485: irq_proc_generic:
                            	  3486: .0003:
00:000090B4 20690004        	  3487: 	move.l 4(a1),a0									; a0 = vector
00:000090B8 B0FC0000        	  3488: 	cmpa.l #0,a0										; ugh. move to address does not set flags
00:000090BC 6706            	  3489: 	beq.s .0001											; valid vector?
00:000090BE 4E90            	  3490: 	jsr (a0)												; call the interrupt routine
00:000090C0 4A81            	  3491: 	tst.l d1												; IRQ handled?
00:000090C2 6B08            	  3492: 	bmi.s .0002											
                            	  3493: .0001:
00:000090C4 2251            	  3494: 	move.l (a1),a1
00:000090C6 B0FC0000        	  3495: 	cmpa.l #0,a0										; end of list?
00:000090CA 66E8            	  3496: 	bne.s .0003
                            	  3497: .0002:
00:000090CC 205F225F        	  3498: 	movem.l (a7)+,a0/a1
00:000090D0 4E73            	  3499: 	rte 
                            	  3500: 
                            	  3501: SpuriousIRQ:
00:000090D2 4E73            	  3502: 	rte
                            	  3503: 
                            	  3504: ;	bsr			KeybdIRQ
                            	  3505: ;	tst.l		d1								; handled by KeybdIRQ?
                            	  3506: ;	bmi.s		.0002							; if yes, go return
                            	  3507: ;.0001:
                            	  3508: ;	move.l	#$1D000000,PLIC+$14	; reset edge sense circuit
                            	  3509: ;	move.l	TextScr,a0				; a0 = screen address
                            	  3510: ;	addi.l	#1,40(a0)					; update onscreen IRQ flag
                            	  3511: ;.0002:	
                            	  3512: ;	movem.l	(a7)+,d0/d1/a0/a1	; return
                            	  3513: ;	rte
                            	  3514: 
                            	  3515: nmi_rout:
00:000090D4 48E7C080        	  3516: 	movem.l	d0/d1/a0,-(a7)
00:000090D8 123C004E        	  3517: 	move.b	#'N',d1
00:000090DC 6100FF0C        	  3518: 	bsr			OutputChar
00:000090E0 4CDF0103        	  3519: 	movem.l	(a7)+,d0/d1/a0		; return
00:000090E4 4E73            	  3520: 	rte
                            	  3521: 
                            	  3522: addr_err:
00:000090E6 544F            	  3523: 	addq		#2,sp						; get rid of sr
00:000090E8 221F            	  3524: 	move.l	(sp)+,d1				; pop exception address
00:000090EA 6100F738        	  3525: 	bsr			DisplayTetra		; and display it
00:000090EE 43FA00A6        	  3526: 	lea			msgAddrErr,a1	; followed by message
00:000090F2 6100E1BA        	  3527: 	bsr			DisplayStringCRLF
                            	  3528: .0001:
00:000090F6 60FE            	  3529: 	bra			.0001
00:000090F8 6000E78E        	  3530: 	bra			Monitor
                            	  3531: 	
                            	  3532: brdisp_trap:
00:000090FC 48F9FFFF00040100	  3533: 	movem.l	d0/d1/d2/d3/d4/d5/d6/d7/a0/a1/a2/a3/a4/a5/a6/a7,Regsave
00:00009104 33DF00040140    	  3534: 	move.w	(a7)+,Regsave+$40
00:0000910A 23DF00040144    	  3535: 	move.l	(a7)+,Regsave+$44
00:00009110 2E7C00047FFC    	  3536: 	move.l	#$47FFC,a7			; reset stack pointer
00:00009116 46FC2500        	  3537: 	move.w	#$2500,sr				; enable interrupts
00:0000911A 43FA0099        	  3538: 	lea			msg_bad_branch_disp,a1
00:0000911E 6100E178        	  3539: 	bsr			DisplayString
00:00009122 6100F6F8        	  3540: 	bsr			DisplaySpace
00:00009126 223900040144    	  3541: 	move.l	Regsave+$44,d1	; exception address
00:0000912C 6100F6F6        	  3542: 	bsr			DisplayTetra		; and display it
                            	  3543: ;	move.l	(sp)+,d1				; pop format word 68010 mode only
00:00009130 6000F044        	  3544: 	bra			cmdDumpRegs
                            	  3545: 
                            	  3546: illegal_trap:
00:00009134 544F            	  3547: 	addq		#2,sp						; get rid of sr
00:00009136 221F            	  3548: 	move.l	(sp)+,d1				; pop exception address
00:00009138 6100F6EA        	  3549: 	bsr			DisplayTetra		; and display it
00:0000913C 43FA0065        	  3550: 	lea			msg_illegal,a1	; followed by message
00:00009140 6100E156        	  3551: 	bsr			DisplayString
                            	  3552: .0001:
00:00009144 60FE            	  3553: 	bra			.0001
00:00009146 6000E740        	  3554: 	bra			Monitor
                            	  3555: 	
                            	  3556: io_irq:
00:0000914A 544F            	  3557: 	addq #2,sp
00:0000914C 221F            	  3558: 	move.l (sp)+,d1
00:0000914E 6100F6D4        	  3559: 	bsr DisplayTetra
00:00009152 43FA0083        	  3560: 	lea msg_io_access,a1
00:00009156 6100E140        	  3561: 	bsr DisplayString
00:0000915A 6000F01A        	  3562: 	bra cmdDumpRegs
                            	  3563: 
                            	  3564: ; -----------------------------------------------------------------------------
                            	  3565: ; -----------------------------------------------------------------------------
                            	  3566: 
                            	  3567: msg_start:
00:0000915E 46656D74696B6920	  3568: 	dc.b	"Femtiki rf68k Multi-core OS Starting",LF,CR,0
00:00009166 726636386B204D75
00:0000916E 6C74692D636F7265
00:00009176 204F532053746172
00:0000917E 74696E67
00:00009182 0A
00:00009183 0D
00:00009184 00
                            	  3569: ;	dc.b	"rf68k System Starting",CR,LF,0
                            	  3570: msg_core_start:
00:00009185 20636F7265207374	  3571: 	dc.b	" core starting",CR,LF,0
00:0000918D 617274696E67
00:00009193 0D
00:00009194 0A
00:00009195 00
                            	  3572: msgAddrErr
00:00009196 2061646472657373	  3573: 	dc.b	" address err",0
00:0000919E 20657272
00:000091A2 00
                            	  3574: msg_illegal:
00:000091A3 20696C6C6567616C	  3575: 	dc.b	" illegal opcode",CR,LF,0
00:000091AB 206F70636F6465
00:000091B2 0D
00:000091B3 0A
00:000091B4 00
                            	  3576: msg_bad_branch_disp:
00:000091B5 206272616E636820	  3577: 	dc.b	" branch selfref: ",0
00:000091BD 73656C667265663A
00:000091C5 20
00:000091C6 00
                            	  3578: msg_test_done:
00:000091C7 2043505520746573	  3579: 	dc.b	" CPU test done.",0
00:000091CF 7420646F6E652E
00:000091D6 00
                            	  3580: msg_io_access
00:000091D7 20756E7065726D69	  3581: 	dc.b " unpermitted access to I/O",0
00:000091DF 7474656420616363
00:000091E7 65737320746F2049
00:000091EF 2F4F
00:000091F1 00
                            	  3582: msgChk
00:000091F2 20636865636B2066	  3583: 	dc.b " check failed",0
00:000091FA 61696C6564
00:000091FF 00
                            	  3584: msgStackCanary
00:00009200 20737461636B2063	  3585: 	dc.b " stack canary overwritten",0
00:00009208 616E617279206F76
00:00009210 6572777269747465
00:00009218 6E
00:00009219 00
                            	  3586: 
                            	  3587: 	even
                            	  3588: 
                            	  3589: ;-------------------------------------------------------------------------
                            	  3590: ; File HEX2DEC   HEX2DEC convert hex to decimal                   11/02/81
                            	  3591: ;
                            	  3592: ;    CONVERT BINARY TO DECIMAL  REG  D0 PUT IN ( A6) BUFFER AS ASCII
                            	  3593: 
                            	  3594: ; Shift buffer one character to left
                            	  3595: ShiftBuf:
00:0000921A 48E78028        	  3596: 	movem.l d0/a2/a4,-(a7)
00:0000921E 200B            	  3597: 	move.l a3,d0
00:00009220 06800000003F    	  3598: 	addi.l #BUFSIZE,d0
                            	  3599: .0001:
00:00009226 18EC0001        	  3600: 	move.b 1(a4),(a4)+
00:0000922A B08C            	  3601: 	cmp.l a4,d0
00:0000922C 65F8            	  3602: 	blo.s .0001
00:0000922E 4CDF1401        	  3603: 	movem.l (a7)+,d0/a2/a4
00:00009232 4E75            	  3604: 	rts
                            	  3605: 
                            	  3606: HEX2DEC2:
00:00009234 48E7C01C        	  3607: 	movem.l d0/d1/a3/a4/a5,-(a7)
00:00009238 264E            	  3608: 	move.l a6,a3
00:0000923A 284E            	  3609: 	move.l a6,a4
00:0000923C 2200            	  3610: 	move.l d0,d1
00:0000923E 6A0A            	  3611: 	bpl.s .0001
00:00009240 4480            	  3612: 	neg.l d0										;
00:00009242 6B32            	  3613: 	bmi.s .0002									; neg and still minus, must be -tve zero
00:00009244 1CFC002D        	  3614: 	move.b #'-',(a6)+
00:00009248 284E            	  3615: 	move.l a6,a4
                            	  3616: .0001:
00:0000924A 82FC0064        	  3617: 	divu #100,d1								; scale d1 - chop last 2 decimal digits
00:0000924E A2C10000        	  3618: 	bin2bcd d1									; convert to BCD
00:00009252 6100F5FC        	  3619: 	bsr BufTetra								; capture in buffer (8 digits)
00:00009256 2200            	  3620: 	move.l d0,d1
00:00009258 A2C10000        	  3621: 	bin2bcd d1									; convert to BCD
00:0000925C 6100F5FE        	  3622: 	bsr BufByte									; capture last 2 digits in buffer
                            	  3623: .0004:
00:00009260 0C140030        	  3624: 	cmpi.b #'0',(a4)						; Is there a leading zero?
00:00009264 6606            	  3625: 	bne.s .0003									; No, we're done shifting
00:00009266 61B2            	  3626: 	bsr ShiftBuf								; Shift the buffer over a character
00:00009268 538E            	  3627: 	subq.l #1,a6								; adjust buffer pos.
00:0000926A 60F4            	  3628: 	bra.s .0004									; go check next character
                            	  3629: .0003:
00:0000926C 4A14            	  3630: 	tst.b (a4)
00:0000926E 6706            	  3631: 	beq.s .0002
00:00009270 0C140020        	  3632: 	cmpi.b #' ',(a4)						; is the buffer empty?
00:00009274 6606            	  3633: 	bne.s .0005
                            	  3634: .0002:
00:00009276 18FC0030        	  3635: 	move.b #'0',(a4)+						; ensure at least a '0'
00:0000927A 2C4C            	  3636: 	move.l a4,a6
                            	  3637: .0005:
00:0000927C 4CDF3803        	  3638: 	movem.l (a7)+,d0/d1/a3/a4/a5
00:00009280 4E75            	  3639: 	rts
                            	  3640: 
                            	  3641: HEX2DEC: 
00:00009282 48E77B00        	  3642: 	movem.l D1-D4/D6-D7,-(A7)   ; SAVE REGISTERS
00:00009286 2E00            	  3643: 	move.l D0,D7          			; SAVE IT HERE
00:00009288 6A08            	  3644: 	bpl.s HX2DC
00:0000928A 4487            	  3645: 	neg.l D7              			; CHANGE TO POSITIVE
00:0000928C 6B4E            	  3646: 	bmi.s HX2DC57          			; SPECIAL CASE (-0)
00:0000928E 1CFC002D        	  3647: 	move.b #'-',(A6)+      			; PUT IN NEG SIGN
                            	  3648: HX2DC:  
00:00009292 4244            	  3649: 	clr.w D4              			; FOR ZERO SURPRESS
00:00009294 7C0A            	  3650: 	moveq #10,D6          			; COUNTER
                            	  3651: HX2DC0:
00:00009296 7401            	  3652:   moveq #1,D2           			; VALUE TO SUB
00:00009298 2206            	  3653: 	move.l D6,D1          			; COUNTER
00:0000929A 5381            	  3654: 	subq.l #1,D1           			; ADJUST - FORM POWER OF TEN
00:0000929C 671A            	  3655: 	beq.s HX2DC2           			; IF POWER IS ZERO
                            	  3656: HX2DC1:
00:0000929E 3602            	  3657:   move.w D2,D3          			; D3=LOWER WORD
00:000092A0 C6FC000A        	  3658: 	mulu #10,D3
00:000092A4 4842            	  3659: 	swap D2              				; D2=UPPER WORD
00:000092A6 C4FC000A        	  3660: 	mulu #10,D2
00:000092AA 4843            	  3661: 	swap D3              				; ADD UPPER TO UPPER
00:000092AC D443            	  3662: 	add.w D3,D2
00:000092AE 4842            	  3663: 	swap D2              				; PUT UPPER IN UPPER
00:000092B0 4843            	  3664: 	swap D3              				; PUT LOWER IN LOWER
00:000092B2 3403            	  3665: 	move.w D3,D2          			; D2=UPPER & LOWER
00:000092B4 5381            	  3666: 	subq.l #1,D1
00:000092B6 66E6            	  3667: 	bne.s HX2DC1
                            	  3668: HX2DC2:
00:000092B8 7000            	  3669:   clr.l D0              			; HOLDS SUB AMT
                            	  3670: HX2DC22:
00:000092BA BE82            	  3671: 	cmp.l D2,D7
00:000092BC 6D06            	  3672:   blt.s HX2DC3           			; IF NO MORE SUB POSSIBLE
00:000092BE 5280            	  3673: 	addq.l #1,D0           			; BUMP SUBS
00:000092C0 9E82            	  3674: 	sub.l D2,D7          				; COUNT DOWN BY POWERS OF TEN
00:000092C2 60F6            	  3675: 	bra.s HX2DC22          			; DO MORE
                            	  3676: HX2DC3:
00:000092C4 4A00            	  3677:   tst.b D0              			; ANY VALUE?
00:000092C6 6604            	  3678: 	bne.s HX2DC4
00:000092C8 4A44            	  3679: 	tst.w D4              			; ZERO SURPRESS
00:000092CA 6708            	  3680: 	beq.s HX2DC5
                            	  3681: HX2DC4:
00:000092CC 06000030        	  3682:   addi.b #$30,D0         		; BINARY TO ASCII
00:000092D0 1CC0            	  3683: 	move.b D0,(A6)+       			; PUT IN BUFFER
00:000092D2 1800            	  3684: 	move.b D0,D4          			; MARK AS NON ZERO SURPRESS
                            	  3685: HX2DC5:
00:000092D4 5386            	  3686:   subq.l #1,D6           			; NEXT POWER
00:000092D6 66BE            	  3687: 	bne.s HX2DC0
00:000092D8 4A44            	  3688: 	tst.w D4              			; SEE IF ANYTHING PRINTED
00:000092DA 6604            	  3689: 	bne.s HX2DC6
                            	  3690: HX2DC57:
00:000092DC 1CFC0030        	  3691:  move.b #'0',(A6)+      			; PRINT AT LEST A ZERO
                            	  3692: HX2DC6:
00:000092E0 4CDF00DE        	  3693: 	movem.l (A7)+,D1-D4/D6-D7 ; RESTORE REGISTERS
00:000092E4 4E75            	  3694:   rts                      	; END OF ROUTINE
                            	  3695: 
                            	  3696: 
                            	  3697: PNT4HX:
                            	  3698: PNT4HEX:
00:000092E6 6000F56E        	  3699: 	bra BufWyde
                            	  3700: PNT6HX:
00:000092EA 4840            	  3701: 	swap d0
00:000092EC 6100F56E        	  3702: 	bsr BufByte
00:000092F0 4840            	  3703: 	swap d0
00:000092F2 6000F562        	  3704: 	bra BufWyde
                            	  3705: PNT8HX:
00:000092F6 6000F558        	  3706: 	bra BufTetra
                            	  3707: 	
                            	  3708: ; FORMAT RELATIVE ADDRESS  AAAAAA+Rn
                            	  3709: ;        ENTER     D0 = VALUE
                            	  3710: ;                  A6 = STORE POINTER
                            	  3711: ;
                            	  3712: FRELADDR:
00:000092FA 48E74780        	  3713: 	movem.l D1/D5-D7/A0,-(A7)
00:000092FE 41F900040880    	  3714: 	lea OFFSET,A0
00:00009304 7EFF            	  3715: 	moveq #-1,D7        	; D7 = DIFF. BEST FIT
00:00009306 7C00            	  3716: 	clr.l D6            	; D6 = OFFSET POSITION
                            	  3717: FREL10:
00:00009308 2200            	  3718:   move.l D0,D1
00:0000930A 4A90            	  3719: 	tst.l (a0)
00:0000930C 670C            	  3720: 	beq.s FREL15         	; ZERO OFFSET
00:0000930E 9290            	  3721: 	sub.l (a0),d1      		; D1 = DIFF.
00:00009310 6B08            	  3722: 	bmi.s FREL15         	; NO FIT
00:00009312 B287            	  3723: 	cmp.l D7,D1
00:00009314 6404            	  3724: 	bcc.s FREL15         	; OLD FIT BETTER
00:00009316 2E01            	  3725: 	move.l D1,D7        	; D7 = NEW BEST FIT
00:00009318 2A06            	  3726: 	move.l D6,D5        	; D5 = POSITION
                            	  3727: FREL15:
00:0000931A 5888            	  3728:   addq.l #4,A0
00:0000931C 5286            	  3729: 	addq.l #1,D6
00:0000931E 0C460008        	  3730: 	cmpi.w #8,D6
00:00009322 66E4            	  3731: 	bne.s FREL10         	; MORE OFFSETS TO CHECK
00:00009324 4A87            	  3732: 	tst.l D7
00:00009326 6B1E            	  3733: 	bmi.s FREL25         	; NO FIT
00:00009328 4A46            	  3734: 	tst D6
00:0000932A 6608            	  3735: 	bne.s FREL20
00:0000932C 4AB900040880    	  3736: 	tst.l OFFSET
00:00009332 6712            	  3737: 	beq.s FREL25         	; R0 = 000000; NO FIT
                            	  3738: FREL20:
00:00009334 2007            	  3739:   move.l D7,D0
00:00009336 61B2            	  3740: 	bsr	PNT6HX         		; FORMAT OFFSET
00:00009338 1CFC002B        	  3741: 	move.b #'+',(A6)+    	; +
00:0000933C 1CFC0052        	  3742: 	move.b #'R',(A6)+    	; R
00:00009340 06050030        	  3743: 	addi.b #'0',D5       	; MAKE ASCII
00:00009344 600A            	  3744: 	bra.s FREL30
                            	  3745: FREL25:
00:00009346 61A2            	  3746:   bsr	PNT6HX         	; FORMAT ADDRESS AS IS
00:00009348 1A3C0020        	  3747: 	move.b #BLANK,D5
00:0000934C 1CC5            	  3748: 	move.b D5,(A6)+     	; THREE SPACES FOR ALIGNMENT
00:0000934E 1CC5            	  3749: 	move.b D5,(A6)+
                            	  3750: FREL30:
00:00009350 1CC5            	  3751:   move.b D5,(A6)+
00:00009352 4CDF01E2        	  3752: 	movem.l (A7)+,D1/D5-D7/A0
00:00009356 4E75            	  3753: 	rts
                            	  3754: 
                            	  3755: 	include "dcode68k.x68"

Source: "dcode68k.x68"
                            	     1: ;-------------------------------------------------------------------------
                            	     2: ; File DCODE68K  68K ONE LINE DISASSEMBLER                        07/28/82
                            	     3: ;
                            	     4: ;        CALLING SEQUENCE:
                            	     5: ;   D0,D1,D2 = CODE TO BE DISASSEMBLED
                            	     6: ;   A4 = VALUE OF PROGRAM COUNTER FOR THE CODE
                            	     7: ;   A5 = POINTER TO STORE DATA (BUFSIZE = 80 ASSUMED)
                            	     8: ;        JSR       DCODE68K
                            	     9: ;
                            	    10: ;        RETURN:
                            	    11: ;   A4 = VALUE OF PROGRAM COUNTER FOR NEXT INSTRUCTION
                            	    12: ;   A5 = POINTER TO LINE AS DISASSEMBLED
                            	    13: ;   A6 = POINTER TO END OF LINE
                            	    14: ;
                            	    15: ; 01234567890123456789012345678901234567890123456789
                            	    16: ; AAAAAA FDATA.DDDDDDDDDDDDDD FOC.... FOP.....
                            	    17: ;
                            	    18: ;FDATA   =       10             DATA FIELD
                            	    19: ;FOC     =       31             OP-CODE FIELD
                            	    20: ;FOP     =       39             OPERAND FIELD
                            	    21: ;
                            	    22: ; CAUSES ORGIN MODULO 4
                            	    23: ; LONG:    macro
                            	    24: ;         .align  2
                            	    25: ;         DS.B    (;-X)&2
                            	    26: ;         endm
                            	    27: LOCVARSZ = 16
                            	    28: BUFSIZE  = 63
                            	    29: FDATA    =       10        ; OFFSET TO DATA
                            	    30: FOL      =       31        ; OFFSET TO LABEL
                            	    31: FOC      =       31        ; OFFSET TO OP-CODE (NO LABEL FIELD)
                            	    32: FOP      =       39        ; OFFSET TO OPERAND (NO LABEL FIELD)
                            	    33: 
                            	    34: 					code
                            	    35: 					even
                            	    36: X:       ;              ; BASE ADDRESS THIS MODULE
                            	    37:                                 ; LONG
                            	    38: 
                            	    39: ;  MOVEM REGISTERS TO EA
                            	    40: ;
                            	    41: ;        01001D001S......
                            	    42: ;        ..........XXXXXX       EFFECTIVE ADDRESS
                            	    43: ;        .........0......       WORD
                            	    44: ;        .........1......       LONG
                            	    45: ;        .....0..........       REGISTER TO MEMORY
                            	    46: ;        .....1..........       MEMORY TO REGISTER
                            	    47: ;
                            	    48: ;
                            	    49: IMOVEMFR:
00:00009358 610006F8        	    50:          BSR     MOVEMS         ; SIZE
                            	    51: 
00:0000935C 7C38            	    52:          MOVEQ   #$0038,D6
00:0000935E CC54            	    53:          AND.W   (A4),D6
00:00009360 0C460020        	    54:          CMPI.W  #$0020,D6
00:00009364 6706            	    55:          BEQ.S   IM7788         ; PREDECREMENT MODE
                            	    56: 
00:00009366 7C01            	    57:          MOVEQ   #1,D6         ; D6 = INCREMENTER (BIT POSITION)
00:00009368 7200            	    58:          MOVEQ   #0,D1         ; D1 = BIT POSITION
00:0000936A 6004            	    59:          BRA.S   IM7799
                            	    60: 
00:0000936C 7CFF            	    61: IM7788:  MOVEQ   #-1,D6        ; D6 = DECREMENTER (BIT POSITION)
00:0000936E 720F            	    62:          MOVEQ   #15,D1        ; D1 = BIT POSITION
00:00009370 610006F4        	    63: IM7799:  BSR     MOVEMR         ; BUILD MASK WORD
                            	    64: 
00:00009374 1CFC002C        	    65:          MOVE.B  #',',(A6)+    ; STORE COMMA
                            	    66: 
00:00009378 5483            	    67:          ADDQ.L  #2,D3
00:0000937A 3814            	    68:          MOVE.W  (A4),D4
00:0000937C 3E3C01F4        	    69:          MOVE.W  #$1F4,D7     ; CONTROL + PREDECREMENT
00:00009380 6100050E        	    70:          BSR     EEA
00:00009384 601A            	    71:          BRA.S   CS16           ; COMMON
                            	    72: 
                            	    73:          
                            	    74: 
                            	    75: ; MOVEM  EA  TO REGISTERS
                            	    76: ;
00:00009386 610006CA        	    77: IMOVEMTR:BSR     MOVEMS         ; SIZE
00:0000938A 5483            	    78:          ADDQ.L  #2,D3
00:0000938C 3E3C07EC        	    79:          MOVE.W  #$7EC,D7     ; CONTROL + POSTINCREMENT
00:00009390 610004FE        	    80:          BSR     EEA
                            	    81: 
00:00009394 1CFC002C        	    82:          MOVE.B  #',',(A6)+    ; STORE COMMA
                            	    83: 
00:00009398 7C01            	    84:          MOVEQ   #1,D6         ; D6 = BIT POSITION INCREMENTER
00:0000939A 7200            	    85:          MOVEQ   #0,D1         ; D1 = BIT POSITION
00:0000939C 610006C8        	    86:          BSR     MOVEMR
                            	    87: 
00:000093A0 606C            	    88: CS16:    BRA.S   CS15           ; COMMON
                            	    89: 
                            	    90:          
                            	    91: ISTOP:
00:000093A2 302C0002        	    92: 	move.w 2(A4),D0
00:000093A6 1CFC0023        	    93: 	move.b #'#',(A6)+    	; IMMEDIATE
00:000093AA 1CFC0024        	    94: 	move.b #'$',(A6)+    	; HEX
00:000093AE 6100FF36        	    95: 	bsr PNT4HX         		; VALUE
00:000093B2 600007C6        	    96: 	bra COMMON4
                            	    97: 
                            	    98: IMMED:   ;.align  2              ; ADD  AND  CMP #  EOR  OR  SUB
00:000093B6 6100044E        	    99: 	bsr FORMSIZE
00:000093BA 5483            	   100: 	addq.l #2,D3         	; SIZE = 4
00:000093BC 1CFC0023        	   101: 	move.b #'#',(A6)+    	; IMMEDIATE
00:000093C0 7000            	   102: 	clr.l D0
00:000093C2 302C0002        	   103: 	move.w 2(A4),D0     	; D0 = EXTENSION WORD
00:000093C6 3214            	   104: 	move.w (A4),D1
00:000093C8 EC49            	   105: 	lsr.w #6,D1
00:000093CA 02410003        	   106: 	andi.w #3,D1
00:000093CE 6746            	   107: 	beq.s IMMED65        	; .BYTE
00:000093D0 0C010001        	   108: 	cmpi.b #1,D1
00:000093D4 6750            	   109: 	beq.s IMMED75        	; .WORD
00:000093D6 5483            	   110: 	addq.l #2,D3         	; .LONG    SIZE = 6
00:000093D8 202C0002        	   111: 	move.l 2(A4),D0     	; D0 = LONG EXTENSION WORD
                            	   112: 
                            	   113: IMMED45:
00:000093DC 6100FEA4        	   114: 	bsr HEX2DEC        		; DECIMAL
00:000093E0 1CC5            	   115: 	move.b D5,(A6)+     	; COMMA SEPARATOR
00:000093E2 3014            	   116: 	move (A4),D0
00:000093E4 0240003F        	   117: 	andi.w #$003F,D0
00:000093E8 0C40003C        	   118: 	cmpi.w #$003C,D0    	; DESTINATION ADDRESS MODE 111100  "SR"
00:000093EC 6622            	   119: 	bne.s IMMED55        	; NOT FOUND
00:000093EE 3014            	   120: 	move.w (A4),D0      	; "SR"  ILLEGAL FOR
00:000093F0 02404000        	   121: 	andi.w #$4000,D0    	; ADDI   SUBI  CMPI
00:000093F4 660007AE        	   122: 	bne FERROR         		; 0600   0400  0C00
00:000093F8 3214            	   123: 	move.w (A4),D1
00:000093FA 024100C0        	   124: 	andi.w #$00C0,D1
00:000093FE 0C410080        	   125: 	cmpi.w #$0080,D1
00:00009402 670007A0        	   126: 	beq FERROR         		; .LONG NOT ALLOWED
00:00009406 1CFC0053        	   127: 	move.b #'S',(A6)+    	; #,SR FOR ANDI, EORI, ORI
00:0000940A 1CFC0052        	   128: 	move.b #'R',(A6)+
                            	   129: CS15:
00:0000940E 603C            	   130: 	bra.s CS14           	; COMMON
                            	   131: IMMED55:
00:00009410 6100047E        	   132: 	bsr EEA
00:00009414 6036            	   133: 	bra.s CS14           	; COMMON
                            	   134: IMMED65:
00:00009416 2200            	   135: 	move.l D0,D1        	; D1 = XXXXXXXX........
00:00009418 E049            	   136: 	lsr.w #8,D1         	; D1 = 00000000XXXXXXXX
00:0000941A 670A            	   137: 	beq.s IMMED75
00:0000941C 2200            	   138: 	move.l D0,D1
00:0000941E EE41            	   139: 	asr.w #7,D1
00:00009420 5241            	   140: 	addq.w #1,D1         ; CHECK FOR NEGATIVE
00:00009422 66000780        	   141: 	bne FERROR
                            	   142: IMMED75:
00:00009426 48C0            	   143: 	ext.l D0
00:00009428 60B2            	   144: 	bra.s IMMED45
                            	   145: 
                            	   146: ;  BIT   5432109876543210
                            	   147: ;        ....RRRMMM......       ; DESTINATION REGISTER MODE
                            	   148: ;        ..........MMMRRR       ; SOURCE MODE REGISTER
                            	   149: ;        0001............       ; .BYTE
                            	   150: ;        0011............       ; .WORD
                            	   151: ;        0010............       ; .LONG
                            	   152: ;
                            	   153: ; IF BYTE SIZE; DESTINATION ADDRESS DIRECT NOT ALLOWED
                            	   154:    
                            	   155: IMOVE:
00:0000942A 6000037E        	   156: 	bra IMOVEA1
                            	   157: 
                            	   158: ILINK:
00:0000942E 6158            	   159: 	bsr.s FORMREGA
00:00009430 1CC5            	   160: 	move.b D5,(A6)+     ; COMMA SERARATOR
00:00009432 1CFC0023        	   161: 	move.b #'#',(A6)+
00:00009436 302C0002        	   162: 	move.w 2(A4),D0
00:0000943A 48C0            	   163: 	ext.l D0
00:0000943C 6100FE44        	   164: 	bsr HEX2DEC        	; DECIMAL DISPLACEMENT
00:00009440 60000738        	   165: 	bra COMMON4
                            	   166:          
                            	   167:          ; CLR  NEG  NEGX  NOT TST
                            	   168: FORM1:
00:00009444 610003C0        	   169: 	bsr FORMSIZE
                            	   170: ;                               ; NBCD TAS
                            	   171: FORM1A:
00:00009448 61000446        	   172: 	bsr EEA            	; DATA ALTERABLE ONLY
                            	   173: CS14:
00:0000944C 6068            	   174: 	bra.s CS13          ; COMMON
                            	   175:      
                            	   176: 
                            	   177: 				;.align  2              ; EXT  SWAP
                            	   178: FORM3:   
00:0000944E 6148            	   179: 	bsr.s FORMREGD
00:00009450 6064            	   180: 	bra.s CS13           	; COMMON
                            	   181:          
                            	   182: 
                            	   183: FORM4:	;   .align  2              ; TRAP
00:00009452 1CFC0023        	   184:          MOVE.B  #'#',(A6)+
00:00009456 3014            	   185:          MOVE.W  (A4),D0
00:00009458 02800000000F    	   186:          ANDI.L  #$0F,D0
00:0000945E 6100FE22        	   187:          BSR     HEX2DEC        ; DECIMAL
00:00009462 6052            	   188:          BRA.S   CS13           ; COMMON
                            	   189: 
                            	   190:          
                            	   191: 
                            	   192: FORM5:	;   .align  2              ; UNLNK
00:00009464 6122            	   193:          BSR.S   FORMREGA
00:00009466 604E            	   194:          BRA.S   CS13           ; COMMON
                            	   195: 
                            	   196: ;  BIT   5432109876543210
                            	   197: ;        ....RRR.........       ; ADDRESS REGISTER
                            	   198: ;        ..........XXXXXX       ; EFFECTIVE ADDRESS
                            	   199: ;
                            	   200:          
                            	   201: 
                            	   202: FORM6A:	;  .align  2              ; LEA
00:00009468 3E3C07E4        	   203:          MOVE.W  #$7E4,D7     ; CONTROL ADDRESSING
00:0000946C 6150            	   204:          BSR.S   EEA10
                            	   205: 
00:0000946E 1CC5            	   206:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   207: 
00:00009470 3814            	   208:          MOVE.W  (A4),D4
00:00009472 EF5C            	   209:          ROL.W   #7,D4
00:00009474 6112            	   210:          BSR.S   FORMREGA
00:00009476 603E            	   211:          BRA.S   CS13           ; COMMON
                            	   212: 
                            	   213: ;  BIT   5432109876543210
                            	   214: ;        ....DDD.........       ; DATA REGISTER
                            	   215: ;        ..........XXXXXX       ; EFFECTIVE ADDRESS
                            	   216: ;
                            	   217:          
                            	   218: 
                            	   219: FORM6D:  ;.align  2              ; CHK  DIVS  DIVU  MULS  MULU
00:00009478 3E3C0FFD        	   220:          MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000947C 6140            	   221:          BSR.S   EEA10
                            	   222: 
00:0000947E 1CC5            	   223:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   224: 
00:00009480 3814            	   225:          MOVE.W  (A4),D4
00:00009482 EF5C            	   226:          ROL.W   #7,D4
00:00009484 6112            	   227:          BSR.S   FORMREGD
00:00009486 602E            	   228:          BRA.S   CS13           ; COMMON
                            	   229: 
00:00009488 1CFC0041        	   230: FORMREGA:MOVE.B  #'A',(A6)+    ; FORMAT A@
00:0000948C 02040007        	   231: FORMREG5:ANDI.B  #$07,D4
00:00009490 00040030        	   232:          ORI.B   #'0',D4
00:00009494 1CC4            	   233:          MOVE.B  D4,(A6)+
00:00009496 4E75            	   234:          RTS
                            	   235: 
00:00009498 1CFC0044        	   236: FORMREGD:MOVE.B  #'D',(A6)+    ; FORMAT D@
00:0000949C 60EE            	   237:          BRA.S   FORMREG5
                            	   238: 
                            	   239: ;  BIT   5432109876543210
                            	   240: ;        ....DDD......DDD       ; DATA REGISTERS
                            	   241: ;
                            	   242:         
                            	   243: FORM7: ;  .align  2              ; EXG
00:0000949E EF5C            	   244: 	rol.w #7,D4
00:000094A0 61F6            	   245: 	bsr.s FORMREGD
00:000094A2 1CC5            	   246: 	move.b D5,(A6)+     	; COMMA SEPARATOR
00:000094A4 3814            	   247: 	move.w (A4),D4
00:000094A6 61F0            	   248: 	bsr.s FORMREGD
00:000094A8 600C            	   249: 	bra.s CS13           	; COMMON
                            	   250: 
                            	   251: ;  BIT   5432109876543210
                            	   252: ;        ....AAA......AAA       ; ADDRESS REGISTERS
                            	   253: ;
                            	   254:          
                            	   255: FORM8:   ;.align  2              ; EXG
00:000094AA EF5C            	   256:          ROL.W   #7,D4
00:000094AC 61DA            	   257:          BSR.S   FORMREGA
                            	   258: 
                            	   259: FORM815:
00:000094AE 1CFC002C        	   260: 	MOVE.B  #',',(A6)+    ; COMMA SEPARATOR
00:000094B2 3814            	   261: 	MOVE.W  (A4),D4
00:000094B4 61D2            	   262: 	BSR.S   FORMREGA
                            	   263: CS13:
00:000094B6 6078            	   264: 	BRA     CS12           ; COMMON
                            	   265: 
                            	   266: ;  BIT   5432109876543210
                            	   267: ;        ....DDD.........       ; DATA REGISTER
                            	   268: ;        .............AAA       ; ADDRESS REGISTER
                            	   269: ;
                            	   270:          
                            	   271: 
                            	   272: FORM9:   ;.align  2              ; EXG
00:000094B8 EF5C            	   273:          ROL.W   #7,D4
00:000094BA 61DC            	   274:          BSR.S   FORMREGD       ; DATA REGISTER
00:000094BC 60F0            	   275:          BRA.S   FORM815
                            	   276: 
00:000094BE 600003D0        	   277: EEA10:   BRA     EEA
                            	   278: 
                            	   279: ;  BIT   5432109876543210
                            	   280: ;        ..........AAAAAA         EFFECTIVE ADDRESS
                            	   281: ;        .......MMM......         OP-MODE
                            	   282: ;        ....RRR.........         D-REGISTER
                            	   283: ;        .......011......         WORD  EA,A@
                            	   284: ;        .......111......         LONG  EA,A@
                            	   285: ;        .......000......         EA,D@ BYTE (ADDRESS REGISTER DIRECT NOT ALLOWED)
                            	   286: ;        .......0........         EA,D@
                            	   287: ;        .......1........         D@,EA
                            	   288: ;        ........00......         BYTE
                            	   289: ;        ........01......         WORD
                            	   290: ;        ........10......         LONG
                            	   291: ;
                            	   292:          
                            	   293: 
                            	   294: ;                               ADD <EA>,A@   CMP <EA>,A@   SUB <EA>,A@
                            	   295: FORM10EX:	;.align  2              ; ADD  CMP  SUB
00:000094C2 3E3C0FFF        	   296:          MOVE.W  #$FFF,D7     ; ALL MODES ALLOWED
00:000094C6 2004            	   297:          MOVE.L  D4,D0
00:000094C8 024001C0        	   298:          ANDI.W  #$01C0,D0
00:000094CC 6738            	   299:          BEQ.S   FORM103        ; .......000......
00:000094CE 0C4001C0        	   300:          CMPI.W  #$01C0,D0
00:000094D2 6710            	   301:          BEQ.S   FORM10E3       ; .......111......
00:000094D4 0C4000C0        	   302:          CMPI.W  #$00C0,D0
00:000094D8 661E            	   303:          BNE.S   FORM10E6
                            	   304: 
00:000094DA 1AFC002E        	   305:          MOVE.B  #'.',(A5)+    ; .......011......       STORE PERIOD
00:000094DE 1AFC0057        	   306:          MOVE.B  #'W',(A5)+
00:000094E2 6008            	   307:          BRA.S   FORM10E4
                            	   308: 
00:000094E4 1AFC002E        	   309: FORM10E3:MOVE.B  #'.',(A5)+
00:000094E8 1AFC004C        	   310:          MOVE.B  #'L',(A5)+
                            	   311: 
00:000094EC 61D0            	   312: FORM10E4:BSR.S   EEA10
                            	   313: 
00:000094EE 1CC5            	   314:          MOVE.B  D5,(A6)+     ; STORE COMMA SEPARATOR
                            	   315: 
00:000094F0 3814            	   316:          MOVE.W  (A4),D4
00:000094F2 EF5C            	   317:          ROL.W   #7,D4
00:000094F4 6192            	   318:          BSR.S   FORMREGA       ; <EA>,A@
00:000094F6 6038            	   319:          BRA.S   CS12           ; COMMON
                            	   320: 
00:000094F8 08140000        	   321: FORM10E6:BTST.B  #0,(A4)
00:000094FC 661C            	   322:          BNE.S   FORM105        ; .......1........    D@,<EA>
00:000094FE 600A            	   323:          BRA.S   FORM104        ; .......0........    <EA>,D@
                            	   324: 
                            	   325: ;  BIT   5432109876543210
                            	   326: ;        ..........AAAAAA       EFFECTIVE ADDRESS
                            	   327: ;        .......MMM......       OP-MODE
                            	   328: ;        ....RRR.........       D-REGISTER
                            	   329: ;        .......0........       EA,D@
                            	   330: ;        .......1........       D@,EA
                            	   331: ;        ........00......       BYTE
                            	   332: ;        ........01......       WORD
                            	   333: ;        ........10......       LONG
                            	   334: 
                            	   335:          
                            	   336: 
                            	   337: FORM10:  ;.align  2              ; AND  EOR  OR
00:00009500 08140000        	   338:          BTST.B  #0,(A4)
00:00009504 6614            	   339:          BNE.S   FORM105
                            	   340: 
00:00009506 3E3C0FFD        	   341: FORM103: MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:0000950A 610002FA        	   342: FORM104: BSR     FORMSIZE
00:0000950E 61AE            	   343:          BSR.S   EEA10          ; <EA>,D@
                            	   344: 
00:00009510 1CC5            	   345:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   346: 
00:00009512 1814            	   347:          MOVE.B  (A4),D4
00:00009514 E20C            	   348:          LSR.B   #1,D4
00:00009516 6180            	   349:          BSR     FORMREGD
00:00009518 6016            	   350:          BRA.S   CS12           ; COMMON
                            	   351: 
00:0000951A 610002EA        	   352: FORM105: BSR     FORMSIZE       ; D@,<EA>
00:0000951E 1814            	   353:          MOVE.B  (A4),D4
00:00009520 E20C            	   354:          LSR.B   #1,D4
00:00009522 6100FF74        	   355:          BSR     FORMREGD
                            	   356: 
00:00009526 1CC5            	   357:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   358: 
00:00009528 3814            	   359:          MOVE.W  (A4),D4
00:0000952A 3E3C01FD        	   360:          MOVE.W  #$1FD,D7     ; ALTERABLE MEMORY ADDRESSING
00:0000952E 618E            	   361:          BSR.S   EEA10
00:00009530 6000064A        	   362: CS12:    BRA     COMMON
                            	   363: 
                            	   364:          
                            	   365: 
                            	   366: ;                               PEA     (JMP  JSR)
00:00009534 3E3C07E4        	   367: FORM11:  MOVE.W  #$7E4,D7     ; CONTROL ADDERSSING
00:00009538 6184            	   368:          BSR     EEA10
00:0000953A 60F4            	   369:          BRA.S   CS12           ; COMMON
                            	   370: 
                            	   371:          
                            	   372: 
                            	   373: ;                               ; JMP  JSR
00:0000953C 2004            	   374: FORM11SL:MOVE.L  D4,D0        ; LOOK FOR .S  OR  .L
00:0000953E 0240003F        	   375:          ANDI.W  #$3F,D0
00:00009542 0C400038        	   376:          CMPI.W  #$38,D0
00:00009546 6608            	   377:          BNE.S   FORM112        ; NOT .S
00:00009548 1AFC002E        	   378:          MOVE.B  #'.',(A5)+    ; PERIOD
00:0000954C 1AFC0053        	   379:          MOVE.B  #'S',(A5)+    ; S
00:00009550 0C400039        	   380: FORM112: CMPI.W  #$39,D0
00:00009554 6608            	   381:          BNE.S   FORM114
00:00009556 1AFC002E        	   382:          MOVE.B  #'.',(A5)+    ; PERIOD
00:0000955A 1AFC004C        	   383:          MOVE.B  #'L',(A5)+    ; L
00:0000955E 60D4            	   384: FORM114: BRA.S   FORM11
                            	   385: 
                            	   386: ;  BIT   5432109876543210
                            	   387: ;        ....XXX.....0...       DATA DESTINATION REGISTER
                            	   388: ;        ....XXX.....1...       ADDRESS REGISTER
                            	   389: ;        ....XXX.00......       BYTE
                            	   390: ;        ........01......       WORD
                            	   391: ;        ........10......       LONG
                            	   392: ;        ............0...       DATA REGISTER TO DATA REGISTER
                            	   393: ;        ............1...       MEMORY TO MEMORY
                            	   394: ;        ............0xXX       DATA SOURCE REGISTER
                            	   395: ;        ............1XXX       ADDRESS SOURCE REGISTER
                            	   396: ;
                            	   397:          
                            	   398: 
                            	   399: FORM12:  ;.align  2              ; ABCD  ADDX  SBCD  SUBX
00:00009560 610002A4        	   400:          BSR     FORMSIZE
                            	   401: 
00:00009564 08040003        	   402:          BTST    #3,D4
00:00009568 6610            	   403:          BNE.S   FORM125
                            	   404: 
00:0000956A 6100FF2C        	   405:          BSR     FORMREGD       ; D@,D@;   FORMAT SOURCE
                            	   406: 
00:0000956E 1CC5            	   407:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   408: 
00:00009570 1814            	   409:          MOVE.B  (A4),D4
00:00009572 E20C            	   410:          LSR.B   #1,D4
00:00009574 6100FF22        	   411:          BSR     FORMREGD       ; FORMAT DESTINATION
00:00009578 6046            	   412:          BRA.S   CS11           ; COMMON
                            	   413: 
00:0000957A 1CFC002D        	   414: FORM125: MOVE.B  #'-',(A6)+    ; -
00:0000957E 1CFC0028        	   415:          MOVE.B  #'(',(A6)+    ; (
00:00009582 6100FF04        	   416:          BSR     FORMREGA       ; A@    SOURCE
                            	   417: 
00:00009586 203C282D2C29    	   418:          MOVE.L  #$282d2c29,D0 ; ),-(
00:0000958C 6152            	   419:          BSR.S   SCHR           ; STORE CHARS
                            	   420: 
00:0000958E 1814            	   421:          MOVE.B  (A4),D4
00:00009590 E20C            	   422:          LSR.B   #1,D4
00:00009592 6100FEF4        	   423:          BSR     FORMREGA       ; A@   DESTINATION
00:00009596 1CFC0029        	   424:          MOVE.B  #')',(A6)+
00:0000959A 6024            	   425:          BRA.S   CS11           ; COMMON
                            	   426: 
                            	   427: ;  BIT   5432109876543210
                            	   428: ;        ....XXX.....1...       ADDRESS REGISTER    DESTINATION
                            	   429: ;        ....XXX.00......       BYTE
                            	   430: ;        ........01......       WORD
                            	   431: ;        ........10......       LONG
                            	   432: ;        ............1...       MEMORY TO MEMORY
                            	   433: ;        ............1XXX       ADDRESS SOURCE REGISTER
                            	   434: ;
                            	   435:          
                            	   436: 
                            	   437: FORM12A: ;.align  2              ; CMPM
00:0000959C 61000268        	   438:          BSR     FORMSIZE
                            	   439: 
00:000095A0 1CFC0028        	   440:          MOVE.B  #'(',(A6)+    ; (
00:000095A4 6100FEE2        	   441:          BSR     FORMREGA       ; A@
                            	   442: 
00:000095A8 203C282C2B29    	   443:          MOVE.L  #$282c2b29,D0  ; )+,(
00:000095AE 6130            	   444:          BSR.S   SCHR           ; STORE CHARS
                            	   445: 
00:000095B0 1814            	   446:          MOVE.B  (A4),D4
00:000095B2 E20C            	   447:          LSR.B   #1,D4
00:000095B4 6100FED2        	   448:          BSR     FORMREGA       ; A@
00:000095B8 1CFC0029        	   449:          MOVE.B  #')',(A6)+
00:000095BC 1CFC002B        	   450:          MOVE.B  #'+',(A6)+
00:000095C0 600005BA        	   451: CS11:    BRA     COMMON
                            	   452: 
                            	   453:          
                            	   454: 
00:000095C4 60000210        	   455: IQUICK:  BRA     IQUICKA        ; ADDQ  SUBQ
                            	   456: 
                            	   457: ;  BIT   5432109876543210
                            	   458: ;        0111...0........       FIXED
                            	   459: ;        ....RRR.........       DATA REGISTER
                            	   460: ;        ........DDDDDDDD       SIGN EXTENDED DATA
                            	   461: ;
                            	   462:          
                            	   463: 
                            	   464: IMOVEQ:  ;.align  2
00:000095C8 1CFC0023        	   465:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	   466: 
00:000095CC 3014            	   467:          MOVE.W  (A4),D0
00:000095CE 4880            	   468:          EXT.W   D0
00:000095D0 48C0            	   469:          EXT.L   D0
00:000095D2 6100FCAE        	   470:          BSR     HEX2DEC        ; DECIMAL
                            	   471: 
00:000095D6 1CC5            	   472:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   473: 
00:000095D8 EF5C            	   474:          ROL.W   #7,D4
00:000095DA 6100FEBC        	   475:          BSR     FORMREGD
00:000095DE 60E0            	   476:          BRA.S   CS11           ; COMMON
                            	   477: 
00:000095E0 1CC0            	   478: SCHR:    MOVE.B  D0,(A6)+     ; OUTPUT STRING
00:000095E2 E088            	   479:          LSR.L   #8,D0
00:000095E4 66FA            	   480:          BNE.S   SCHR           ; MORE TO OUTPUT
00:000095E6 4E75            	   481:          RTS
                            	   482: 
                            	   483: ; MOVE FROM SR  (STATUS REGISTER)
                            	   484: ;
                            	   485:          
                            	   486: 
00:000095E8 203C002C5253    	   487: IMVFSR:  MOVE.L  #$002c5253,D0 ; SR,
                            	   488: 
00:000095EE 61F0            	   489:          BSR.S   SCHR
00:000095F0 6100029E        	   490:          BSR     EEA            ; DATA ALTERABLE
00:000095F4 60CA            	   491:          BRA.S   CS11           ; COMMON
                            	   492: 
                            	   493: ; MOVE FROM USP (USER STACK POINTER)
                            	   494: ;
                            	   495:          
                            	   496: 
00:000095F6 203C2C505355    	   497: IMVFUSP: MOVE.L  #$2c505355,D0 ; USP,
00:000095FC 61E2            	   498:          BSR.S   SCHR
00:000095FE 6100FE88        	   499:          BSR     FORMREGA
00:00009602 60BC            	   500:          BRA.S   CS11           ; COMMON
                            	   501: 
                            	   502: ; MOVE TO SR (STATUS REGISTER)
                            	   503: ;
                            	   504:          
                            	   505: 
00:00009604 3E3C0FFD        	   506: IMVTSR:  MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:00009608 61000286        	   507:          BSR     EEA
00:0000960C 203C0052532C    	   508:          MOVE.L  #$0052532c,D0 ; ,SR
00:00009612 61CC            	   509: IMVT44:  BSR.S   SCHR
00:00009614 60AA            	   510:          BRA.S   CS11           ; COMMON
                            	   511: 
                            	   512: ; MOVE TO USP (USER STACK POINTER)
                            	   513: ;
                            	   514:          
                            	   515: 
00:00009616 6100FE70        	   516: IMVTUSP: BSR     FORMREGA
00:0000961A 203C5053552C    	   517:          MOVE.L  #$5053552c,D0 ; ,USP
00:00009620 60F0            	   518:          BRA.S   IMVT44
                            	   519: 
                            	   520: ;  MOVE TO CCR (CONDITION CODE REGISTER)
                            	   521: ;
                            	   522:          
                            	   523: 
00:00009622 3E3C0FFD        	   524: IMVTCCR: MOVE.W  #$FFD,D7     ; DATA ADDRESSING
00:00009626 61000268        	   525:          BSR     EEA
00:0000962A 203C5243432C    	   526:          MOVE.L  #$5243432c,D0 ; ,CCR
00:00009630 60E0            	   527:          BRA.S   IMVT44
                            	   528: 
                            	   529: ;  BIT   5432109876543210
                            	   530: ;        0000...1..001...       FIXED
                            	   531: ;        ....XXX.........       DATA REGISTER
                            	   532: ;        ........0.......       MEMORY TO REGISTER
                            	   533: ;        ........1.......       REGISTER TO MEMORY
                            	   534: ;        .........0......       WORD
                            	   535: ;        .........1......       LONG
                            	   536: ;        .............XXX       ADDRESS REGISTER
                            	   537: ;
                            	   538:          
                            	   539: 
                            	   540: IMOVEP:  ;.align  2
00:00009632 1AFC002E        	   541:          MOVE.B  #'.',(A5)+    ; D@,#(A@)
00:00009636 303C4C57        	   542:          MOVE.W  #$4c57,D0    ; "LW"
00:0000963A 08040006        	   543:          BTST    #6,D4
00:0000963E 6702            	   544:          BEQ.S   IMOVEP11       ; USE "W"
00:00009640 E048            	   545:          LSR.W   #8,D0         ; USE "L"
00:00009642 1AC0            	   546: IMOVEP11:MOVE.B  D0,(A5)+     ; LENGTH
                            	   547: 
00:00009644 1814            	   548:          MOVE.B  (A4),D4
00:00009646 E20C            	   549:          LSR.B   #1,D4
                            	   550: 
00:00009648 082C00070001    	   551:          BTST.B  #7,1(A4)
00:0000964E 670E            	   552:          BEQ.S   IMOVEP35
                            	   553: 
00:00009650 6100FE46        	   554:          BSR     FORMREGD       ; D@,$HHHH(A@)
                            	   555: 
00:00009654 1CC5            	   556:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   557: 
00:00009656 3814            	   558:          MOVE.W  (A4),D4
00:00009658 6112            	   559:          BSR.S   IMOVEP66
00:0000965A 6000051E        	   560: CS20:    BRA     COMMON4
                            	   561: 
00:0000965E 610C            	   562: IMOVEP35:BSR.S   IMOVEP66       ; $HHHH(A@),D@
                            	   563: 
00:00009660 1CC5            	   564:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   565: 
00:00009662 1814            	   566:          MOVE.B  (A4),D4
00:00009664 E20C            	   567:          LSR.B   #1,D4
00:00009666 6100FE30        	   568:          BSR     FORMREGD
00:0000966A 60EE            	   569:          BRA.S   CS20           ; COMMON4
                            	   570: 
00:0000966C 1CFC0024        	   571: IMOVEP66:MOVE.B  #'$',(A6)+    ; FORMAT DISPLACEMENT
00:00009670 302C0002        	   572:          MOVE.W  2(A4),D0
00:00009674 6100FC70        	   573:          BSR     PNT4HX
                            	   574: 
00:00009678 1CFC0028        	   575:          MOVE.B  #'(',(A6)+
                            	   576: 
00:0000967C 3814            	   577:          MOVE.W  (A4),D4
00:0000967E 6100FE08        	   578:          BSR     FORMREGA
00:00009682 1CFC0029        	   579:          MOVE.B  #')',(A6)+
00:00009686 4E75            	   580:          RTS
                            	   581: 
                            	   582: SCOMMON:
00:00009688 600004F2        	   583: 	bra COMMON         ; NOP RESET RTE RTR RTS TRAPV
                            	   584:         
                            	   585: 
00:0000968C 610000E4        	   586: ISCC:    BSR     ICCCC          ; GET REST OF OP-CODE
00:00009690 610001FE        	   587:          BSR     EEA            ; DATA ALTERABLE
00:00009694 60F2            	   588:          BRA.S   SCOMMON
                            	   589: 
                            	   590:          
                            	   591: 
                            	   592: IDBCC:   ;.align  2              ; DB--
00:00009696 3814            	   593:          MOVE.W  (A4),D4
00:00009698 6100FDFE        	   594:          BSR     FORMREGD
                            	   595: 
00:0000969C 1CC5            	   596:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
00:0000969E 1CFC0024        	   597:          MOVE.B  #'$',(A6)+    ; HEX FIELD TO FOLLOW
                            	   598: 
00:000096A2 610000CE        	   599:          BSR     ICCCC
00:000096A6 602C            	   600:          BRA.S   ICC55
                            	   601: 
                            	   602: ;  BIT   5432109876543210
                            	   603: ;        0110............       FIXED
                            	   604: ;        ....CCCC........       CONDITION
                            	   605: ;        ........DDDDDDD0       DISPLACEMENT
                            	   606: ;        ...............1       ERROR (ODD BOUNDRY DISPLACEMENT)
                            	   607: ;
                            	   608:          
                            	   609: 
                            	   610: ICC:     ;.align  2              ; B--
00:000096A8 610000C8        	   611:          BSR     ICCCC
                            	   612: 
00:000096AC 1CFC0024        	   613: IBSR:    MOVE.B  #'$',(A6)+    ; BSR.S BRA
                            	   614: 
00:000096B0 4A04            	   615:          TST.B   D4
00:000096B2 6720            	   616:          BEQ.S   ICC55          ; 16 BIT DISPLACEMENT
                            	   617: 
00:000096B4 1AFC002E        	   618:          MOVE.B  #'.',(A5)+
00:000096B8 1AFC0053        	   619:          MOVE.B  #'S',(A5)+
00:000096BC 4884            	   620:          EXT.W   D4            ; 8 BIT DISPLACEMENT
                            	   621: 
00:000096BE 48C4            	   622: ICC35:   EXT.L   D4            ; SIGN-EXTENDED DISPLACEMENT
00:000096C0 D8A9FFFC        	   623:          ADD.L   HISPC(A1),D4  ; + PROGRAM COUNTER
00:000096C4 5484            	   624:          ADDQ.L  #2,D4         ; + TWO
00:000096C6 2004            	   625:          MOVE.L  D4,D0
                            	   626: 
00:000096C8 E284            	   627:          ASR.L   #1,D4
00:000096CA 650004D8        	   628:          BCS     FERROR         ; ODD BOUNDRY DISPLACEMENT
                            	   629: 
00:000096CE 6100FC1A        	   630:          BSR     PNT6HX
00:000096D2 60B4            	   631:          BRA.S   SCOMMON
                            	   632: 
00:000096D4 5483            	   633: ICC55:   ADDQ.L  #2,D3         ; SIZE
00:000096D6 382C0002        	   634:          MOVE.W  2(A4),D4
00:000096DA 1AFC002E        	   635:          MOVE.B  #'.',(A5)+
00:000096DE 1AFC004C        	   636:          MOVE.B  #'L',(A5)+    ; .L FOR 16 BIT DISPLACEMENT
00:000096E2 60DA            	   637:          BRA.S   ICC35
                            	   638: 
                            	   639:          
                            	   640: ;                               ; BCHG  BCLR  BSET  BTST
                            	   641: ISETD:   ;.align  2              ; DYNAMIC BIT
00:000096E4 EF5C            	   642:          ROL.W   #7,D4
00:000096E6 6100FDB0        	   643:          BSR     FORMREGD       ; DATA REGISTER
                            	   644: 
00:000096EA 1CC5            	   645: ISETD12: MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   646: 
00:000096EC 3814            	   647:          MOVE.W  (A4),D4
00:000096EE 610001A0        	   648:          BSR     EEA            ; DATA ALTERABLE
00:000096F2 6094            	   649: CS18:    BRA.S   SCOMMON
                            	   650: 
                            	   651:          ;.align   4
                            	   652: 
                            	   653: ;                            BCHG  BCLR  BSET  BTST
                            	   654: ;  1ST WORD     .... .... ..XX XXXX    EA   DATA ALTERABLE ONLY
                            	   655: ;  2ND WORD     0000 0000 000Y YYYY    BIT NUMBER
                            	   656: ;
                            	   657: ISETS:   ;.align  2              ; STATIC BIT
00:000096F4 5483            	   658:          ADDQ.L  #2,D3         ; SIZE
00:000096F6 1CFC0023        	   659:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	   660: 
00:000096FA 7000            	   661:          CLR.L   D0
00:000096FC 302C0002        	   662:          MOVE.W  2(A4),D0     ; GET BIT POSITION FROM 2ND WORD
00:00009700 2200            	   663:          MOVE.L  D0,D1
00:00009702 EA89            	   664:          LSR.L   #5,D1
00:00009704 6600049E        	   665:          BNE     FERROR
00:00009708 6100FB78        	   666:          BSR     HEX2DEC        ; DECIMAL
                            	   667: 
00:0000970C 60DC            	   668:          BRA.S   ISETD12
                            	   669: 
                            	   670: ;   BIT  5432109876543210
                            	   671: ;        ....XXX.........       IMMEDIATE COUNT/REGISTER
                            	   672: ;        .......0........       RIGHT SHIFT
                            	   673: ;        .......1........       LEFT SHIFT
                            	   674: ;        ........00......       BYTE
                            	   675: ;        ........01......       WORD
                            	   676: ;        ........10......       LONG
                            	   677: ;        ....0...11......       WORD (MEMORY)
                            	   678: ;        ....0...11AAAAAA       EFFECTIVE ADDRESS
                            	   679: ;        ..........0.....       SHIFT IMMEDIATE COUNT
                            	   680: ;        ..........1.....       SHIFT COUNT (MODULO 64) IN DATA REGISTER
                            	   681: ;
                            	   682:          ;.align   4
                            	   683: 
                            	   684: ISHIFT:  ;.align   2             ; AS-  LS-  RO-  ROX-
00:0000970E 303C4C52        	   685:          MOVE.W  #$4c52,D0    ; "LR"
00:00009712 08040008        	   686:          BTST    #8,D4         ; DIRECTION BIT
00:00009716 6702            	   687:          BEQ.S   ISHIFT13       ; RIGHT
00:00009718 E048            	   688:          LSR.W   #8,D0         ; LEFT
00:0000971A 1AC0            	   689: ISHIFT13:MOVE.B  D0,(A5)+     ; DIRECTION; "L" OR "R"
                            	   690: 
00:0000971C 3014            	   691:          MOVE.W  (A4),D0
00:0000971E 024000C0        	   692:          ANDI.W  #$00C0,D0
00:00009722 0C4000C0        	   693:          CMPI.W  #$00C0,D0
00:00009726 6730            	   694:          BEQ.S   ISHIFTM1       ; MEMORY SHIFT
                            	   695: 
00:00009728 610000DC        	   696:          BSR     FORMSIZE
                            	   697: 
00:0000972C EF5C            	   698:          ROL.W   #7,D4
00:0000972E 0804000C        	   699:          BTST    #12,D4        ; I/R BIT
00:00009732 6616            	   700:          BNE.S   ISHIFT33       ; COUNT IN REGISTER
                            	   701: 
00:00009734 02040007        	   702:          ANDI.B  #$07,D4      ; IMMEDIATE COUNT
00:00009738 6604            	   703:          BNE.S   ISHIFT23
00:0000973A 00040008        	   704:          ORI.B   #$08,D4      ; CHANGE ZERO TO EIGHT
00:0000973E 00040030        	   705: ISHIFT23:ORI.B   #'0',D4
00:00009742 1CFC0023        	   706:          MOVE.B  #'#',(A6)+
00:00009746 1CC4            	   707:          MOVE.B  D4,(A6)+
00:00009748 6004            	   708:          BRA.S   ISHIFT44
                            	   709: 
00:0000974A 6100FD4C        	   710: ISHIFT33:BSR     FORMREGD
                            	   711: 
00:0000974E 1CC5            	   712: ISHIFT44:MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   713: 
00:00009750 3814            	   714:          MOVE.W  (A4),D4
00:00009752 6100FD44        	   715:          BSR     FORMREGD
00:00009756 609A            	   716: CS17:    BRA.S   CS18           ; COMMON
                            	   717: 
00:00009758 1AFC002E        	   718: ISHIFTM1:MOVE.B  #'.',(A5)+    ; PERIOD
00:0000975C 1AFC0057        	   719:          MOVE.B  #'W',(A5)+    ; .WORD
                            	   720: 
00:00009760 0804000B        	   721:          BTST    #11,D4
00:00009764 6600043E        	   722:          BNE     FERROR         ; BIT 11 MUST BE ZERO
                            	   723: 
00:00009768 3E3C01FC        	   724:          MOVE.W  #$1FC,D7     ; MEMORY ALTERABLE ADDRESSING
00:0000976C 61000122        	   725:          BSR     EEA
00:00009770 60E4            	   726:          BRA.S   CS17           ; COMMON
                            	   727: 
00:00009772 700F            	   728: ICCCC:   MOVEQ   #$0F,D0      ; APPEND CONDITION CODE
00:00009774 C014            	   729:          AND.B   (A4),D0      ; D0 = CCC
00:00009776 E388            	   730:          LSL.L   #1,D0         ; D0 = CCC;2
                            	   731: 
00:00009778 323B0010        	   732:          MOVE.W  BRTBL(PC,D0.W),D1 ; GET BRANCH MNEMONIC
00:0000977C 1AC1            	   733:          MOVE.B  D1,(A5)+     ; (REVERSED) FROM THE TABLE
00:0000977E E049            	   734:          LSR.W   #8,D1         ; AND ADD THE NONBLANK PORTION
00:00009780 0C010020        	   735:          CMPI.B  #BLANK,D1     ; TO THE BUFFER.
00:00009784 6702            	   736:          BEQ.S   ICCCC9
00:00009786 1AC1            	   737:          MOVE.B  D1,(A5)+
00:00009788 4E75            	   738: ICCCC9:  RTS
                            	   739: 
00:0000978A 2054            	   740: BRTBL:   dc.b  " T"           ; "T " BRA ACCEPTED
00:0000978C 2046            	   741:          dc.b  " F"           ; "F "
00:0000978E 4948            	   742:          dc.b  "IH"           ; "HI"
00:00009790 534C            	   743:          dc.b  "SL"           ; "LS"
00:00009792 4343            	   744:          dc.b  "CC"           ; "CC"
00:00009794 5343            	   745:          dc.b  "SC"           ; "CS"
00:00009796 454E            	   746:          dc.b  "EN"           ; "NE"
00:00009798 5145            	   747:          dc.b  "QE"           ; "EQ"
00:0000979A 4356            	   748:          dc.b  "CV"           ; "VC"
00:0000979C 5356            	   749:          dc.b  "SV"           ; "VS"
00:0000979E 4C50            	   750:          dc.b  "LP"           ; "PL"
00:000097A0 494D            	   751:          dc.b  "IM"           ; "MI"
00:000097A2 4547            	   752:          dc.b  "EG"           ; "GE"
00:000097A4 544C            	   753:          dc.b  "TL"           ; "LT"
00:000097A6 5447            	   754:          dc.b  "TG"           ; "GT"
00:000097A8 454C            	   755:          dc.b  "EL"           ; "LE"
                            	   756: 
                            	   757: ;   BIT  5432109876543210
                            	   758: ;        ....RRRMMM......    DESTINATION REGISTER MODE
                            	   759: ;        ..........MMMRRR    SOURCE MODE REGISTER
                            	   760: ;
                            	   761: ; IF BYTE SIZE; ADDRESS DIRECT NOT ALLOWED AS SOURCE
                            	   762: ;
                            	   763: 					even
                            	   764: IMOVEA1: ;.align  2
00:000097AA 3E3C0FFF        	   765:          MOVE.W  #$FFF,D7     ; ALL MODES
00:000097AE 610000E0        	   766:          BSR     EEA
                            	   767: 
00:000097B2 1CC5            	   768:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   769: 
00:000097B4 3814            	   770:          MOVE.W  (A4),D4      ; ....RRRMMM......
00:000097B6 E24C            	   771:          LSR.W   #1,D4         ; .....RRRMMM.....
00:000097B8 EA0C            	   772:          LSR.B   #5,D4         ; .....RRR.....MMM
00:000097BA E05C            	   773:          ROR.W   #8,D4         ; .....MMM.....RRR
00:000097BC EB0C            	   774:          LSL.B   #5,D4         ; .....MMMRRR.....
00:000097BE EA4C            	   775:          LSR.W   #5,D4         ; ..........MMMRRR
                            	   776: 
                            	   777: ; IF .BYTE DESTINATION A@ NOT ALLOWED
00:000097C0 3E3C01FF        	   778:          MOVE.W  #$1FF,D7     ; DATA ALTERABLE + A@
00:000097C4 1014            	   779:          MOVE.B  (A4),D0
00:000097C6 0C000001        	   780:          CMPI.B  #$01,D0
00:000097CA 6604            	   781:          BNE.S   IMOVE19        ; NOT BYTE SIZE
                            	   782: 
00:000097CC 3E3C01FD        	   783:          MOVE.W  #$1FD,D7     ; DATA ALTERABLE
                            	   784: IMOVE19:
                            	   785: 
00:000097D0 610000BE        	   786:          BSR     EEA
00:000097D4 602C            	   787:          BRA.S   CS19           ; COMMON
                            	   788: 
                            	   789: ;  IF BYTE; ADDRESS REGISTER DIRECT NOT ALLOWED
                            	   790: IQUICKA: ;.align  2              ; ADDQ  SUBQ
00:000097D6 612E            	   791:          BSR.S   FORMSIZE
                            	   792: 
00:000097D8 1CFC0023        	   793:          MOVE.B  #'#',(A6)+
00:000097DC EF5C            	   794:          ROL.W   #7,D4
00:000097DE 02040007        	   795:          ANDI.B  #7,D4
00:000097E2 6604            	   796:          BNE.S   IQUICK21
00:000097E4 00040008        	   797:          ORI.B   #8,D4         ; MAKE ZERO INTO EIGHT
00:000097E8 00040030        	   798: IQUICK21:ORI.B   #'0',D4       ; MAKE ASCII
00:000097EC 1CC4            	   799:          MOVE.B  D4,(A6)+
                            	   800: 
00:000097EE 1CC5            	   801:          MOVE.B  D5,(A6)+     ; COMMA SEPARATOR
                            	   802: 
00:000097F0 3814            	   803:          MOVE.W  (A4),D4
                            	   804: 
00:000097F2 3014            	   805:          MOVE.W  (A4),D0
00:000097F4 024000C0        	   806:          ANDI.W  #$00C0,D0
00:000097F8 6704            	   807:          BEQ.S   IQUICK31       ; DATA ALTERABLE
00:000097FA 3E3C01FF        	   808:          MOVE.W  #$1FF,D7     ; ALTERABLE ADDRESSING
00:000097FE 61000090        	   809: IQUICK31:BSR     EEA
00:00009802 60000378        	   810: CS19:    BRA     COMMON
                            	   811: 
                            	   812: ;  BIT   5432109876543210
                            	   813: ;        ........00......       BYTE
                            	   814: ;        ........01......       WORD
                            	   815: ;        ........10......       LONG
                            	   816: ;        ........11......       ERROR
                            	   817: ;
                            	   818: FORMSIZE: ;.align  2
00:00009806 3414            	   819:          MOVE.W  (A4),D2
00:00009808 1AFC002E        	   820:          MOVE.B  #'.',(A5)+    ; STORE PERIOD
00:0000980C EC4A            	   821:          LSR.W   #6,D2
00:0000980E 02420003        	   822:          ANDI.W  #$03,D2
00:00009812 6606            	   823:          BNE.S   FORM91
00:00009814 1AFC0042        	   824:          MOVE.B  #'B',(A5)+    ; STORE "B"
00:00009818 6016            	   825:          BRA.S   FORM95
                            	   826: 
00:0000981A 103C0057        	   827: FORM91:  MOVE.B  #'W',D0
00:0000981E 0C020001        	   828:          CMPI.B  #1,D2
00:00009822 670A            	   829:          BEQ.S   FORM93
00:00009824 103C004C        	   830:          MOVE.B  #'L',D0
00:00009828 0C020002        	   831:          CMPI.B  #2,D2
00:0000982C 665E            	   832:          BNE.S   FE10           ; FERROR
00:0000982E 1AC0            	   833: FORM93:  MOVE.B  D0,(A5)+     ; STORE "W" OR "L"
00:00009830 4E75            	   834: FORM95:  RTS
                            	   835: 
00:00009832 6100FC64        	   836: EA000:   BSR     FORMREGD
00:00009836 08070000        	   837:          BTST    #0,D7
00:0000983A 6750            	   838:          BEQ.S   FE10           ; FERROR
00:0000983C 4E75            	   839:          RTS
                            	   840: 
00:0000983E 6100FC48        	   841: EA001:   BSR     FORMREGA
00:00009842 08070001        	   842:          BTST    #1,D7
00:00009846 6744            	   843:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:00009848 4E75            	   844:          RTS
                            	   845: 
00:0000984A 1CFC0028        	   846: EA010:   MOVE.B  #'(',(A6)+
00:0000984E 6100FC38        	   847:          BSR     FORMREGA
00:00009852 1CFC0029        	   848:          MOVE.B  #')',(A6)+
00:00009856 08070002        	   849:          BTST    #2,D7
00:0000985A 6730            	   850:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:0000985C 4E75            	   851:          RTS
                            	   852: 
00:0000985E 1CFC0028        	   853: EA011:   MOVE.B  #'(',(A6)+
00:00009862 6100FC24        	   854:          BSR     FORMREGA
00:00009866 1CFC0029        	   855:          MOVE.B  #')',(A6)+
00:0000986A 1CFC002B        	   856:          MOVE.B  #'+',(A6)+
00:0000986E 08070003        	   857:          BTST    #3,D7
00:00009872 6718            	   858:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
00:00009874 4E75            	   859: EA011RTS:RTS
                            	   860: 
00:00009876 1CFC002D        	   861: EA100:   MOVE.B  #'-',(A6)+
00:0000987A 1CFC0028        	   862:          MOVE.B  #'(',(A6)+
00:0000987E 6100FC08        	   863:          BSR     FORMREGA
00:00009882 1CFC0029        	   864:          MOVE.B  #')',(A6)+
00:00009886 08070004        	   865:          BTST    #4,D7
00:0000988A 66E8            	   866:          BNE.S   EA011RTS
00:0000988C 60000316        	   867: FE10:    BRA     FERROR         ; THIS MODE NOT ALLOWED
                            	   868: 
                            	   869: ;  ENTER       A4 = POINTER TO FIRST WORD
                            	   870: ;              D3 = OFFSET TO EXTENSION
                            	   871: ;              D4 = VALUE TO PROCESS
                            	   872: ;              D7 = MODES ALLOWED MASK
                            	   873: ;
                            	   874: EEA:     ;.align  2
00:00009890 2004            	   875: 	move.l D4,D0
00:00009892 E648            	   876: 	lsr.w #3,D0
00:00009894 02400007        	   877: 	andi.w #$7,D0
00:00009898 6798            	   878: 	beq.s EA000
00:0000989A 0C000001        	   879: 	cmpi.b #1,D0
00:0000989E 679E            	   880: 	beq.s EA001
00:000098A0 0C000002        	   881: 	cmpi.b #2,D0
00:000098A4 67A4            	   882: 	beq.s EA010
00:000098A6 0C000003        	   883: 	cmpi.b #3,D0
00:000098AA 67B2            	   884: 	beq.s EA011
00:000098AC 0C000004        	   885: 	cmpi.b #4,D0
00:000098B0 67C4            	   886: 	beq.s EA100
00:000098B2 0C000005        	   887: 	cmpi.b #5,D0
00:000098B6 6760            	   888: 	beq.s EA101
00:000098B8 0C000007        	   889: 	cmpi.b #7,D0
00:000098BC 6770            	   890: 	beq.s EA111
                            	   891: 
                            	   892: ;    EXTENSION WORD
                            	   893: ;   BIT  5432109876543210
                            	   894: ;        0...............    DATA REGISTER
                            	   895: ;        1...............    ADDRESS REGISTER
                            	   896: ;        .RRR............    REGISTER
                            	   897: ;        ....0...........    SIGN EXTENDED, LOW ORDER INTEGER IN INDEX REG
                            	   898: ;        ....1...........    LONG VALUE IN INDEX REGISTER
                            	   899: ;        .....000........
                            	   900: ;        ........DDDDDDDD    DISPLACEMENT INTEGER
                            	   901: ;
                            	   902: ; EA110            ADDRESS REGISTER INDIRECT WITH INDEX
                            	   903: 
00:000098BE 08070006        	   904:          BTST    #6,D7
00:000098C2 67C8            	   905:          BEQ.S   FE10           ; FERROR  THIS MODE NOT ALLOWED
                            	   906: 
00:000098C4 32343000        	   907:          MOVE.W  (A4,D3.W),D1
00:000098C8 02410700        	   908:          ANDI.W  #$0700,D1
00:000098CC 66BE            	   909:          BNE.S   FE10           ; FERROR  BITS 10-8 MUST BE ZERO
                            	   910: 
00:000098CE 30343000        	   911:          MOVE.W  (A4,D3.W),D0  ; D0 = DISPLACEMENT
00:000098D2 4880            	   912:          EXT.W   D0
00:000098D4 48C0            	   913:          EXT.L   D0
00:000098D6 6100F9AA        	   914:          BSR     HEX2DEC        ; DECIMAL
00:000098DA 1CFC0028        	   915:          MOVE.B  #'(',(A6)+    ; (
                            	   916: 
00:000098DE 6100FBA8        	   917:          BSR     FORMREGA       ; XX(A@
                            	   918: 
00:000098E2 1CFC002C        	   919:          MOVE.B  #',',(A6)+    ; XX(A@,
                            	   920: 
00:000098E6 18343000        	   921:          MOVE.B  (A4,D3.W),D4
00:000098EA E804            	   922:          ASR.B   #4,D4
00:000098EC 6A06            	   923:          BPL.S   EA1105
00:000098EE 6100FB98        	   924:          BSR     FORMREGA
00:000098F2 6004            	   925:          BRA.S   EA1107
                            	   926: 
00:000098F4 6100FBA2        	   927: EA1105:  BSR     FORMREGD
00:000098F8 1CFC002E        	   928: EA1107:  MOVE.B  #'.',(A6)+    ; XX(A@,X@.
                            	   929: 
00:000098FC 38343000        	   930:          MOVE.W  (A4,D3.W),D4 ; D4 = R@
00:00009900 103C0057        	   931:          MOVE.B  #'W',D0       ; ..........W
00:00009904 0804000B        	   932:          BTST    #11,D4
00:00009908 6704            	   933:          BEQ.S   EA1109
00:0000990A 103C004C        	   934:          MOVE.B  #'L',D0       ; ..........L
00:0000990E 1CC0            	   935: EA1109:  MOVE.B  D0,(A6)+
00:00009910 1CFC0029        	   936:          MOVE.B  #')',(A6)+    ; ...........)
00:00009914 5483            	   937:          ADDQ.L  #2,D3
00:00009916 4E75            	   938:          RTS
                            	   939: 
                            	   940: ; ADDRESS REGISTER INDIRECT WITH DISPLACEMENT
                            	   941: ;
                            	   942: EA101:
00:00009918 08070005        	   943: 	btst #5,D7         	; 101000;   DIS(A@)
00:0000991C 6756            	   944: 	beq.s FE11          ; FERROR;  THIS MODE NOT ALLOWED
00:0000991E 30343000        	   945: 	move.w (A4,D3.W),D0
00:00009922 48C0            	   946: 	ext.l D0
00:00009924 6100F95C        	   947: 	bsr HEX2DEC        	; DECIMAL
00:00009928 5483            	   948: 	addq.l #2,D3        ; SIZE
00:0000992A 6000FF1E        	   949: 	bra EA010
                            	   950: 
                            	   951: ;  111000        ABSOLUTE SHORT
                            	   952: ;  111001        ABSOLUTE LONG
                            	   953: ;  111010        PROGRAM COUNTER WITH DISPLACEMENT
                            	   954: ;  111011        PROGRAM COUNTER WITH INDEX
                            	   955: ;  111100        IMMEDIATE OR STATUS REG
                            	   956: ;
                            	   957: EA111:
00:0000992E 02440007        	   958: 	andi.w #7,D4
00:00009932 6618            	   959: 	bne.s EA1112
00:00009934 08070007        	   960: 	btst #7,D7
00:00009938 673A            	   961: 	beq.s FE11           	; FERROR;  THIS MODE NOT ALLOWED
00:0000993A 30343000        	   962: 	move.w (A4,D3.W),D0 	; 111000;   ABSOLUTE SHORT
00:0000993E 48C0            	   963: 	ext.l D0
00:00009940 1CFC0024        	   964: 	move.b #'$',(A6)+
00:00009944 6100F9B0        	   965: 	bsr PNT8HX         		; SIGN EXTENDED VALUE
00:00009948 5483            	   966: 	addq.l #2,D3         	; SIZE + 2
00:0000994A 4E75            	   967: 	rts
                            	   968: 
                            	   969: EA1112:
00:0000994C 0C040001        	   970: 	cmpi.b #1,D4
00:00009950 6616            	   971: 	bne.s EA1113
00:00009952 08070008        	   972: 	btst #8,D7
00:00009956 671C            	   973: 	beq.s FE11          	; FERROR;  THIS MODE NOT ALLOWED
00:00009958 1CFC0024        	   974: 	move.b #'$',(A6)+    	; HEX
00:0000995C 20343000        	   975: 	move.l (A4,D3.W),D0  	; 111001;     ABSOLUTE LONG
00:00009960 6100F994        	   976: 	bsr PNT8HX
                            	   977: 	;-       MOVE.B  #'.',(A6)+    ; FORCE LONG FORMAT
                            	   978: 	;-       MOVE.B  #'L',(A6)+    ; IE   .L
00:00009964 5883            	   979: 	addq.l #4,D3
00:00009966 4E75            	   980: 	rts
                            	   981: 
                            	   982: EA1113:
00:00009968 0C040002        	   983: 	cmpi.b #2,D4
00:0000996C 662C            	   984: 	bne.s EA1114
00:0000996E 08070009        	   985: 	btst #9,D7
00:00009972 6604            	   986: 	bne.s EA1113A
                            	   987: FE11:
00:00009974 6000022E        	   988: 	bra FERROR         	; THIS MODE NOT ALLOWED
                            	   989: 
                            	   990: EA1113A:
00:00009978 30343000        	   991: 	move.w (A4,D3.W),D0  ; 111010;  PC + DISPLACEMENT  DESTINATION(PC)
00:0000997C 48C0            	   992: 	ext.l D0
00:0000997E D0A9FFFC        	   993: 	add.l HISPC(A1),D0
00:00009982 5480            	   994: 	addq.l #2,D0
00:00009984 1CFC0024        	   995: 	move.b #'$',(A6)+    ; HEX "$"
00:00009988 6100F96C        	   996: 	bsr PNT8HX         ; DESTINATION
00:0000998C 203C29435028    	   997: 	move.l #$29435028,D0  ; (PC)
00:00009992 6100FC4C        	   998: 	bsr SCHR           ; STORE WORD
00:00009996 5483            	   999: 	addq.l #2,D3         ; SIZE
00:00009998 4E75            	  1000: 	rts
                            	  1001: 
                            	  1002: EA1114:
00:0000999A 0C040003        	  1003: 	cmpi.b #3,D4
00:0000999E 6664            	  1004: 	bne.s EA1115
                            	  1005: 
                            	  1006: ; PROGRAM COUNTER WITH INDEX    DESTINATION(PC,R@.X)
                            	  1007: ;
                            	  1008: ;        5432109876543210       SECOND WORD
                            	  1009: ;        0...............       DATA REGISTER
                            	  1010: ;        1...............       ADDRESS REGISTER
                            	  1011: ;        .XXX............       REGISTER
                            	  1012: ;        ....0...........       SIGN-EXTENDED, LOW ORDER WORD INTEGER
                            	  1013: ;                               ..IN INDEX REGISTER
                            	  1014: ;        ....1...........       LONG VALUE IN INDEX REGISTER
                            	  1015: ;        .....000........
                            	  1016: ;        ........XXXXXXXX       DISPLACEMENT INTEGER
                            	  1017: ;
00:000099A0 0807000A        	  1018:          BTST    #10,D7
00:000099A4 67CE            	  1019:          BEQ.S   FE11           ; FERROR  THIS MODE NOT ASLLOWED
                            	  1020: 
00:000099A6 32343000        	  1021:          MOVE.W  (A4,D3.W),D1
00:000099AA 02410700        	  1022:          ANDI.W  #$0700,D1
00:000099AE 66C4            	  1023:          BNE.S   FE11           ; FERROR;  BITS 10-8 MUST BE ZERO
                            	  1024: 
00:000099B0 10343001        	  1025:          MOVE.B  1(A4,D3.W),D0 ; 111100;   DESTINATION(PC,R@.X)
00:000099B4 4880            	  1026:          EXT.W   D0
00:000099B6 48C0            	  1027:          EXT.L   D0
00:000099B8 D0A9FFFC        	  1028:          ADD.L   HISPC(A1),D0
00:000099BC 5480            	  1029:          ADDQ.L  #2,D0
00:000099BE 1CFC0024        	  1030:          MOVE.B  #'$',(A6)+    ; HEX "$"
00:000099C2 6100F932        	  1031:          BSR     PNT8HX         ; DESTINATION
                            	  1032: 
00:000099C6 203C2C435028    	  1033:          MOVE.L  #$2c435028,D0
00:000099CC 6100FC12        	  1034:          BSR     SCHR           ; DES(PC,
                            	  1035: 
00:000099D0 38343000        	  1036:          MOVE.W  (A4,D3.W),D4
00:000099D4 E95C            	  1037:          ROL.W   #4,D4
00:000099D6 08040003        	  1038:          BTST    #3,D4
00:000099DA 6706            	  1039:          BEQ.S   EAF25
00:000099DC 6100FAAA        	  1040:          BSR     FORMREGA
00:000099E0 6004            	  1041:          BRA.S   EAF27
00:000099E2 6100FAB4        	  1042: EAF25:   BSR     FORMREGD       ; DES(PC,R@
                            	  1043: EAF27:
                            	  1044: 
00:000099E6 1CFC002E        	  1045:          MOVE.B  #'.',(A6)+    ; DES(PC,R@.
                            	  1046: 
00:000099EA 38343000        	  1047:          MOVE.W  (A4,D3.W),D4
00:000099EE 303C4C57        	  1048:          MOVE.W  #$4c57,D0    ; "LW"
00:000099F2 0804000B        	  1049:          BTST    #11,D4
00:000099F6 6702            	  1050:          BEQ.S   EAF35
00:000099F8 E048            	  1051:          LSR.W   #8,D0
00:000099FA 1CC0            	  1052: EAF35:   MOVE.B  D0,(A6)+     ; DES(PC,R@.X
                            	  1053: 
00:000099FC 1CFC0029        	  1054:          MOVE.B  #')',(A6)+    ; DES(PC,R@.X)
00:00009A00 5483            	  1055:          ADDQ.L  #2,D3
00:00009A02 4E75            	  1056:          RTS
                            	  1057: 
                            	  1058: ;   BIT  5432109876543210
                            	  1059: ;        ..........111100       ; FIRST WORD;  #<IMMEDIATE>
                            	  1060: ;
00:00009A04 0C040004        	  1061: EA1115:  CMPI.B  #4,D4
00:00009A08 6600FF6A        	  1062:          BNE     FE11           ; FERROR
                            	  1063: 
00:00009A0C 0807000B        	  1064:          BTST    #11,D7
00:00009A10 6700FF62        	  1065:          BEQ     FE11           ; FERROR;  THIS MODE NOT ALLOWED
                            	  1066: 
00:00009A14 1CFC0023        	  1067:          MOVE.B  #'#',(A6)+    ; IMMEDIATE
                            	  1068: 
00:00009A18 122DFFFF        	  1069:          MOVE.B  -1(A5),D1
00:00009A1C 0C01004C        	  1070:          CMPI.B  #'L',D1
00:00009A20 6724            	  1071:          BEQ.S   EA11155        ; LONG
                            	  1072: 
00:00009A22 30343000        	  1073:          MOVE.W  (A4,D3.W),D0
                            	  1074: 
00:00009A26 0C010042        	  1075:          CMPI.B  #'B',D1
00:00009A2A 6610            	  1076:          BNE.S   EA11153        ; .WORD
                            	  1077: 
                            	  1078: ; BYTE SIZE; DATA ALLOWED
                            	  1079: ;  0000 0000 XXXX XXXX
                            	  1080: ;  1111 1111 1XXX XXXX
00:00009A2C 2200            	  1081:          MOVE.L  D0,D1
00:00009A2E E049            	  1082:          LSR.W   #8,D1
00:00009A30 670A            	  1083:          BEQ.S   EA11153
00:00009A32 2200            	  1084:          MOVE.L  D0,D1
00:00009A34 EE41            	  1085:          ASR.W   #7,D1
00:00009A36 5241            	  1086:          ADDQ.W  #1,D1
00:00009A38 6600FF3A        	  1087:          BNE     FE11           ; FERROR
                            	  1088: 
00:00009A3C 48C0            	  1089: EA11153: EXT.L   D0
00:00009A3E 6100F842        	  1090:          BSR     HEX2DEC
00:00009A42 5483            	  1091:          ADDQ.L  #2,D3
00:00009A44 4E75            	  1092:          RTS
                            	  1093: 
00:00009A46 20343000        	  1094: EA11155: MOVE.L  (A4,D3.W),D0
00:00009A4A 6100F836        	  1095:          BSR     HEX2DEC
00:00009A4E 5883            	  1096:          ADDQ.L  #4,D3         ; SIZE
00:00009A50 4E75            	  1097:          RTS
                            	  1098: 
00:00009A52 1AFC002E        	  1099: MOVEMS:  MOVE.B  #'.',(A5)+    ; PERIOD
00:00009A56 303C4C57        	  1100:          MOVE.W  #$4c57,D0    ; "LW"
00:00009A5A 08040006        	  1101:          BTST    #6,D4
00:00009A5E 6702            	  1102:          BEQ.S   MOVEMS2
00:00009A60 E048            	  1103:          LSR.W   #8,D0
00:00009A62 1AC0            	  1104: MOVEMS2: MOVE.B  D0,(A5)+     ; SIZE
00:00009A64 4E75            	  1105:          RTS
                            	  1106: 
                            	  1107: ; MOVEM - REGISTER EXPANSION
                            	  1108: ;
                            	  1109: MOVEMR:  ;.align  2
00:00009A66 342C0002        	  1110:          MOVE.W  2(A4),D2     ; D2 = SECOND WORD
00:00009A6A 7020            	  1111:          MOVEQ   #$20,D0      ; D0 = SPACE
00:00009A6C 7E2F            	  1112:          MOVEQ   #$2F,D7      ; D7 = /
00:00009A6E 538E            	  1113:          SUBQ.L  #1,A6         ; ADJUST STORE POINTER
00:00009A70 7A30            	  1114:          MOVEQ   #$30,D5      ; D5 = REGISTER #
00:00009A72 383C4144        	  1115:          MOVE.W  #$4144,D4    ; "AD" D4 = REG CLASS
                            	  1116: 
00:00009A76 0302            	  1117: MOVEMR11:BTST    D1,D2
00:00009A78 6730            	  1118:          BEQ.S   MOVEMR77       ; BIT RESET
                            	  1119: 
00:00009A7A B016            	  1120:          CMP.B   (A6),D0      ; BIT SET
00:00009A7C 6612            	  1121:          BNE.S   MOVEMR44       ; NOT SPACE
                            	  1122: 
00:00009A7E 1D440001        	  1123: MOVEMR33:MOVE.B  D4,1(A6)     ; REG TYPE
00:00009A82 1D450002        	  1124:          MOVE.B  D5,2(A6)     ; REG #
00:00009A86 1D7C002D0003    	  1125:          MOVE.B  #'-',3(A6)    ; -
00:00009A8C 568E            	  1126:          ADDQ.L  #3,A6
00:00009A8E 602E            	  1127:          BRA.S   MOVEMR88
                            	  1128: 
                            	  1129: MOVEMR44:
00:00009A90 0C16002C        	  1130: 	cmpi.b #',',(A6)
00:00009A94 67E8            	  1131: 	beq.s MOVEMR33      ; COMMA SEPARATOR
00:00009A96 BE16            	  1132: 	cmp.b (A6),D7      	; / SEPARATOR
00:00009A98 67E4            	  1133: 	beq.s MOVEMR33
00:00009A9A 1D440001        	  1134: 	move.b D4,1(A6)     ; REG TYPE
00:00009A9E 1D450002        	  1135: 	move.b D5,2(A6)     ; REG #
00:00009AA2 1D7C002D0003    	  1136: 	move.b #'-',3(A6)   ; - SEPARATOR
00:00009AA8 6014            	  1137: 	bra.s MOVEMR88
                            	  1138: 
                            	  1139: MOVEMR77:
00:00009AAA 0C16002C        	  1140: 	cmpi.b #',',(A6)
00:00009AAE 670E            	  1141: 	beq.s MOVEMR88       ; COMMA
00:00009AB0 B016            	  1142: 	cmp.b (A6),D0
00:00009AB2 670A            	  1143: 	beq.s MOVEMR88       ; SPACE
00:00009AB4 B02E0001        	  1144: 	cmp.b 1(A6),D0
00:00009AB8 6702            	  1145: 	beq.s MOVEMR79       ; SPACE
00:00009ABA 568E            	  1146: 	addq.l #3,A6
                            	  1147: MOVEMR79:
00:00009ABC 1C87            	  1148: 	move.b D7,(A6)      ; / SEPARATOR
                            	  1149: 
                            	  1150: MOVEMR88:
00:00009ABE 5285            	  1151: 	addq.l #1,D5
00:00009AC0 D286            	  1152: 	add.l D6,D1        ; D1 = BIT POSITION
00:00009AC2 0C050038        	  1153: 	cmpi.b #'8',D5
00:00009AC6 66AE            	  1154: 	bne.s MOVEMR11
00:00009AC8 B016            	  1155: 	cmp.b (A6),D0      ; SPACE
00:00009ACA 670A            	  1156: 	beq.s MOVEMR94
00:00009ACC B02E0001        	  1157: 	cmp.b 1(A6),D0     ; SPACE
00:00009AD0 6704            	  1158: 	beq.s MOVEMR94
00:00009AD2 568E            	  1159: 	addq.l #3,A6
00:00009AD4 1C87            	  1160: 	move.b D7,(A6)      ; /   SEPARATOR
                            	  1161: 
                            	  1162: MOVEMR94:
00:00009AD6 1A3C0030        	  1163: 	move.b #'0',D5       	; RESET REG TO ZERO
00:00009ADA E04C            	  1164: 	lsr.w #8,D4         	; CHANGE REG TYPE
00:00009ADC 6698            	  1165: 	bne.s MOVEMR11       	; MORE
00:00009ADE 1C80            	  1166: 	move.b D0,(A6)      	; SPACE
00:00009AE0 4E75            	  1167: 	rts
                            	  1168: 
                            	  1169: DCODE68K:
00:00009AE2 4E51FFF0        	  1170: 	link A1,#-LOCVARSZ 	; CREATE A FRAME FOR THE
00:00009AE6 48E91007FFF0    	  1171: 	movem.l D0-D2/A4,DDATA(A1)  ; CODE AND ITS PC.  A4
00:00009AEC 49E9FFF0        	  1172: 	lea DDATA(A1),A4 		; POINTS TO THE CODE.
00:00009AF0 264D            	  1173: 	move.l A5,A3        ; A3 = START OF OUTPUT BUFFER
00:00009AF2 2C4D            	  1174: 	move.l A5,A6
00:00009AF4 703F            	  1175: 	moveq #BUFSIZE,D0
                            	  1176: DEC311:
00:00009AF6 1CFC0020        	  1177:   move.b #BLANK,(a6)+  ; SPACE FILL BUFFER
00:00009AFA 5380            	  1178: 	subq.l #1,D0
00:00009AFC 66F8            	  1179: 	bne.s DEC311
00:00009AFE 421E            	  1180: 	clr.b (a6)+					; NULL temrinate
00:00009B00 2C4B            	  1181: 	move.l A3,A6        ; FORMAT ADDRESS
00:00009B02 2029FFFC        	  1182: 	move.l HISPC(A1),D0
00:00009B06 6100F7F2        	  1183: 	bsr FRELADDR
                            	  1184: 
                            	  1185: ; CHECK FOR KNOWN ILLEGAL CODES
00:00009B0A 3014            	  1186: 	move.w (a4),d0
00:00009B0C 4BFA00C0        	  1187: 	lea KI(PC),a5
00:00009B10 2C4D            	  1188: 	move.l a5,a6
00:00009B12 548E            	  1189: 	add.l #KIEND-KI,a6
                            	  1190: DEC404:
00:00009B14 B05D            	  1191:   cmp.w (a5)+,d0
00:00009B16 671A            	  1192: 	beq.s FE12           ; FERROR;  ILLEGAL CODE
00:00009B18 BBCE            	  1193: 	cmp.l a6,a5
00:00009B1A 66F8            	  1194: 	bne.s DEC404
                            	  1195: 
                            	  1196: ; LOOK FOR MATCH OF OP-CODE
                            	  1197: ;
00:00009B1C 4BFA00B2        	  1198: 	lea TBL(PC),A5   		; A5 = POINTER TO DECODE TABLE
00:00009B20 4DFA0366        	  1199: 	lea TBLE(PC),A6  		; A6 = POINTER TO END OF TABLE
                            	  1200: DEC411:
00:00009B24 3014            	  1201: 	move.w (A4),D0      ;  FIRST WORD
00:00009B26 C05D            	  1202: 	and.w (A5)+,D0     	;  MASK
00:00009B28 B05D            	  1203: 	cmp.w (A5)+,D0
00:00009B2A 6708            	  1204: 	beq.s DEC425        ; FOUND MATCH
00:00009B2C 588D            	  1205: 	addq.l #4,A5        ; UPDATE POINTER
00:00009B2E BBCE            	  1206: 	cmp.l A6,A5
00:00009B30 65F2            	  1207: 	blo.s DEC411        ; MORE TABLE
                            	  1208: FE12:
00:00009B32 6070            	  1209: 	bra.s FERROR        ; ILLEGAL INSTRUCTION
                            	  1210: DEC425:
00:00009B34 7C00            	  1211:   clr.l D6
00:00009B36 3C1D            	  1212: 	move.w (A5)+,D6     ; D6 = (GOTO OFFSET)/4
                            	  1213: ;         LSL.L   #2,D6
00:00009B38 7E00            	  1214: 	clr.l D7
00:00009B3A 3E1D            	  1215: 	move.w (A5)+,D7     ; D7 = INDEX TO OP-CODE
                            	  1216: 
                            	  1217: ; MOVE OP-CODE TO BUFFER
                            	  1218: ;
00:00009B3C 41FA034A        	  1219: 	lea OPCTBL(PC),A0
                            	  1220: DEC510:
00:00009B40 4A47            	  1221:   tst D7
00:00009B42 6708            	  1222: 	beq.s DEC530         	; AT INDEX
                            	  1223: DEC515:
00:00009B44 4A18            	  1224:   tst.b (A0)+
00:00009B46 6AFC            	  1225: 	bpl.s DEC515         	; MOVE THROUGH FIELD
00:00009B48 5387            	  1226: 	subq.l #1,D7
00:00009B4A 60F4            	  1227: 	bra.s DEC510
                            	  1228: DEC530:
00:00009B4C 701F            	  1229: 	moveq #FOC,D0
00:00009B4E 4BF30000        	  1230: 	lea.l (A3,D0.W),A5 		; A5 = STORE POINTER  OP-CODE
                            	  1231: DEC535:
00:00009B52 1018            	  1232:   move.b (A0)+,D0
00:00009B54 08800007        	  1233: 	bclr #7,D0
00:00009B58 6604            	  1234: 	bne.s DEC537         	; END OF MOVE
00:00009B5A 1AC0            	  1235: 	move.b D0,(A5)+
00:00009B5C 60F4            	  1236: 	bra.s DEC535
                            	  1237: DEC537:
00:00009B5E 1AC0            	  1238:   move.b D0,(A5)+
                            	  1239: 
                            	  1240: ; CALCULATE GOTO AND GO
                            	  1241: ;
00:00009B60 7602            	  1242: 	moveq #2,D3         ; D3= SIZE
00:00009B62 41FAF7F4        	  1243: 	lea X(PC),A0
00:00009B66 D1C6            	  1244: 	add.l D6,A0
00:00009B68 7027            	  1245: 	moveq #FOP,D0
00:00009B6A 4DF30000        	  1246: 	lea.l (A3,D0.W),A6 	; A6 = POINTER FOR OPERAND
00:00009B6E 3814            	  1247: 	move.w (A4),D4      ; D4 = FIRST WORD
00:00009B70 1A3C002C        	  1248: 	move.b #',',D5      ; D5 = CONTAINS ASCII COMMA
00:00009B74 3E3C01FD        	  1249: 	move.w #$1FD,D7     ; D7 = DATA ALTERABLE MODES ALLOWED
00:00009B78 4ED0            	  1250: 	jmp (A0)
                            	  1251: 
                            	  1252: ;	 A3 = pointer to beginning of buffer
                            	  1253: ;  A4 = POINTER TO DATA IN FRAME CREATED BY "LINK A1,..."
                            	  1254: ;  A5 = POINTER STORE OP-CODE
                            	  1255: ;  A6 = POINTER STORE OPERAND
                            	  1256: ;  D3 = SIZE = 2 BYTES
                            	  1257: ;  D4 = FIRST WORD
                            	  1258: ;  D7 = ADDRESS MODES ALLOWED ($1FD) DATA ALTERABLE
                            	  1259: 
                            	  1260: COMMON4:
00:00009B7A 5483            	  1261: 	addq.l #2,D3         	; SIZE = 4
                            	  1262: COMMON:
00:00009B7C 2C03            	  1263: 	move.l D3,D6        	; D6 = SIZE
00:00009B7E 1CFC0020        	  1264: 	move.b #BLANK,(A6)+ 	; SPACE AS LAST CHAR
00:00009B82 2A4E            	  1265: 	move.l A6,A5        	; SAVE END OF BUFFER POINTER
00:00009B84 700A            	  1266: 	moveq #FDATA,D0
00:00009B86 4DF30000        	  1267: 	lea.l (A3,D0.W),A6
                            	  1268: COMMON35:
00:00009B8A 301C            	  1269: 	move.w (A4)+,D0     	; GET NEXT WORD OF DATA.
00:00009B8C 54A9FFFC        	  1270: 	addq.l #2,HISPC(A1)  	; ADJUST PROG COUNTER.
00:00009B90 6100F754        	  1271: 	bsr PNT4HX         		; FORMAT DATA. (A6)+
00:00009B94 5503            	  1272: 	subq.b #2,D3
00:00009B96 66F2            	  1273: 	bne.s COMMON35
00:00009B98 2C4D            	  1274: 	move.l A5,A6        	; A6 = RESTORE END POINTER
00:00009B9A 2A4B            	  1275: 	move.l A3,A5        	; A5 =  BEGINNING OF BUFFER
00:00009B9C 2869FFFC        	  1276: 	move.l HISPC(A1),A4 	; MOVE THE UPDATED PC
00:00009BA0 4E59            	  1277: 	unlk A1            		; TO A4 AND UNDO FRAME.
00:00009BA2 4E75            	  1278: 	rts
                            	  1279: 
                            	  1280: FERROR:  ;.align  2
                            	  1281: ; ILLEGAL INSTRUCTION
                            	  1282: ;
00:00009BA4 701F            	  1283: 	moveq #FOC,D0
00:00009BA6 4DF30000        	  1284: 	lea.l (A3,D0.W),A6
00:00009BAA 4BFA0018        	  1285: 	lea MSG111(PC),A5
                            	  1286: FERROR35:
00:00009BAE 101D            	  1287: 	move.b (A5)+,D0
00:00009BB0 0C000004        	  1288: 	cmpi.b #EOT,D0
00:00009BB4 6704            	  1289: 	beq.s FERROR39
00:00009BB6 1CC0            	  1290: 	move.b D0,(A6)+
00:00009BB8 60F4            	  1291: 	bra.s FERROR35
                            	  1292: FERROR39:
00:00009BBA 3014            	  1293: 	move.w (A4),D0
00:00009BBC 6100F728        	  1294: 	bsr PNT4HX
00:00009BC0 7602            	  1295: 	moveq #2,D3         ; SIZE
00:00009BC2 60B8            	  1296: 	bra.s COMMON
                            	  1297: MSG111:  
00:00009BC4 44432E5720202020	  1298: 	dc.b "DC.W    $"
00:00009BCC 24
00:00009BCD 04              	  1299: 	dc.b EOT
                            	  1300: 
                            	  1301: KI:
00:00009BCE 4AFB            	  1302: 	dc.w $4AFB         ; KNOWN ILLEGAL CODES
                            	  1303: KIEND:   
                            	  1304: 	even
                            	  1305: 
                            	  1306: ;  \1   MASK
                            	  1307: ;  \2   OP-CODE PATTERN
                            	  1308: ;  \3   GOTO OFFSET
                            	  1309: ;  \4   INDEX TO OP-CODE
                            	  1310: C68:     macro arg1,arg2,arg3,arg4
                            	  1311:          DC.W    $\1
                            	  1312:          DC.W    $\2
                            	  1313:          DC.W    (\3-X)
                            	  1314:          DC.w    \4
                            	  1315:          endm
                            	  1316: 
                            	  1317: 				 even
                            	  1318: TBL:     ;.align  2
                            	  1319:          C68     FEC0,E6C0,ISHIFT,56           ; RO
00:00009BD0 FEC0            	     1M          DC.W    $FEC0
00:00009BD2 E6C0            	     2M          DC.W    $E6C0
00:00009BD4 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009BD6 0038            	     4M          DC.w    56
                            	  1320:          C68     FEC0,E4C0,ISHIFT,57           ; ROX
00:00009BD8 FEC0            	     1M          DC.W    $FEC0
00:00009BDA E4C0            	     2M          DC.W    $E4C0
00:00009BDC 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009BDE 0039            	     4M          DC.w    57
                            	  1321:          C68     FEC0,E2C0,ISHIFT,55           ; LS
00:00009BE0 FEC0            	     1M          DC.W    $FEC0
00:00009BE2 E2C0            	     2M          DC.W    $E2C0
00:00009BE4 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009BE6 0037            	     4M          DC.w    55
                            	  1322:          C68     FEC0,E0C0,ISHIFT,54           ; AS
00:00009BE8 FEC0            	     1M          DC.W    $FEC0
00:00009BEA E0C0            	     2M          DC.W    $E0C0
00:00009BEC 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009BEE 0036            	     4M          DC.w    54
                            	  1323:          C68     F018,E018,ISHIFT,56           ; RO
00:00009BF0 F018            	     1M          DC.W    $F018
00:00009BF2 E018            	     2M          DC.W    $E018
00:00009BF4 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009BF6 0038            	     4M          DC.w    56
                            	  1324:          C68     F018,E010,ISHIFT,57           ; ROX
00:00009BF8 F018            	     1M          DC.W    $F018
00:00009BFA E010            	     2M          DC.W    $E010
00:00009BFC 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009BFE 0039            	     4M          DC.w    57
                            	  1325:          C68     F018,E008,ISHIFT,55           ; LS
00:00009C00 F018            	     1M          DC.W    $F018
00:00009C02 E008            	     2M          DC.W    $E008
00:00009C04 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009C06 0037            	     4M          DC.w    55
                            	  1326:          C68     F018,E000,ISHIFT,54           ; AS
00:00009C08 F018            	     1M          DC.W    $F018
00:00009C0A E000            	     2M          DC.W    $E000
00:00009C0C 03B6            	     3M          DC.W    (ISHIFT-X)
00:00009C0E 0036            	     4M          DC.w    54
                            	  1327:          C68     F0C0,D0C0,FORM10EX,4          ; ADD       <EA>,A@
00:00009C10 F0C0            	     1M          DC.W    $F0C0
00:00009C12 D0C0            	     2M          DC.W    $D0C0
00:00009C14 016A            	     3M          DC.W    (FORM10EX-X)
00:00009C16 0004            	     4M          DC.w    4
                            	  1328:          C68     F130,D100,FORM12,53           ; ADDX
00:00009C18 F130            	     1M          DC.W    $F130
00:00009C1A D100            	     2M          DC.W    $D100
00:00009C1C 0208            	     3M          DC.W    (FORM12-X)
00:00009C1E 0035            	     4M          DC.w    53
                            	  1329:          C68     F000,D000,FORM10EX,4          ; ADD
00:00009C20 F000            	     1M          DC.W    $F000
00:00009C22 D000            	     2M          DC.W    $D000
00:00009C24 016A            	     3M          DC.W    (FORM10EX-X)
00:00009C26 0004            	     4M          DC.w    4
                            	  1330:          C68     F1F8,C188,FORM9,50            ; EXG
00:00009C28 F1F8            	     1M          DC.W    $F1F8
00:00009C2A C188            	     2M          DC.W    $C188
00:00009C2C 0160            	     3M          DC.W    (FORM9-X)
00:00009C2E 0032            	     4M          DC.w    50
                            	  1331:          C68     F1F8,C148,FORM8,50            ; EXG
00:00009C30 F1F8            	     1M          DC.W    $F1F8
00:00009C32 C148            	     2M          DC.W    $C148
00:00009C34 0152            	     3M          DC.W    (FORM8-X)
00:00009C36 0032            	     4M          DC.w    50
                            	  1332:          C68     F1F8,C140,FORM7,50            ; EXG
00:00009C38 F1F8            	     1M          DC.W    $F1F8
00:00009C3A C140            	     2M          DC.W    $C140
00:00009C3C 0146            	     3M          DC.W    (FORM7-X)
00:00009C3E 0032            	     4M          DC.w    50
                            	  1333:          C68     F1F0,C100,FORM12,49           ; ABCD
00:00009C40 F1F0            	     1M          DC.W    $F1F0
00:00009C42 C100            	     2M          DC.W    $C100
00:00009C44 0208            	     3M          DC.W    (FORM12-X)
00:00009C46 0031            	     4M          DC.w    49
                            	  1334:          C68     F1C0,C1C0,FORM6D,48           ; MULS
00:00009C48 F1C0            	     1M          DC.W    $F1C0
00:00009C4A C1C0            	     2M          DC.W    $C1C0
00:00009C4C 0120            	     3M          DC.W    (FORM6D-X)
00:00009C4E 0030            	     4M          DC.w    48
                            	  1335:          C68     F1C0,C0C0,FORM6D,47           ; MULU
00:00009C50 F1C0            	     1M          DC.W    $F1C0
00:00009C52 C0C0            	     2M          DC.W    $C0C0
00:00009C54 0120            	     3M          DC.W    (FORM6D-X)
00:00009C56 002F            	     4M          DC.w    47
                            	  1336:          C68     F000,C000,FORM10,2            ; AND
00:00009C58 F000            	     1M          DC.W    $F000
00:00009C5A C000            	     2M          DC.W    $C000
00:00009C5C 01A8            	     3M          DC.W    (FORM10-X)
00:00009C5E 0002            	     4M          DC.w    2
                            	  1337:          C68     F0C0,B0C0,FORM10EX,6          ; CMP     <EA>,A@
00:00009C60 F0C0            	     1M          DC.W    $F0C0
00:00009C62 B0C0            	     2M          DC.W    $B0C0
00:00009C64 016A            	     3M          DC.W    (FORM10EX-X)
00:00009C66 0006            	     4M          DC.w    6
                            	  1338:          C68     F138,B108,FORM12A,46          ; CMPM
00:00009C68 F138            	     1M          DC.W    $F138
00:00009C6A B108            	     2M          DC.W    $B108
00:00009C6C 0244            	     3M          DC.W    (FORM12A-X)
00:00009C6E 002E            	     4M          DC.w    46
                            	  1339:          C68     F100,B100,FORM10,5            ; EOR
00:00009C70 F100            	     1M          DC.W    $F100
00:00009C72 B100            	     2M          DC.W    $B100
00:00009C74 01A8            	     3M          DC.W    (FORM10-X)
00:00009C76 0005            	     4M          DC.w    5
                            	  1340:          C68     F000,B000,FORM10EX,6          ; CMP
00:00009C78 F000            	     1M          DC.W    $F000
00:00009C7A B000            	     2M          DC.W    $B000
00:00009C7C 016A            	     3M          DC.W    (FORM10EX-X)
00:00009C7E 0006            	     4M          DC.w    6
                            	  1341:          C68     F0C0,90C0,FORM10EX,44         ; SUB       <EA>,A@
00:00009C80 F0C0            	     1M          DC.W    $F0C0
00:00009C82 90C0            	     2M          DC.W    $90C0
00:00009C84 016A            	     3M          DC.W    (FORM10EX-X)
00:00009C86 002C            	     4M          DC.w    44
                            	  1342:          C68     F130,9100,FORM12,45           ; SUBX
00:00009C88 F130            	     1M          DC.W    $F130
00:00009C8A 9100            	     2M          DC.W    $9100
00:00009C8C 0208            	     3M          DC.W    (FORM12-X)
00:00009C8E 002D            	     4M          DC.w    45
                            	  1343:          C68     F000,9000,FORM10EX,44         ; SUB
00:00009C90 F000            	     1M          DC.W    $F000
00:00009C92 9000            	     2M          DC.W    $9000
00:00009C94 016A            	     3M          DC.W    (FORM10EX-X)
00:00009C96 002C            	     4M          DC.w    44
                            	  1344:          C68     F1F0,8100,FORM12,43           ; SBCD
00:00009C98 F1F0            	     1M          DC.W    $F1F0
00:00009C9A 8100            	     2M          DC.W    $8100
00:00009C9C 0208            	     3M          DC.W    (FORM12-X)
00:00009C9E 002B            	     4M          DC.w    43
                            	  1345:          C68     F1C0,81C0,FORM6D,42           ; DIVS
00:00009CA0 F1C0            	     1M          DC.W    $F1C0
00:00009CA2 81C0            	     2M          DC.W    $81C0
00:00009CA4 0120            	     3M          DC.W    (FORM6D-X)
00:00009CA6 002A            	     4M          DC.w    42
                            	  1346:          C68     F1C0,80C0,FORM6D,41           ; DIVU
00:00009CA8 F1C0            	     1M          DC.W    $F1C0
00:00009CAA 80C0            	     2M          DC.W    $80C0
00:00009CAC 0120            	     3M          DC.W    (FORM6D-X)
00:00009CAE 0029            	     4M          DC.w    41
                            	  1347:          C68     F000,8000,FORM10,40           ; OR
00:00009CB0 F000            	     1M          DC.W    $F000
00:00009CB2 8000            	     2M          DC.W    $8000
00:00009CB4 01A8            	     3M          DC.W    (FORM10-X)
00:00009CB6 0028            	     4M          DC.w    40
                            	  1348:          C68     F100,7000,IMOVEQ,39           ; MOVEQ
00:00009CB8 F100            	     1M          DC.W    $F100
00:00009CBA 7000            	     2M          DC.W    $7000
00:00009CBC 0270            	     3M          DC.W    (IMOVEQ-X)
00:00009CBE 0027            	     4M          DC.w    39
                            	  1349:          C68     FF00,6100,IBSR,51             ; BSR
00:00009CC0 FF00            	     1M          DC.W    $FF00
00:00009CC2 6100            	     2M          DC.W    $6100
00:00009CC4 0354            	     3M          DC.W    (IBSR-X)
00:00009CC6 0033            	     4M          DC.w    51
                            	  1350:          C68     FF00,6000,IBSR,65             ; BRA
00:00009CC8 FF00            	     1M          DC.W    $FF00
00:00009CCA 6000            	     2M          DC.W    $6000
00:00009CCC 0354            	     3M          DC.W    (IBSR-X)
00:00009CCE 0041            	     4M          DC.w    65
                            	  1351:          C68     F000,6000,ICC,38              ; B
00:00009CD0 F000            	     1M          DC.W    $F000
00:00009CD2 6000            	     2M          DC.W    $6000
00:00009CD4 0350            	     3M          DC.W    (ICC-X)
00:00009CD6 0026            	     4M          DC.w    38
                            	  1352:          C68     F0F8,50C8,IDBCC,37            ; DB
00:00009CD8 F0F8            	     1M          DC.W    $F0F8
00:00009CDA 50C8            	     2M          DC.W    $50C8
00:00009CDC 033E            	     3M          DC.W    (IDBCC-X)
00:00009CDE 0025            	     4M          DC.w    37
                            	  1353:          C68     F0C0,50C0,ISCC,36             ; S
00:00009CE0 F0C0            	     1M          DC.W    $F0C0
00:00009CE2 50C0            	     2M          DC.W    $50C0
00:00009CE4 0334            	     3M          DC.W    (ISCC-X)
00:00009CE6 0024            	     4M          DC.w    36
                            	  1354:          C68     F100,5100,IQUICK,35           ; SUBQ
00:00009CE8 F100            	     1M          DC.W    $F100
00:00009CEA 5100            	     2M          DC.W    $5100
00:00009CEC 026C            	     3M          DC.W    (IQUICK-X)
00:00009CEE 0023            	     4M          DC.w    35
                            	  1355:          C68     F100,5000,IQUICK,34           ; ADDQ
00:00009CF0 F100            	     1M          DC.W    $F100
00:00009CF2 5000            	     2M          DC.W    $5000
00:00009CF4 026C            	     3M          DC.W    (IQUICK-X)
00:00009CF6 0022            	     4M          DC.w    34
                            	  1356:          C68     F1C0,41C0,FORM6A,33           ; LEA
00:00009CF8 F1C0            	     1M          DC.W    $F1C0
00:00009CFA 41C0            	     2M          DC.W    $41C0
00:00009CFC 0110            	     3M          DC.W    (FORM6A-X)
00:00009CFE 0021            	     4M          DC.w    33
                            	  1357:          C68     F1C0,4180,FORM6D,32           ; CHK
00:00009D00 F1C0            	     1M          DC.W    $F1C0
00:00009D02 4180            	     2M          DC.W    $4180
00:00009D04 0120            	     3M          DC.W    (FORM6D-X)
00:00009D06 0020            	     4M          DC.w    32
                            	  1358:          C68     FFC0,4EC0,FORM11SL,31         ; JMP
00:00009D08 FFC0            	     1M          DC.W    $FFC0
00:00009D0A 4EC0            	     2M          DC.W    $4EC0
00:00009D0C 01E4            	     3M          DC.W    (FORM11SL-X)
00:00009D0E 001F            	     4M          DC.w    31
                            	  1359:          C68     FFC0,4E80,FORM11SL,30         ; JSR
00:00009D10 FFC0            	     1M          DC.W    $FFC0
00:00009D12 4E80            	     2M          DC.W    $4E80
00:00009D14 01E4            	     3M          DC.W    (FORM11SL-X)
00:00009D16 001E            	     4M          DC.w    30
                            	  1360:          C68     FFFF,4E77,SCOMMON,29          ; RTR
00:00009D18 FFFF            	     1M          DC.W    $FFFF
00:00009D1A 4E77            	     2M          DC.W    $4E77
00:00009D1C 0330            	     3M          DC.W    (SCOMMON-X)
00:00009D1E 001D            	     4M          DC.w    29
                            	  1361:          C68     FFFF,4E76,SCOMMON,28          ; TRAPV
00:00009D20 FFFF            	     1M          DC.W    $FFFF
00:00009D22 4E76            	     2M          DC.W    $4E76
00:00009D24 0330            	     3M          DC.W    (SCOMMON-X)
00:00009D26 001C            	     4M          DC.w    28
                            	  1362:          C68     FFFF,4E75,SCOMMON,27          ; RTS
00:00009D28 FFFF            	     1M          DC.W    $FFFF
00:00009D2A 4E75            	     2M          DC.W    $4E75
00:00009D2C 0330            	     3M          DC.W    (SCOMMON-X)
00:00009D2E 001B            	     4M          DC.w    27
                            	  1363:          C68     FFFF,4E73,SCOMMON,26          ; RTE
00:00009D30 FFFF            	     1M          DC.W    $FFFF
00:00009D32 4E73            	     2M          DC.W    $4E73
00:00009D34 0330            	     3M          DC.W    (SCOMMON-X)
00:00009D36 001A            	     4M          DC.w    26
                            	  1364:          C68     FFFF,4E72,ISTOP,25            ; STOP
00:00009D38 FFFF            	     1M          DC.W    $FFFF
00:00009D3A 4E72            	     2M          DC.W    $4E72
00:00009D3C 004A            	     3M          DC.W    (ISTOP-X)
00:00009D3E 0019            	     4M          DC.w    25
                            	  1365:          C68     FFFF,4E71,SCOMMON,24          ; NOP
00:00009D40 FFFF            	     1M          DC.W    $FFFF
00:00009D42 4E71            	     2M          DC.W    $4E71
00:00009D44 0330            	     3M          DC.W    (SCOMMON-X)
00:00009D46 0018            	     4M          DC.w    24
                            	  1366:          C68     FFFF,4E70,SCOMMON,23          ; RESET
00:00009D48 FFFF            	     1M          DC.W    $FFFF
00:00009D4A 4E70            	     2M          DC.W    $4E70
00:00009D4C 0330            	     3M          DC.W    (SCOMMON-X)
00:00009D4E 0017            	     4M          DC.w    23
                            	  1367:          C68     FFF8,4E68,IMVFUSP,60          ; MOVE FROM USP
00:00009D50 FFF8            	     1M          DC.W    $FFF8
00:00009D52 4E68            	     2M          DC.W    $4E68
00:00009D54 029E            	     3M          DC.W    (IMVFUSP-X)
00:00009D56 003C            	     4M          DC.w    60
                            	  1368:          C68     FFF8,4E60,IMVTUSP,60          ; MOVE TO USP
00:00009D58 FFF8            	     1M          DC.W    $FFF8
00:00009D5A 4E60            	     2M          DC.W    $4E60
00:00009D5C 02BE            	     3M          DC.W    (IMVTUSP-X)
00:00009D5E 003C            	     4M          DC.w    60
                            	  1369:          C68     FFF8,4E58,FORM5,22            ; UNLINK
00:00009D60 FFF8            	     1M          DC.W    $FFF8
00:00009D62 4E58            	     2M          DC.W    $4E58
00:00009D64 010C            	     3M          DC.W    (FORM5-X)
00:00009D66 0016            	     4M          DC.w    22
                            	  1370:          C68     FFF8,4E50,ILINK,21            ; LINK
00:00009D68 FFF8            	     1M          DC.W    $FFF8
00:00009D6A 4E50            	     2M          DC.W    $4E50
00:00009D6C 00D6            	     3M          DC.W    (ILINK-X)
00:00009D6E 0015            	     4M          DC.w    21
                            	  1371:          C68     FFF0,4E40,FORM4,20            ; TRAP
00:00009D70 FFF0            	     1M          DC.W    $FFF0
00:00009D72 4E40            	     2M          DC.W    $4E40
00:00009D74 00FA            	     3M          DC.W    (FORM4-X)
00:00009D76 0014            	     4M          DC.w    20
                            	  1372:          C68     FF80,4C80,IMOVEMTR,15         ; MOVEM FROM REGISTERS
00:00009D78 FF80            	     1M          DC.W    $FF80
00:00009D7A 4C80            	     2M          DC.W    $4C80
00:00009D7C 002E            	     3M          DC.W    (IMOVEMTR-X)
00:00009D7E 000F            	     4M          DC.w    15
                            	  1373:          C68     FFC0,4AC0,FORM1A,19           ; TAS
00:00009D80 FFC0            	     1M          DC.W    $FFC0
00:00009D82 4AC0            	     2M          DC.W    $4AC0
00:00009D84 00F0            	     3M          DC.W    (FORM1A-X)
00:00009D86 0013            	     4M          DC.w    19
                            	  1374:          C68     FF00,4A00,FORM1,18            ; TST
00:00009D88 FF00            	     1M          DC.W    $FF00
00:00009D8A 4A00            	     2M          DC.W    $4A00
00:00009D8C 00EC            	     3M          DC.W    (FORM1-X)
00:00009D8E 0012            	     4M          DC.w    18
                            	  1375:          C68     FFF8,48C0,FORM3,17            ; EXT.L
00:00009D90 FFF8            	     1M          DC.W    $FFF8
00:00009D92 48C0            	     2M          DC.W    $48C0
00:00009D94 00F6            	     3M          DC.W    (FORM3-X)
00:00009D96 0011            	     4M          DC.w    17
                            	  1376:          C68     FFF8,4880,FORM3,16            ; EXT.W
00:00009D98 FFF8            	     1M          DC.W    $FFF8
00:00009D9A 4880            	     2M          DC.W    $4880
00:00009D9C 00F6            	     3M          DC.W    (FORM3-X)
00:00009D9E 0010            	     4M          DC.w    16
                            	  1377:          C68     FF80,4880,IMOVEMFR,15         ; MOVEA TO REGISTERS
00:00009DA0 FF80            	     1M          DC.W    $FF80
00:00009DA2 4880            	     2M          DC.W    $4880
00:00009DA4 0000            	     3M          DC.W    (IMOVEMFR-X)
00:00009DA6 000F            	     4M          DC.w    15
                            	  1378:          C68     FFF8,4840,FORM3,14            ; SWAP
00:00009DA8 FFF8            	     1M          DC.W    $FFF8
00:00009DAA 4840            	     2M          DC.W    $4840
00:00009DAC 00F6            	     3M          DC.W    (FORM3-X)
00:00009DAE 000E            	     4M          DC.w    14
                            	  1379:          C68     FFC0,4840,FORM11,13           ; PEA
00:00009DB0 FFC0            	     1M          DC.W    $FFC0
00:00009DB2 4840            	     2M          DC.W    $4840
00:00009DB4 01DC            	     3M          DC.W    (FORM11-X)
00:00009DB6 000D            	     4M          DC.w    13
                            	  1380:          C68     FFC0,4800,FORM1A,12           ; NBCD
00:00009DB8 FFC0            	     1M          DC.W    $FFC0
00:00009DBA 4800            	     2M          DC.W    $4800
00:00009DBC 00F0            	     3M          DC.W    (FORM1A-X)
00:00009DBE 000C            	     4M          DC.w    12
                            	  1381:          C68     FFC0,46C0,IMVTSR,59           ; MOVE TO SR
00:00009DC0 FFC0            	     1M          DC.W    $FFC0
00:00009DC2 46C0            	     2M          DC.W    $46C0
00:00009DC4 02AC            	     3M          DC.W    (IMVTSR-X)
00:00009DC6 003B            	     4M          DC.w    59
                            	  1382:          C68     FF00,4600,FORM1,11            ; NOT
00:00009DC8 FF00            	     1M          DC.W    $FF00
00:00009DCA 4600            	     2M          DC.W    $4600
00:00009DCC 00EC            	     3M          DC.W    (FORM1-X)
00:00009DCE 000B            	     4M          DC.w    11
                            	  1383:          C68     FFC0,44C0,IMVTCCR,59          ; MOVE TO CCR
00:00009DD0 FFC0            	     1M          DC.W    $FFC0
00:00009DD2 44C0            	     2M          DC.W    $44C0
00:00009DD4 02CA            	     3M          DC.W    (IMVTCCR-X)
00:00009DD6 003B            	     4M          DC.w    59
                            	  1384:          C68     FF00,4400,FORM1,10            ; NEG
00:00009DD8 FF00            	     1M          DC.W    $FF00
00:00009DDA 4400            	     2M          DC.W    $4400
00:00009DDC 00EC            	     3M          DC.W    (FORM1-X)
00:00009DDE 000A            	     4M          DC.w    10
                            	  1385:          C68     FF00,4200,FORM1,9             ; CLR
00:00009DE0 FF00            	     1M          DC.W    $FF00
00:00009DE2 4200            	     2M          DC.W    $4200
00:00009DE4 00EC            	     3M          DC.W    (FORM1-X)
00:00009DE6 0009            	     4M          DC.w    9
                            	  1386:          C68     FFC0,40C0,IMVFSR,59           ; MOVE.W  FROM  SR
00:00009DE8 FFC0            	     1M          DC.W    $FFC0
00:00009DEA 40C0            	     2M          DC.W    $40C0
00:00009DEC 0290            	     3M          DC.W    (IMVFSR-X)
00:00009DEE 003B            	     4M          DC.w    59
                            	  1387:          C68     FF00,4000,FORM1,8             ; NEGX
00:00009DF0 FF00            	     1M          DC.W    $FF00
00:00009DF2 4000            	     2M          DC.W    $4000
00:00009DF4 00EC            	     3M          DC.W    (FORM1-X)
00:00009DF6 0008            	     4M          DC.w    8
                            	  1388:          C68     F000,3000,IMOVE,59            ; MOVE.W
00:00009DF8 F000            	     1M          DC.W    $F000
00:00009DFA 3000            	     2M          DC.W    $3000
00:00009DFC 00D2            	     3M          DC.W    (IMOVE-X)
00:00009DFE 003B            	     4M          DC.w    59
                            	  1389:          C68     F000,2000,IMOVE,60            ; MOVE.L
00:00009E00 F000            	     1M          DC.W    $F000
00:00009E02 2000            	     2M          DC.W    $2000
00:00009E04 00D2            	     3M          DC.W    (IMOVE-X)
00:00009E06 003C            	     4M          DC.w    60
                            	  1390:          C68     F000,1000,IMOVE,58            ; MOVE.B
00:00009E08 F000            	     1M          DC.W    $F000
00:00009E0A 1000            	     2M          DC.W    $1000
00:00009E0C 00D2            	     3M          DC.W    (IMOVE-X)
00:00009E0E 003A            	     4M          DC.w    58
                            	  1391:          C68     FF00,0C00,IMMED,6             ; CMP       #
00:00009E10 FF00            	     1M          DC.W    $FF00
00:00009E12 0C00            	     2M          DC.W    $0C00
00:00009E14 005E            	     3M          DC.W    (IMMED-X)
00:00009E16 0006            	     4M          DC.w    6
                            	  1392:          C68     FF00,0A00,IMMED,5             ; EOR       #
00:00009E18 FF00            	     1M          DC.W    $FF00
00:00009E1A 0A00            	     2M          DC.W    $0A00
00:00009E1C 005E            	     3M          DC.W    (IMMED-X)
00:00009E1E 0005            	     4M          DC.w    5
                            	  1393:          C68     FF00,0600,IMMED,4             ; ADD       #
00:00009E20 FF00            	     1M          DC.W    $FF00
00:00009E22 0600            	     2M          DC.W    $0600
00:00009E24 005E            	     3M          DC.W    (IMMED-X)
00:00009E26 0004            	     4M          DC.w    4
                            	  1394:          C68     FF00,0400,IMMED,3             ; SUB       #
00:00009E28 FF00            	     1M          DC.W    $FF00
00:00009E2A 0400            	     2M          DC.W    $0400
00:00009E2C 005E            	     3M          DC.W    (IMMED-X)
00:00009E2E 0003            	     4M          DC.w    3
                            	  1395:          C68     FF00,0200,IMMED,2             ; AND       #
00:00009E30 FF00            	     1M          DC.W    $FF00
00:00009E32 0200            	     2M          DC.W    $0200
00:00009E34 005E            	     3M          DC.W    (IMMED-X)
00:00009E36 0002            	     4M          DC.w    2
                            	  1396:          C68     FF00,0000,IMMED,1             ; OR        #
00:00009E38 FF00            	     1M          DC.W    $FF00
00:00009E3A 0000            	     2M          DC.W    $0000
00:00009E3C 005E            	     3M          DC.W    (IMMED-X)
00:00009E3E 0001            	     4M          DC.w    1
                            	  1397:          C68     F138,0108,IMOVEP,0            ; MOVEP
00:00009E40 F138            	     1M          DC.W    $F138
00:00009E42 0108            	     2M          DC.W    $0108
00:00009E44 02DA            	     3M          DC.W    (IMOVEP-X)
00:00009E46 0000            	     4M          DC.w    0
                            	  1398:          C68     FFC0,08C0,ISETS,64            ; BSET
00:00009E48 FFC0            	     1M          DC.W    $FFC0
00:00009E4A 08C0            	     2M          DC.W    $08C0
00:00009E4C 039C            	     3M          DC.W    (ISETS-X)
00:00009E4E 0040            	     4M          DC.w    64
                            	  1399:          C68     FFC0,0880,ISETS,63            ; BCLR
00:00009E50 FFC0            	     1M          DC.W    $FFC0
00:00009E52 0880            	     2M          DC.W    $0880
00:00009E54 039C            	     3M          DC.W    (ISETS-X)
00:00009E56 003F            	     4M          DC.w    63
                            	  1400:          C68     FFC0,0840,ISETS,62            ; BCHG
00:00009E58 FFC0            	     1M          DC.W    $FFC0
00:00009E5A 0840            	     2M          DC.W    $0840
00:00009E5C 039C            	     3M          DC.W    (ISETS-X)
00:00009E5E 003E            	     4M          DC.w    62
                            	  1401:          C68     FFC0,0800,ISETS,61            ; BTST
00:00009E60 FFC0            	     1M          DC.W    $FFC0
00:00009E62 0800            	     2M          DC.W    $0800
00:00009E64 039C            	     3M          DC.W    (ISETS-X)
00:00009E66 003D            	     4M          DC.w    61
                            	  1402:          C68     F1C0,01C0,ISETD,64            ; BSET
00:00009E68 F1C0            	     1M          DC.W    $F1C0
00:00009E6A 01C0            	     2M          DC.W    $01C0
00:00009E6C 038C            	     3M          DC.W    (ISETD-X)
00:00009E6E 0040            	     4M          DC.w    64
                            	  1403:          C68     F1C0,0180,ISETD,63            ; BCLR
00:00009E70 F1C0            	     1M          DC.W    $F1C0
00:00009E72 0180            	     2M          DC.W    $0180
00:00009E74 038C            	     3M          DC.W    (ISETD-X)
00:00009E76 003F            	     4M          DC.w    63
                            	  1404:          C68     F1C0,0140,ISETD,62            ; BCHG
00:00009E78 F1C0            	     1M          DC.W    $F1C0
00:00009E7A 0140            	     2M          DC.W    $0140
00:00009E7C 038C            	     3M          DC.W    (ISETD-X)
00:00009E7E 003E            	     4M          DC.w    62
                            	  1405:          C68     F1C0,0100,ISETD,61            ; BTST
00:00009E80 F1C0            	     1M          DC.W    $F1C0
00:00009E82 0100            	     2M          DC.W    $0100
00:00009E84 038C            	     3M          DC.W    (ISETD-X)
00:00009E86 003D            	     4M          DC.w    61
                            	  1406: TBLE:
                            	  1407:           even
                            	  1408: 
                            	  1409: N68:     macro arg1,arg2
                            	  1410:          dc.b  "\1",\2
                            	  1411:          endm
                            	  1412: 
                            	  1413: 				even
                            	  1414: OPCTBL:  ;.align  2
                            	  1415:          N68     MOVE,$d0    ; 0
00:00009E88 4D4F5645        	     1M          dc.b  "MOVE",$d0
00:00009E8C D0
                            	  1416:          N68     O,$d2       ; 1
00:00009E8D 4F              	     1M          dc.b  "O",$d2
00:00009E8E D2
                            	  1417:          N68     AN,$c4      ; 2
00:00009E8F 414E            	     1M          dc.b  "AN",$c4
00:00009E91 C4
                            	  1418:          N68     SU,$c2      ; 3
00:00009E92 5355            	     1M          dc.b  "SU",$c2
00:00009E94 C2
                            	  1419:          N68     AD,$c4      ; 4
00:00009E95 4144            	     1M          dc.b  "AD",$c4
00:00009E97 C4
                            	  1420:          N68     EO,$d2      ; 5
00:00009E98 454F            	     1M          dc.b  "EO",$d2
00:00009E9A D2
                            	  1421:          N68     CM,$d0      ; 6
00:00009E9B 434D            	     1M          dc.b  "CM",$d0
00:00009E9D D0
                            	  1422:          N68     MOV,$c5     ; 7
00:00009E9E 4D4F56          	     1M          dc.b  "MOV",$c5
00:00009EA1 C5
                            	  1423:          N68     NEG,$d8     ; 8
00:00009EA2 4E4547          	     1M          dc.b  "NEG",$d8
00:00009EA5 D8
                            	  1424:          N68     CL,$d2      ; 9
00:00009EA6 434C            	     1M          dc.b  "CL",$d2
00:00009EA8 D2
                            	  1425:          N68     NE,$c7      ; 10
00:00009EA9 4E45            	     1M          dc.b  "NE",$c7
00:00009EAB C7
                            	  1426:          N68     NO,$d4      ; 11
00:00009EAC 4E4F            	     1M          dc.b  "NO",$d4
00:00009EAE D4
                            	  1427:          N68     NBC,$c4     ; 12
00:00009EAF 4E4243          	     1M          dc.b  "NBC",$c4
00:00009EB2 C4
                            	  1428:          N68     PEA.,$cc    ; 13
00:00009EB3 5045412E        	     1M          dc.b  "PEA.",$cc
00:00009EB7 CC
                            	  1429:          N68     SWAP.,$d7   ; 14
00:00009EB8 535741502E      	     1M          dc.b  "SWAP.",$d7
00:00009EBD D7
                            	  1430:          N68     MOVE,$cd    ; 15
00:00009EBE 4D4F5645        	     1M          dc.b  "MOVE",$cd
00:00009EC2 CD
                            	  1431:          N68     EXT.,$d7    ; 16
00:00009EC3 4558542E        	     1M          dc.b  "EXT.",$d7
00:00009EC7 D7
                            	  1432:          N68     EXT.,$cc    ; 17
00:00009EC8 4558542E        	     1M          dc.b  "EXT.",$cc
00:00009ECC CC
                            	  1433:          N68     TS,$d4      ; 18
00:00009ECD 5453            	     1M          dc.b  "TS",$d4
00:00009ECF D4
                            	  1434:          N68     TAS.,$c2    ; 19
00:00009ED0 5441532E        	     1M          dc.b  "TAS.",$c2
00:00009ED4 C2
                            	  1435:          N68     TRA,$d0     ; 20
00:00009ED5 545241          	     1M          dc.b  "TRA",$d0
00:00009ED8 D0
                            	  1436:          N68     LIN,$cb     ; 21
00:00009ED9 4C494E          	     1M          dc.b  "LIN",$cb
00:00009EDC CB
                            	  1437:          N68     UNL,$cb     ; 22
00:00009EDD 554E4C          	     1M          dc.b  "UNL",$cb
00:00009EE0 CB
                            	  1438:          N68     RESE,$d4    ; 23
00:00009EE1 52455345        	     1M          dc.b  "RESE",$d4
00:00009EE5 D4
                            	  1439:          N68     NO,$d0      ; 24
00:00009EE6 4E4F            	     1M          dc.b  "NO",$d0
00:00009EE8 D0
                            	  1440:          N68     STO,$d0     ; 25
00:00009EE9 53544F          	     1M          dc.b  "STO",$d0
00:00009EEC D0
                            	  1441:          N68     RT,$c5      ; 26
00:00009EED 5254            	     1M          dc.b  "RT",$c5
00:00009EEF C5
                            	  1442:          N68     RT,$d3      ; 27
00:00009EF0 5254            	     1M          dc.b  "RT",$d3
00:00009EF2 D3
                            	  1443:          N68     TRAP,$d6    ; 28
00:00009EF3 54524150        	     1M          dc.b  "TRAP",$d6
00:00009EF7 D6
                            	  1444:          N68     RT,$d2      ; 29
00:00009EF8 5254            	     1M          dc.b  "RT",$d2
00:00009EFA D2
                            	  1445:          N68     JS,$d2      ; 30
00:00009EFB 4A53            	     1M          dc.b  "JS",$d2
00:00009EFD D2
                            	  1446:          N68     JM,$d0      ; 31
00:00009EFE 4A4D            	     1M          dc.b  "JM",$d0
00:00009F00 D0
                            	  1447:          N68     CHK.,$d7    ; 32
00:00009F01 43484B2E        	     1M          dc.b  "CHK.",$d7
00:00009F05 D7
                            	  1448:          N68     LEA.,$cc    ; 33
00:00009F06 4C45412E        	     1M          dc.b  "LEA.",$cc
00:00009F0A CC
                            	  1449:          N68     ADD,$d1     ; 34
00:00009F0B 414444          	     1M          dc.b  "ADD",$d1
00:00009F0E D1
                            	  1450:          N68     SUB,$d1     ; 35
00:00009F0F 535542          	     1M          dc.b  "SUB",$d1
00:00009F12 D1
00:00009F13 D3              	  1451:          DC.B    $d3         ; 36
                            	  1452:          N68     D,$c2       ; 37
00:00009F14 44              	     1M          dc.b  "D",$c2
00:00009F15 C2
00:00009F16 C2              	  1453:          DC.B    $c2         ; 38
                            	  1454:          N68     MOVEQ.,$cc  ; .....39
00:00009F17 4D4F5645512E    	     1M          dc.b  "MOVEQ.",$cc
00:00009F1D CC
                            	  1455:          N68     O,$d2       ; 40
00:00009F1E 4F              	     1M          dc.b  "O",$d2
00:00009F1F D2
                            	  1456:          N68     DIVU.,$d7   ; 41
00:00009F20 444956552E      	     1M          dc.b  "DIVU.",$d7
00:00009F25 D7
                            	  1457:          N68     DIVS.,$d7   ; 42
00:00009F26 444956532E      	     1M          dc.b  "DIVS.",$d7
00:00009F2B D7
                            	  1458:          N68     SBC,$c4     ; 43
00:00009F2C 534243          	     1M          dc.b  "SBC",$c4
00:00009F2F C4
                            	  1459:          N68     SU,$c2      ; 44
00:00009F30 5355            	     1M          dc.b  "SU",$c2
00:00009F32 C2
                            	  1460:          N68     SUB,$d8     ; 45
00:00009F33 535542          	     1M          dc.b  "SUB",$d8
00:00009F36 D8
                            	  1461:          N68     CMP,$cd     ; 46
00:00009F37 434D50          	     1M          dc.b  "CMP",$cd
00:00009F3A CD
                            	  1462:          N68     MULU.,$d7   ; 47
00:00009F3B 4D554C552E      	     1M          dc.b  "MULU.",$d7
00:00009F40 D7
                            	  1463:          N68     MULS.,$d7   ; 48
00:00009F41 4D554C532E      	     1M          dc.b  "MULS.",$d7
00:00009F46 D7
                            	  1464:          N68     ABC,$c4     ; 49
00:00009F47 414243          	     1M          dc.b  "ABC",$c4
00:00009F4A C4
                            	  1465:          N68     EX,$c7      ; 50
00:00009F4B 4558            	     1M          dc.b  "EX",$c7
00:00009F4D C7
                            	  1466:          N68     BS,$d2      ; .....51
00:00009F4E 4253            	     1M          dc.b  "BS",$d2
00:00009F50 D2
                            	  1467:          N68     NUL,$cc     ; .....52
00:00009F51 4E554C          	     1M          dc.b  "NUL",$cc
00:00009F54 CC
                            	  1468:          N68     ADD,$d8     ; 53
00:00009F55 414444          	     1M          dc.b  "ADD",$d8
00:00009F58 D8
                            	  1469:          N68     A,$d3       ; 54
00:00009F59 41              	     1M          dc.b  "A",$d3
00:00009F5A D3
                            	  1470:          N68     L,$d3       ; 55
00:00009F5B 4C              	     1M          dc.b  "L",$d3
00:00009F5C D3
                            	  1471:          N68     R,$cf       ; 56
00:00009F5D 52              	     1M          dc.b  "R",$cf
00:00009F5E CF
                            	  1472:          N68     RO,$d8      ; 57
00:00009F5F 524F            	     1M          dc.b  "RO",$d8
00:00009F61 D8
                            	  1473:          N68     MOVE.,$c2   ; 58
00:00009F62 4D4F56452E      	     1M          dc.b  "MOVE.",$c2
00:00009F67 C2
                            	  1474:          N68     MOVE.,$d7   ; 59
00:00009F68 4D4F56452E      	     1M          dc.b  "MOVE.",$d7
00:00009F6D D7
                            	  1475:          N68     MOVE.,$cc   ; 60
00:00009F6E 4D4F56452E      	     1M          dc.b  "MOVE.",$cc
00:00009F73 CC
                            	  1476:          N68     BTS,$d4     ; 61
00:00009F74 425453          	     1M          dc.b  "BTS",$d4
00:00009F77 D4
                            	  1477:          N68     BCH,$c7     ; 62
00:00009F78 424348          	     1M          dc.b  "BCH",$c7
00:00009F7B C7
                            	  1478:          N68     BCL,$d2     ; 63
00:00009F7C 42434C          	     1M          dc.b  "BCL",$d2
00:00009F7F D2
                            	  1479:          N68     BSE,$d4     ; 64
00:00009F80 425345          	     1M          dc.b  "BSE",$d4
00:00009F83 D4
                            	  1480:          N68     BR,$c1      ; 65
00:00009F84 4252            	     1M          dc.b  "BR",$c1
00:00009F86 C1
                            	  1481: 
00:00009F87 00              	  1482:          DC.B    0         ; PAD BYTE
                            	  1483: 
                            	  1484: 

Source: "boot.x68"
                            	  3756:  	include "games/asteroids/asteroids 1_0.x68"

Source: "games\asteroids\asteroids 1_0.x68"
                            	     1: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	     2: ;														;
                            	     3: ;	ASTEROIDS type game for the EASy68k simulator	2009/05/17	V1.00			;
                            	     4: ;														;
                            	     5: ;	The objective of of the game is to score as many points as possible by		;
                            	     6: ;	destroying asteroids and flying saucers. You control a triangular ship		;
                            	     7: ;	that can rotate, fire shots forward and thrust forward. As the ship moves,	;
                            	     8: ;	momentum is not conserved, the ship eventually comes to a stop when not		;
                            	     9: ;	thrusting. In moments of extreme danger you can send the ship into		;
                            	    10: ;	hyperspace, causing it to disappear and reappear in a random location.		;
                            	    11: ;														;
                            	    12: ;	Each wave starts with the asteroids drifting in random directions onto the	;
                            	    13: ;	screen. Objects wrap around screen edges, an asteroid that drifts off the	;
                            	    14: ;	left edge of the screen reappears at the right and continues moving in the	;
                            	    15: ;	same direction. As you shoot asteroids they break into smaller asteroids	;
                            	    16: ;	that often move faster and are more difficult to hit. The smaller the		;
                            	    17: ;	asteroid the higher the points scored.							;
                            	    18: ;														;
                            	    19: ;	Every so often a flying saucer will appear on one side of the screen and	;
                            	    20: ;	move to the other before disappearing again. Large saucers fire in random	;
                            	    21: ;	directions, while small saucers aim their fire towards the player's ship.	;
                            	    22: ;														;
                            	    23: ;	Once all of the asteroids and flying saucers have been cleared a new set of	;
                            	    24: ;	large asteroids appears. The number of asteroids increases by two each round	;
                            	    25: ;	up to a maximum of eleven. The game continues until all the player lives	;
                            	    26: ;	are lost, a bonus life being awarded for each 10,000 points scored up to a	;
                            	    27: ;	maximum of 255 lives. A maximum of only 18 lives are shown on screen.		;
                            	    28: ;														;
                            	    29: ;	Like the original game the maximum possible score in this game is 99,990	;
                            	    30: ;	points after which it rolls over back to zero.						;
                            	    31: ;														;
                            	    32: ;	Also like the original game some game parameters can be set using the		;
                            	    33: ;	switches in the hardware window. These can be changed at any time during	;
                            	    34: ;	the game.												;
                            	    35: ;														;
                            	    36: ;	Switch	Function										;
                            	    37: ;	------	--------										;
                            	    38: ;	7 - 3		Unused										;
                            	    39: ;	  2		Starting ship count. On = 4, off = 3					;
                            	    40: ;	1 - 0		Language	1	0								;
                            	    41: ;					off	off	English						;
                            	    42: ;					off	on	German						;
                            	    43: ;					on	off	French						;
                            	    44: ;					on	on	Spanish						;
                            	    45: ;														;
                            	    46: ;	Game controls...											;
                            	    47: ;														;
                            	    48: ;	 [1] or [2] for a one or two player game start						;
                            	    49: ;	 [s] to toggle the sound off and on								;
                            	    50: ;														;
                            	    51: ;	 [q] to rotate the ship widdershins								;
                            	    52: ;	 [w] to rotate the ship deocil								;
                            	    53: ;	 [l] to fire the ship thruster								;
                            	    54: ;	 [p] to fire the ship weapon									;
                            	    55: ;	 [SPACE] to jump to hyperspace								;
                            	    56: ;														;
                            	    57: ;	Other keys are:											;
                            	    58: ;														;
                            	    59: ;	 The F2, F3 and F4 keys can be used to select a screen size of 640 x 480,	;
                            	    60: ;	 800 x 600 and 1024 x 768 respectively.							;
                            	    61: ;														;
                            	    62: ;	The game saves the high scores in the file asteroids.hi If this file is		;
                            	    63: ;	not present it will be created after the first high score is entered. If	;
                            	    64: ;	this file is read only new high scores will not be saved. No check is made	;
                            	    65: ;	on the validity of this file, editing the file may cause the game to crash.	;
                            	    66: ;														;
                            	    67: ;	This version for Sim68K 4.6.0 or later							;
                            	    68: ;														;
                            	    69: ;	More 68000 and other projects can be found on my website at ..			;
                            	    70: ;														;
                            	    71: ;	 http://mycorner.no-ip.org/index.html							;
                            	    72: ;														;
                            	    73: ;	mail : leeedavison@googlemail.com								;
                            	    74: ;														;
                            	    75: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	    76: 
                            	    77: ; a0 = system calls and volatile
                            	    78: ; a1 = system calls and volatile
                            	    79: ; a2 = volatile
                            	    80: ; a3 = variables base address
                            	    81: ; a4 = vector list pointer
                            	    82: ; a5 = player 1 / current player
                            	    83: ; a6 = player 2 / other player
                            	    84: ; a7 = stack pointer
                            	    85: 
                            	    86: 
                            	    87: 	ORG	$10000
                            	    88: 	code
                            	    89: 	even
                            	    90: 
                            	    91: asteroids_start:
00:00009F88 61001226        	    92: 	bsr	Initialise				; go setup everything
00:00009F8C 610006DE        	    93: 	bsr reset_game				; clear the scores and set the ship start count
                            	    94: 
                            	    95: ; main loop. this is executed at most once every 16ms, as it waits for the 16ms counter
                            	    96: ; to be incremented from zero since the last loop
                            	    97: 
                            	    98: main_loop:
00:00009F90 705E            	    99: 	moveq	#94,d0					; copy screen buffer to main (page flip)
00:00009F92 4E4F            	   100: 	trap #15
                            	   101: 
00:00009F94 7E06            	   102: 	moveq #6,d7						; video frame buffer
00:00009F96 7C0C            	   103: 	moveq #DEV_CLEAR,d6
00:00009F98 4E40            	   104: 	trap #0
                            	   105: 
                            	   106: ;	move.w #$FF00,d1			; clear screen
                            	   107: ;	moveq #11,d0					; position cursor
                            	   108: ;	trap #15
                            	   109: 
                            	   110: ;	bsr sound_key					; handle the sound key
00:00009F9A 61001208        	   111: 	bsr s_controls				; go check the screen controls
                            	   112: 
00:00009F9E 20390004009C    	   113: 	move.l tickcnt,d0
                            	   114: .0001:
00:00009FA4 B0B90004009C    	   115: 	cmp.l tickcnt,d0
00:00009FAA 67F8            	   116: 	beq.s .0001
00:00009FAC 7001            	   117: 	moveq #1,d0
                            	   118: ;wait_16ms
                            	   119: ;	MOVE.b	sixteen_ms(a3),d0		; get the 16ms counter
                            	   120: ;	BEQ.s		wait_16ms			; if not there yet just loop
                            	   121: 
                            	   122: ;	clr.b	sixteen_ms(a3)			; clear the 16ms counter
00:00009FAE D16B0059        	   123: 	add.w d0,game_count(a3)		; increment the game counter
00:00009FB2 D12B0025        	   124: 	add.b d0,time_count(a3)		; increment the timeout counter
                            	   125: 
00:00009FB6 49FA13E0        	   126: 	lea vector(pc),a4			; reset the vector RAM pointer
                            	   127: 
00:00009FBA 6168            	   128: 	bsr game_message			; do "PLAYER x", "GAME OVER" or credit messages
                            	   129: 
00:00009FBC 61000F20        	   130: 	bsr check_hiscores		; do the high score checks
00:00009FC0 610004C4        	   131: 	bsr enter_hiscores		; get the player high score entries
00:00009FC4 6A30            	   132: 	bpl.s no_play					; if the high scores are being entered skip the
                            	   133: 												; active play routines
                            	   134: 
00:00009FC6 61000C74        	   135: 	bsr high_scores				; display the high score table if the game is
                            	   136: 												; over
00:00009FCA 652A            	   137: 	bcs.s	no_play					; if the high score table was displayed skip
                            	   138: 												; active play
                            	   139: 
00:00009FCC 4A2B001C        	   140: 	tst.b px_time(a3)			; test the "PLAYER x" timer
00:00009FD0 661C            	   141: 	bne.s px_hide					; skip the control checks if the "PLAYER x"
                            	   142: 												; timer is not timed out
                            	   143: 
00:00009FD2 4A2B001A        	   144: 	tst.b num_players(a3)	; test the number of players in the game
00:00009FD6 6712            	   145: 	beq.s skip_player_cont		; if no players skip the player controls
                            	   146: 
00:00009FD8 4A2D0027        	   147: 	tst.b p_flag_off(a5)			; test the player flag
00:00009FDC 6B08            	   148: 	bmi.s skip_player_move		; if the player is exploding skip the player
                            	   149: 														; move controls
                            	   150: 
00:00009FDE 610003FE        	   151: 	bsr	ship_fire					; handle the fire button			##
00:00009FE2 610005F8        	   152: 	bsr	hyperspace				; handle the hyperspace button		##
                            	   153: skip_player_move
00:00009FE6 610007F4        	   154: 	bsr ship_move					; handle ship rotation and thrust		##
                            	   155: skip_player_cont
00:00009FEA 61000284        	   156: 	bsr do_saucer					; handle the saucer
                            	   157: px_hide
00:00009FEE 610006FA        	   158: 	bsr move_items				; move all the objects and add them to the
                            	   159: 												; vector list
00:00009FF2 6100014A        	   160: 	bsr check_hits				; check for player/saucer/shot hits
                            	   161: no_play
00:00009FF6 61000AB4        	   162: 	bsr static_messages		; add (c), scores and players ships to the
                            	   163: 												; vector list
                            	   164: 
00:00009FFA 61000E2A        	   165: 	bsr fx_sounds					; do the saucer and thump sounds
                            	   166: 
00:00009FFE 38FCB000        	   167: 	move.w #HALT,(a4)+		; add HALT to the vector list
                            	   168: 
00:0000A002 49FA1394        	   169: 	lea vector(pc),a4			; reset the vector RAM pointer
00:0000A006 61001246        	   170: 	bsr do_vector					; go do the vector list, draw them
                            	   171: 
00:0000A00A 102D007B        	   172: 	move.b new_rocks(a5),d0			; test the generate new rocks flag
00:0000A00E 6704            	   173: 	beq.s no_dec_new_rocks			; if counted out skip the decrement
                            	   174: 
00:0000A010 532D007B        	   175: 	subq.b #1,new_rocks(a5)			; else decrement the generate new rocks flag
                            	   176: no_dec_new_rocks
00:0000A014 802D0076        	   177: 	or.b rock_count(a5),d0			; OR the new rocks flag with the rock count
00:0000A018 6600FF76        	   178: 	bne main_loop					; if not counted out or still rocks go do the
                            	   179: 												; main loop
                            	   180: 
00:0000A01C 487AFF72        	   181: 	pea main_loop					; return to the main loop
00:0000A020 60000910        	   182: 	bra make_rocks				; go generate new rocks
                            	   183: 
                            	   184: 
                            	   185: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   186: ;
                            	   187: ; do "PLAYER x", "GAME OVER" or credit messages
                            	   188: 
                            	   189: game_message:
00:0000A024 4A2B001A        	   190: 	tst.b num_players(a3)		; test the number of players in the game
00:0000A028 670E            	   191: 	beq.s do_start_mess			; if no players go do the start message
                            	   192: 
00:0000A02A 4A2B001C        	   193: 	tst.b px_time(a3)				; test the "PLAYER x" timer
00:0000A02E 677C            	   194: 	beq.s game_over					; if timed out go do "GAME OVER" or thump
                            	   195: 													; sound count
                            	   196: 
00:0000A030 532B001C        	   197: 	subq.b #1,px_time(a3)		; decrement the "PLAYER x" timer
00:0000A034 60001104        	   198: 	bra player_x						; add "PLAYER x" to the vector list and return
                            	   199: 
                            	   200: ; do the push start message
                            	   201: 
                            	   202: do_start_mess:
00:0000A038 7005            	   203: 	moveq #5,d0					; GetKey
00:0000A03A 4E4F            	   204: 	trap #15
00:0000A03C 4A81            	   205: 	tst.l d1
00:0000A03E 6B54            	   206: 	bmi.s push_start_mess
00:0000A040 7001            	   207: 	moveq #1,d0
00:0000A042 0C010031        	   208: 	cmpi.b #'1',d1
00:0000A046 6718            	   209: 	beq.s start_game
00:0000A048 0C010032        	   210: 	cmpi.b #'2',d1
00:0000A04C 6646            	   211: 	bne.s push_start_mess
                            	   212: 
                            	   213: ;	MOVE.l	#'2121',d1			; [2][1][2][1] key
                            	   214: ;	MOVEQ		#19,d0			; check for keypress
                            	   215: ;	TRAP		#15
                            	   216: 
                            	   217: ;	MOVEQ		#1,d0				; default to one player
                            	   218: ;	TST.b		d1				; test the [1] key result
                            	   219: ;	BMI.s		start_game			; if pressed go start a one player game
                            	   220: 
                            	   221: ;	TST.w		d1				; test the [2] key result
                            	   222: 	;BPL.s		push_start_mess		; if not pressed go do the "PUSH START" message
                            	   223: 
                            	   224: 							; else the two player start was pressed
00:0000A04E 4BEB01F7        	   225: 	lea player_2(a3),a5		; set the pointer to player two's variables
00:0000A052 61000618        	   226: 	bsr reset_game				; clear the score and set the ship start count
00:0000A056 61000982        	   227: 	bsr player_init				; initialise the player variables
00:0000A05A 610008D6        	   228: 	bsr make_rocks				; generate new rocks
00:0000A05E 7002            	   229: 	moveq #2,d0						; set two players in this game
                            	   230: 
                            	   231: ; one or two player game start
                            	   232: 
                            	   233: start_game:
00:0000A060 1740001A        	   234: 	move.b d0,num_players(a3)	; save the number of players in the game
                            	   235: 
00:0000A064 422B0018        	   236: 	clr.b player_idx(a3)			; clear the player index
00:0000A068 4BEB00F3        	   237: 	lea	player_1(a3),a5				; set the pointer to player one's variables
00:0000A06C 4DEB01F7        	   238: 	lea player_2(a3),a6				; set the pointer to player two's variables
                            	   239: 
00:0000A070 610005FA        	   240: 	bsr reset_game				; clear the scores and set the ship start count
00:0000A074 61000964        	   241: 	bsr player_init				; initialise the player variables
00:0000A078 610008B8        	   242: 	bsr make_rocks				; generate new rocks
                            	   243: 
00:0000A07C 7000            	   244: 	moveq #0,d0						; clear the longword
00:0000A07E 3B400080        	   245: 	move.w d0,score_off(a5)		; clear player 1's score
00:0000A082 3D400080        	   246: 	move.w d0,score_off(a6)		; clear player 2's score
                            	   247: 
00:0000A086 177C0080001C    	   248: 	move.b #$80,px_time(a3)		; set the "PLAYER x" timer
00:0000A08C 177C00040024    	   249: 	move.b #$04,thump_time(a3)	; set the thump sound change timer
00:0000A092 4E75            	   250: 	rts
                            	   251: 
                            	   252: ; else do the "PUSH START" message
                            	   253: 
                            	   254: push_start_mess:
00:0000A094 102B0176        	   255: 	move.b p1_high(a3),d0			; get the player 1 highscore flag
00:0000A098 C02B027A        	   256: 	and.b p2_high(a3),d0			; and with the player 2 highscore flag
00:0000A09C 6A0C            	   257: 	bpl.s exit_push_start			; if either player is entering their high score
                            	   258: 														; skip the "PUSH START" message
                            	   259: 
00:0000A09E 7206            	   260: 	moveq #$06,d1								; message 6 - "PUSH START"
00:0000A0A0 082B0005005A    	   261: 	btst.b #5,game_count+1(a3)	; test a bit in the game counter low byte
00:0000A0A6 67001024        	   262: 	beq add_message							; if set add message d1 to the display list
                            	   263: 															; and return
                            	   264: exit_push_start
00:0000A0AA 4E75            	   265: 	rts
                            	   266: 
                            	   267: ; do "GAME OVER" or thump sound count
                            	   268: 
                            	   269: game_over:
00:0000A0AC 703F            	   270: 	moveq #$3F,d0							; set the game counter mask
00:0000A0AE C06B0059        	   271: 	and.w game_count(a3),d0		; mask the game counter
00:0000A0B2 660C            	   272: 	bne.s nodec_thmpi					; branch if not zero
                            	   273: 
                            	   274: 							; gets here 1/64th of the time
00:0000A0B4 0C2D0006007C    	   275: 	cmpi.b #6,thmp_sndi(a5)		; compare the thump sound change timer initial
                            	   276: 							; value with the minimum value
00:0000A0BA 6704            	   277: 	beq.s nodec_thmpi					; if there already don't decrement it
                            	   278: 
00:0000A0BC 532D007C        	   279: 	subq.b #1,thmp_sndi(a5)		; else decrement the thump sound change timer
                            	   280: 							; initial value
                            	   281: nodec_thmpi
00:0000A0C0 4A2D0082        	   282: 	tst.b ships_off(a5)			; test the player ship count
00:0000A0C4 6624            	   283: 	bne.s no_game_over			; if ships left skip game over
                            	   284: 
                            	   285: 							; else this player has no ships left
00:0000A0C6 102D002B        	   286: 	move.b p_fire_off(a5),d0		; get player fire 1
00:0000A0CA 802D002C        	   287: 	or.b p_fire_off+1(a5),d0		; OR with player fire 2
00:0000A0CE 802D002D        	   288: 	or.b p_fire_off+2(a5),d0		; OR with player fire 3
00:0000A0D2 802D002E        	   289: 	or.b p_fire_off+3(a5),d0		; OR with player fire 4
00:0000A0D6 6612            	   290: 	bne.s no_game_over			; if shots still flying skip the game over
                            	   291: 
00:0000A0D8 7207            	   292: 	moveq #7,d1							; else message 7 - "GAME OVER"
00:0000A0DA 61000FF0        	   293: 	bsr add_message					; add message d1 to the display list
                            	   294: 
00:0000A0DE 0C2B0002001A    	   295: 	cmpi.b #$02,num_players(a3)	; compare the number of players with two
00:0000A0E4 6604            	   296: 	bne.s no_game_over			; if not two player skip which game's over
                            	   297: 
00:0000A0E6 61001052        	   298: 	bsr player_x						; add "PLAYER x" to the vector list
                            	   299: no_game_over
00:0000A0EA 4A2D0027        	   300: 	tst.b p_flag_off(a5)		; test the player flag
00:0000A0EE 6638            	   301: 	bne.s	exit_game_message		; if alive or exploding just exit
                            	   302: 
00:0000A0F0 0C2D0080007A    	   303: 	cmpi.b #$80,hide_p_cnt(a5)	; compare with about to die - 1 with the hide
                            	   304: 							; the player count
00:0000A0F6 6630            	   305: 	bne.s exit_game_message			; if not about to die just exit
                            	   306: 
00:0000A0F8 1B7C0010007A    	   307: 	move.b #$10,hide_p_cnt(a5)	; set the hide the player count
                            	   308: 
00:0000A0FE 122B001A        	   309: 	move.b num_players(a3),d1	; get the number of players in the game
                            	   310: 
00:0000A102 102B0175        	   311: 	move.b p1_ships(a3),d0		; get player 1's ship count
00:0000A106 802B0279        	   312: 	or.b p2_ships(a3),d0			; OR with player 2's ship count
00:0000A10A 671E            	   313: 	beq.s end_game					; if no ships left go end the game
                            	   314: 
00:0000A10C 610006BA        	   315: 	bsr clear_saucer				; clear the saucer and restart the saucer timer
00:0000A110 5301            	   316: 	subq.b #1,d1						; decrement the number of players in the game
00:0000A112 6714            	   317: 	beq.s exit_game_message	; if that was the last player go flag no game
                            	   318: 							; and exit
                            	   319: 
00:0000A114 177C0080001C    	   320: 	move.b #$80,px_time(a3)		; set the "PLAYER x" timer
                            	   321: 
00:0000A11A 4A2E0082        	   322: 	tst.b ships_off(a6)			; test the other player's ship count
00:0000A11E 6708            	   323: 	beq.s exit_game_message		; if no ships left go flag no game and exit
                            	   324: 
                            	   325: 														; else change to the other player
00:0000A120 0A2B00010018    	   326: 	eori.b #1,player_idx(a3)		; toggle the player index
00:0000A126 CB4E            	   327: 	exg a5,a6									; swap the player pointers
                            	   328: exit_game_message
00:0000A128 4E75            	   329: 	rts
                            	   330: 
                            	   331: ; neither player has any ships left so end the game
                            	   332: 
                            	   333: end_game:
00:0000A12A 17410019        	   334: 	move.b d1,past_play(a3)		; save the number of players that were in the
                            	   335: 							; game
00:0000A12E 177C00FF001A    	   336: 	move.b #$FF,num_players(a3)	; clear the number of players in the game
00:0000A134 4BEB00F3        	   337: 	lea player_1(a3),a5		; set the pointer to player one's variables
00:0000A138 4DEB01F7        	   338: 	lea player_2(a3),a6		; set the pointer to player two's variables
00:0000A13C 4E75            	   339: 	rts
                            	   340: 
                            	   341: 
                            	   342: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   343: ;
                            	   344: ; check for player/saucer/shot hits
                            	   345: 
                            	   346: check_hits:
00:0000A13E 7C07            	   347: 	moveq #flag_end-p_flag_off-1,d6
                            	   348: 							; set the count/index for player/saucer/shots
                            	   349: pss_check_loop
00:0000A140 4A356027        	   350: 	tst.b p_flag_off(a5,d6.w)	; test if the player/saucer/shot exists
00:0000A144 6E06            	   351: 	bgt.s check_pss			; if the item exists and is not exploding go
                            	   352: 							; test it
                            	   353: 
                            	   354: next_pss
00:0000A146 51CEFFF8        	   355: 	dbf d6,pss_check_loop	; decrement count/index and loop if more to do
                            	   356: 
00:0000A14A 4E75            	   357: 	rts
                            	   358: 
                            	   359: ; the player/saucer/shot exists and is not exploding
                            	   360: 
                            	   361: check_pss
00:0000A14C 7E1C            	   362: 	moveq #s_flag_off-flags_off,d7
                            	   363: 							; set the item index to the saucer
00:0000A14E 0C460004        	   364: 	cmpi.w #p_fire_off-p_flag_off,d6
                            	   365: 							; compare the player/saucer/shot index with the
                            	   366: 							; first player shot
00:0000A152 640A            	   367: 	bcc.s check_all			; if it is a player shot go test it against all
                            	   368: 							; the items
                            	   369: 
00:0000A154 5347            	   370: 	subq.w #1,d7				; else skip the saucer
00:0000A156 4A46            	   371: 	tst.w d6						; test the player/saucer/shot index
00:0000A158 6604            	   372: 	bne.s check_all			; if not the player go test against everything
                            	   373: 
                            	   374: 							; else skip the player
                            	   375: check_next_object
00:0000A15A 5347            	   376: 	subq.w #1,d7				; decrement the item index
00:0000A15C 6BE8            	   377: 	bmi.s next_pss			; if all done go do next player/saucer/shot
                            	   378: 
                            	   379: check_all
00:0000A15E 1435700C        	   380: 	MOVE.b	flags_off(a5,d7.w),d2	; get the item flag indexed by d7
00:0000A162 6FF6            	   381: 	BLE.s		check_next_object		; if the item doesn't exist or the item is
                            	   382: 							; exploding go try the next item
                            	   383: 
00:0000A164 3A07            	   384: 	MOVE.w	d7,d5				; copy the item index
00:0000A166 DA45            	   385: 	ADD.w		d5,d5				; ; 2 for the item position index
                            	   386: 
00:0000A168 3806            	   387: 	MOVE.w	d6,d4				; copy the fire item index
00:0000A16A D844            	   388: 	ADD.w		d4,d4				; ; 2 for the fire item position index
                            	   389: 
00:0000A16C 30355080        	   390: 	MOVE.w	x_pos_off(a5,d5.w),d0	; get item x position
00:0000A170 907540B6        	   391: 	SUB.w		p_xpos_off(a5,d4.w),d0	; subtract the player/saucer/shot x position
00:0000A174 6A02            	   392: 	BPL.s		delta_x_pos			; if the delta is positive skip the negate
                            	   393: 
00:0000A176 4440            	   394: 	NEG.w		d0				; else negate the delta
                            	   395: delta_x_pos
00:0000A178 0C400151        	   396: 	CMPI.w	#$0151,d0			; compare the range with $0151
00:0000A17C 64DC            	   397: 	BCC.s		check_next_object		; if it's out of range go try the next item
                            	   398: 
00:0000A17E 323550C6        	   399: 	MOVE.w	y_pos_off(a5,d5.w),d1	; get item y position
00:0000A182 927540FC        	   400: 	SUB.w		p_ypos_off(a5,d4.w),d1	; subtract the player/saucer/shot y position
00:0000A186 6A02            	   401: 	BPL.s		delta_y_pos			; if the delta is positive skip the negate
                            	   402: 
00:0000A188 4441            	   403: 	NEG.w		d1				; else negate the delta
                            	   404: delta_y_pos
00:0000A18A 0C410151        	   405: 	CMPI.w	#$0151,d1			; compare the range with $0151
00:0000A18E 64CA            	   406: 	BCC.s		check_next_object		; if it's out of range go try the next item
                            	   407: 
00:0000A190 C0C0            	   408: 	MULU.w	d0,d0				; calculate delta x^2
00:0000A192 C2C1            	   409: 	MULU.w	d1,d1				; calculate delta y^2
00:0000A194 D081            	   410: 	ADD.l		d1,d0				; calculate delta x^2 + delta y^2
00:0000A196 E480            	   411: 	ASR.l		#2,d0				; / 4 makes it a word value again
                            	   412: 
00:0000A198 02420007        	   413: 	ANDI.w	#$07,d2			; mask the size bits
00:0000A19C 5302            	   414: 	SUBQ.b	#1,d2				; make $01 to $04 into $00 to $03
00:0000A19E D402            	   415: 	ADD.b		d2,d2				; ; 2 bytes per size^2
                            	   416: 
00:0000A1A0 0C460001        	   417: 	CMPI.w	#s_flag_off-p_flag_off,d6
                            	   418: 							; compare the player/saucer/shot index with the
                            	   419: 							; saucer
00:0000A1A4 6E10            	   420: 	BGT.s		no_add_size			; if shot index just go get the collision size
                            	   421: 
00:0000A1A6 6B0C            	   422: 	BMI.s		add_p_size			; if player index only add the player offset
                            	   423: 
00:0000A1A8 083500016027    	   424: 	BTST.b	#1,p_flag_off(a5,d6.w)	; else test the saucer size flag
00:0000A1AE 6702            	   425: 	BEQ.s		small_s_size		; if not size $02 only add the small saucer size
                            	   426: 
00:0000A1B0 5042            	   427: 	ADDQ.w	#col_table_l-col_table_s,d2
                            	   428: 							; add the offset to the item + large saucer size
                            	   429: 							; table
                            	   430: small_s_size
00:0000A1B2 5042            	   431: 	ADDQ.w	#col_table_s-col_table_p,d2
                            	   432: 							; add the offset to the item + small saucer size
                            	   433: 							; table
                            	   434: add_p_size
00:0000A1B4 5042            	   435: 	ADDQ.w	#col_table_p-col_table,d2
                            	   436: 							; add the offset to the item + player size table
                            	   437: no_add_size
00:0000A1B6 343B200C        	   438: 	MOVE.w	col_table(pc,d2.w),d2	; get the collision size from the table
                            	   439: 
00:0000A1BA B440            	   440: 	CMP.w		d0,d2				; compare the distance^2 with the collision size
00:0000A1BC 659C            	   441: 	BCS.s		check_next_object		; if it's out of range go try the next item
                            	   442: 
00:0000A1BE 487AFF86        	   443: 	PEA		next_pss(pc)		; now go try the next fire item, this one died
00:0000A1C2 6020            	   444: 	BRA.s		handle_collision		; else go handle a collision between items
                            	   445: 
                            	   446: ; table of collision distance squares
                            	   447: 
                            	   448: col_table
00:0000A1C4 06E4            	   449: 	dc.w	$06E4			; $24^2		small rock, small saucer, player
00:0000A1C6 1440            	   450: 	dc.w	$1440			; $48^2		medium rock, large saucer
00:0000A1C8 0000            	   451: 	dc.w	$0000			; no size 3 rock
00:0000A1CA 4410            	   452: 	dc.w	$4410			; $84^2		large rock
                            	   453: col_table_p
00:0000A1CC 1000            	   454: 	dc.w	$1000			; ($24 + $1C)^2	small rock  + player
00:0000A1CE 2710            	   455: 	dc.w	$2710			; ($48 + $1C)^2	medium rock + player
00:0000A1D0 0000            	   456: 	dc.w	$0000			; no size 3 rock
00:0000A1D2 6400            	   457: 	dc.w	$6400			; ($84 + $1C)^2	large rock  + player
                            	   458: col_table_s
00:0000A1D4 0B64            	   459: 	dc.w	$0B64			; ($24 + $12)^2	small rock  + small saucer
00:0000A1D6 1FA4            	   460: 	dc.w	$1FA4			; ($48 + $12)^2	medium rock + small saucer
00:0000A1D8 0000            	   461: 	dc.w	$0000			; no size 3 rock
00:0000A1DA 57E4            	   462: 	dc.w	$57E4			; ($84 + $12)^2	large rock  + small saucer
                            	   463: col_table_l
00:0000A1DC 1440            	   464: 	dc.w	$1440			; ($24 + $24)^2	small rock  + large saucer
00:0000A1DE 2D90            	   465: 	dc.w	$2D90			; ($48 + $24)^2	medium rock + large saucer
00:0000A1E0 0000            	   466: 	dc.w	$0000			; no size 3 rock
00:0000A1E2 6E40            	   467: 	dc.w	$6E40			; ($84 + $24)^2	large rock  + large saucer
                            	   468: 
                            	   469: 
                            	   470: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   471: ;
                            	   472: ; handle collision between items
                            	   473: ;
                            	   474: ; d6 = X = player/saucer/shot index
                            	   475: ; d7 = Y = object index
                            	   476: 
                            	   477: handle_collision:
00:0000A1E4 0C460001        	   478: 	CMPI.w	#s_flag_off-p_flag_off,d6
                            	   479: 							; compare the player/saucer/shot index with the
                            	   480: 							; saucer
00:0000A1E8 660A            	   481: 	BNE.s		not_saucer			; if not the saucer go find out what it was
                            	   482: 
                            	   483: 							; else the saucer hit something
00:0000A1EA 0C47001B        	   484: 	CMPI.w	#p_flag_off-flags_off,d7
                            	   485: 							; compare the object with the player index
00:0000A1EE 6612            	   486: 	BNE.s		not_player			; if not the player go find out what it was
                            	   487: 
                            	   488: 							; else the saucer hit the player so make it that
                            	   489: 							; the player hit the saucer
00:0000A1F0 7E1C            	   490: 	MOVEQ		#s_flag_off-flags_off,d7
                            	   491: 							; make the object the saucer
00:0000A1F2 7C00            	   492: 	MOVEQ		#p_flag_off-p_flag_off,d6
                            	   493: 							; make the player/saucer/shot index the player
                            	   494: not_saucer
00:0000A1F4 4A46            	   495: 	TST.w		d6				; test the player/saucer/shot index
00:0000A1F6 6622            	   496: 	BNE.s		not_pss_player		; if it's not the player go find out what it was
                            	   497: 
                            	   498: ; the player hit something
                            	   499: 
00:0000A1F8 1B7C0081007A    	   500: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
00:0000A1FE 532D0082        	   501: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
                            	   502: 
                            	   503: ; either the player hit the saucer or the player or saucer hit either a rock or a shot
                            	   504: 
                            	   505: not_player
00:0000A202 1BBC00A06027    	   506: 	MOVE.b	#$A0,p_flag_off(a5,d6.w)
                            	   507: 							; set the item is exploding flag
00:0000A208 7000            	   508: 	MOVEQ		#0,d0				; clear the longword
00:0000A20A 1B80604A        	   509: 	MOVE.b	d0,p_xvel_off(a5,d6.w)	; clear the player/saucer/shot x velocity
00:0000A20E 1B80606D        	   510: 	MOVE.b	d0,p_yvel_off(a5,d6.w)	; clear the player/saucer/shot y velocity
00:0000A212 0C47001B        	   511: 	CMPI.w	#p_flag_off-flags_off,d7
                            	   512: 							; compare the object with the player index
00:0000A216 650E            	   513: 	BCS.s		what_hit_rock		; if less go handle something hitting a rock
                            	   514: 
00:0000A218 6038            	   515: 	BRA.s		what_hit_saucer		; else go handle something hitting the saucer
                            	   516: 
                            	   517: ; else a shot hit something
                            	   518: 
                            	   519: not_pss_player
00:0000A21A 42356027        	   520: 	CLR.b		p_flag_off(a5,d6.w)	; clear the shot object
00:0000A21E 0C07001B        	   521: 	CMPI.b	#p_flag_off-flags_off,d7
                            	   522: 							; compare the item with the player's index
00:0000A222 6722            	   523: 	BEQ.s		player_shot			; if it's the player go handle a shot hitting
                            	   524: 							; the player
                            	   525: 
00:0000A224 642C            	   526: 	BCC.s		what_hit_saucer		; if it's the saucer go handle a shot hitting
                            	   527: 							; the saucer
                            	   528: 
                            	   529: what_hit_rock
00:0000A226 61000C40        	   530: 	BSR		hit_a_rock			; handle something hitting a rock
                            	   531: 
                            	   532: ; explode the object
                            	   533: 
                            	   534: explode_object
00:0000A22A 7203            	   535: 	MOVEQ		#$03,d1			; set the mask for the two size bits
00:0000A22C C235700C        	   536: 	AND.b		flags_off(a5,d7.w),d1	; and it with the item flag
00:0000A230 5A01            	   537: 	ADDQ.b	#sexpl_snd,d1		; add the small explosion sound to the size
00:0000A232 61002B94        	   538: 	BSR		play_sample			; go play the sample
                            	   539: 
00:0000A236 1BBC00A0700C    	   540: 	MOVE.b	#$A0,flags_off(a5,d7.w)	; set the item to exploding
00:0000A23C 4235702F        	   541: 	CLR.b		x_vel_off(a5,d7.w)	; clear the item x velocity byte
00:0000A240 42357052        	   542: 	CLR.b		y_vel_off(a5,d7.w)	; clear the item y velocity byte
00:0000A244 4E75            	   543: 	RTS
                            	   544: 
                            	   545: ; handle a shot hitting the player
                            	   546: 
                            	   547: player_shot
00:0000A246 532D0082        	   548: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
00:0000A24A 1B7C0081007A    	   549: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
00:0000A250 60D8            	   550: 	BRA.s		explode_object		; go explode the player
                            	   551: 
                            	   552: ; handle something hitting the saucer
                            	   553: 
                            	   554: what_hit_saucer
00:0000A252 1B6D00780077    	   555: 	MOVE.b	i_sauc_tim(a5),sauc_cntdn(a5)
                            	   556: 							; save the small saucer boundary/initial saucer
                            	   557: 							; value to the saucer countdown timer
00:0000A258 4A2B001A        	   558: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000A25C 67CC            	   559: 	BEQ.s		explode_object		; if no players skip adding the score
                            	   560: 
00:0000A25E 7299            	   561: 	MOVEQ		#$99,d1			; default to 990 points for a small saucer
00:0000A260 082D00000028    	   562: 	BTST.b	#0,s_flag_off(a5)		; test the saucer size bit
00:0000A266 6602            	   563: 	BNE.s		keep_small			; if it was a small saucer keep the score value
                            	   564: 
00:0000A268 7220            	   565: 	MOVEQ		#$20,d1			; else set 200 points for the large saucer
                            	   566: keep_small
00:0000A26A 6100099C        	   567: 	BSR		add_score			; add d1 to the current player's score
00:0000A26E 60BA            	   568: 	BRA.s		explode_object		; go explode the saucer
                            	   569: 
                            	   570: 
                            	   571: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   572: ;
                            	   573: ; handle the saucer
                            	   574: 
                            	   575: do_saucer
00:0000A270 70FC            	   576: 	MOVEQ		#-4,d0			; set the timeout counter mask
00:0000A272 C02B0025        	   577: 	AND.b		time_count(a3),d0		; mask the timeout counter
00:0000A276 670000B0        	   578: 	BEQ		exit_do_saucer		; 3/4 of the time just exit
                            	   579: 
00:0000A27A B12B0025        	   580: 	EOR.b		d0,time_count(a3)		; reset the timeout counter
                            	   581: 
00:0000A27E 4A2D0028        	   582: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000A282 6B0000A4        	   583: 	BMI		exit_do_saucer		; if the saucer is exploding just exit
                            	   584: 
00:0000A286 660000A2        	   585: 	BNE		existing_saucer		; if a saucer exists go handle it
                            	   586: 
                            	   587: ; no saucer exists so possibly generate a new one
                            	   588: 
00:0000A28A 4A2B001A        	   589: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000A28E 670C            	   590: 	BEQ.s		attract_saucer		; if no players go do the attract mode saucer
                            	   591: 
00:0000A290 4A2D0027        	   592: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000A294 67000092        	   593: 	BEQ		exit_do_saucer		; if this player doesn't exist just exit
                            	   594: 
00:0000A298 6B00008E        	   595: 	BMI		exit_do_saucer		; if this player is exploding just exit
                            	   596: 
                            	   597: attract_saucer
00:0000A29C 4A2D0079        	   598: 	TST.b		r_hit_tim(a5)		; test the rock hit timer
00:0000A2A0 6704            	   599: 	BEQ.s		rock_hit_out		; if counted out skip the decrement
                            	   600: 
00:0000A2A2 532D0079        	   601: 	SUBQ.b	#1,r_hit_tim(a5)		; else decrement the rock hit timer
                            	   602: rock_hit_out
00:0000A2A6 532D0077        	   603: 	SUBQ.b	#1,sauc_cntdn(a5)		; decrement the saucer countdown timer
00:0000A2AA 667C            	   604: 	BNE		exit_do_saucer		; if not there yet just exit
                            	   605: 
00:0000A2AC 1B7C00120077    	   606: 	MOVE.b	#$12,sauc_cntdn(a5)	; set the first saucer fire count
                            	   607: 
00:0000A2B2 4A2D0079        	   608: 	TST.b		r_hit_tim(a5)		; test the rock hit timer
00:0000A2B6 670C            	   609: 	BEQ.s		dec_isaucer_time		; if timed out go decrement the initial saucer
                            	   610: 							; timer
                            	   611: 
00:0000A2B8 102D0076        	   612: 	MOVE.b	rock_count(a5),d0		; get the rock count
00:0000A2BC 676A            	   613: 	BEQ.s		exit_do_saucer		; if no rocks just exit
                            	   614: 
00:0000A2BE B02D007D        	   615: 	CMP.b		min_rocks(a5),d0		; compare the rock count with the minimum rock
                            	   616: 							; count before the saucer initial timer starts
                            	   617: 							; to decrement
00:0000A2C2 6364            	   618: 	BLS.s		exit_do_saucer		; if the minimum rock count is >= the rock count
                            	   619: 							; just exit
                            	   620: 
                            	   621: dec_isaucer_time
00:0000A2C4 70FA            	   622: 	MOVEQ		#-6,d0			; set to subtract 6
00:0000A2C6 D02D0078        	   623: 	ADD.b		i_sauc_tim(a5),d0		; subtract it from the small saucer
                            	   624: 							; boundary/initial saucer timer
00:0000A2CA 0C000020        	   625: 	CMPI.b	#$20,d0			; compare it with the minimum value
00:0000A2CE 6504            	   626: 	BCS.s		no_save_ist			; if less skip the save
                            	   627: 
00:0000A2D0 1B400078        	   628: 	MOVE.b	d0,i_sauc_tim(a5)		; save the small saucer boundary/initial saucer
                            	   629: 							; timer
                            	   630: no_save_ist
00:0000A2D4 61000F66        	   631: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A2D8 302B000A        	   632: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000A2DC 0C401800        	   633: 	CMPI.w	#$1800,d0			; compare with $1800
00:0000A2E0 6504            	   634: 	BCS.s		saucer_yok			; if less than $1800 just use it
                            	   635: 
00:0000A2E2 024017FF        	   636: 	ANDI.w	#$17FF,d0			; else mask to $17xx
                            	   637: saucer_yok
00:0000A2E6 3B40FFFE        	   638: 	MOVE.w	d0,s_ypos_off(a5)		; save the saucer y position
                            	   639: 
00:0000A2EA 7000            	   640: 	MOVEQ		#0,d0				; clear the saucer x position
00:0000A2EC 7210            	   641: 	MOVEQ		#$10,d1			; set the saucer x velocity to + $10
00:0000A2EE 4A6B000C        	   642: 	TST.w		PRNlword+2(a3)		; test a pseudo random word
00:0000A2F2 6B06            	   643: 	BMI.s		start_left			; if bit set start on the left
                            	   644: 
                            	   645: 							; else start at the right side and move left
00:0000A2F4 303C1FFF        	   646: 	MOVE.w	#$1FFF,d0			; set the saucer x position
00:0000A2F8 72F0            	   647: 	MOVEQ		#$F0,d1			; set the saucer x velocity to - $10
                            	   648: start_left
00:0000A2FA 1B41004B        	   649: 	MOVE.b	d1,s_xvel_off(a5)		; save the saucer x velocity byte
00:0000A2FE 3B40FFB8        	   650: 	MOVE.w	d0,s_xpos_off(a5)		; save the saucer x position
                            	   651: 
00:0000A302 7202            	   652: 	MOVEQ		#$02,d1			; default to a large saucer
00:0000A304 4A2D0078        	   653: 	TST.b		i_sauc_tim(a5)		; test the small saucer boundary/initial saucer
                            	   654: 							; timer
00:0000A308 6B1A            	   655: 	BMI.s		save_saucer			; if > $80 always make a big saucer
                            	   656: 
00:0000A30A 0C2D00300080    	   657: 	CMPI.b	#$30,score_off(a5)	; compare the player's score with 30000 points
00:0000A310 6410            	   658: 	BCC.s		small_saucer		; if >= 30000 points go make a small saucer
                            	   659: 
00:0000A312 61000F28        	   660: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A316 142D0078        	   661: 	MOVE.b	i_sauc_tim(a5),d2		; get the small saucer boundary/initial saucer
                            	   662: 							; timer
00:0000A31A E20A            	   663: 	LSR.b		#1,d2				; / 2
00:0000A31C B42B000C        	   664: 	CMP.b		PRNlword+2(a3),d2		; compare it with the random byte
00:0000A320 6402            	   665: 	BCC.s		save_saucer			; if the small saucer boundary is > the random
                            	   666: 							; byte go save the large saucer
                            	   667: 
                            	   668: small_saucer
00:0000A322 7201            	   669: 	MOVEQ		#$01,d1			; else make it a small saucer
                            	   670: save_saucer
00:0000A324 1B410028        	   671: 	MOVE.b	d1,s_flag_off(a5)		; save the saucer flag
                            	   672: exit_do_saucer
00:0000A328 4E75            	   673: 	RTS
                            	   674: 
                            	   675: ; there is an existing saucer
                            	   676: 
                            	   677: existing_saucer
00:0000A32A 707E            	   678: 	MOVEQ		#$7E,d0			; set saucer change mask
00:0000A32C C06B0059        	   679: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000A330 6610            	   680: 	BNE.s		keep_saucer_dir		; if it was not x000 000x skip the saucer
                            	   681: 							; direction change
                            	   682: 
00:0000A332 61000F08        	   683: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A336 7003            	   684: 	MOVEQ		#3,d0				; set the direction mask
00:0000A338 C02B000A        	   685: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A33C 1B7B0018006E    	   686: 	MOVE.b	saucer_yvel(pc,d0.w),s_yvel_off(a5)
                            	   687: 							; save the saucer y velocity byte
                            	   688: keep_saucer_dir
00:0000A342 4A2B001A        	   689: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000A346 6706            	   690: 	BEQ.s		attract_fire		; if no players just go do the fire countdown
                            	   691: 
00:0000A348 4A2D007A        	   692: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000A34C 6606            	   693: 	BNE.s		exit_existing_saucer	; if the player is hidden just exit
                            	   694: 
                            	   695: attract_fire
00:0000A34E 532D0077        	   696: 	SUBQ.b	#1,sauc_cntdn(a5)		; decrement the saucer countdown timer
00:0000A352 6706            	   697: 	BEQ.s		fire_saucer			; if counted out go fire
                            	   698: 
                            	   699: exit_existing_saucer
00:0000A354 4E75            	   700: 	RTS
                            	   701: 
                            	   702: ; saucer y velocity byte
                            	   703: 
                            	   704: saucer_yvel
00:0000A356 F0              	   705: 	dc.b	$F0			; down
00:0000A357 00              	   706: 	dc.b	$00			; horizontal
00:0000A358 00              	   707: 	dc.b	$00			; horizontal
00:0000A359 10              	   708: 	dc.b	$10			; up
                            	   709: 
                            	   710: 
                            	   711: ; handle the saucer fire
                            	   712: 
                            	   713: fire_saucer
00:0000A35A 1B7C000A0077    	   714: 	MOVE.b	#$0A,sauc_cntdn(a5)	; set the time between saucer shots, save the
                            	   715: 							; countdown timer
00:0000A360 7001            	   716: 	MOVEQ		#1,d0				; set the mask for a small saucer
00:0000A362 C02D0028        	   717: 	AND.b		s_flag_off(a5),d0		; mask the saucer flag
00:0000A366 660A            	   718: 	BNE.s		aim_shot			; if it's a small saucer go aim at the player
                            	   719: 
00:0000A368 61000ED2        	   720: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A36C 102B000A        	   721: 	MOVE.b	PRNlword(a3),d0		; get a pseudo random byte
00:0000A370 6056            	   722: 	BRA.s		no_aim_shot			; and go fire wildly in any direction
                            	   723: 
                            	   724: ; aim the shot at the player
                            	   725: 
                            	   726: aim_shot
00:0000A372 1F2D004B        	   727: 	MOVE.b	s_xvel_off(a5),-(sp)	; copy the saucer x velocity byte
00:0000A376 301F            	   728: 	MOVE.w	(sp)+,d0			; get the byte as a word
00:0000A378 4200            	   729: 	CLR.b		d0				; clear the low byte
00:0000A37A E240            	   730: 	ASR.w		#1,d0				; / 2
                            	   731: 
00:0000A37C 322DFFB6        	   732: 	MOVE.w	p_xpos_off(a5),d1		; get the player x position
00:0000A380 926DFFB8        	   733: 	SUB.w		s_xpos_off(a5),d1		; subtract the saucer x position
00:0000A384 E541            	   734: 	ASL.w		#2,d1				; ; 4 delta x
                            	   735: 
00:0000A386 9240            	   736: 	SUB.w		d0,d1				; subtract the half saucer x velocity word
                            	   737: 
00:0000A388 1F2D006E        	   738: 	MOVE.b	s_yvel_off(a5),-(sp)	; copy the saucer y velocity byte
00:0000A38C 301F            	   739: 	MOVE.w	(sp)+,d0			; get the byte as a word
00:0000A38E 4200            	   740: 	CLR.b		d0				; clear the low byte
00:0000A390 E240            	   741: 	ASR.w		#1,d0				; / 2
                            	   742: 
00:0000A392 342DFFFC        	   743: 	MOVE.w	p_ypos_off(a5),d2		; get the player y position
00:0000A396 946DFFFE        	   744: 	SUB.w		s_ypos_off(a5),d2		; subtract the saucer y position
00:0000A39A E542            	   745: 	ASL.w		#2,d2				; ; 4 delta x low byte
                            	   746: 
00:0000A39C 9440            	   747: 	SUB.w		d0,d2				; subtract the half saucer y velocity word
                            	   748: 
00:0000A39E 61000BE4        	   749: 	BSR		get_atn			; calculate the angle given the delta x,y in
                            	   750: 							; d1.w,d2.w
00:0000A3A2 1740001F        	   751: 	MOVE.b	d0,s_orient(a3)		; save the saucer shot direction
                            	   752: 
00:0000A3A6 61000E94        	   753: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A3AA 7200            	   754: 	MOVEQ		#0,d1				; set index to +/- $0F degree units perturbation
00:0000A3AC 102B000A        	   755: 	MOVE.b	PRNlword(a3),d0		; get a pseudo random byte
00:0000A3B0 0C2D00350080    	   756: 	CMPI.b	#$35,score_off(a5)	; compare the player's score with 35000
00:0000A3B6 6502            	   757: 	BCS.s		wide_shot			; if less than 35000 skip the index change
                            	   758: 
00:0000A3B8 7201            	   759: 	MOVEQ		#1,d1				; set index to +/- $07 degree units perturbation
                            	   760: wide_shot
00:0000A3BA C03B101E        	   761: 	AND.b		shot_mask(pc,d1.w),d0	; mask with the shot AND mask
00:0000A3BE 6A04            	   762: 	BPL.s		no_shot_or			; if the result is positive skip the bit set
                            	   763: 
00:0000A3C0 803B101A        	   764: 	OR.b		shot_or(pc,d1.w),d0	; else set the correct bits for a negative
                            	   765: 							; perturbation
                            	   766: no_shot_or
00:0000A3C4 D02B001F        	   767: 	ADD.b		s_orient(a3),d0		; add the saucer shot direction to the
                            	   768: 							; perturbation
                            	   769: no_aim_shot
00:0000A3C8 1740001F        	   770: 	MOVE.b	d0,s_orient(a3)		; save the saucer shot direction
                            	   771: 
00:0000A3CC 7801            	   772: 	MOVEQ		#1,d4				; set the index to the saucer velocity
00:0000A3CE 7A02            	   773: 	MOVEQ		#2,d5				; set the index to the saucer position
00:0000A3D0 7CFF            	   774: 	MOVEQ		#-1,d6			; set the minimum shot index - 1
00:0000A3D2 7E01            	   775: 	MOVEQ		#1,d7				; set the shot start index
                            	   776: 
00:0000A3D4 122B0021        	   777: 	MOVE.b	last_fire(a3),d1		; get the fire last state
00:0000A3D8 6022            	   778: 	BRA.s		test_fire_loop		; go fire the shot
                            	   779: 
                            	   780: 
                            	   781: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   782: ;
                            	   783: ; these two byte pairs together effect the accuracy of the small saucer's shooting
                            	   784: ; by limiting the range of the random perturbation to the saucer's aim
                            	   785: 
                            	   786: ; shot AND mask, masks the perturbation to either +/- $0F or +/- $07 degree units
                            	   787: 
                            	   788: shot_mask
00:0000A3DA 8F              	   789: 	dc.b	$8F			; AND mask to +/- $0F degree units
00:0000A3DB 87              	   790: 	dc.b	$87			; AND mask to +/- $07 degree units
                            	   791: 
                            	   792: ; shot OR byte, sets the needed bits for a negative perturbation result
                            	   793: 
                            	   794: shot_or
00:0000A3DC 70              	   795: 	dc.b	$70			; OR to set bits after - $0F mask result
00:0000A3DD 78              	   796: 	dc.b	$78			; OR to set bits after - $07 mask result
                            	   797: 
                            	   798: 
                            	   799: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   800: ;
                            	   801: ; handle the fire button
                            	   802: 
                            	   803: ship_fire:
                            	   804: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	   805: ;##	BEQ.s		exit_ship_fire		; if no players just exit
                            	   806: 
                            	   807: ;##	TST.b		hide_p_cnt(a5)		; test the hide the player count
                            	   808: ;##	BNE.s		exit_ship_fire		; if the player is hidden just exit
                            	   809: 
                            	   810: ;	MOVEQ		#'P',d1			; [P] key
                            	   811: ;	MOVEQ		#19,d0			; check for keypress
                            	   812: ;	TRAP		#15
                            	   813: 
00:0000A3DE 7005            	   814: 	moveq #5,d0					; getkey
00:0000A3E0 4E4F            	   815: 	trap #15
00:0000A3E2 0C010050        	   816: 	cmpi.b #'P',d1
00:0000A3E6 6620            	   817: 	bne.s save_ship_fire
                            	   818: 
                            	   819: ;	TST.b		d1				; test the result
                            	   820: ;	BEQ.s		save_ship_fire		; if fire not pressed go clear the fire state
                            	   821: 							; and exit
                            	   822: 
00:0000A3E8 4A2B0021        	   823: 	tst.b last_fire(a3)		; test the fire last state
00:0000A3EC 661E            	   824: 	bne.s exit_ship_fire	; if the fire button is held just exit
                            	   825: 
00:0000A3EE 7800            	   826: 	moveq #0,d4					; set the index to the player velocity
00:0000A3F0 7A00            	   827: 	moveq #0,d5					; set the index to the player position
00:0000A3F2 7C01            	   828: 	moveq #1,d6					; set the minimum shot index - 1
00:0000A3F4 7E05            	   829: 	moveq #5,d7					; set the shot start index
                            	   830: 
00:0000A3F6 176B001E001F    	   831: 	move.b p_orient(a3),s_orient(a3)
                            	   832: 							; copy the player orientation
                            	   833: 
                            	   834: ; fire the shot, player or saucer
                            	   835: 
                            	   836: test_fire_loop
00:0000A3FC 4A357029        	   837: 	tst.b s_fire_off(a5,d7.w)	; test this fire object
00:0000A400 670C            	   838: 	beq.s fire_shot			; if this shot is free go use it
                            	   839: 
00:0000A402 5347            	   840: 	subq.w #1,d7				; decrement the shot index
00:0000A404 BC47            	   841: 	cmp.w d7,d6					; compare with minimum - 1 index
00:0000A406 66F4            	   842: 	bne.s test_fire_loop		; loop if more to do
                            	   843: 
                            	   844: save_ship_fire
00:0000A408 17410021        	   845: 	move.b d1,last_fire(a3)		; save the fire last state
                            	   846: exit_ship_fire
00:0000A40C 4E75            	   847: 	rts
                            	   848: 
                            	   849: ; player/saucer fired and a shot, indexed by d7, is free
                            	   850: 
                            	   851: fire_shot:
00:0000A40E 3C07            	   852: 	move.w d7,d6				; copy the item index
00:0000A410 DC46            	   853: 	add.w d6,d6					; 2 for position index
                            	   854: 
00:0000A412 1BBC00127029    	   855: 	MOVE.b	#$12,s_fire_off(a5,d7.w)
                            	   856: 							; set the fire item flag
                            	   857: 
00:0000A418 102B001F        	   858: 	MOVE.b	s_orient(a3),d0		; get the player/saucer orientation
00:0000A41C 61000C0E        	   859: 	BSR		cos_d0			; do COS(d0)
                            	   860: 
00:0000A420 1635404A        	   861: 	MOVE.b	p_xvel_off(a5,d4.w),d3	; get the player/saucer x velocity byte
00:0000A424 613A            	   862: 	BSR.s		calc_fire_byte		; test the fire velocity and make 3/4 sin/cos
00:0000A426 1B83704C        	   863: 	MOVE.b	d3,f_xvel_off(a5,d7.w)	; save the shot x velocity byte
                            	   864: 
00:0000A42A D07550B6        	   865: 	ADD.w		p_xpos_off(a5,d5.w),d0	; add the player/saucer x position
00:0000A42E 3B8060BA        	   866: 	MOVE.w	d0,f_xpos_off(a5,d6.w)	; save the shot x position
                            	   867: 
00:0000A432 102B001F        	   868: 	MOVE.b	s_orient(a3),d0		; get the player/saucer orientation
00:0000A436 61000BF8        	   869: 	BSR		sin_d0			; do SIN(d0)
                            	   870: 
00:0000A43A 1635406D        	   871: 	MOVE.b	p_yvel_off(a5,d4.w),d3	; get the player/saucer y velocity byte
00:0000A43E 6120            	   872: 	BSR		calc_fire_byte		; test the fire velocity and make 3/4 sin/cos
00:0000A440 1B83706F        	   873: 	MOVE.b	d3,f_yvel_off(a5,d7.w)	; save the shot y velocity byte
                            	   874: 
00:0000A444 D07550FC        	   875: 	ADD.w		p_ypos_off(a5,d5.w),d0	; add the player/saucer y position
00:0000A448 3B806000        	   876: 	MOVE.w	d0,f_ypos_off(a5,d6.w)	; save the shot y position
                            	   877: 
00:0000A44C 17410021        	   878: 	MOVE.b	d1,last_fire(a3)		; save the fire last state
                            	   879: 
00:0000A450 7201            	   880: 	MOVEQ		#pfire_snd,d1		; default to the player fire sound
00:0000A452 0C470002        	   881: 	CMPI.w	#2,d7				; compare the index with the lowest player fire
00:0000A456 64002970        	   882: 	BCC		play_sample			; if it was the player go play the sample and
                            	   883: 							; return
                            	   884: 
                            	   885: 							; else it must be the saucer that fired so
00:0000A45A 7200            	   886: 	MOVEQ		#sfire_snd,d1		; set the saucer fire sound
00:0000A45C 6000296A        	   887: 	BRA		play_sample			; play the sample and return
                            	   888: 
                            	   889: 
                            	   890: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   891: ;
                            	   892: ; test the fire velocity and make 3/4 sin/cos
                            	   893: 
                            	   894: calc_fire_byte
00:0000A460 E240            	   895: 	ASR.w		#1,d0				; / 2
                            	   896: 
00:0000A462 3F00            	   897: 	MOVE.w	d0,-(sp)			; push the word value
00:0000A464 101F            	   898: 	MOVE.b	(sp)+,d0			; pop it as a byte value
                            	   899: 
00:0000A466 D600            	   900: 	ADD.b		d0,d3				; add it to the COS / 2 value
00:0000A468 6B0A            	   901: 	BMI.s		test_neg_fire		; if negative go test the negative limit
                            	   902: 
00:0000A46A 0C030070        	   903: 	CMPI.b	#$70,d3			; else compare it with the positive limit
00:0000A46E 650C            	   904: 	BCS.s		fire_ok			; if < the positive limit skip the adjust
                            	   905: 
00:0000A470 766F            	   906: 	MOVEQ		#$6F,d3			; else set the value to the positive limit
00:0000A472 6008            	   907: 	BRA.s		fire_ok			; go save the shot x velocity
                            	   908: 
                            	   909: test_neg_fire
00:0000A474 0C030091        	   910: 	CMPI.b	#$91,d3			; compare it with the negative limit
00:0000A478 6402            	   911: 	BCC.s		fire_ok			; if < the negative limit skip the adjust
                            	   912: 
00:0000A47A 7691            	   913: 	MOVEQ		#$91,d3			; else set the value to the negative limit
                            	   914: fire_ok
00:0000A47C 4880            	   915: 	EXT.w		d0				; make the byte value into a word
                            	   916: 
00:0000A47E 3400            	   917: 	MOVE.w	d0,d2				; get the COS / 2 back
00:0000A480 E242            	   918: 	ASR.w		#1,d2				; / 4
00:0000A482 D142            	   919: 	ADDX.w	d2,d0				; make 3 / 4 COS and round up
                            	   920: 
00:0000A484 4E75            	   921: 	RTS
                            	   922: 
                            	   923: 
                            	   924: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	   925: ;
                            	   926: ; get the player high score entries
                            	   927: 
                            	   928: enter_hiscores
00:0000A486 102D0083        	   929: 	MOVE.b	high_off(a5),d0		; get the player 1 highscore flag
00:0000A48A C02E0083        	   930: 	AND.b		high_off(a6),d0		; and with the player 2 highscore flag
00:0000A48E 6B00014A        	   931: 	BMI		exit_enter_hiscores	; if neither player is entering their high
                            	   932: 							; score just exit
                            	   933: 
00:0000A492 102D0083        	   934: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A496 6B000088        	   935: 	BMI		next_p_high			; if this player isn't entering their high
                            	   936: 							; score go try the other player
                            	   937: 
                            	   938: 							; get a player high score entry
00:0000A49A 0C2B00010019    	   939: 	CMPI.b	#1,past_play(a3)		; compare 1 with the number of players that
                            	   940: 							; were in the game
00:0000A4A0 6712            	   941: 	BEQ.s		no_playerx			; if it was only 1 player skip the "PLAYER x"
                            	   942: 							; message
                            	   943: 
00:0000A4A2 7201            	   944: 	MOVEQ		#1,d1				; message 1 - "PLAYER "
00:0000A4A4 61000C26        	   945: 	BSR		add_message			; add message d1 to the display list
                            	   946: 
00:0000A4A8 7010            	   947: 	MOVEQ		#$10,d0			; set game counter mask
00:0000A4AA C06B0059        	   948: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000A4AE 6604            	   949: 	BNE.s		no_playerx			; if bit set skip the player number write
                            	   950: 
00:0000A4B0 61000C8C        	   951: 	BSR		player_n			; add the player number to the vector list
                            	   952: no_playerx
00:0000A4B4 7202            	   953: 	MOVEQ		#2,d1				; message 2 - "YOUR SCORE IS ONE OF THE TE..."
00:0000A4B6 61000C14        	   954: 	BSR		add_message			; add message d1 to the display list
00:0000A4BA 7203            	   955: 	MOVEQ		#3,d1				; message 3 - "PLEASE ENTER YOUR INITIALS"
00:0000A4BC 61000C0E        	   956: 	BSR		add_message			; add message d1 to the display list
00:0000A4C0 7204            	   957: 	MOVEQ		#4,d1				; message 4 - "PUSH ROTATE TO SELECT LETTER"
00:0000A4C2 61000C08        	   958: 	BSR		add_message			; add message d1 to the display list
00:0000A4C6 7205            	   959: 	MOVEQ		#5,d1				; message 5 - "PUSH HYPERSPACE WHEN LETTER..."
00:0000A4C8 61000C02        	   960: 	BSR		add_message			; add message d1 to the display list
                            	   961: 
00:0000A4CC 36BC2000        	   962: 	MOVE.w	#$2000,glob_scale(a3)	; set the global scale
                            	   963: 
00:0000A4D0 7264            	   964: 	MOVEQ		#$64,d1			; set the x co-ordinate
00:0000A4D2 7439            	   965: 	MOVEQ		#$39,d2			; set the y co-ordinate
00:0000A4D4 61000CAC        	   966: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	   967: 							; a draw command
                            	   968: 
00:0000A4D8 323C7000        	   969: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000A4DC 61000CBE        	   970: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	   971: 
00:0000A4E0 7000            	   972: 	MOVEQ		#0,d0				; clear the longword
00:0000A4E2 102D0083        	   973: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A4E6 41F3003B        	   974: 	LEA		hinames(a3,d0.w),a0	; point to the high score names
                            	   975: 
00:0000A4EA 610001AA        	   976: 	BSR		write_initial		; write a high score initial to the vector list
00:0000A4EE 610001A6        	   977: 	BSR		write_initial		; write a high score initial to the vector list
00:0000A4F2 610001A2        	   978: 	BSR		write_initial		; write a high score initial to the vector list
                            	   979: 
                            	   980: ;	MOVEQ		#' ',d1			; [SPACE] key
                            	   981: ;	MOVEQ		#19,d0			; check for keypress
                            	   982: ;	TRAP		#15
00:0000A4F6 7005            	   983: 	moveq #5,d0
00:0000A4F8 4E4F            	   984: 	trap #15
00:0000A4FA 4A81            	   985: 	tst.l d1
00:0000A4FC 6B6E            	   986: 	bmi.s save_hbutton
00:0000A4FE 0C010020        	   987: 	cmpi.b #' ',d1
00:0000A502 6668            	   988: 	bne.s save_hbutton
                            	   989: 
                            	   990: ;	TST.b		d1				; test the result
                            	   991: ;	BEQ.s		save_hbutton		; if hyperspace not pressed go save the state
                            	   992: 
00:0000A504 4A2B0022        	   993: 	TST.b		last_hype(a3)		; test the hyperspace last state
00:0000A508 6662            	   994: 	BNE.s		save_hbutton		; if hyperspace is held go save the state
                            	   995: 
                            	   996: ; the hyperspace button has just been pressed
                            	   997: 
00:0000A50A 522B0020        	   998: 	ADDQ.b	#1,hi_char(a3)		; increment the input character index
00:0000A50E 0C2B00030020    	   999: 	CMPI.b	#3,hi_char(a3)		; compare with end + 1
00:0000A514 653E            	  1000: 	BCS.s		next_hi_char		; if not there yet go and increment to the next
                            	  1001: 							; character
                            	  1002: 
                            	  1003: 							; else that was the last character
00:0000A516 17410022        	  1004: 	MOVE.b	d1,last_hype(a3)		; save the hyperspace last state
00:0000A51A 1B7C00FF0083    	  1005: 	MOVE.b	#$FF,high_off(a5)		; clear the player highscore flag
                            	  1006: next_p_high
00:0000A520 7000            	  1007: 	MOVEQ		#0,d0				; clear the longword
00:0000A522 17400020        	  1008: 	MOVE.b	d0,hi_char(a3)		; clear the input character index
                            	  1009: 
00:0000A526 43FA29B2        	  1010: 	LEA		filename(pc),a1		; point to the highscore filename
00:0000A52A 7034            	  1011: 	MOVEQ		#52,d0			; open new file
00:0000A52C 4E4F            	  1012: 	TRAP		#15
                            	  1013: 
00:0000A52E 4A40            	  1014: 	TST.w		d0				; check for errors
00:0000A530 660A            	  1015: 	BNE.s		close_all			; if error go close all files
                            	  1016: 
00:0000A532 43EB0027        	  1017: 	LEA		hiscores(a3),a1		; point to the highscore tables
00:0000A536 7432            	  1018: 	MOVEQ		#50,d2			; set the table length
00:0000A538 7036            	  1019: 	MOVEQ		#54,d0			; write file
00:0000A53A 4E4F            	  1020: 	TRAP		#15
                            	  1021: 
                            	  1022: close_all
00:0000A53C 7032            	  1023: 	MOVEQ		#50,d0			; close all files
00:0000A53E 4E4F            	  1024: 	TRAP		#15
                            	  1025: 
00:0000A540 17400018        	  1026: 	MOVE.b	d0,player_idx(a3)		; clear the player index
00:0000A544 4BEB00F3        	  1027: 	LEA		player_1(a3),a5		; get the pointer to player one's variables
00:0000A548 4DEB01F7        	  1028: 	LEA		player_2(a3),a6		; get the pointer to player two's variables
                            	  1029: 
00:0000A54C 177C00F00059    	  1030: 	MOVE.b	#$F0,game_count(a3)	; set the game counter high byte, high score
                            	  1031: 							; entry timeout
00:0000A552 4E75            	  1032: 	RTS
                            	  1033: 
                            	  1034: ; hyperspace button press accepted and not at initials end
                            	  1035: 
                            	  1036: next_hi_char
00:0000A554 177C00F40059    	  1037: 	MOVE.b	#$F4,game_count(a3)	; set the game counter high byte, high score
                            	  1038: 							; entry timeout
                            	  1039: 
00:0000A55A 7000            	  1040: 	MOVEQ		#0,d0				; clear the longword
00:0000A55C 102D0083        	  1041: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A560 D02B0020        	  1042: 	ADD.b		hi_char(a3),d0		; add the input character index
00:0000A564 41F3003B        	  1043: 	LEA		hinames(a3,d0.w),a0	; point to the high score names
00:0000A568 10BC000B        	  1044: 	MOVE.b	#$0B,(a0)			; set the next character to "A"
                            	  1045: save_hbutton
00:0000A56C 17410022        	  1046: 	MOVE.b	d1,last_hype(a3)		; save the hyperspace button last state
                            	  1047: 
00:0000A570 4A2B0059        	  1048: 	TST.b		game_count(a3)		; test the game counter high byte
00:0000A574 660C            	  1049: 	BNE.s		not_timed_out		; if not timed out just continue
                            	  1050: 
00:0000A576 70FF            	  1051: 	MOVEQ		#-1,d0			; flag high score done
00:0000A578 1B400083        	  1052: 	MOVE.b	d0,high_off(a5)		; clear the player 1 highscore flag
00:0000A57C 1D400083        	  1053: 	MOVE.b	d0,high_off(a6)		; clear the player 2 highscore flag
00:0000A580 609E            	  1054: 	BRA.s		next_p_high			; go save the entry end exit, branch always
                            	  1055: 
                            	  1056: not_timed_out
00:0000A582 70F8            	  1057: 	MOVEQ		#-8,d0			; set the timeout counter mask
00:0000A584 C02B0025        	  1058: 	AND.b		time_count(a3),d0		; mask the timeout counter
00:0000A588 674E            	  1059: 	BEQ.s		exit_not_done		; just exit 7/8ths of the time
                            	  1060: 
00:0000A58A B12B0025        	  1061: 	EOR.b		d0,time_count(a3)		; reset the timeout counter
                            	  1062: 
00:0000A58E 7400            	  1063: 	MOVEQ		#0,d2				; assume no rotate
                            	  1064: ;	MOVE.w	#'WQ',d1			; [WQ] keys
                            	  1065: ;	MOVEQ		#19,d0			; check for keypress
                            	  1066: ;	TRAP		#15
00:0000A590 7005            	  1067: 	moveq #5,d0
00:0000A592 4E4F            	  1068: 	trap #15
00:0000A594 0C010051        	  1069: 	cmpi.b #'Q',d1
00:0000A598 6604            	  1070: 	bne.s not_rot_left
00:0000A59A 7401            	  1071: 	moveq #1,d2
00:0000A59C 6008            	  1072: 	bra.s was_rot_left
                            	  1073: not_rot_left:
00:0000A59E 0C010057        	  1074: 	cmpi.b #'W',d1
00:0000A5A2 6602            	  1075: 	bne.s not_rot_right2
00:0000A5A4 5302            	  1076: 	subq.b #1,d2	
                            	  1077: 
                            	  1078: ;	TST.b		d1				; test the result
                            	  1079: ;	BPL.s		rot_not_left		; if not pressed go test rotate right
                            	  1080: ;
                            	  1081: ;	MOVEQ		#1,d2				; if pressed set the offset to + 1
                            	  1082: rot_not_left
                            	  1083: ;	TST.w		d1				; test the result
                            	  1084: ;	BPL.s		rot_not_right		; if not pressed go add the rotation
                            	  1085: 
                            	  1086: ;	SUBQ.b	#1,d2				; if pressed set the offset to - 1
                            	  1087: not_rot_right2
                            	  1088: was_rot_left:
00:0000A5A6 7000            	  1089: 	MOVEQ		#0,d0				; clear the longword
00:0000A5A8 102D0083        	  1090: 	MOVE.b	high_off(a5),d0		; get the player highscore flag
00:0000A5AC D02B0020        	  1091: 	ADD.b		hi_char(a3),d0		; add the input character index
00:0000A5B0 D433003B        	  1092: 	ADD.b		hinames(a3,d0.w),d2	; add the character to the offset
00:0000A5B4 6B14            	  1093: 	BMI.s		wrap_to_z			; if negative go set "Z"
                            	  1094: 
00:0000A5B6 0C02000B        	  1095: 	CMPI.b	#$0B,d2			; compare with "A"
00:0000A5BA 6410            	  1096: 	BCC.s		check_alpha			; if >= "A" go test for <= "Z"
                            	  1097: 
00:0000A5BC 0C020001        	  1098: 	CMPI.b	#$01,d2			; compare with "0"
00:0000A5C0 6704            	  1099: 	BEQ.s		wrap_to_a			; if "0" go set to "A"
                            	  1100: 
                            	  1101: 							; gets here if it was "2" to "9"
00:0000A5C2 7400            	  1102: 	MOVEQ		#0,d2				; else set to " "
00:0000A5C4 600E            	  1103: 	BRA.s		save_char			; go save the new character
                            	  1104: 
                            	  1105: wrap_to_a
00:0000A5C6 740B            	  1106: 	MOVEQ		#$0B,d2			; set to "A"
00:0000A5C8 600A            	  1107: 	BRA.s		save_char			; go save the new character
                            	  1108: 
                            	  1109: wrap_to_z
00:0000A5CA 7424            	  1110: 	MOVEQ		#$24,d2			; set to "Z"
                            	  1111: check_alpha
00:0000A5CC 0C020025        	  1112: 	CMPI.b	#$25,d2			; compare with "Z" + 1
00:0000A5D0 6502            	  1113: 	BCS.s		save_char			; if less skip the reset
                            	  1114: 
00:0000A5D2 7400            	  1115: 	MOVEQ		#0,d2				; else reset it to " "
                            	  1116: save_char
00:0000A5D4 1782003B        	  1117: 	MOVE.b	d2,hinames(a3,d0.w)	; save the new character
                            	  1118: exit_not_done
00:0000A5D8 7000            	  1119: 	MOVEQ		#0,d0				; flag high score not complete
                            	  1120: exit_enter_hiscores
00:0000A5DA 4E75            	  1121: 	RTS
                            	  1122: 
                            	  1123: 
                            	  1124: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1125: ;
                            	  1126: ; handle the hyperspace button
                            	  1127: 
                            	  1128: hyperspace
                            	  1129: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	  1130: ;##	BEQ		exit_hyperspace		; if no players just exit
                            	  1131: 
                            	  1132: ;##	TST.b		hide_p_cnt(a5)		; test the hide the player count
                            	  1133: ;##	BNE		exit_hyperspace		; if the player is hidden just exit
                            	  1134: 
00:0000A5DC 4A2D0027        	  1135: 	tst.b p_flag_off(a5)		; test the player flag
00:0000A5E0 6F000088        	  1136: 	ble exit_hyperspace			; if no player or player exploding just exit
                            	  1137: 
                            	  1138: ;	MOVEQ		#' ',d1			; [SPACE] key, read the hyperspace button
                            	  1139: ;	MOVEQ		#19,d0			; check for keypress
                            	  1140: ;	TRAP		#15
00:0000A5E4 7005            	  1141: 	moveq #5,d0
00:0000A5E6 4E4F            	  1142: 	trap #15
00:0000A5E8 0C010020        	  1143: 	cmpi.b #' ',d1
00:0000A5EC 667C            	  1144: 	bne.s exit_hyperspace
                            	  1145: 
                            	  1146: ;	TST.b		d1				; test the result
                            	  1147: ;	BEQ.s		exit_hyperspace		; if the key is not pressed just exit
                            	  1148: 
00:0000A5EE 7000            	  1149: 	MOVEQ		#0,d0				; clear the longword
00:0000A5F0 1B400027        	  1150: 	MOVE.b	d0,p_flag_off(a5)		; clear the player flag
00:0000A5F4 1B40004A        	  1151: 	MOVE.b	d0,p_xvel_off(a5)		; clear the player x velocity
00:0000A5F8 1B40006D        	  1152: 	MOVE.b	d0,p_yvel_off(a5)		; clear the player y velocity
                            	  1153: 
00:0000A5FC 1B7C0030007A    	  1154: 	MOVE.b	#$30,hide_p_cnt(a5)	; set the hide the player count
                            	  1155: 
00:0000A602 61000C38        	  1156: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A606 302B000A        	  1157: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000A60A 02401FFF        	  1158: 	ANDI.w	#$1FFF,d0			; mask to $1Fxx
00:0000A60E 0C401E00        	  1159: 	CMPI.w	#$1E00,d0			; compare with $1E00
00:0000A612 6504            	  1160: 	BCS.s		hype_xok1			; if less than $1E00 just use it
                            	  1161: 
00:0000A614 02401CFF        	  1162: 	ANDI.w	#$1CFF,d0			; else restrict it to $1Cxx
                            	  1163: hype_xok1
00:0000A618 0C400400        	  1164: 	CMPI.w	#$0400,d0			; compare it with $0400
00:0000A61C 6404            	  1165: 	BCC.s		hype_xok2			; if >= $0400 go use it
                            	  1166: 
00:0000A61E 00400300        	  1167: 	ORI.w		#$0300,d0			; else make it $03xx
                            	  1168: hype_xok2
00:0000A622 3B40FFB6        	  1169: 	MOVE.w	d0,p_xpos_off(a5)		; save the player x position
                            	  1170: 
00:0000A626 61000C14        	  1171: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A62A 302B000A        	  1172: 	MOVE.w	PRNlword(a3),d0		; get a pseudo random word
00:0000A62E 02401FFF        	  1173: 	ANDI.w	#$1FFF,d0			; mask to $1Fxx
                            	  1174: 
00:0000A632 3F00            	  1175: 	MOVE.w	d0,-(sp)			; push the word
00:0000A634 141F            	  1176: 	MOVE.b	(sp)+,d2			; pull the byte for later success/fail check
                            	  1177: 
00:0000A636 0C401600        	  1178: 	CMPI.w	#$1600,d0			; compare with $1600
00:0000A63A 6504            	  1179: 	BCS.s		hype_yok1			; if less than $1600 just use it
                            	  1180: 
00:0000A63C 024014FF        	  1181: 	ANDI.w	#$14FF,d0			; else restrict it to $14xx
                            	  1182: hype_yok1
00:0000A640 0C400400        	  1183: 	CMPI.w	#$0400,d0			; compare it with $0400
00:0000A644 6404            	  1184: 	BCC.s		hype_yok2			; if >= $0400 go use it
                            	  1185: 
00:0000A646 00400300        	  1186: 	ORI.w		#$0300,d0			; else make it $03xx
                            	  1187: hype_yok2
00:0000A64A 3B40FFFC        	  1188: 	MOVE.w	d0,p_ypos_off(a5)		; save the player y position
                            	  1189: 
00:0000A64E 7201            	  1190: 	MOVEQ		#1,d1				; default to a successful hyperspace jump
                            	  1191: 
00:0000A650 0C020018        	  1192: 	CMPI.b	#$18,d2			; compare with $18xx
00:0000A654 6510            	  1193: 	BCS.s		save_hyperspace		; if less than $18xx go save the hyperspace flag
                            	  1194: 
00:0000A656 02020007        	  1195: 	ANDI.b	#$07,d2			; else mask it
00:0000A65A D402            	  1196: 	ADD.b		d2,d2				; ; 2
00:0000A65C 5802            	  1197: 	ADDI.b	#$04,d2			; + 4
00:0000A65E B42D0076        	  1198: 	CMP.b		rock_count(a5),d2		; compare this with the rock count
00:0000A662 6502            	  1199: 	BCS.s		save_hyperspace		; if < the rock count allow the jump
                            	  1200: 
00:0000A664 7280            	  1201: 	MOVEQ		#$80,d1			; else flag an unsuccessful hyperspace jump
                            	  1202: save_hyperspace
00:0000A666 17410026        	  1203: 	MOVE.b	d1,hyper(a3)		; save the hyperspace flag
                            	  1204: exit_hyperspace
00:0000A66A 4E75            	  1205: 	RTS
                            	  1206: 
                            	  1207: 
                            	  1208: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1209: ;
                            	  1210: ; clear the items and set the ship start count
                            	  1211: 
                            	  1212: reset_game:
00:0000A66C 7003            	  1213: 	MOVEQ		#3,d0				; default to a 3 ship game
00:0000A66E 206B000E        	  1214: 	MOVEA.l	switch_addr(a3),a0	; point to the switch
00:0000A672 08100002        	  1215: 	BTST		#2,(a0)			; test the ship start switch
00:0000A676 6702            	  1216: 	BEQ.s		three_ship_start		; if 0 go start with three ships
                            	  1217: 
00:0000A678 7004            	  1218: 	MOVEQ		#4,d0				; else make it a 4 ship game
                            	  1219: three_ship_start
00:0000A67A 1740001B        	  1220: 	MOVE.b	d0,ss_count(a3)		; save the starting ship count
                            	  1221: 
00:0000A67E 1B7C00020075    	  1222: 	MOVE.b	#2,i_rk_count(a5)		; set the previous initial rock count
                            	  1223: 
00:0000A684 7000            	  1224: 	MOVEQ		#0,d0				; clear the longword
00:0000A686 7E22            	  1225: 	MOVEQ		#flag_end-flags_off-1,d7
                            	  1226: 							; set the count for the number of items
                            	  1227: clear_items_loop
00:0000A688 1B80700C        	  1228: 	MOVE.b	d0,flags_off(a5,d7.w)	; clear an item
00:0000A68C 51CFFFFA        	  1229: 	DBF		d7,clear_items_loop	; loop if more to do
                            	  1230: 
00:0000A690 1B400076        	  1231: 	MOVE.b	d0,rock_count(a5)		; clear the rock count
                            	  1232: 
00:0000A694 4E75            	  1233: 	RTS
                            	  1234: 
                            	  1235: 
                            	  1236: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1237: ;
                            	  1238: ; write a high score initial to the vector list
                            	  1239: 
                            	  1240: write_initial:
00:0000A696 7200            	  1241: 	MOVEQ		#0,d1				; clear the longword
00:0000A698 1218            	  1242: 	MOVE.b	(a0)+,d1			; get a high score initial
00:0000A69A 6614            	  1243: 	BNE.s		add_character		; if not [SPACE] just go add it
                            	  1244: 
00:0000A69C 102B0176        	  1245: 	MOVE.b	p1_high(a3),d0		; get the player 1 highscore flag
00:0000A6A0 C02B027A        	  1246: 	AND.b		p2_high(a3),d0		; and with the player 2 highscore flag
00:0000A6A4 6B0A            	  1247: 	BMI.s		add_character		; if neither is entering their initials just
                            	  1248: 							; go add the character
                            	  1249: 
                            	  1250: 							; else add a "_" instead of a [SPACE]
00:0000A6A6 38FCF872        	  1251: 	MOVE.w	#$F872,(a4)+		; add the underline vector word to the vector
                            	  1252: 							; list
00:0000A6AA 38FCF801        	  1253: 	MOVE.w	#$F801,(a4)+		; add the step to next character vector word
                            	  1254: 							; to the vector list
00:0000A6AE 4E75            	  1255: 	RTS
                            	  1256: 
                            	  1257: 
                            	  1258: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1259: ;
                            	  1260: ; add character (d1) to the vector list
                            	  1261: 
                            	  1262: add_character:
00:0000A6B0 2F08            	  1263: 	MOVE.l	a0,-(sp)			; save a0
00:0000A6B2 D241            	  1264: 	ADD.w		d1,d1				; ; 2 bytes per character (d1) JSRL
00:0000A6B4 41FA22FE        	  1265: 	LEA		char_set(pc),a0		; point to the character JSRL table
00:0000A6B8 38F01000        	  1266: 	MOVE.w	(a0,d1.w),(a4)+		; add the JSRL word to the vector list
00:0000A6BC 205F            	  1267: 	MOVE.l	(sp)+,a0			; restore a0
00:0000A6BE 4E75            	  1268: 	RTS
                            	  1269: 
                            	  1270: 
                            	  1271: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1272: ;
                            	  1273: ; add d7 ships to the vector list. this is limited to a maximum of eighteen ships for
                            	  1274: ; speed and clarity
                            	  1275: 
                            	  1276: add_ships:
00:0000A6C0 6726            	  1277: 	BEQ.s		exit_add_ships		; if no ships left just exit
                            	  1278: 
00:0000A6C2 7012            	  1279: 	MOVEQ		#18,d0			; set the maximum ship count
00:0000A6C4 B047            	  1280: 	CMP.w		d7,d0				; compare the ship count with the max count
00:0000A6C6 6402            	  1281: 	BCC.s		show_ships			; if <= to max go show the ships
                            	  1282: 
00:0000A6C8 3E00            	  1283: 	MOVE.w	d0,d7				; else set the ship count to the maximum
                            	  1284: show_ships
00:0000A6CA 9247            	  1285: 	SUB.w		d7,d1				; subtract the ship count twice to move the ..
00:0000A6CC 9247            	  1286: 	SUB.w		d7,d1				; .. ships further right the more there are
                            	  1287: 
00:0000A6CE 36BCE000        	  1288: 	MOVE.w	#$E000,glob_scale(a3)	; set the global scale
00:0000A6D2 343C00D1        	  1289: 	MOVE.w	#$D1,d2			; set the ships y co-ordinate
00:0000A6D6 61000AAA        	  1290: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1291: 							; a draw command
00:0000A6DA 5347            	  1292: 	SUBQ.w	#1,d7				; adjust for loop type
                            	  1293: add_ships_loop
00:0000A6DC 43FA20DC        	  1294: 	LEA		play_liv(pc),a1		; set the pointer to ships left
00:0000A6E0 61000A8A        	  1295: 	BSR		add_address			; convert the a1 address and add it to the
                            	  1296: 							; vector list as a vector subroutine call
00:0000A6E4 51CFFFF6        	  1297: 	DBF		d7,add_ships_loop		; decrement the ship count and loop if more
                            	  1298: 							; to do
                            	  1299: exit_add_ships
00:0000A6E8 4E75            	  1300: 	RTS
                            	  1301: 
                            	  1302: 
                            	  1303: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1304: ;
                            	  1305: ; move all the items and add them to the vector list
                            	  1306: 
                            	  1307: ; d6 = object index
                            	  1308: ; d7 = position index
                            	  1309: 
                            	  1310: move_items:
00:0000A6EA 7E44            	  1311: 	MOVEQ		#x_pos_end-x_pos_off-2,d7
                            	  1312: 							; set the index to the last object position
00:0000A6EC 7C22            	  1313: 	MOVEQ		#flag_end-flags_off-1,d6
                            	  1314: 							; set the count to the last object
                            	  1315: move_next_item
00:0000A6EE 1035600C        	  1316: 	MOVE.b	flags_off(a5,d6.w),d0	; get an object flag
00:0000A6F2 670000CC        	  1317: 	BEQ		move_next_object		; if no item go do the next one
                            	  1318: 
                            	  1319: ; have an active item
                            	  1320: 
00:0000A6F6 6A5C            	  1321: 	BPL.s		move_item			; if the item is not exploding go move the item
                            	  1322: 
                            	  1323: 							; else the item is exploding
00:0000A6F8 4400            	  1324: 	NEG.b		d0				; do twos complement [$A0 becones $60]
00:0000A6FA E808            	  1325: 	LSR.b		#4,d0				; shift the high nibble to the low nibble
                            	  1326: 							; [$60 becomes $06]
00:0000A6FC 5200            	  1327: 	ADDQ.b	#1,d0				; + 1
00:0000A6FE 0C06001B        	  1328: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  1329: 							; compare the index with the player index
00:0000A702 6606            	  1330: 	BNE.s		skip_play_inc		; if not the player skip setting the player
                            	  1331: 							; increment
                            	  1332: 
                            	  1333: ; set the player explosion increment to 1/2 by only setting it to 1 on alternate loops
                            	  1334: 
00:0000A704 7001            	  1335: 	MOVEQ		#1,d0				; set game counter mask
00:0000A706 C06B0059        	  1336: 	AND.w		game_count(a3),d0		; mask the game counter
                            	  1337: skip_play_inc
00:0000A70A D035600C        	  1338: 	ADD.b		flags_off(a5,d6.w),d0	; add the item flag
00:0000A70E 6B2A            	  1339: 	BMI.s		item_exploding		; go handle the item still exploding
                            	  1340: 
00:0000A710 0C46001B        	  1341: 	CMPI.w	#p_flag_off-flags_off,d6
                            	  1342: 							; compare the index with the player index
00:0000A714 6716            	  1343: 	BEQ.s		go_reset_play		; if the player go reset the player and do next
                            	  1344: 
00:0000A716 641A            	  1345: 	BCC.s		go_reset_sauc		; if the saucer go reset the saucer and do next
                            	  1346: 
                            	  1347: 							; else it was a rock so clear it
00:0000A718 532D0076        	  1348: 	SUBQ.b	#1,rock_count(a5)		; decrement the rock count
00:0000A71C 6606            	  1349: 	BNE.s		no_new_rocks		; skip flag set if rocks still left
                            	  1350: 
00:0000A71E 1B7C007F007B    	  1351: 	MOVE.b	#$7F,new_rocks(a5)	; else set the generate new rocks flag
                            	  1352: no_new_rocks
00:0000A724 4235600C        	  1353: 	CLR.b		flags_off(a5,d6.w)	; clear the item flag
00:0000A728 60000096        	  1354: 	BRA		move_next_object		; go check next item
                            	  1355: 
                            	  1356: go_reset_play
00:0000A72C 610002E2        	  1357: 	BSR		player_reset		; reset the player velocity and position
00:0000A730 60F2            	  1358: 	BRA		no_new_rocks		; go clear the player and do the next item
                            	  1359: 
                            	  1360: ; reset the saucer timer
                            	  1361: 
                            	  1362: go_reset_sauc
00:0000A732 1B6D00780077    	  1363: 	MOVE.b	i_sauc_tim(a5),sauc_cntdn(a5)
                            	  1364: 							; get the small saucer boundary/initial saucer
                            	  1365: 							; timer and reset the saucer countdown timer
00:0000A738 60EA            	  1366: 	BRA.s		no_new_rocks		; go clear the saucer and do the next item
                            	  1367: 
                            	  1368: ; the item is still exploding
                            	  1369: 
                            	  1370: item_exploding
00:0000A73A 1B80600C        	  1371: 	MOVE.b	d0,flags_off(a5,d6.w)	; save the incremented item flag
00:0000A73E 1F00            	  1372: 	MOVE.b	d0,-(sp)			; save the byte
00:0000A740 321F            	  1373: 	MOVE.w	(sp)+,d1			; pull the word
00:0000A742 C27CF000        	  1374: 	AND.w		#$F000,d1			; mask the top nibble as the scale
00:0000A746 D27C1000        	  1375: 	ADD.w		#$1000,d1			; + $10
00:0000A74A 0C06001B        	  1376: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  1377: 							; compare the index with the player index
00:0000A74E 6602            	  1378: 	BNE.s		no_reset_scale		; if not the player ship skip the scale reset
                            	  1379: 
00:0000A750 7200            	  1380: 	MOVEQ		#$0000,d1			; else it was the player so reset the scale
                            	  1381: no_reset_scale
00:0000A752 6066            	  1382: 	BRA.s		keep_scale			; go add the object to the vector list and do
                            	  1383: 							; the next item
                            	  1384: 
                            	  1385: ; the item is not exploding so move the item
                            	  1386: 
                            	  1387: move_item:
00:0000A754 1035602F        	  1388: 	MOVE.b	x_vel_off(a5,d6.w),d0	; get the x velocity byte
00:0000A758 4880            	  1389: 	EXT.w		d0				; extend it to a word value
00:0000A75A D0757080        	  1390: 	ADD.w		x_pos_off(a5,d7.w),d0	; add the x position
00:0000A75E 6B06            	  1391: 	BMI.s		x_pos_neg			; if negative go mask to $2000
                            	  1392: 
00:0000A760 B07C2000        	  1393: 	CMP.w		#$2000,d0			; compare the object x position with $2000
00:0000A764 6510            	  1394: 	BCS.s		not_x_max			; if less go do y position
                            	  1395: 
                            	  1396: x_pos_neg
00:0000A766 02401FFF        	  1397: 	ANDI.w	#$1FFF,d0			; else wrap round the x position
                            	  1398: 
00:0000A76A 0C06001C        	  1399: 	CMPI.b	#s_flag_off-flags_off,d6
                            	  1400: 							; compare the index with the saucer index
00:0000A76E 6606            	  1401: 	BNE.s		not_x_max			; if not saucer continue
                            	  1402: 
                            	  1403: 							; else the saucer has passed the screen end
00:0000A770 487A004E        	  1404: 	PEA		move_next_object(pc)	; on RTS go check the next item
00:0000A774 6052            	  1405: 	BRA.s		clear_saucer		; clear the saucer and restart the saucer timer
                            	  1406: 
                            	  1407: not_x_max
00:0000A776 3B807080        	  1408: 	MOVE.w	d0,x_pos_off(a5,d7.w)	; save the new x position
                            	  1409: 
00:0000A77A 10356052        	  1410: 	MOVE.b	y_vel_off(a5,d6.w),d0	; get the y velocity byte
00:0000A77E 4880            	  1411: 	EXT.w		d0				; extend it to a word value
00:0000A780 D07570C6        	  1412: 	ADD.w		y_pos_off(a5,d7.w),d0	; add the y position
00:0000A784 6A06            	  1413: 	BPL.s		y_not_neg			; skip add if not < 0
                            	  1414: 
00:0000A786 D07C1800        	  1415: 	ADD.w		#$1800,d0			; else wrap round the y position
00:0000A78A 600A            	  1416: 	BRA.s		not_y_max			; and skip the max check
                            	  1417: 
                            	  1418: y_not_neg
00:0000A78C B07C1800        	  1419: 	CMP.w		#$1800,d0			; compare the object y position with $1800
00:0000A790 6504            	  1420: 	BCS.s		not_y_max			; if less just continue
                            	  1421: 
00:0000A792 907C1800        	  1422: 	SUB.w		#$1800,d0			; else wrap round the y position
                            	  1423: not_y_max
00:0000A796 3B8070C6        	  1424: 	MOVE.w	d0,y_pos_off(a5,d7.w)	; save the new y position
                            	  1425: 
00:0000A79A 323CE000        	  1426: 	MOVE.w	#$E000,d1			; set the scale to $E000
00:0000A79E 0C46001D        	  1427: 	CMPI.w	#s_fire_off-flags_off,d6
                            	  1428: 							; compare the index with the fire objects
00:0000A7A2 6416            	  1429: 	BCC.s		keep_scale			; if fire object keep this scale and go add the
                            	  1430: 							; item and do next
                            	  1431: 
00:0000A7A4 1035600C        	  1432: 	MOVE.b	flags_off(a5,d6.w),d0	; get the object flag
00:0000A7A8 08000000        	  1433: 	BTST.l	#0,d0				; test bit 0
00:0000A7AC 660C            	  1434: 	BNE.s		keep_scale			; if %xx1 keep this scale and go add the item
                            	  1435: 							; and do next
                            	  1436: 
00:0000A7AE 323CF000        	  1437: 	MOVE.w	#$F000,d1			; set the scale to $F000
00:0000A7B2 08000001        	  1438: 	BTST.l	#1,d0				; test bit 0
00:0000A7B6 6602            	  1439: 	BNE.s		keep_scale			; if %x10 keep this scale and go add the item
                            	  1440: 							; and do next
                            	  1441: 
00:0000A7B8 7200            	  1442: 	MOVEQ		#0,d1				; set the scale to $0000
                            	  1443: 
                            	  1444: ; add the item to the vector list and go do the next item
                            	  1445: 
                            	  1446: keep_scale
00:0000A7BA 3681            	  1447: 	MOVE.w	d1,glob_scale(a3)		; save the global scale
00:0000A7BC 610003DE        	  1448: 	BSR		add_to_list			; add an object to the vector list
                            	  1449: move_next_object
00:0000A7C0 5547            	  1450: 	SUBQ.w	#2,d7				; decrement the position index
00:0000A7C2 51CEFF2A        	  1451: 	DBF		d6,move_next_item		; decrement the count and loop if more to do
                            	  1452: 
00:0000A7C6 4E75            	  1453: 	RTS
                            	  1454: 
                            	  1455: 
                            	  1456: 
                            	  1457: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1458: ;
                            	  1459: ; clear the saucer and restart the saucer timer
                            	  1460: 
                            	  1461: clear_saucer:
00:0000A7C8 1B6D00780077    	  1462: 	move.b i_sauc_tim(a5),sauc_cntdn(a5)	
                            	  1463: 							; copy the small saucer boundary/initial saucer
                            	  1464: 							; timer to the saucer countdown timer
00:0000A7CE 422D0028        	  1465: 	clr.b s_flag_off(a5)		; clear the saucer flag
00:0000A7D2 422D004B        	  1466: 	clr.b s_xvel_off(a5)		; clear the saucer x velocity byte
00:0000A7D6 422D006E        	  1467: 	clr.b s_yvel_off(a5)		; clear the saucer y velocity byte
00:0000A7DA 4E75            	  1468: 	rts
                            	  1469: 
                            	  1470: 
                            	  1471: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1472: ;
                            	  1473: ; handle ship rotation and thrust
                            	  1474: 
                            	  1475: ship_move:
                            	  1476: ;##	TST.b		num_players(a3)		; test the number of players in the game
                            	  1477: ;##	BEQ.s		exit_ship_move		; if no players just exit
                            	  1478: 
00:0000A7DC 4A2D0027        	  1479: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000A7E0 6B4A            	  1480: 	BMI.s		exit_ship_move		; if the player is exploding just exit
                            	  1481: 
00:0000A7E2 4A2D007A        	  1482: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000A7E6 6746            	  1483: 	BEQ.s		rot_and_thrust		; if the player is visible go handle the ship
                            	  1484: 							; rotate and thrust
                            	  1485: 
00:0000A7E8 532D007A        	  1486: 	SUBQ.b	#1,hide_p_cnt(a5)		; else decrement the hide the player count
00:0000A7EC 663E            	  1487: 	BNE.s		exit_ship_move		; if not timed out just exit
                            	  1488: 
00:0000A7EE 4A2B0026        	  1489: 	TST.b		hyper(a3)			; test the hyperspace flag
00:0000A7F2 6B1E            	  1490: 	BMI.s		kill_the_player		; if negative go handle an unsuccessful
                            	  1491: 							; hyperspace jump
                            	  1492: 
00:0000A7F4 6614            	  1493: 	BNE.s		reveal_player		; else if non zero go handle a successful
                            	  1494: 							; hyperspace jump
                            	  1495: 
                            	  1496: 							; else the player has just become visible
00:0000A7F6 610000F8        	  1497: 	BSR		check_clear			; check items within $0400 range of the player
00:0000A7FA 662C            	  1498: 	BNE.s		clear_hyper			; if there are items within range go clear the
                            	  1499: 							; hyperspace flag and exit
                            	  1500: 
00:0000A7FC 4A2D0028        	  1501: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000A800 6708            	  1502: 	BEQ.s		reveal_player		; if there's no saucer go reveal the player
                            	  1503: 
00:0000A802 1B7C0002007A    	  1504: 	MOVE.b	#$02,hide_p_cnt(a5)	; else set the hide the player count
00:0000A808 4E75            	  1505: 	RTS
                            	  1506: 
                            	  1507: ; handle a successful hyperspace jump
                            	  1508: 
                            	  1509: reveal_player
00:0000A80A 1B7C00010027    	  1510: 	MOVE.b	#$01,p_flag_off(a5)	; set the player flag
00:0000A810 6016            	  1511: 	BRA.s		clear_hyper			; go clear the hyperspace flag and return
                            	  1512: 
                            	  1513: ; handle an unsuccessful hyperspace jump
                            	  1514: 
                            	  1515: kill_the_player:
00:0000A812 1B7C00A00027    	  1516: 	MOVE.b	#$A0,p_flag_off(a5)	; flag that the player's ship is exploding
00:0000A818 532D0082        	  1517: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
00:0000A81C 1B7C0081007A    	  1518: 	MOVE.b	#$81,hide_p_cnt(a5)	; set the hide the player count
                            	  1519: 
00:0000A822 7206            	  1520: 	MOVEQ		#mexpl_snd,d1		; set the medium explosion sound
00:0000A824 610025A2        	  1521: 	BSR		play_sample			; go play the sample
                            	  1522: clear_hyper
00:0000A828 422B0026        	  1523: 	CLR.b		hyper(a3)			; clear the hyperspace flag
                            	  1524: exit_ship_move
00:0000A82C 4E75            	  1525: 	RTS
                            	  1526: 
                            	  1527: ; handle the ship rotate and thrust
                            	  1528: 
                            	  1529: rot_and_thrust
                            	  1530: ;	MOVEQ		#0,d2				; assume no rotate
                            	  1531: ;	MOVE.l	#'L WQ',d1			; [L WQ] keys
                            	  1532: ;	MOVEQ		#19,d0			; check for keypress
                            	  1533: ;	TRAP		#15
00:0000A82E 7005            	  1534: 	moveq #5,d0
00:0000A830 4E4F            	  1535: 	trap #15
00:0000A832 0C010051        	  1536: 	cmpi.b #'Q',d1
00:0000A836 6602            	  1537: 	bne.s not_rot_left1
00:0000A838 7403            	  1538: 	moveq #3,d2
                            	  1539: not_rot_left1:
00:0000A83A 0C010057        	  1540: 	cmpi.b #'W',d1
00:0000A83E 6602            	  1541: 	bne.s not_rot_right1
00:0000A840 5702            	  1542: 	subq.b #3,d2
                            	  1543: not_rot_right1:
                            	  1544: 
                            	  1545: ;	TST.b		d1				; test the [Q] result
                            	  1546: ;	BPL.s		not_rot_left		; if not pressed go test rotate right
                            	  1547: 
                            	  1548: ;	MOVEQ		#3,d2				; if pressed set the rotation angle to + 3
                            	  1549: ;not_rot_left
                            	  1550: ;	TST.w		d1				; test the [W] result
                            	  1551: ;	BPL.s		not_rot_right		; if not pressed go add the rotation
                            	  1552: 
                            	  1553: ;	SUBQ.b	#3,d2				; if pressed set the rotation angle to - 3
                            	  1554: ;not_rot_right
00:0000A842 D52B001E        	  1555: 	add.b d2,p_orient(a3)		; add the roataion to the player orientation
                            	  1556: 
00:0000A846 7001            	  1557: 	moveq #1,d0				; set game counter mask
00:0000A848 C06B0059        	  1558: 	and.w game_count(a3),d0		; mask the game counter
00:0000A84C 66DE            	  1559: 	bne.s exit_ship_move		; just exit half the time
                            	  1560: 
00:0000A84E 0C01004C        	  1561: 	cmpi.b #'L',d1
00:0000A852 664C            	  1562: 	bne.s not_thrust
                            	  1563: ;	TST.l		d1				; test the [L] result
                            	  1564: ;	BPL.s		not_thrust			; if not pressed then go slow the ship
                            	  1565: 
                            	  1566: ; thrust button is pressed so increase the ship velocity
                            	  1567: 
00:0000A854 7202            	  1568: 	MOVEQ		#thrst_snd,d1		; set the thrust sound
00:0000A856 61002570        	  1569: 	BSR		play_sample			; play the sample and return
                            	  1570: 
00:0000A85A 102B001E        	  1571: 	MOVE.b	p_orient(a3),d0		; get the player orientation
00:0000A85E 610007CC        	  1572: 	BSR		cos_d0			; do COS(d0)
00:0000A862 EE40            	  1573: 	ASR.w		#7,d0				; scale to 1/128th
                            	  1574: 
00:0000A864 1F2D004A        	  1575: 	MOVE.b	p_xvel_off(a5),-(sp)	; get the x velocity high byte
00:0000A868 321F            	  1576: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A86A 122D007E        	  1577: 	MOVE.b	p_xvlo_off(a5),d1		; get the x velocity low byte
00:0000A86E D240            	  1578: 	ADD.w		d0,d1				; add the thrust x component
00:0000A870 6164            	  1579: 	BSR.s		check_velocity		; limit check the velocity in d1
00:0000A872 1B41007E        	  1580: 	MOVE.b	d1,p_xvlo_off(a5)		; save the x velocity low byte
00:0000A876 3F01            	  1581: 	MOVE.w	d1,-(sp)			; save the word
00:0000A878 1B5F004A        	  1582: 	MOVE.b	(sp)+,p_xvel_off(a5)	; save the x velocity high byte
                            	  1583: 
00:0000A87C 102B001E        	  1584: 	MOVE.b	p_orient(a3),d0		; get the player orientation
00:0000A880 610007AE        	  1585: 	BSR		sin_d0			; do SIN(d0)
00:0000A884 EE40            	  1586: 	ASR.w		#7,d0				; scale to 1/128th
                            	  1587: 
00:0000A886 1F2D006D        	  1588: 	MOVE.b	p_yvel_off(a5),-(sp)	; get the y velocity high byte
00:0000A88A 321F            	  1589: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A88C 122D007F        	  1590: 	MOVE.b	p_yvlo_off(a5),d1		; get the y velocity low byte
00:0000A890 D240            	  1591: 	ADD.w		d0,d1				; add the thrust y component
00:0000A892 6142            	  1592: 	BSR.s		check_velocity		; limit check the velocity in d1
00:0000A894 1B41007F        	  1593: 	MOVE.b	d1,p_yvlo_off(a5)		; save the y velocity low byte
00:0000A898 3F01            	  1594: 	MOVE.w	d1,-(sp)			; save the word
00:0000A89A 1B5F006D        	  1595: 	MOVE.b	(sp)+,p_yvel_off(a5)	; save the y velocity high byte
                            	  1596: 
00:0000A89E 4E75            	  1597: 	RTS
                            	  1598: 
                            	  1599: ; thrust button is not pressed so slow the ship by adding - 128 ; velocity
                            	  1600: 
                            	  1601: not_thrust
00:0000A8A0 1F2D004A        	  1602: 	MOVE.b	p_xvel_off(a5),-(sp)	; get the x velocity high byte
00:0000A8A4 321F            	  1603: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A8A6 122D007E        	  1604: 	MOVE.b	p_xvlo_off(a5),d1		; get the x velocity low byte
00:0000A8AA 3001            	  1605: 	MOVE.w	d1,d0				; copy the x velocity
00:0000A8AC EE40            	  1606: 	ASR.w		#7,d0				; scale to 1/128th
00:0000A8AE 9240            	  1607: 	SUB.w		d0,d1				; subtract the x drag component
00:0000A8B0 1B41007E        	  1608: 	MOVE.b	d1,p_xvlo_off(a5)		; save the x velocity low byte
00:0000A8B4 3F01            	  1609: 	MOVE.w	d1,-(sp)			; save the word
00:0000A8B6 1B5F004A        	  1610: 	MOVE.b	(sp)+,p_xvel_off(a5)	; save the x velocity high byte
                            	  1611: 
                            	  1612: ; done the x velocity now do the y
                            	  1613: 
00:0000A8BA 1F2D006D        	  1614: 	MOVE.b	p_yvel_off(a5),-(sp)	; get the y velocity high byte
00:0000A8BE 321F            	  1615: 	MOVE.w	(sp)+,d1			; copy it to d1 high byte
00:0000A8C0 122D007F        	  1616: 	MOVE.b	p_yvlo_off(a5),d1		; get the y velocity low byte
00:0000A8C4 3001            	  1617: 	MOVE.w	d1,d0				; copy the y velocity
00:0000A8C6 EE40            	  1618: 	ASR.w		#7,d0				; scale to 1/128th
00:0000A8C8 9240            	  1619: 	SUB.w		d0,d1				; subtract the y drag component
00:0000A8CA 1B41007F        	  1620: 	MOVE.b	d1,p_yvlo_off(a5)		; save the y velocity low byte
00:0000A8CE 3F01            	  1621: 	MOVE.w	d1,-(sp)			; save the word
00:0000A8D0 1B5F006D        	  1622: 	MOVE.b	(sp)+,p_yvel_off(a5)	; save the y velocity high byte
                            	  1623: 
00:0000A8D4 4E75            	  1624: 	RTS
                            	  1625: 
                            	  1626: 
                            	  1627: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1628: ;
                            	  1629: ; limit check the velocity in XA
                            	  1630: 
                            	  1631: check_velocity:
00:0000A8D6 6B0C            	  1632: 	BMI.s		check_neg_velocity	; if negative go check negative limit
                            	  1633: 
00:0000A8D8 0C414000        	  1634: 	CMPI.w	#$4000,d1			; compare velocity with positive limit
00:0000A8DC 6510            	  1635: 	BCS.s		exit_check_velocity	; if less just exit
                            	  1636: 
00:0000A8DE 323C3FFF        	  1637: 	MOVE.w	#$3FFF,d1			; else set the velocity
00:0000A8E2 4E75            	  1638: 	rts
                            	  1639: 
                            	  1640: ; velocity is negative so check against the negative limit
                            	  1641: 
                            	  1642: check_neg_velocity
00:0000A8E4 0C41C002        	  1643: 	CMPI.w	#$C002,d1			; compare velocity with negative limit
00:0000A8E8 6404            	  1644: 	BCC.s		exit_check_velocity	; if greater or equal just exit
                            	  1645: 
00:0000A8EA 323CC001        	  1646: 	MOVE.w	#$C001,d1			; else set the velocity
                            	  1647: exit_check_velocity
00:0000A8EE 4E75            	  1648: 	rts
                            	  1649: 
                            	  1650: 
                            	  1651: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1652: ;
                            	  1653: ; check items within $0400 range of the player
                            	  1654: 
                            	  1655: check_clear:
00:0000A8F0 7C1C            	  1656: 	moveq #s_flag_off-flags_off,d6
                            	  1657: 							; set the count/index to the saucer
00:0000A8F2 7E38            	  1658: 	moveq #s_xpos_off-x_pos_off,d7
                            	  1659: 							; set the index to the saucer position
                            	  1660: check_clear_loop
00:0000A8F4 4A35600C        	  1661: 	tst.b flags_off(a5,d6.w)	; test the item flag
00:0000A8F8 6F28            	  1662: 	BLE.s		not_closer			; if no item or exploding go do the next item
                            	  1663: 
00:0000A8FA 30357080        	  1664: 	MOVE.w	x_pos_off(a5,d7.w),d0	; get the item x position
00:0000A8FE 906DFFB6        	  1665: 	SUB.w		p_xpos_off(a5),d0		; subtract the player x position
00:0000A902 0C400400        	  1666: 	CMPI.w	#$0400,d0			; compare the result with $0400
00:0000A906 6506            	  1667: 	BCS.s		check_clear_y		; if closer go check the y distance
                            	  1668: 
00:0000A908 0C40FC00        	  1669: 	CMPI.w	#$FC00,d0			; compare the result with -$0400
00:0000A90C 6514            	  1670: 	BCS.s		not_closer			; if not closer go do the next item
                            	  1671: 
                            	  1672: check_clear_y
00:0000A90E 303570C6        	  1673: 	MOVE.w	y_pos_off(a5,d7.w),d0	; get the item y position
00:0000A912 906DFFFC        	  1674: 	SUB.w		p_ypos_off(a5),d0		; subtract the player y position
00:0000A916 0C400400        	  1675: 	CMPI.w	#$0400,d0			; compare the result with $0400
00:0000A91A 6510            	  1676: 	BCS.s		is_closer			; if closer go flag within distance and
                            	  1677: 							; increment the hide the player count
                            	  1678: 
00:0000A91C 0C40FC00        	  1679: 	CMPI.w	#$FC00,d0			; compare the result with -$0400
00:0000A920 640A            	  1680: 	BCC.s		is_closer			; if closer go flag within distance and
                            	  1681: 							; increment the hide the player count
                            	  1682: 
                            	  1683: not_closer
00:0000A922 5547            	  1684: 	SUBQ.w	#2,d7				; decrement the position index
00:0000A924 51CEFFCE        	  1685: 	DBF		d6,check_clear_loop	; decrement the count and loop if more to do
                            	  1686: 
00:0000A928 7000            	  1687: 	MOVEQ		#0,d0				; return Zb = 1
00:0000A92A 4E75            	  1688: 	rts
                            	  1689: 
                            	  1690: is_closer
00:0000A92C 522D007A        	  1691: 	ADDQ.b	#1,hide_p_cnt(a5)		; increment the hide the player count
                            	  1692: 							; return Zb = 0
00:0000A930 4E75            	  1693: 	rts
                            	  1694: 
                            	  1695: 
                            	  1696: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1697: ;
                            	  1698: ; generate new rocks
                            	  1699: 
                            	  1700: make_rocks:
00:0000A932 4A2D0028        	  1701: 	TST.b		s_flag_off(a5)		; test the saucer flag
00:0000A936 660000A0        	  1702: 	BNE		exit_make_rocks		; if existing saucer just exit
                            	  1703: 
00:0000A93A 7C34            	  1704: 	MOVEQ		#p_xpos_off-x_pos_off-2,d6
                            	  1705: 							; set the index to the last rock position
00:0000A93C 7A1A            	  1706: 	MOVEQ		#p_flag_off-flags_off-1,d5
                            	  1707: 							; set the count/index to the last rock flag
00:0000A93E 4A2D007B        	  1708: 	TST.b		new_rocks(a5)		; test the generate new rocks flag
00:0000A942 6600008A        	  1709: 	BNE		clear_rocks			; if not counted out go clear all the rocks
                            	  1710: 
                            	  1711: ; these are used as the new rock initial velocity
                            	  1712: 
00:0000A946 7000            	  1713: 	MOVEQ		#0,d0				; clear the longword
00:0000A948 1B40004B        	  1714: 	MOVE.b	d0,s_xvel_off(a5)		; clear the saucer x velocity byte
00:0000A94C 1B40006E        	  1715: 	MOVE.b	d0,s_yvel_off(a5)		; clear the saucer y velocity byte
                            	  1716: 
00:0000A950 700A            	  1717: 	MOVEQ		#$0A,d0			; set the max value
00:0000A952 B02D007D        	  1718: 	CMP.b		min_rocks(a5),d0		; compare minimum rock count with $0A
00:0000A956 6504            	  1719: 	BCS.s		no_inc_min			; if > skip the increment
                            	  1720: 
00:0000A958 522D007D        	  1721: 	ADDQ.b	#1,min_rocks(a5)		; else decrement the minimum rock count before
                            	  1722: 							; the saucer initial timer starts to decrement
                            	  1723: no_inc_min
00:0000A95C 7800            	  1724: 	MOVEQ		#0,d4				; clear the longword
00:0000A95E 182D0075        	  1725: 	MOVE.b	i_rk_count(a5),d4		; get the initial rock count
00:0000A962 5404            	  1726: 	ADDQ.b	#2,d4				; + 2
00:0000A964 0C04000B        	  1727: 	CMPI.b	#11,d4			; compare the new rock count with 11 rocks
00:0000A968 6302            	  1728: 	BLS.s		no_set_max			; if less or equal just use it
                            	  1729: 
00:0000A96A 780B            	  1730: 	MOVEQ		#11,d4			; else set the new rock count to 11
                            	  1731: no_set_max
00:0000A96C 1B440076        	  1732: 	MOVE.b	d4,rock_count(a5)		; save the rock count
00:0000A970 1B440075        	  1733: 	MOVE.b	d4,i_rk_count(a5)		; save the initial rock count
                            	  1734: 
00:0000A974 7E1C            	  1735: 	MOVEQ		#s_xvel_off-x_vel_off,d7
                            	  1736: 							; set the index to the saucer for a zero initial
                            	  1737: 							; velocity
                            	  1738: 
00:0000A976 5344            	  1739: 	SUBQ.w	#1,d4				; adjust for the loop type
                            	  1740: gen_rock_loop
00:0000A978 610008C2        	  1741: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A97C 7018            	  1742: 	MOVEQ		#$18,d0			; set the rock type mask
00:0000A97E C02B000A        	  1743: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000A982 00000004        	  1744: 	ORI.b		#$04,d0			; set the rock size to the largest
00:0000A986 1B80500C        	  1745: 	MOVE.b	d0,flags_off(a5,d5.w)	; save the rock flag
00:0000A98A 610000C4        	  1746: 	BSR		copy_velocity		; copy the saucer velocity, (d7), plus a random
                            	  1747: 							; delta x,y velocity to the new rock, (d5),
                            	  1748: 							; velocity
                            	  1749: 
00:0000A98E 610008AC        	  1750: 	BSR		gen_prng			; generate the next pseudo random number
00:0000A992 7200            	  1751: 	MOVEQ		#0,d1				; clear the other axis position
00:0000A994 303C3FFF        	  1752: 	MOVE.w	#$3FFF,d0			; set the starting position mask
00:0000A998 C06B000A        	  1753: 	AND.w		PRNlword(a3),d0		; mask a pseudo random word
00:0000A99C E248            	  1754: 	LSR.w		#1,d0				; shift a random bit into Cb
00:0000A99E 640C            	  1755: 	BCC.s		rock_on_x			; if Cb = 0 go set the rock at a point along
                            	  1756: 							; the x axis
                            	  1757: 
                            	  1758: ; set the rock at a point along the y axis
                            	  1759: 
00:0000A9A0 0C401800        	  1760: 	CMPI.w	#$1800,d0			; compare the position with the y axis maximum
00:0000A9A4 6504            	  1761: 	BCS.s		rock_y_ok			; if less just use it
                            	  1762: 
00:0000A9A6 024017FF        	  1763: 	ANDI.w	#$17FF,d0			; mask the position to the y axis maximum
                            	  1764: rock_y_ok
00:0000A9AA C340            	  1765: 	EXG		d1,d0				; swap y value to d1, zero to d0
                            	  1766: 
                            	  1767: ; set the rock at a point along the x axis
                            	  1768: 
                            	  1769: rock_on_x
00:0000A9AC 3B806080        	  1770: 	MOVE.w	d0,x_pos_off(a5,d6.w)	; save the rock x position
00:0000A9B0 3B8160C6        	  1771: 	MOVE.w	d1,y_pos_off(a5,d6.w)	; save the rock y position
00:0000A9B4 5546            	  1772: 	SUBQ.w	#2,d6				; decrement the rock position index
00:0000A9B6 5345            	  1773: 	SUBQ.w	#1,d5				; decrement the rock count/index
00:0000A9B8 51CCFFBE        	  1774: 	DBF		d4,gen_rock_loop		; decrement the new rock count and loop if more
                            	  1775: 							; to do
                            	  1776: 
00:0000A9BC 1B7C007F0077    	  1777: 	MOVE.b	#$7F,sauc_cntdn(a5)	; set the saucer countdown timer
00:0000A9C2 1B7C0034007C    	  1778: 	MOVE.b	#$34,thmp_sndi(a5)	; reset the thump sound change timer initial
                            	  1779: 							; value
00:0000A9C8 177C00080023    	  1780: 	MOVE.b	#beat1_snd,thump_snd(a3)
                            	  1781: 							; reset the thump sound value
                            	  1782: 
                            	  1783: ; now clear all the other rocks
                            	  1784: 
                            	  1785: clear_rocks
00:0000A9CE 7000            	  1786: 	MOVEQ		#0,d0				; clear the longword
                            	  1787: clear_rocks_loop
00:0000A9D0 1B80500C        	  1788: 	MOVE.b	d0,flags_off(a5,d5.w)	; clear the rock flag
00:0000A9D4 51CDFFFA        	  1789: 	DBF		d5,clear_rocks_loop	; decrement the count and loop if more to do
                            	  1790: 
                            	  1791: exit_make_rocks
00:0000A9D8 4E75            	  1792: 	rts
                            	  1793: 
                            	  1794: 
                            	  1795: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1796: ;
                            	  1797: ; initialise the player variables
                            	  1798: 
                            	  1799: player_init:
00:0000A9DA 1B6B001B0082    	  1800: 	move.b ss_count(a3),ships_off(a5)
                            	  1801: 							; set the player's starting ship count
00:0000A9E0 1B7C00920078    	  1802: 	move.b #$92,i_sauc_tim(a5)	; set the small saucer boundary/initial saucer
                            	  1803: 							; timer
00:0000A9E6 1B7C00920077    	  1804: 	move.b #$92,sauc_cntdn(a5)	; set the saucer countdown timer
00:0000A9EC 1B7C007F007B    	  1805: 	move.b #$7F,new_rocks(a5)	; set the generate new rocks flag
                            	  1806: 
00:0000A9F2 1B7C0005007D    	  1807: 	move.b #$05,min_rocks(a5)	; set the minimum rock count before the saucer
                            	  1808: 							; initial timer starts to decrement
00:0000A9F8 1B7C0034007C    	  1809: 	move.b #$34,thmp_sndi(a5)	; reset the thump sound change timer initial
                            	  1810: 							; value
00:0000A9FE 177C00080023    	  1811: 	move.b #beat1_snd,thump_snd(a3)	; reset the thump sound value
00:0000AA04 1B7C00FF0083    	  1812: 	move.b #$FF,high_off(a5)		; clear the player highscore flag
00:0000AA0A 1B7C0001007A    	  1813: 	move.b #$01,hide_p_cnt(a5)	; set the hide the player count
                            	  1814: 
                            	  1815: 
                            	  1816: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1817: ;
                            	  1818: ; reset the player velocity and position
                            	  1819: 
                            	  1820: player_reset:
00:0000AA10 3B7C1000FFB6    	  1821: 	move.w #$1000,p_xpos_off(a5)	; set the player x position
00:0000AA16 3B7C0C00FFFC    	  1822: 	move.w #$0C00,p_ypos_off(a5)	; set the player y position
00:0000AA1C 422D004A        	  1823: 	clr.b p_xvel_off(a5)					; clear the player x velocity
00:0000AA20 422D006D        	  1824: 	clr.b p_yvel_off(a5)					; clear the player y velocity
00:0000AA24 4E75            	  1825: 	rts
                            	  1826: 
                            	  1827: 
                            	  1828: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1829: ;
                            	  1830: ; copy the item parameters from the old rock, (d7), to the new rock, (d5)
                            	  1831: 
                            	  1832: copy_rock:
00:0000AA26 3807            	  1833: 	MOVE.w	d7,d4				; copy the old rock index
00:0000AA28 D844            	  1834: 	ADD.w		d4,d4				; ; 2 for the old rock position index
                            	  1835: 
                            	  1836: copy_rock_2
00:0000AA2A 3605            	  1837: 	MOVE.w	d5,d3				; copy the new rock index
00:0000AA2C D643            	  1838: 	ADD.w		d3,d3				; ; 2 for the new rock position index
                            	  1839: 
00:0000AA2E 7207            	  1840: 	MOVEQ		#$07,d1			; set the size mask
00:0000AA30 C235700C        	  1841: 	AND.b		flags_off(a5,d7.w),d1	; mask the old rock size
00:0000AA34 61000806        	  1842: 	BSR		gen_prng			; generate the next pseudo random number
00:0000AA38 7018            	  1843: 	MOVEQ		#$18,d0			; set the rock type mask
00:0000AA3A C02B000A        	  1844: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000AA3E 8001            	  1845: 	OR.b		d1,d0				; OR in the old rock size
00:0000AA40 1B80500C        	  1846: 	MOVE.b	d0,flags_off(a5,d5.w)	; save the new rock flag
                            	  1847: 
00:0000AA44 3BB540803080    	  1848: 	MOVE.w	x_pos_off(a5,d4.w),x_pos_off(a5,d3.w)
                            	  1849: 							; copy the old rock x position to the new rock
                            	  1850: 							; x position
00:0000AA4A 3BB540C630C6    	  1851: 	MOVE.w	y_pos_off(a5,d4.w),y_pos_off(a5,d3.w)
                            	  1852: 							; copy the old rock y position to the new rock
                            	  1853: 							; y position
                            	  1854: 
                            	  1855: 
                            	  1856: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1857: ;
                            	  1858: ; copy the old rock, (d7), velocity plus random delta x,y velocity to the new rock,
                            	  1859: ; (d5), velocity
                            	  1860: 
                            	  1861: copy_velocity:
00:0000AA50 610007EA        	  1862: 	BSR		gen_prng			; generate the next pseudo random number
00:0000AA54 708F            	  1863: 	MOVEQ		#$8F,d0			; mask +/- $00 to $0F
00:0000AA56 C02B000A        	  1864: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000AA5A 6A04            	  1865: 	BPL.s		x_off_pos			; skip bits set if positive
                            	  1866: 
00:0000AA5C 00000070        	  1867: 	ORI.b		#$70,d0			; else make $Fx
                            	  1868: x_off_pos
00:0000AA60 D035702F        	  1869: 	ADD.b		x_vel_off(a5,d7.w),d0	; add the item (d7) to the delta x velocity
00:0000AA64 6120            	  1870: 	BSR.s		limit_velocity		; ensure velocity is within limits
00:0000AA66 1B80502F        	  1871: 	MOVE.b	d0,x_vel_off(a5,d5.w)	; save the rock x velocity
                            	  1872: 
                            	  1873: 
00:0000AA6A 610007D0        	  1874: 	BSR		gen_prng			; generate the next pseudo random number
00:0000AA6E 708F            	  1875: 	MOVEQ		#$8F,d0			; mask +/- $00 to $0F
00:0000AA70 C02B000A        	  1876: 	AND.b		PRNlword(a3),d0		; mask a pseudo random byte
00:0000AA74 6A04            	  1877: 	BPL.s		y_off_pos			; skip bits set if positive
                            	  1878: 
00:0000AA76 00000070        	  1879: 	ORI.b		#$70,d0			; else make $Fx
                            	  1880: y_off_pos
00:0000AA7A D0357052        	  1881: 	ADD.b		y_vel_off(a5,d7.w),d0	; add the item (d5) to the delta y velocity
00:0000AA7E 6106            	  1882: 	BSR.s		limit_velocity		; ensure velocity is within limits
00:0000AA80 1B805052        	  1883: 	MOVE.b	d0,y_vel_off(a5,d5.w)	; save the rock y velocity
                            	  1884: 
00:0000AA84 4E75            	  1885: 	RTS
                            	  1886: 
                            	  1887: 
                            	  1888: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1889: ;
                            	  1890: ; ensure velocity is within limits
                            	  1891: 
                            	  1892: limit_velocity:
00:0000AA86 6A12            	  1893: 	BPL.s		limit_p_vel			; if positive go test positive limit
                            	  1894: 
00:0000AA88 0C0000E1        	  1895: 	CMPI.b	#$E1,d0			; compare velocity with upper limit
00:0000AA8C 6402            	  1896: 	BCC.s		neg_upper_ok		; if less skip set
                            	  1897: 
00:0000AA8E 70E1            	  1898: 	MOVEQ		#$E1,d0			; else set velocity to -$1F
                            	  1899: neg_upper_ok
00:0000AA90 0C0000FB        	  1900: 	CMPI.b	#$FB,d0			; compare velocity with lower limit
00:0000AA94 6514            	  1901: 	BCS.s		exit_limit_velocity	; if greater just exit
                            	  1902: 
00:0000AA96 70FA            	  1903: 	MOVEQ		#$FA,d0			; else set velocity to -$06
00:0000AA98 4E75            	  1904: 	RTS
                            	  1905: 
                            	  1906: ; test velocity positive limit
                            	  1907: 
                            	  1908: limit_p_vel
00:0000AA9A 0C000006        	  1909: 	CMPI.b	#$06,d0			; compare velocity with lower limit
00:0000AA9E 6402            	  1910: 	BCC.s		pos_lower_ok		; skip set if greater
                            	  1911: 
00:0000AAA0 7006            	  1912: 	MOVEQ		#$06,d0			; else set velocity to $06
                            	  1913: pos_lower_ok
00:0000AAA2 0C000020        	  1914: 	CMPI.b	#$20,d0			; compare velocity with upper limit
00:0000AAA6 6502            	  1915: 	BCS.s		exit_limit_velocity	; if less just exit
                            	  1916: 
00:0000AAA8 701F            	  1917: 	MOVEQ		#$1F,d0			; else set velocity to $1F
                            	  1918: exit_limit_velocity
00:0000AAAA 4E75            	  1919: 	RTS
                            	  1920: 
                            	  1921: 
                            	  1922: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  1923: ;
                            	  1924: ; add (c), scores and players ships to the vector list
                            	  1925: 
                            	  1926: static_messages:
00:0000AAAC 43FA18EA        	  1927: 	LEA		copy_msg(pc),a1		; set the pointer to the copyright message
00:0000AAB0 610006BA        	  1928: 	BSR		add_address			; convert the a1 address and add it to the
                            	  1929: 							; vector list as a vector subroutine call
                            	  1930: 
00:0000AAB4 36BC1000        	  1931: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
00:0000AAB8 7219            	  1932: 	MOVEQ		#$19,d1			; set the score x co-ordinate
00:0000AABA 343C00D7        	  1933: 	MOVE.w	#$D7,d2			; set the score y co-ordinate
00:0000AABE 610006C2        	  1934: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1935: 							; a draw command
                            	  1936: 
00:0000AAC2 323C7000        	  1937: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000AAC6 610006D4        	  1938: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  1939: 
00:0000AACA 0C2B0002001A    	  1940: 	CMPI.b	#$02,num_players(a3)	; compare the number of players in the game
00:0000AAD0 661E            	  1941: 	BNE.s		skip_play_flash		; if not two players skip flashing the active
                            	  1942: 							; player
                            	  1943: 
00:0000AAD2 4A2B0018        	  1944: 	TST.b		player_idx(a3)		; test the player index
00:0000AAD6 6618            	  1945: 	BNE.s		skip_play_flash		; if player 2 go add the player to the vector
                            	  1946: 							; list
                            	  1947: 
00:0000AAD8 102D0027        	  1948: 	MOVE.b	p_flag_off(a5),d0		; get the player flag
00:0000AADC 802B0026        	  1949: 	OR.b		hyper(a3),d0		; OR with the hyperspace flag
00:0000AAE0 660E            	  1950: 	BNE.s		skip_play_flash		; if playing go add player 1's score to the
                            	  1951: 							; vector list
                            	  1952: 
00:0000AAE2 4A2D007A        	  1953: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000AAE6 6B08            	  1954: 	BMI.s		skip_play_flash		; if the player is dieing go display the score
                            	  1955: 
00:0000AAE8 082B0004005A    	  1956: 	BTST.b	#4,game_count+1(a3)	; test a bit in the game counter low byte
00:0000AAEE 6714            	  1957: 	BEQ.s		do_p1_ships			; skip the score display if the flash is off
                            	  1958: 
                            	  1959: ; add the active player to the vector list
                            	  1960: 
                            	  1961: skip_play_flash
00:0000AAF0 43EB0173        	  1962: 	LEA		p1_score(a3),a1		; point to player 1's score
00:0000AAF4 7E02            	  1963: 	MOVEQ		#$02,d7			; set the number byte count
00:0000AAF6 17470016        	  1964: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AAFA 61000512        	  1965: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  1966: 							; suppressed character string
00:0000AAFE 7200            	  1967: 	MOVEQ		#0,d1				; add player 1's score's trailing "0"
00:0000AB00 61000650        	  1968: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  1969: 
                            	  1970: do_p1_ships
00:0000AB04 7229            	  1971: 	MOVEQ		#$29,d1			; set the x co-ordinate for player 1's ships
00:0000AB06 7E00            	  1972: 	MOVEQ		#0,d7				; clear the longword
00:0000AB08 1E2B0175        	  1973: 	MOVE.b	p1_ships(a3),d7		; get player 1's ship count
00:0000AB0C 6100FBB2        	  1974: 	BSR		add_ships			; add d7 ships to the vector list
                            	  1975: 
00:0000AB10 4253            	  1976: 	MOVE.w	#$0000,glob_scale(a3)	; set the global scale
                            	  1977: 
00:0000AB12 7278            	  1978: 	MOVEQ		#$78,d1			; set the high score x co-ordinate
00:0000AB14 343C00D7        	  1979: 	MOVE.w	#$D7,d2			; set the high score y co-ordinate
00:0000AB18 61000668        	  1980: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1981: 							; a draw command
00:0000AB1C 323C5000        	  1982: 	MOVE.w	#REL5,d1			; make a $5000,$0000 command
00:0000AB20 6100067A        	  1983: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  1984: 
00:0000AB24 43EB0027        	  1985: 	LEA		hiscores(a3),a1		; point to the highest high score
00:0000AB28 7E02            	  1986: 	MOVEQ		#$02,d7			; set the number byte count
00:0000AB2A 17470016        	  1987: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AB2E 610004DE        	  1988: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  1989: 							; suppressed character string
                            	  1990: 
00:0000AB32 7200            	  1991: 	MOVEQ		#0,d1				; add the high score trailing "0"
00:0000AB34 6100061C        	  1992: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  1993: 
00:0000AB38 36BC1000        	  1994: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  1995: 
00:0000AB3C 323C00C0        	  1996: 	MOVE.w	#$C0,d1			; set the score x co-ordinate
00:0000AB40 343C00D7        	  1997: 	MOVE.w	#$D7,d2			; set the score y co-ordinate
00:0000AB44 6100063C        	  1998: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  1999: 							; a draw command
00:0000AB48 323C5000        	  2000: 	MOVE.w	#REL5,d1			; make a $5000,$0000 command
00:0000AB4C 6100064E        	  2001: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2002: 
00:0000AB50 0C2B0001001A    	  2003: 	CMPI.b	#$01,num_players(a3)	; compare the number of players in the game
                            	  2004: 							; with one
00:0000AB56 6742            	  2005: 	BEQ.s		exit_static			; if just one player skip displaying p2 score
                            	  2006: 
00:0000AB58 651E            	  2007: 	BCS.s		do_p2_score			; if no players go add player 2's score to
                            	  2008: 							; the vector list
                            	  2009: 
00:0000AB5A 4A2B0018        	  2010: 	TST.b		player_idx(a3)		; test the player index
00:0000AB5E 6718            	  2011: 	BEQ.s		do_p2_score			; if player 1 go add the player to the vector
                            	  2012: 							; list
                            	  2013: 
00:0000AB60 102D0027        	  2014: 	MOVE.b	p_flag_off(a5),d0		; get the player flag
00:0000AB64 802B0026        	  2015: 	OR.b		hyper(a3),d0		; OR with the hyperspace flag
00:0000AB68 660E            	  2016: 	BNE.s		do_p2_score			; if playing go add player 2's score to the
                            	  2017: 							; vector list
                            	  2018: 
00:0000AB6A 4A2D007A        	  2019: 	TST.b		hide_p_cnt(a5)		; test the hide the player count
00:0000AB6E 6B08            	  2020: 	BMI.s		do_p2_score			; if the player is dieing go display the score
                            	  2021: 
00:0000AB70 082B0004005A    	  2022: 	BTST.b	#4,game_count+1(a3)	; test a bit in the game counter low byte
00:0000AB76 6714            	  2023: 	BEQ.s		skip_p2_score		; skip the score display if the flash is off
                            	  2024: 
                            	  2025: do_p2_score
00:0000AB78 43EB0277        	  2026: 	LEA		p2_score(a3),a1		; point to player 2's score
00:0000AB7C 7E02            	  2027: 	MOVEQ		#$02,d7			; set the number byte count
00:0000AB7E 17470016        	  2028: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AB82 6100048A        	  2029: 	BSR		output_number		; output the number (a1) as a leading zero
                            	  2030: 							; suppressed character string
00:0000AB86 7200            	  2031: 	MOVEQ		#0,d1				; add player 2's score's trailing "0"
00:0000AB88 610005C8        	  2032: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  2033: 
                            	  2034: skip_p2_score
00:0000AB8C 323C00D0        	  2035: 	MOVE.w	#$D0,d1			; set the x co-ordinate for player 2's ships
00:0000AB90 7E00            	  2036: 	MOVEQ		#0,d7				; clear the longword
00:0000AB92 1E2B0279        	  2037: 	MOVE.b	p2_ships(a3),d7		; get player 2's ship count
00:0000AB96 6000FB28        	  2038: 	BRA		add_ships			; add d7 ships to the vector list and return
                            	  2039: 
                            	  2040: exit_static
00:0000AB9A 4E75            	  2041: 	RTS
                            	  2042: 
                            	  2043: 
                            	  2044: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2045: ;
                            	  2046: ; add an item to the vector list
                            	  2047: ;
                            	  2048: ; d6 = object flag offset
                            	  2049: ; d7 = position offset
                            	  2050: 
                            	  2051: 							; first add the DRAW to the item's origin
                            	  2052: add_to_list:
00:0000AB9C 303570C6        	  2053: 	MOVE.w	y_pos_off(a5,d7.w),d0	; get the y position
00:0000ABA0 D07C0400        	  2054: 	ADD.w		#$0400,d0			; add offset so y is centred around 512
00:0000ABA4 E648            	  2055: 	LSR.w		#3,d0				; / 8
00:0000ABA6 0040A000        	  2056: 	ORI.w		#DRAW,d0			; OR in the draw command
00:0000ABAA 38C0            	  2057: 	MOVE.w	d0,(a4)+			; add it to the vector list
                            	  2058: 
00:0000ABAC 30357080        	  2059: 	MOVE.w	x_pos_off(a5,d7.w),d0	; get the x position
00:0000ABB0 E648            	  2060: 	LSR.w		#3,d0				; / 8
00:0000ABB2 8041            	  2061: 	OR.w		d1,d0				; OR in the global scale
00:0000ABB4 38C0            	  2062: 	MOVE.w	d0,(a4)+			; add it to the vector list
                            	  2063: 
00:0000ABB6 7200            	  2064: 	MOVEQ		#0,d1				; clear the longword
00:0000ABB8 1235600C        	  2065: 	MOVE.b	flags_off(a5,d6.w),d1	; get the object flag
00:0000ABBC 6A12            	  2066: 	BPL.s		add_item			; if not exploding go add the item to the
                            	  2067: 							; vector list
                            	  2068: 
                            	  2069: 							; else add an exploding item
00:0000ABBE 0C06001B        	  2070: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  2071: 							; compare the index with the player index
00:0000ABC2 6700014A        	  2072: 	BEQ		add_play_explode		; if it is the player go add ship pieces to the
                            	  2073: 							; vector list
                            	  2074: 
00:0000ABC6 0201000C        	  2075: 	ANDI.b	#$0C,d1			; else mask the rock type
00:0000ABCA 43FA180C        	  2076: 	LEA		expl_tab(pc),a1		; point to the explosion JSRL table
00:0000ABCE 601A            	  2077: 	BRA.s		add_explode			; go add the JSRL word to the vector list and
                            	  2078: 							; return
                            	  2079: 
                            	  2080: ; add item d6 to the vector list
                            	  2081: 
                            	  2082: add_item:
00:0000ABD0 0C06001B        	  2083: 	CMPI.b	#p_flag_off-flags_off,d6
                            	  2084: 							; compare the index with the player index
00:0000ABD4 670001DE        	  2085: 	BEQ		add_player			; if = go add the player to the vector list
                            	  2086: 
00:0000ABD8 0C06001C        	  2087: 	CMPI.b	#s_flag_off-flags_off,d6
                            	  2088: 							; compare the index with the saucer index
00:0000ABDC 6712            	  2089: 	BEQ.s		add_saucer			; if = go add the saucer to the vector list
                            	  2090: 
00:0000ABDE 6416            	  2091: 	BCC.s		add_fire			; if > saucer go add fire to the vector list
                            	  2092: 
                            	  2093: 							; else add a rock to the vector list
00:0000ABE0 02410018        	  2094: 	ANDI.w	#$0018,d1			; mask the rock type
00:0000ABE4 E449            	  2095: 	LSR.w		#2,d1				; >> 3 << 1
00:0000ABE6 43FA18D6        	  2096: 	LEA		rock_tab(pc),a1		; point to the rock JSRL table
                            	  2097: add_explode
00:0000ABEA 38F11000        	  2098: 	MOVE.w	(a1,d1.w),(a4)+		; add the JSRL word to the vector list
00:0000ABEE 4E75            	  2099: 	RTS
                            	  2100: 
                            	  2101: ; add the saucer to the vector list
                            	  2102: 
                            	  2103: add_saucer:
00:0000ABF0 38FA193E        	  2104: 	MOVE.w	sauc_jsr(pc),(a4)+	; add the saucer JSRL to the vector list
00:0000ABF4 4E75            	  2105: 	RTS
                            	  2106: 
                            	  2107: ; add fire to the vector list
                            	  2108: 
                            	  2109: add_fire:
00:0000ABF6 38FA1E06        	  2110: 	MOVE.w	shot_jsr(pc),(a4)+	; add the shot JSRL to the vector list
                            	  2111: 
00:0000ABFA 7003            	  2112: 	MOVEQ		#3,d0				; set the game counter mask
00:0000ABFC C06B0059        	  2113: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000AC00 6604            	  2114: 	BNE.s		no_shot_dec			; skip the shot decrement 3/4 of the time
                            	  2115: 
00:0000AC02 5335600C        	  2116: 	SUBQ.b	#1,flags_off(a5,d6.w)	; decrement fire item (d7) flag
                            	  2117: no_shot_dec
00:0000AC06 4E75            	  2118: 	RTS
                            	  2119: 
                            	  2120: 
                            	  2121: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2122: ;
                            	  2123: ; add d1.b to the current player's score
                            	  2124: 
                            	  2125: add_score:
00:0000AC08 44FC0004        	  2126: 	MOVE.w	#4,CCR			; set Zb, clear everything else
00:0000AC0C 142D0081        	  2127: 	MOVE.b	score_off+1(a5),d2	; get the player's score, tens
00:0000AC10 C501            	  2128: 	ABCD.b	d1,d2				; add the value to the score
00:0000AC12 6422            	  2129: 	BCC.s		exit_add_score		; if no carry just exit
                            	  2130: 
00:0000AC14 7200            	  2131: 	MOVEQ		#0,d1				; clear the add high byte
00:0000AC16 102D0080        	  2132: 	MOVE.b	score_off(a5),d0		; get the player's score, thousands
00:0000AC1A C101            	  2133: 	ABCD.b	d1,d0				; add the value to the score
00:0000AC1C 1B400080        	  2134: 	MOVE.b	d0,score_off(a5)		; save the player's score, thousands
                            	  2135: 
00:0000AC20 0200000F        	  2136: 	ANDI.b	#$0F,d0			; mask the units of thousands
00:0000AC24 6610            	  2137: 	BNE.s		exit_add_score		; if the score is not x0000 just exit
                            	  2138: 
00:0000AC26 720A            	  2139: 	MOVEQ		#extra_snd,d1		; set the bonus ship sound
00:0000AC28 6100219E        	  2140: 	BSR		play_sample			; go play the sample
                            	  2141: 
00:0000AC2C 522D0082        	  2142: 	ADDQ.b	#1,ships_off(a5)		; increment the player's ship count
00:0000AC30 6604            	  2143: 	BNE.s		exit_add_score		; exit if not wrappwd
                            	  2144: 
00:0000AC32 532D0082        	  2145: 	SUBQ.b	#1,ships_off(a5)		; decrement the player's ship count
                            	  2146: exit_add_score
00:0000AC36 1B420081        	  2147: 	MOVE.b	d2,score_off+1(a5)	; save the player's score, tens
00:0000AC3A 4E75            	  2148: 	RTS
                            	  2149: 
                            	  2150: 
                            	  2151: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2152: ;
                            	  2153: ; display the high score table if the game is over
                            	  2154: 
                            	  2155: high_scores:
00:0000AC3C 4A2B001A        	  2156: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000AC40 660000A0        	  2157: 	BNE		exit_no_scores		; if playing skip the high scores
                            	  2158: 
00:0000AC44 082B00020059    	  2159: 	BTST.b	#2,game_count(a3)		; test a bit in the game counter high byte
00:0000AC4A 66000096        	  2160: 	BNE		exit_no_scores		; if not high score time just exit
                            	  2161: 
00:0000AC4E 45EB0027        	  2162: 	LEA		hiscores(a3),a2		; point to the high score table
                            	  2163: 
00:0000AC52 4A52            	  2164: 	TST.w		(a2)				; test the highest high score
00:0000AC54 6700008C        	  2165: 	BEQ		exit_no_scores		; if the high score table is empty just exit
                            	  2166: 
00:0000AC58 7200            	  2167: 	MOVEQ		#0,d1				; message 0 - "HIGH SCORES"
00:0000AC5A 61000470        	  2168: 	BSR		add_message			; add message d1 to the display list
                            	  2169: 
00:0000AC5E 36BC1000        	  2170: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  2171: 
00:0000AC62 41EB003B        	  2172: 	LEA		hinames(a3),a0		; point to the high score names
00:0000AC66 7C00            	  2173: 	MOVEQ		#0,d6				; clear the high score index
00:0000AC68 377C00A70012    	  2174: 	MOVE.w	#$00A7,hiscore_y(a3)	; set the score's y co-ordinate
                            	  2175: high_scores_loop
00:0000AC6E 4A52            	  2176: 	TST.w		(a2)				; test the high score entry
00:0000AC70 676A            	  2177: 	BEQ.s		exit_high_scores		; if this score is zero just exit
                            	  2178: 
00:0000AC72 725F            	  2179: 	MOVEQ		#$5F,d1			; set the score's x co-ordinate
00:0000AC74 342B0012        	  2180: 	MOVE.w	hiscore_y(a3),d2		; get the score's y co-ordinate
00:0000AC78 61000508        	  2181: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  2182: 							; a draw command
                            	  2183: 
00:0000AC7C 323C4000        	  2184: 	MOVE.w	#REL4,d1			; make a $4000,$0000 command
00:0000AC80 6100051A        	  2185: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2186: 
00:0000AC84 43EB0017        	  2187: 	LEA		high_idx(a3),a1		; point to the high score index
00:0000AC88 7E01            	  2188: 	MOVEQ		#$01,d7			; set the number byte count and the increment
00:0000AC8A 44FC0004        	  2189: 	MOVE.w	#4,CCR			; set Zb, clear everything else
00:0000AC8E CD07            	  2190: 	ABCD.b	d7,d6				; add to the high score index
00:0000AC90 1286            	  2191: 	MOVE.b	d6,(a1)			; save the high score decimal index
00:0000AC92 17470016        	  2192: 	MOVE.b	d7,suppress_0(a3)		; set the flag to suppress leading zeros
00:0000AC96 61000376        	  2193: 	BSR		output_number		; output a number as a leading zero suppressed
                            	  2194: 							; string
                            	  2195: 
                            	  2196: 							; set the point after the high score number
00:0000AC9A 323C4000        	  2197: 	MOVE.w	#REL4,d1			; make a $4000,$xx00 command
00:0000AC9E 3401            	  2198: 	MOVE.w	d1,d2				; make a $4000,$4000 command, point after entry
                            	  2199: 							; number
00:0000ACA0 610004FC        	  2200: 	BSR		add_pair			; add (d1)00,(d2)00 to the vector list
                            	  2201: 
00:0000ACA4 7200            	  2202: 	MOVEQ		#0,d1				; set [SPACE] character
00:0000ACA6 6100FA08        	  2203: 	BSR		add_character		; add character (d1) to the vector list
                            	  2204: 
00:0000ACAA 224A            	  2205: 	MOVEA.l	a2,a1				; point to the high score entry
00:0000ACAC 7E02            	  2206: 	MOVEQ		#$02,d7			; set the number byte count
00:0000ACAE 177C00FF0016    	  2207: 	MOVE.b	#-1,suppress_0(a3)	; set the flag to suppress leading zeros
00:0000ACB4 61000358        	  2208: 	BSR		output_number		; output a number as a leading zero suppressed
                            	  2209: 							; string
                            	  2210: 
00:0000ACB8 7200            	  2211: 	MOVEQ		#0,d1				; add the final "0"
00:0000ACBA 61000496        	  2212: 	BSR		add_hex_chr			; write a hex character to the vector list
                            	  2213: 
00:0000ACBE 7200            	  2214: 	MOVEQ		#0,d1				; set [SPACE] character
00:0000ACC0 6100F9EE        	  2215: 	BSR		add_character		; add character (d1) to the vector list
                            	  2216: 
00:0000ACC4 6100F9D0        	  2217: 	BSR		write_initial		; write a high score initial to the vector list
00:0000ACC8 6100F9CC        	  2218: 	BSR		write_initial		; write a high score initial to the vector list
00:0000ACCC 6100F9C8        	  2219: 	BSR		write_initial		; write a high score initial to the vector list
                            	  2220: 
00:0000ACD0 516B0012        	  2221: 	SUBQ.w	#8,hiscore_y(a3)		; subtract 8 from the score's y co-ordinate
00:0000ACD4 544A            	  2222: 	ADDQ.w	#2,a2				; increment the high score pointer
                            	  2223: 
00:0000ACD6 0C060010        	  2224: 	CMPI.b	#$10,d6			; compare the high score index with 10
00:0000ACDA 6592            	  2225: 	BCS.s		high_scores_loop		; loop if more to do
                            	  2226: 
                            	  2227: exit_high_scores
00:0000ACDC 003C0001        	  2228: 	ORI.b		#$01,CCR			; set the carry, flag scores displayed
00:0000ACE0 4E75            	  2229: 	RTS
                            	  2230: 
                            	  2231: exit_no_scores
00:0000ACE2 023C00FE        	  2232: 	ANDI.b	#$FE,CCR			; clear the carry, flag scores not displayed
00:0000ACE6 4E75            	  2233: 	RTS
                            	  2234: 
                            	  2235: 
                            	  2236: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2237: ;
                            	  2238: ; find a free rock item, the index is returned in d5
                            	  2239: 
                            	  2240: find_rock:
00:0000ACE8 7A1A            	  2241: 	MOVEQ		#p_flag_off-flags_off-1,d5
                            	  2242: 							; set the count/index to the last rock flag
                            	  2243: 
                            	  2244: ; find a free rock item from d5
                            	  2245: 
                            	  2246: find_next_rock
00:0000ACEA 4A35500C        	  2247: 	TST.b		flags_off(a5,d5.w)	; test the rock flag
00:0000ACEE 6704            	  2248: 	BEQ.s		exit_find_rock		; if free return this index
                            	  2249: 
00:0000ACF0 51CDFFF8        	  2250: 	DBF		d5,find_next_rock		; else loop if more to do
                            	  2251: 
                            	  2252: exit_find_rock
00:0000ACF4 4E75            	  2253: 	RTS
                            	  2254: 
                            	  2255: 
                            	  2256: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2257: ;
                            	  2258: ; wrecked ship piece x,y velocities
                            	  2259: 
                            	  2260: ship_wrk_x
00:0000ACF6 FFD8            	  2261: 	dc.w	$FFD8					; x
00:0000ACF8 0032            	  2262: 	dc.w	$0032					; x
00:0000ACFA 0000            	  2263: 	dc.w	$0000					; x
00:0000ACFC 003C            	  2264: 	dc.w	$003C					; x
00:0000ACFE 000A            	  2265: 	dc.w	$000A					; x
00:0000AD00 FFD8            	  2266: 	dc.w	$FFD8					; x
                            	  2267: 
                            	  2268: ship_wrk_y
00:0000AD02 001E            	  2269: 	dc.w	$001E					; y
00:0000AD04 FFEC            	  2270: 	dc.w	$FFEC					; y
00:0000AD06 FFC4            	  2271: 	dc.w	$FFC4					; y
00:0000AD08 0014            	  2272: 	dc.w	$0014					; y
00:0000AD0A 0046            	  2273: 	dc.w	$0046					; y
00:0000AD0C FFD8            	  2274: 	dc.w	$FFD8					; y
                            	  2275: 
                            	  2276: 
                            	  2277: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2278: ;
                            	  2279: ; add the player explosion to the vector list
                            	  2280: 
                            	  2281: add_play_explode:
00:0000AD0E 48E70300        	  2282: 	MOVEM.l	d6-d7,-(sp)			; save the registers
00:0000AD12 7200            	  2283: 	MOVEQ		#0,d1				; clear the longword
00:0000AD14 122D0027        	  2284: 	MOVE.b	p_flag_off(a5),d1		; get the player flag
00:0000AD18 0C0100A2        	  2285: 	CMPI.b	#$A2,d1			; compare the player flag with $A2
00:0000AD1C 641A            	  2286: 	BCC.s		no_reset_xy			; if >= $A2 skip resetting the explosion
                            	  2287: 							; start point
                            	  2288: 
                            	  2289: 							; else reset the explosion start point
00:0000AD1E 7E0A            	  2290: 	MOVEQ		#$0A,d7			; set the index to the last piece x,y pair
                            	  2291: reset_xy_loop
00:0000AD20 303B70D4        	  2292: 	MOVE.w	ship_wrk_x(pc,d7.w),d0	; get the x velocity word
00:0000AD24 E948            	  2293: 	LSL.w		#4,d0				; ; 16
00:0000AD26 3780705B        	  2294: 	MOVE.w	d0,expl_x_pos(a3,d7.w)	; save the x position word
                            	  2295: 
00:0000AD2A 303B70D6        	  2296: 	MOVE.w	ship_wrk_y(pc,d7.w),d0	; get the y velocity word
00:0000AD2E E948            	  2297: 	LSL.w		#4,d0				; ; 16
00:0000AD30 37807067        	  2298: 	MOVE.w	d0,expl_y_pos(a3,d7.w)	; save the y position word
                            	  2299: 
00:0000AD34 5547            	  2300: 	SUBQ.w	#2,d7				; decrement the index
00:0000AD36 6AE8            	  2301: 	BPL.s		reset_xy_loop		; loop if more to do
                            	  2302: 
                            	  2303: ; now use the player flag as the start index to the ship pieces. this means there will
                            	  2304: ; be less pieces as the explosion progresses
                            	  2305: 
                            	  2306: no_reset_xy
00:0000AD38 7070            	  2307: 	MOVEQ		#$70,d0			; set the mask
00:0000AD3A B101            	  2308: 	EOR.b		d0,d1				; toggle the player flag
00:0000AD3C C200            	  2309: 	AND.b		d0,d1				; mask the player flag
00:0000AD3E E609            	  2310: 	LSR.b		#3,d1				; / 16 ; 2 gives the piece start index
00:0000AD40 3E01            	  2311: 	MOVE.w	d1,d7				; copy the index
                            	  2312: 
                            	  2313: 							; the piece draw loop	
                            	  2314: piece_draw_loop
00:0000AD42 303B70B2        	  2315: 	MOVE.w	ship_wrk_x(pc,d7.w),d0	; get the x velocity word
00:0000AD46 D073705B        	  2316: 	ADD.w		expl_x_pos(a3,d7.w),d0	; add the x position word
00:0000AD4A 3780705B        	  2317: 	MOVE.w	d0,expl_x_pos(a3,d7.w)	; save the x position word
                            	  2318: 
00:0000AD4E 323B70B2        	  2319: 	MOVE.w	ship_wrk_y(pc,d7.w),d1	; get the y velocity word
00:0000AD52 D2737067        	  2320: 	ADD.w		expl_y_pos(a3,d7.w),d1	; add the y position word
00:0000AD56 37817067        	  2321: 	MOVE.w	d1,expl_y_pos(a3,d7.w)	; save the y position word
                            	  2322: 
00:0000AD5A 244C            	  2323: 	MOVEA.l	a4,a2				; copy the vector pointer
                            	  2324: 
00:0000AD5C 7400            	  2325: 	MOVEQ		#0,d2				; clear the x sign bit
00:0000AD5E 4A40            	  2326: 	TST.w		d0				; test the x position word
00:0000AD60 6A06            	  2327: 	BPL.s		vec_x_pos			; if positive skip the negate
                            	  2328: 
00:0000AD62 4440            	  2329: 	NEG.w		d0				; else negate the x position, make it positive
00:0000AD64 343C0400        	  2330: 	MOVE.w	#$0400,d2			; and set the x sign bit
                            	  2331: vec_x_pos
                            	  2332: 
00:0000AD68 7600            	  2333: 	MOVEQ		#0,d3				; clear the y sign bit
00:0000AD6A 4A41            	  2334: 	TST.w		d1				; test the y position word
00:0000AD6C 6A06            	  2335: 	BPL.s		vec_y_pos			; if positive skip the negate
                            	  2336: 
00:0000AD6E 4441            	  2337: 	NEG.w		d1				; else negate the y position, make it positive
00:0000AD70 363C0400        	  2338: 	MOVE.w	#$0400,d3			; and set the y sign bit
                            	  2339: vec_y_pos
00:0000AD74 E848            	  2340: 	LSR.w		#4,d0				; shift the x position
00:0000AD76 E849            	  2341: 	LSR.w		#4,d1				; shift the y position
                            	  2342: 
00:0000AD78 8042            	  2343: 	OR.w		d2,d0				; OR in the x sign bit
00:0000AD7A 00416000        	  2344: 	ORI.w		#$6000,d1			; fix the scale
00:0000AD7E 8243            	  2345: 	OR.w		d3,d1				; OR in the y sign bit
                            	  2346: 
00:0000AD80 38C1            	  2347: 	MOVE.w	d1,(a4)+			; add y position to the vector list
00:0000AD82 38C0            	  2348: 	MOVE.w	d0,(a4)+			; add x position to the vector list
                            	  2349: 
                            	  2350: 							; add the piece vector to the list
                            	  2351: 
00:0000AD84 303B7022        	  2352: 	MOVE.w	ship_parts(pc,d7.w),d0	; get wrecked ship piece vector word
00:0000AD88 38C0            	  2353: 	MOVE.w	d0,(a4)+			; add the wrecked ship piece vector word to the
                            	  2354: 							; vector list
                            	  2355: 
00:0000AD8A 0A400404        	  2356: 	EORI.w	#$0404,d0			; toggle the sign bits
00:0000AD8E 0240FF0F        	  2357: 	ANDI.w	#$FF0F,d0			; clear the intensity bits
00:0000AD92 38C0            	  2358: 	MOVE.w	d0,(a4)+			; add the inverse wrecked ship piece vector word
                            	  2359: 							; to the vector list
                            	  2360: 
                            	  2361: 							; now copy an inverse relative long vector to
                            	  2362: 							; the list
00:0000AD94 2012            	  2363: 	MOVE.l	(a2),d0			; get the vector to the piece
00:0000AD96 0A8004000400    	  2364: 	EORI.l	#$04000400,d0		; toggle the sign bits
00:0000AD9C 28C0            	  2365: 	MOVE.l	d0,(a4)+			; save the inverse vector to the list
                            	  2366: 
00:0000AD9E 5547            	  2367: 	SUBQ.w	#2,d7				; decrement the index
00:0000ADA0 6AA0            	  2368: 	BPL		piece_draw_loop		; loop if more to do
                            	  2369: 
00:0000ADA2 4CDF00C0        	  2370: 	MOVEM.l	(sp)+,d6-d7			; restore the registers
00:0000ADA6 4E75            	  2371: 	rts
                            	  2372: 
                            	  2373: 
                            	  2374: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2375: ;
                            	  2376: ; pieces of wrecked ship
                            	  2377: 
                            	  2378: ship_parts
00:0000ADA8 FFC6            	  2379: 	dc.w	$FFC6				; x = -2, Y = -3
00:0000ADAA FEC1            	  2380: 	dc.w	$FEC1				; x =  1, Y = -2
00:0000ADAC F1C3            	  2381: 	dc.w	$F1C3				; x =  3, Y =  1
00:0000ADAE F1CD            	  2382: 	dc.w	$F1CD				; x = -1, Y =  1
00:0000ADB0 F1C7            	  2383: 	dc.w	$F1C7				; x = -3, Y =  1
00:0000ADB2 FDC1            	  2384: 	dc.w	$FDC1				; x =  1, Y = -1
                            	  2385: 
                            	  2386: 
                            	  2387: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2388: ;
                            	  2389: ; add the player ship to the vector list
                            	  2390: 
                            	  2391: add_player:
00:0000ADB4 7600            	  2392: 	MOVEQ		#0,d3				; clear the x_sign
00:0000ADB6 7400            	  2393: 	MOVEQ		#0,d2				; clear the y_sign
00:0000ADB8 7800            	  2394: 	MOVEQ		#0,d4				; yx_sign
                            	  2395: 
00:0000ADBA 122B001E        	  2396: 	MOVE.b	p_orient(a3),d1		; get the player orientation
00:0000ADBE 6A0A            	  2397: 	BPL.s		no_pos_reflect		; if positive skip reflection
                            	  2398: 
00:0000ADC0 343C0400        	  2399: 	MOVE.w	#$0400,d2			; set the y_sign
00:0000ADC4 3802            	  2400: 	MOVE.w	d2,d4				; set the yx_sign
00:0000ADC6 4401            	  2401: 	NEG.b		d1				; make ABS orientation
00:0000ADC8 6B06            	  2402: 	BMI.s		third_quad			; if still negative go do the third quad
                            	  2403: 
                            	  2404: no_pos_reflect
00:0000ADCA 08010006        	  2405: 	BTST.l	#6,d1				; test the quadrant
00:0000ADCE 670E            	  2406: 	BEQ.s		first_quad			; skip reflect if in first quadrant
                            	  2407: 
                            	  2408: third_quad
00:0000ADD0 363C0400        	  2409: 	MOVE.w	#$0400,d3			; set the x_sign
00:0000ADD4 183C0004        	  2410: 	MOVE.b	#$04,d4			; set the yx_sign
                            	  2411: 
00:0000ADD8 4401            	  2412: 	NEG.b		d1				; negate the byte
00:0000ADDA D23C0080        	  2413: 	ADD.b		#$80,d1			; reflect the quadrant
                            	  2414: first_quad
00:0000ADDE E209            	  2415: 	LSR.b		#1,d1				; do quadrant value / 2
00:0000ADE0 C23C003E        	  2416: 	AND.b		#$3E,d1			; mask to word boundary, value is $00 to $20
                            	  2417: 
00:0000ADE4 43FA1768        	  2418: 	LEA		play_tab(pc),a1		; point to the player ship table
00:0000ADE8 32311000        	  2419: 	MOVE.w	(a1,d1.w),d1		; get the offset to the player ship
00:0000ADEC 43F11000        	  2420: 	LEA		(a1,d1.w),a1		; get the pointer to the player ship
00:0000ADF0 6118            	  2421: 	BSR.s		copy_vectors		; copy the vectors from (a1) to the vector list
                            	  2422: 
                            	  2423: ;	MOVEQ		#'L',d1			; set for the thrust button
                            	  2424: ;	MOVEQ		#19,d0			; check for keypress
                            	  2425: ;	TRAP		#15
00:0000ADF2 7005            	  2426: 	moveq #5,d0
00:0000ADF4 4E4F            	  2427: 	trap #15
00:0000ADF6 0C01004C        	  2428: 	cmpi.b #'L',d1
00:0000ADFA 6608            	  2429: 	bne.s no_thrust
                            	  2430: 
                            	  2431: ;	TST.b		d1				; test the result
                            	  2432: ;	BEQ.s		no_thrust			; if not pressed then skip the thrust copy
                            	  2433: 
00:0000ADFC 7003            	  2434: 	MOVEQ		#3,d0				; set the game counter mask
00:0000ADFE C06B0059        	  2435: 	AND.w		game_count(a3),d0		; mask the game counter
00:0000AE02 6606            	  2436: 	BNE.s		copy_vectors		; 3/4 of the time go copy the vectors from (a1)
                            	  2437: 							; to the vector list and return
                            	  2438: no_thrust
00:0000AE04 4E75            	  2439: 	RTS
                            	  2440: 
                            	  2441: 
                            	  2442: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2443: ;
                            	  2444: ; copy the vectors from (a1) to the vector list
                            	  2445: 
                            	  2446: copy_short:
00:0000AE06 B940            	  2447: 	EOR.w		d4,d0				; possibly toggle the x and y signs
00:0000AE08 38C0            	  2448: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
                            	  2449: 
                            	  2450: copy_vectors
00:0000AE0A 3019            	  2451: 	MOVE.w	(a1)+,d0			; get a vector word
00:0000AE0C B07CF000        	  2452: 	CMP.w		#SHRT,d0			; compare with short form vector
00:0000AE10 64F4            	  2453: 	BCC.s		copy_short			; if short vector go copy it
                            	  2454: 
00:0000AE12 B07CA000        	  2455: 	CMP.w		#DRAW,d0			; compare with the DRAW command
00:0000AE16 640C            	  2456: 	BCC.s		exit_copy_vectors		; if DRAW or greater exit the vector copy
                            	  2457: 
                            	  2458: ; else it is a long vector
                            	  2459: 
00:0000AE18 B540            	  2460: 	EOR.w		d2,d0				; possibly toggle the y sign
00:0000AE1A 38C0            	  2461: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
00:0000AE1C 3019            	  2462: 	MOVE.w	(a1)+,d0			; get the second vector word
00:0000AE1E B740            	  2463: 	EOR.w		d3,d0				; possibly toggle the x sign
00:0000AE20 38C0            	  2464: 	MOVE.w	d0,(a4)+			; copy the word to the vector list
00:0000AE22 60E6            	  2465: 	BRA.s		copy_vectors		; go do the next word
                            	  2466: 
                            	  2467: ; it's a short form vector
                            	  2468: 
                            	  2469: exit_copy_vectors
00:0000AE24 4E75            	  2470: 	RTS
                            	  2471: 
                            	  2472: 
                            	  2473: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2474: ;
                            	  2475: ; do the game sounds
                            	  2476: 
                            	  2477: fx_sounds:
00:0000AE26 7200            	  2478: 	MOVEQ		#0,d1				; clear the longword
00:0000AE28 122D0028        	  2479: 	MOVE.b	s_flag_off(a5),d1		; get the saucer flag
00:0000AE2C 6F06            	  2480: 	BLE.s		no_saucer_sound		; if no saucer or the saucer is exploding skip
                            	  2481: 							; the saucer sound
                            	  2482: 
00:0000AE2E 5401            	  2483: 	ADDQ.b	#smsau_snd-1,d1		; add the small saucer sound to the size
00:0000AE30 61001F96        	  2484: 	BSR		play_sample			; go play the sample
                            	  2485: no_saucer_sound
00:0000AE34 4A2D0076        	  2486: 	TST.b		rock_count(a5)		; test the rock count
00:0000AE38 672C            	  2487: 	BEQ.s		no_thump_sound		; if no rocks skip the thump sound
                            	  2488: 
00:0000AE3A 4A2D0027        	  2489: 	TST.b		p_flag_off(a5)		; test the player flag
00:0000AE3E 6F26            	  2490: 	BLE.s		no_thump_sound		; if no player or the player is exploding skip
                            	  2491: 							; the thump sound
                            	  2492: 
00:0000AE40 4A2B0026        	  2493: 	TST.b		hyper(a3)			; test the hyperspace flag
00:0000AE44 6620            	  2494: 	BNE.s		no_thump_sound		; if in hyperspace skip the thump sound
                            	  2495: 
00:0000AE46 532B0024        	  2496: 	SUBQ.b	#1,thump_time(a3)		; decrement the thump sound change timer
00:0000AE4A 661A            	  2497: 	BNE.s		no_thump_sound		; skip changing the sound if not timed out
                            	  2498: 
00:0000AE4C 7004            	  2499: 	MOVEQ		#4,d0				; add the sound on time
00:0000AE4E D02D007C        	  2500: 	ADD.b		thmp_sndi(a5),d0		; add the thump sound change timer initial
00:0000AE52 17400024        	  2501: 	MOVE.b	d0,thump_time(a3)		; save the thump sound change timer
                            	  2502: 
00:0000AE56 7001            	  2503: 	MOVEQ		#1,d0				; set the bitmap change mask
00:0000AE58 122B0023        	  2504: 	MOVE.b	thump_snd(a3),d1		; get the thump sound value
00:0000AE5C B101            	  2505: 	EOR.b		d0,d1				; change the thump sound value
00:0000AE5E 17410023        	  2506: 	MOVE.b	d1,thump_snd(a3)		; save the thump sound value
00:0000AE62 60001F64        	  2507: 	BRA		play_sample			; go play the sample and return
                            	  2508: 
                            	  2509: no_thump_sound
00:0000AE66 4E75            	  2510: 	RTS
                            	  2511: 
                            	  2512: 
                            	  2513: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2514: ;
                            	  2515: ; handle something hitting a rock
                            	  2516: 
                            	  2517: ; d6 = player/saucer/shot object index
                            	  2518: ; d7 = object index
                            	  2519: 
                            	  2520: hit_a_rock:
00:0000AE68 1B7C00500079    	  2521: 	MOVE.b	#$50,r_hit_tim(a5)	; set the rock hit timer
00:0000AE6E 1035700C        	  2522: 	MOVE.b	flags_off(a5,d7.w),d0	; get the rock flag
00:0000AE72 7278            	  2523: 	MOVEQ		#$78,d1			; set the mask for the rock type
00:0000AE74 C200            	  2524: 	AND.b		d0,d1				; mask the rock type
                            	  2525: 
00:0000AE76 02400007        	  2526: 	ANDI.w	#$07,d0			; mask the rock size
00:0000AE7A E248            	  2527: 	LSR.w		#1,d0				; / 2
00:0000AE7C 3400            	  2528: 	MOVE.w	d0,d2				; copy the size
00:0000AE7E 6702            	  2529: 	BEQ.s		clear_rock			; if the size is zero then the rock is destroyed
                            	  2530: 							; so go clear the rock flag
                            	  2531: 
00:0000AE80 8001            	  2532: 	OR.b		d1,d0				; else OR back the rock type
                            	  2533: clear_rock
00:0000AE82 1B80700C        	  2534: 	MOVE.b	d0,flags_off(a5,d7.w)	; save the rock flag
                            	  2535: 
00:0000AE86 4A2B001A        	  2536: 	TST.b		num_players(a3)		; test the number of players in the game
00:0000AE8A 6712            	  2537: 	BEQ.s		skip_add			; if no players skip the score add
                            	  2538: 
00:0000AE8C 4A46            	  2539: 	TST.w		d6				; test the player/saucer/shot index
00:0000AE8E 6706            	  2540: 	BEQ.s		add_to_score		; if the player hit the rock go add it to the
                            	  2541: 							; player's score
                            	  2542: 
00:0000AE90 0C460004        	  2543: 	CMPI.w	#p_fire_off-p_flag_off,d6
                            	  2544: 							; compare the player/saucer/shot index with the
                            	  2545: 							; first of the player's fire
00:0000AE94 6508            	  2546: 	BCS.s		skip_add			; if < the player's fire skip adding to the
                            	  2547: 							; player's score
                            	  2548: 
                            	  2549: add_to_score
00:0000AE96 123B2042        	  2550: 	MOVE.b	rock_score(pc,d2.w),d1	; get the score per rock size
00:0000AE9A 6100FD6C        	  2551: 	BSR		add_score			; add d1.b to the current player's score
                            	  2552: skip_add
00:0000AE9E 4A35700C        	  2553: 	TST.b		flags_off(a5,d7.w)	; test the rock flag
00:0000AEA2 6734            	  2554: 	BEQ.s		exit_hit_a_rock		; if the rock was destroyed just exit
                            	  2555: 
                            	  2556: ; else break the rock into none, one, or two smaller rocks
                            	  2557: 
00:0000AEA4 6100FE42        	  2558: 	BSR		find_rock			; find a free rock, the index is returned in d5
00:0000AEA8 662E            	  2559: 	BNE.s		exit_hit_a_rock		; if there are no free rocks just exit
                            	  2560: 
00:0000AEAA 522D0076        	  2561: 	ADDQ.b	#1,rock_count(a5)		; else increment the rock count
                            	  2562: 
00:0000AEAE 6100FB76        	  2563: 	BSR		copy_rock			; copy the item parameters from the old rock,
                            	  2564: 							; (d7), to the new rock, (d5)
                            	  2565: 
00:0000AEB2 701F            	  2566: 	MOVEQ		#$1F,d0			; set the mask for the low 5 bits
00:0000AEB4 C035502F        	  2567: 	AND.b		x_vel_off(a5,d5.w),d0	; get the new rock x velocity byte
00:0000AEB8 D000            	  2568: 	ADD.b		d0,d0				; ; 2
00:0000AEBA B1353081        	  2569: 	EOR.b		d0,x_pos_off+1(a5,d3.w)	; purturb the new rock x position low byte
                            	  2570: 
00:0000AEBE 6100FE2A        	  2571: 	BSR		find_next_rock		; find a free rock from d5, the index is
                            	  2572: 							; returned in d5
00:0000AEC2 6614            	  2573: 	BNE.s		exit_hit_a_rock		; if there are no free rocks just exit
                            	  2574: 
00:0000AEC4 522D0076        	  2575: 	ADDQ.b	#1,rock_count(a5)		; else increment the rock count
                            	  2576: 
00:0000AEC8 6100FB60        	  2577: 	BSR		copy_rock_2			; copy the item parameters from the old rock,
                            	  2578: 							; (d7), to the new rock, (d5)
                            	  2579: 
00:0000AECC 701F            	  2580: 	MOVEQ		#$1F,d0			; set the mask for the low 5 bits
00:0000AECE C0355052        	  2581: 	AND.b		y_vel_off(a5,d5.w),d0	; get the new rock y velocity byte
00:0000AED2 D000            	  2582: 	ADD.b		d0,d0				; ; 2
00:0000AED4 B13530C7        	  2583: 	EOR.b		d0,y_pos_off+1(a5,d3.w)	; purturb the new rock y position low byte
                            	  2584: exit_hit_a_rock
00:0000AED8 4E75            	  2585: 	RTS
                            	  2586: 
                            	  2587: 
                            	  2588: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2589: ;
                            	  2590: ; score per rock size
                            	  2591: 
                            	  2592: rock_score
00:0000AEDA 10              	  2593: 	dc.b	$10					; 100 points, small rock
00:0000AEDB 05              	  2594: 	dc.b	$05					;  50 points, medium rock
00:0000AEDC 02              	  2595: 	dc.b	$02					;  20 points, large rock
00:0000AEDD 00              	  2596: 	dc.b	$00					;   0 points, null pad byte
                            	  2597: 
                            	  2598: 
                            	  2599: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2600: ;
                            	  2601: ; do the high score checks
                            	  2602: 
                            	  2603: check_hiscores:
00:0000AEDE 102B001A        	  2604: 	MOVE.b	num_players(a3),d0	; get the number of players in the game
00:0000AEE2 6A5A            	  2605: 	BPL.s		exit_check_hiscores	; if still players just exit
                            	  2606: 
00:0000AEE4 1B400083        	  2607: 	MOVE.b	d0,high_off(a5)		; clear the player 2 highscore flag
00:0000AEE8 1D400083        	  2608: 	MOVE.b	d0,high_off(a6)		; clear the player 1 highscore flag
                            	  2609: 
00:0000AEEC 177C00010018    	  2610: 	MOVE.b	#$01,player_idx(a3)	; set the player index for player two
00:0000AEF2 4BEB01F7        	  2611: 	LEA		player_2(a3),a5		; set the pointer to player two's variables
00:0000AEF6 4DEB00F3        	  2612: 	LEA		player_1(a3),a6		; set the pointer to player one's variables
                            	  2613: check_hi_player
00:0000AEFA 7400            	  2614: 	MOVEQ		#0,d2				; clear the high score index
00:0000AEFC 302D0080        	  2615: 	MOVE.w	score_off(a5),d0		; get the player score
00:0000AF00 670E            	  2616: 	BEQ.s		check_hi_next		; if zero go try the other player
                            	  2617: 
                            	  2618: check_hi_loop
00:0000AF02 B0732027        	  2619: 	CMP.w		hiscores(a3,d2.w),d0	; compare the high score with the player score
00:0000AF06 6238            	  2620: 	BHI.s		insert_hiscore		; if the player score was more go insert the
                            	  2621: 							; score
                            	  2622: 
00:0000AF08 5442            	  2623: 	ADDQ.w	#2,d2				; increment the high score index
00:0000AF0A 0C420014        	  2624: 	CMPI.w	#20,d2			; compare with max + 2
00:0000AF0E 65F2            	  2625: 	BCS.s		check_hi_loop		; loop if more high scores to do
                            	  2626: 
                            	  2627: 							; else change to the other player
                            	  2628: check_hi_next
00:0000AF10 CB4E            	  2629: 	EXG		a5,a6				; swap the players
00:0000AF12 0A2B00010018    	  2630: 	EORI.b	#1,player_idx(a3)		; toggle the player index
00:0000AF18 67E0            	  2631: 	BEQ.s		check_hi_player		; loop if more players to do
                            	  2632: 
00:0000AF1A 102D0083        	  2633: 	MOVE.b	high_off(a5),d0		; get player 2's highscore flag
00:0000AF1E 6B14            	  2634: 	BMI.s		exit_hi_chk			; if not entering a high score go clear the
                            	  2635: 							; player count and exit
                            	  2636: 
00:0000AF20 B02E0083        	  2637: 	CMP.b		high_off(a6),d0		; compare with the player 1 highscore flag
00:0000AF24 650E            	  2638: 	BCS.s		exit_hi_chk			; if player 2's position < player 1's position
                            	  2639: 							; just exit
                            	  2640: 
00:0000AF26 5600            	  2641: 	ADDQ.b	#3,d0				; else increment player 2's position to the
                            	  2642: 							; next entry
00:0000AF28 0C00001E        	  2643: 	CMPI.b	#$1E,d0			; compare the result with max + 1
00:0000AF2C 6502            	  2644: 	BCS.s		save_hi_index		; if less go save the new player 1 index
                            	  2645: 
00:0000AF2E 70FF            	  2646: 	MOVEQ		#-1,d0			; else reset player 2's highscore flag
                            	  2647: save_hi_index
00:0000AF30 1B400083        	  2648: 	MOVE.b	d0,high_off(a5)		; save player 2's highscore flag
                            	  2649: exit_hi_chk
00:0000AF34 7000            	  2650: 	MOVEQ		#0,d0				; clear the longword
00:0000AF36 1740001A        	  2651: 	MOVE.b	d0,num_players(a3)	; clear the number of players in the game
00:0000AF3A 17400020        	  2652: 	MOVE.b	d0,hi_char(a3)		; clear the input character index
                            	  2653: exit_check_hiscores
00:0000AF3E 4E75            	  2654: 	RTS
                            	  2655: 
                            	  2656: ; insert a new high score into the high score table. the index is in d2.w
                            	  2657: 
                            	  2658: insert_hiscore:
00:0000AF40 7612            	  2659: 	MOVEQ		#18,d3			; index to the last high score
00:0000AF42 781B            	  2660: 	MOVEQ		#27,d4			; index to the last high score initials
                            	  2661: insert_loop
00:0000AF44 B443            	  2662: 	CMP.w		d3,d2				; compare the current high score with the insert
                            	  2663: 							; point
00:0000AF46 671E            	  2664: 	BEQ.s		exit_insert_loop		; if there exit the loop
                            	  2665: 
00:0000AF48 37B330253027    	  2666: 	MOVE.w	hiscores-2(a3,d3.w),hiscores(a3,d3.w)
                            	  2667: 							; copy the (n-1)th high score to this one
00:0000AF4E 17B34038403B    	  2668: 	MOVE.b	hinames-3(a3,d4.w),hinames(a3,d4.w)
                            	  2669: 							; copy the (n-1)th high score name first byte
00:0000AF54 17B34039403C    	  2670: 	MOVE.b	hinames-2(a3,d4.w),hinames+1(a3,d4.w)
                            	  2671: 							; copy the (n-1)th high score name second byte
00:0000AF5A 17B3403A403D    	  2672: 	MOVE.b	hinames-1(a3,d4.w),hinames+2(a3,d4.w)
                            	  2673: 							; copy the (n-1)th high score name third byte
                            	  2674: 
00:0000AF60 5543            	  2675: 	SUBQ.w	#2,d3				; decrement the index to the previous score
00:0000AF62 5744            	  2676: 	SUBQ.w	#3,d4				; decrement the index to the previous initials
00:0000AF64 66DE            	  2677: 	BNE.s		insert_loop			; loop for the next high score
                            	  2678: 
                            	  2679: exit_insert_loop
00:0000AF66 1B440083        	  2680: 	MOVE.b	d4,high_off(a5)		; save the player highscore flag
00:0000AF6A 37803027        	  2681: 	MOVE.w	d0,hiscores(a3,d3.w)	; copy the player score to this one
00:0000AF6E 17BC000B403B    	  2682: 	MOVE.b	#$0B,hinames(a3,d4.w)	; make the high score name first byte "A"
00:0000AF74 4233403C        	  2683: 	CLR.b		hinames+1(a3,d4.w)	; make the high score name second byte " "
00:0000AF78 4233403D        	  2684: 	CLR.b		hinames+2(a3,d4.w)	; make the high score name third byte " "
                            	  2685: 
00:0000AF7C 177C00F00059    	  2686: 	MOVE.b	#$F0,game_count(a3)	; set the game counter high byte, high score
                            	  2687: 							; entry timeout
                            	  2688: 
00:0000AF82 608C            	  2689: 	BRA.s		check_hi_next		; loop for the other player
                            	  2690: 
                            	  2691: 
                            	  2692: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2693: ;
                            	  2694: ; calculate the angle given the delta x,y. the delta is calculated by subtracting the
                            	  2695: ; source x,y co-ordinates from the target x,y co-ordinates. the angle is returned in
                            	  2696: ; d0.b with $00 being 3 o'clock
                            	  2697: ;
                            	  2698: ; d1.w = delta x = target x - source x
                            	  2699: ; d2.w = delta y = target y - source y
                            	  2700: 
                            	  2701: get_atn:
00:0000AF84 4A42            	  2702: 	TST.w		d2				; test the delta y
00:0000AF86 6A08            	  2703: 	BPL.s		atn_semi			; if +ve skip the delta y negate
                            	  2704: 
00:0000AF88 4442            	  2705: 	NEG.w		d2				; else make delta y positive
00:0000AF8A 6104            	  2706: 	BSR.s		atn_semi			; get arctan(y/x) for the semicircle
00:0000AF8C 4400            	  2707: 	NEG.b		d0				; negate the result
00:0000AF8E 4E75            	  2708: 	RTS
                            	  2709: 
                            	  2710: ; get arctan(y/x) for the semicircle
                            	  2711: 
                            	  2712: atn_semi:
00:0000AF90 4A41            	  2713: 	TST.w		d1				; test the delta x
00:0000AF92 6A0C            	  2714: 	BPL.s		atn_quad			; if +ve skip the delta x negate
                            	  2715: 
00:0000AF94 4441            	  2716: 	NEG.w		d1				; else make delta x positive
00:0000AF96 6108            	  2717: 	BSR.s		atn_quad			; get arctan(y/x) or arctan(x/y)
00:0000AF98 0A000080        	  2718: 	EORI.b	#$80,d0			; reflect 180 degrees
00:0000AF9C 4400            	  2719: 	NEG.b		d0				; negate the result
00:0000AF9E 4E75            	  2720: 	RTS
                            	  2721: 
                            	  2722: 
                            	  2723: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2724: ;
                            	  2725: ; get arctan(y/x) or arctan(x/y) for one quadrant.
                            	  2726: 
                            	  2727: atn_quad:
00:0000AFA0 B441            	  2728: 	CMP.w		d1,d2				; compare y with x
00:0000AFA2 650C            	  2729: 	BCS.s		atn_eight			; if x > y get arctan(y/x) from the table
                            	  2730: 							; and return
                            	  2731: 
00:0000AFA4 C342            	  2732: 	EXG		d1,d2				; else swap x,y
00:0000AFA6 6108            	  2733: 	BSR.s		atn_eight			; get arctan(x/y) from the table
00:0000AFA8 04000040        	  2734: 	SUBI.b	#$40,d0			; reflect the quadrant
00:0000AFAC 4400            	  2735: 	NEG.b		d0				; and negate the result
00:0000AFAE 4E75            	  2736: 	RTS
                            	  2737: 
                            	  2738: 
                            	  2739: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2740: ;
                            	  2741: ; divide d2.w by d1.w, the six bit result in d0.w is then used to index the ATN()
                            	  2742: ; table to get the result for this octant. (is that the right word for one eighth
                            	  2743: ; of a circle?)
                            	  2744: 
                            	  2745: atn_eight:
00:0000AFB0 7000            	  2746: 	MOVEQ		#0,d0				; clear the result
00:0000AFB2 7E05            	  2747: 	MOVEQ		#6-1,d7			; set the bit count
                            	  2748: loop_atn
00:0000AFB4 D442            	  2749: 	ADD.w		d2,d2				; shift the dividend
00:0000AFB6 3602            	  2750: 	MOVE.w	d2,d3				; copy the dividend
00:0000AFB8 9641            	  2751: 	SUB.w		d1,d3				; compare it with the divisor
00:0000AFBA 6502            	  2752: 	BCS.s		skip_sub			; if the dividend < the divisor skip the
                            	  2753: 							; subtract
                            	  2754: 
00:0000AFBC 9441            	  2755: 	SUB.w		d1,d2				; else subtract the divisor
                            	  2756: skip_sub
00:0000AFBE D100            	  2757: 	ADDX.b	d0,d0				; shift a bit into the result
00:0000AFC0 51CFFFF2        	  2758: 	DBF		d7,loop_atn			; loop if more to do
                            	  2759: 
00:0000AFC4 0200003F        	  2760: 	ANDI.b	#$3F,d0			; mask the result to $0000 to $003F
00:0000AFC8 103B0004        	  2761: 	MOVE.b	atn_tab(pc,d0.w),d0	; get the arctan from the table
00:0000AFCC 4E75            	  2762: 	RTS
                            	  2763: 
                            	  2764: 
                            	  2765: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2766: ;
                            	  2767: ; arctangent table. returns the effective angle of the dx/dy ratio for scaled values
                            	  2768: ; of dx/dy of up to 0.984375 or 63/64ths. this is only 1/8th of a full circle but it
                            	  2769: ; is easy to rotate and reflect these values to cover the other 7/8ths.
                            	  2770: 
                            	  2771: atn_tab
00:0000AFCE 20              	  2772: 	dc.b	$20,$20,$1F,$1F,$1F,$1E,$1E,$1E,$1D,$1D,$1C,$1C,$1C,$1B,$1B,$1A
00:0000AFCF 20
00:0000AFD0 1F
00:0000AFD1 1F
00:0000AFD2 1F
00:0000AFD3 1E
00:0000AFD4 1E
00:0000AFD5 1E
00:0000AFD6 1D
00:0000AFD7 1D
00:0000AFD8 1C
00:0000AFD9 1C
00:0000AFDA 1C
00:0000AFDB 1B
00:0000AFDC 1B
00:0000AFDD 1A
00:0000AFDE 1A              	  2773: 	dc.b	$1A,$1A,$19,$19,$18,$18,$17,$17,$17,$16,$16,$15,$15,$14,$14,$13
00:0000AFDF 1A
00:0000AFE0 19
00:0000AFE1 19
00:0000AFE2 18
00:0000AFE3 18
00:0000AFE4 17
00:0000AFE5 17
00:0000AFE6 17
00:0000AFE7 16
00:0000AFE8 16
00:0000AFE9 15
00:0000AFEA 15
00:0000AFEB 14
00:0000AFEC 14
00:0000AFED 13
00:0000AFEE 13              	  2774: 	dc.b	$13,$12,$12,$11,$11,$10,$0F,$0F,$0E,$0E,$0D,$0D,$0C,$0B,$0B,$0A
00:0000AFEF 12
00:0000AFF0 12
00:0000AFF1 11
00:0000AFF2 11
00:0000AFF3 10
00:0000AFF4 0F
00:0000AFF5 0F
00:0000AFF6 0E
00:0000AFF7 0E
00:0000AFF8 0D
00:0000AFF9 0D
00:0000AFFA 0C
00:0000AFFB 0B
00:0000AFFC 0B
00:0000AFFD 0A
00:0000AFFE 0A              	  2775: 	dc.b	$0A,$09,$08,$08,$07,$07,$06,$05,$05,$04,$03,$03,$02,$02,$01,$00
00:0000AFFF 09
00:0000B000 08
00:0000B001 08
00:0000B002 07
00:0000B003 07
00:0000B004 06
00:0000B005 05
00:0000B006 05
00:0000B007 04
00:0000B008 03
00:0000B009 03
00:0000B00A 02
00:0000B00B 02
00:0000B00C 01
00:0000B00D 00
                            	  2776: 
                            	  2777: 
                            	  2778: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2779: ;
                            	  2780: ; output a number as a leading zero suppressed character string
                            	  2781: ;
                            	  2782: ; a1 = number address
                            	  2783: ; d7 = number byte count
                            	  2784: 
                            	  2785: output_number:
00:0000B00E 5347            	  2786: 	SUBQ.w	#1,d7				; adjust for the loop type
                            	  2787: output_number_loop
00:0000B010 1211            	  2788: 	MOVE.b	(a1),d1			; get a byte
00:0000B012 E809            	  2789: 	LSR.b		#4,d1				; shift the high nibble to the low nibble
00:0000B014 61000130        	  2790: 	BSR		add_sup_hex_chr		; add a leading zero suppressed character
00:0000B018 4A47            	  2791: 	TST.w		d7				; test the byte count
00:0000B01A 6604            	  2792: 	BNE.s		zero_suppress		; if this isn't the last byte skip the zero
                            	  2793: 							; suppress clear
                            	  2794: 
00:0000B01C 422B0016        	  2795: 	CLR.b		suppress_0(a3)		; clear the zero suppress for the last digit
                            	  2796: zero_suppress
00:0000B020 1219            	  2797: 	MOVE.b	(a1)+,d1			; get a byte and increment the pointer
00:0000B022 61000122        	  2798: 	BSR		add_sup_hex_chr		; add a leading zero suppressed character
00:0000B026 51CFFFE8        	  2799: 	DBF		d7,output_number_loop	; decrement count and loop if more to do
                            	  2800: 
00:0000B02A 4E75            	  2801: 	RTS
                            	  2802: 
                            	  2803: 
                            	  2804: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2805: ;
                            	  2806: ; get COS(d0) in d0. d0 is an eight bit value representing a full circle with the
                            	  2807: ; value increasing as you turn widdershins
                            	  2808: 
                            	  2809: cos_d0
00:0000B02C 06000040        	  2810: 	ADDI.b	#$40,d0			; add 1/4 rotation
                            	  2811: 
                            	  2812: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2813: ;
                            	  2814: ; get SIN(d0) in d0. d0 is an eight bit value representing a full circle with the
                            	  2815: ; value increasing as you turn widdershins
                            	  2816: 
                            	  2817: sin_d0
00:0000B030 024000FF        	  2818: 	ANDI.w	#$00FF,d0			; mask one full circle
00:0000B034 4A00            	  2819: 	TST.b		d0				; test angle sign
00:0000B036 6A06            	  2820: 	BPL.s		cossin_d0			; if +ve just get SIN/COS and return
                            	  2821: 
00:0000B038 6104            	  2822: 	BSR.s		cossin_d0			; else get SIN/COS
00:0000B03A 4440            	  2823: 	NEG.w		d0				; now do twos complement
00:0000B03C 4E75            	  2824: 	RTS
                            	  2825: 
                            	  2826: ; get d0 from SIN/COS table
                            	  2827: 
                            	  2828: cossin_d0
00:0000B03E D000            	  2829: 	ADD.b		d0,d0				; ; 2 bytes per word value
00:0000B040 6A02            	  2830: 	BPL.s		a_was_less			; branch if the angle < 1/4 circle
                            	  2831: 
00:0000B042 4400            	  2832: 	NEG.b		d0				; wrap $82 to $FE to $7E to $02
                            	  2833: a_was_less
00:0000B044 303B0004        	  2834: 	MOVE.w	sin_cos(pc,d0.w),d0	; get the SIN/COS value
00:0000B048 4E75            	  2835: 	RTS
                            	  2836: 
                            	  2837: 
                            	  2838: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2839: ;
                            	  2840: ; SIN/COS table, returns values between $0000 and $7FFF. the last value should be
                            	  2841: ; $8000 but that can cause an overflow in the word length calculations and it's
                            	  2842: ; easier to fudge the table a bit. no one will ever notice.
                            	  2843: 
                            	  2844: sin_cos
00:0000B04A 0000            	  2845: 	dc.w	$0000,$0324,$0648,$096B,$0C8C,$0FAB,$12C8,$15E2
00:0000B04C 0324
00:0000B04E 0648
00:0000B050 096B
00:0000B052 0C8C
00:0000B054 0FAB
00:0000B056 12C8
00:0000B058 15E2
00:0000B05A 18F9            	  2846: 	dc.w	$18F9,$1C0C,$1F1A,$2224,$2528,$2827,$2B1F,$2E11
00:0000B05C 1C0C
00:0000B05E 1F1A
00:0000B060 2224
00:0000B062 2528
00:0000B064 2827
00:0000B066 2B1F
00:0000B068 2E11
00:0000B06A 30FC            	  2847: 	dc.w	$30FC,$33DF,$36BA,$398D,$3C57,$3F17,$41CE,$447B
00:0000B06C 33DF
00:0000B06E 36BA
00:0000B070 398D
00:0000B072 3C57
00:0000B074 3F17
00:0000B076 41CE
00:0000B078 447B
00:0000B07A 471D            	  2848: 	dc.w	$471D,$49B4,$4C40,$4EC0,$5134,$539B,$55F6,$5843
00:0000B07C 49B4
00:0000B07E 4C40
00:0000B080 4EC0
00:0000B082 5134
00:0000B084 539B
00:0000B086 55F6
00:0000B088 5843
00:0000B08A 5A82            	  2849: 	dc.w	$5A82,$5CB4,$5ED7,$60EC,$62F2,$64E9,$66CF,$68A7
00:0000B08C 5CB4
00:0000B08E 5ED7
00:0000B090 60EC
00:0000B092 62F2
00:0000B094 64E9
00:0000B096 66CF
00:0000B098 68A7
00:0000B09A 6A6E            	  2850: 	dc.w	$6A6E,$6C24,$6DCA,$6F5F,$70E3,$7255,$73B6,$7505
00:0000B09C 6C24
00:0000B09E 6DCA
00:0000B0A0 6F5F
00:0000B0A2 70E3
00:0000B0A4 7255
00:0000B0A6 73B6
00:0000B0A8 7505
00:0000B0AA 7642            	  2851: 	dc.w	$7642,$776C,$7885,$798A,$7A7D,$7B5D,$7C2A,$7CE4
00:0000B0AC 776C
00:0000B0AE 7885
00:0000B0B0 798A
00:0000B0B2 7A7D
00:0000B0B4 7B5D
00:0000B0B6 7C2A
00:0000B0B8 7CE4
00:0000B0BA 7D8A            	  2852: 	dc.w	$7D8A,$7E1E,$7E9D,$7F0A,$7F62,$7FA7,$7FD9,$7FF6
00:0000B0BC 7E1E
00:0000B0BE 7E9D
00:0000B0C0 7F0A
00:0000B0C2 7F62
00:0000B0C4 7FA7
00:0000B0C6 7FD9
00:0000B0C8 7FF6
00:0000B0CA 7FFF            	  2853: 	dc.w	$7FFF
                            	  2854: 
                            	  2855: 
                            	  2856: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2857: ;
                            	  2858: ; add message d1 to the display list
                            	  2859: 
                            	  2860: add_message:
00:0000B0CC 36BC1000        	  2861: 	MOVE.w	#$1000,glob_scale(a3)	; set the global scale
                            	  2862: 
00:0000B0D0 D241            	  2863: 	ADD.w		d1,d1				; make into a word index
00:0000B0D2 3F01            	  2864: 	MOVE.w	d1,-(sp)			; save the index
                            	  2865: 
00:0000B0D4 D241            	  2866: 	ADD.w		d1,d1				; make into a word pair index
00:0000B0D6 41FA193A        	  2867: 	LEA		mess_origin(pc),a0	; point to the mesage co-ordinate table
00:0000B0DA 34301002        	  2868: 	MOVE.w	2(a0,d1.w),d2		; get the message y co-ordinate
00:0000B0DE 32301000        	  2869: 	MOVE.w	(a0,d1.w),d1		; get the message x co-ordinate
00:0000B0E2 6100009E        	  2870: 	BSR		add_coords			; add co-ordinate pair in d1,d2 to the list as
                            	  2871: 							; a draw command
                            	  2872: 
00:0000B0E6 323C7000        	  2873: 	MOVE.w	#REL7,d1			; make a $7000,$0000 command
00:0000B0EA 610000B0        	  2874: 	BSR		add_single			; add (d1)00,0000 to the vector list
                            	  2875: 
00:0000B0EE 7003            	  2876: 	MOVEQ		#$03,d0			; set the mask for the language bits
00:0000B0F0 206B000E        	  2877: 	MOVEA.l	switch_addr(a3),a0	; point to the switch
00:0000B0F4 C010            	  2878: 	AND.b		(a0),d0			; get and mask the switch bits
00:0000B0F6 D040            	  2879: 	ADD.w		d0,d0				; make into a word pointer
                            	  2880: 
00:0000B0F8 41FA1938        	  2881: 	LEA		mess_table(pc),a0		; point to the mesage language table
00:0000B0FC 30300000        	  2882: 	MOVE.w	(a0,d0.w),d0		; get the offset to the messages
00:0000B100 41F00000        	  2883: 	LEA		(a0,d0.w),a0		; get the pointer to the messages
                            	  2884: 
00:0000B104 321F            	  2885: 	MOVE.w	(sp)+,d1			; restore the message index
                            	  2886: 
00:0000B106 32301000        	  2887: 	MOVE.w	(a0,d1.w),d1		; get the offset to the message
00:0000B10A 41F01000        	  2888: 	LEA		(a0,d1.w),a0		; get the pointer to the message
00:0000B10E 43FA18A4        	  2889: 	LEA		char_set(pc),a1		; get the pointer to the character JSRL table
00:0000B112 7000            	  2890: 	MOVEQ		#0,d0				; clear the longword
                            	  2891: add_char_loop
00:0000B114 1018            	  2892: 	MOVE.b	(a0)+,d0			; get the next character
00:0000B116 671A            	  2893: 	BEQ.s		exit_add_message		; if null just exit
                            	  2894: 
                            	  2895: ; convert the character and add it to the vector list
                            	  2896: 
00:0000B118 903C0020        	  2897: 	SUB.b		#' ',d0			; subtract [SPACE]
00:0000B11C 670C            	  2898: 	BEQ.s		add_the_char		; if it was [SPACE] go add it
                            	  2899: 
00:0000B11E 903C000F        	  2900: 	SUB.b		#15,d0			; convert a number
00:0000B122 0C00000B        	  2901: 	CMPI.b	#11,d0			; compare with converted "9"+1
00:0000B126 6502            	  2902: 	BCS.s		add_the_char		; if it was <="9" go add it
                            	  2903: 
00:0000B128 5F00            	  2904: 	SUBQ.b	#7,d0				; else convert "A" to "Z"
                            	  2905: add_the_char
00:0000B12A D000            	  2906: 	ADD.b		d0,d0				; ; 2
00:0000B12C 38F10000        	  2907: 	MOVE.w	(a1,d0.w),(a4)+		; copy the JSRL to the vector list
00:0000B130 60E2            	  2908: 	BRA.s		add_char_loop		; loop for next
                            	  2909: 
                            	  2910: exit_add_message
00:0000B132 4E75            	  2911: 	RTS
                            	  2912: 
                            	  2913: 
                            	  2914: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2915: ;
                            	  2916: ; timer interrupt. the timer interrupt should be triggered every 16ms
                            	  2917: 
                            	  2918: timer_interrupt
00:0000B134 522B001D        	  2919: 	ADDQ.b	#1,sixteen_ms(a3)		; increment the 16ms counter
00:0000B138 4E73            	  2920: 	RTE
                            	  2921: 
                            	  2922: 
                            	  2923: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2924: ;
                            	  2925: ; add "PLAYER x" to the vector list
                            	  2926: 
                            	  2927: player_x:
00:0000B13A 7201            	  2928: 	MOVEQ		#1,d1				; message 1 - "PLAYER "
00:0000B13C 618E            	  2929: 	BSR		add_message			; add message d1 to the display list
                            	  2930: player_n
00:0000B13E 7201            	  2931: 	MOVEQ		#1,d1				; make 0,1 into 1,2
00:0000B140 D22B0018        	  2932: 	ADD.b		player_idx(a3),d1		; add the player index
00:0000B144 600C            	  2933: 	BRA.s		add_hex_chr			; write a hex character to the vector list
                            	  2934: 							; and return
                            	  2935: 
                            	  2936: 
                            	  2937: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2938: ;
                            	  2939: ; if suppress_0 <> 0 write a leading zero suppressed hex character to the vector list
                            	  2940: 
                            	  2941: add_sup_hex_chr
00:0000B146 4A2B0016        	  2942: 	TST.b		suppress_0(a3)		; test the leading zero suppressed flag
00:0000B14A 6706            	  2943: 	BEQ.s		add_hex_chr			; if not suppressed go write a hex character
                            	  2944: 							; to the vector list
                            	  2945: 
                            	  2946: ; if supressed write a [SPACE] instead of a "0"
                            	  2947: 
00:0000B14C 700F            	  2948: 	MOVEQ		#$0F,d0			; set the nibble mask
00:0000B14E C240            	  2949: 	AND.w		d0,d1				; mask the low nibble
00:0000B150 670A            	  2950: 	BEQ.s		add_sup_zero		; if it is zero go write a space
                            	  2951: 
                            	  2952: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2953: ;
                            	  2954: ; write a hex character d1 to the vector list
                            	  2955: 
                            	  2956: add_hex_chr
00:0000B152 C27C000F        	  2957: 	AND.w		#$0F,d1			; mask the low nibble
00:0000B156 5241            	  2958: 	ADDQ.w	#1,d1				; add 1 to pass the [SPACE] character
00:0000B158 422B0016        	  2959: 	CLR.b		suppress_0(a3)		; clear the leading zero suppressed flag
                            	  2960: add_sup_zero
00:0000B15C D241            	  2961: 	ADD.w		d1,d1				; ; 2, bytes per character
00:0000B15E 2F08            	  2962: 	MOVE.l	a0,-(sp)			; save a0
00:0000B160 41FA1852        	  2963: 	LEA		char_set(pc),a0		; point to the character JSRL table
00:0000B164 38F01000        	  2964: 	MOVE.w	(a0,d1.w),(a4)+		; copy the character JSRL to the vector list
00:0000B168 205F            	  2965: 	MOVE.l	(sp)+,a0			; restore a0
                            	  2966: 
00:0000B16A 4E75            	  2967: 	RTS
                            	  2968: 
                            	  2969: 
                            	  2970: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2971: ;
                            	  2972: ; convert the a1 address and add it to the vector list as a vector subroutine call
                            	  2973: 
                            	  2974: add_address:
00:0000B16C 41FA022A        	  2975: 	LEA		vector(pc),a0		; point to the vector memory
00:0000B170 93C8            	  2976: 	SUBA.l	a0,a1				; convert the pointer to an offset
00:0000B172 2209            	  2977: 	MOVE.l	a1,d1				; copy the result
00:0000B174 E249            	  2978: 	LSR.w		#1,d1				; / 2
00:0000B176 C27C0FFF        	  2979: 	AND.w		#$0FFF,d1			; mask the address bits
00:0000B17A 0041C000        	  2980: 	ORI.w		#JSRL,d1			; OR with vector subroutine call
00:0000B17E 38C1            	  2981: 	MOVE.w	d1,(a4)+			; copy to the vector list
00:0000B180 4E75            	  2982: 	RTS
                            	  2983: 
                            	  2984: 
                            	  2985: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  2986: ;
                            	  2987: ; add 4 ; the co-ordinate pair in d1,d2 to the list as a draw command
                            	  2988: 
                            	  2989: add_coords:
00:0000B182 7002            	  2990: 	MOVEQ		#2,d0				; set shift count
00:0000B184 E161            	  2991: 	ASL.w		d0,d1				; x co-ordinate ; 4
00:0000B186 E162            	  2992: 	ASL.w		d0,d2				; y co-ordinate ; 4
                            	  2993: 
00:0000B188 303C0FFC        	  2994: 	MOVE.w	#$0FFC,d0			; set the co-ordinate mask
00:0000B18C C240            	  2995: 	AND.w		d0,d1				; mask the x co-ordinate
00:0000B18E C440            	  2996: 	AND.w		d0,d2				; mask the y co-ordinate
                            	  2997: 
00:0000B190 0042A000        	  2998: 	ORI.w		#DRAW,d2			; OR in the draw command
00:0000B194 8253            	  2999: 	OR.w		glob_scale(a3),d1		; OR in the global scale
                            	  3000: 
00:0000B196 38C2            	  3001: 	MOVE.w	d2,(a4)+			; save the command/y co-ordinate to the list
00:0000B198 38C1            	  3002: 	MOVE.w	d1,(a4)+			; save the scale/x co-ordinate to the list
00:0000B19A 4E75            	  3003: 	RTS
                            	  3004: 
                            	  3005: 
                            	  3006: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3007: ;
                            	  3008: ; add (d1)00,0000 to the vector list
                            	  3009: 
                            	  3010: add_single
00:0000B19C 7400            	  3011: 	MOVEQ		#0,d2				; clear the second word
                            	  3012: 
                            	  3013: 
                            	  3014: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3015: ;
                            	  3016: ; add (A)00,(X)00 to the vector list
                            	  3017: 
                            	  3018: add_pair
00:0000B19E 38C1            	  3019: 	MOVE.w	d1,(a4)+			; save the first word to the vector list
00:0000B1A0 38C2            	  3020: 	MOVE.w	d2,(a4)+			; save the second word to the vector list
00:0000B1A2 4E75            	  3021: 	RTS
                            	  3022: 
                            	  3023: 
                            	  3024: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3025: ;
                            	  3026: ; check the [F2], [F3] and [F4] keys. set the screen size to 640 x 480, 800 x 600 or
                            	  3027: ; 1024 x 768 if the corresponding key has been pressed
                            	  3028: 
                            	  3029: s_controls
                            	  3030: ;	MOVE.l	#$71007273,d1		; [F2], [], [F3] and [F4] keys
                            	  3031: ;	MOVEQ		#19,d0			; check for keypress
                            	  3032: ;	TRAP		#15
                            	  3033: 
                            	  3034: ;	MOVEQ		#33,d0			; set/get output window size
                            	  3035: 
                            	  3036: ;	MOVE.l	d1,d2				; copy result
                            	  3037: ;	BEQ.s		notscreen			; skip screen size if no F key
                            	  3038: 
                            	  3039: ;	MOVE.l	#$028001E0,d1		; set 640 x 480
                            	  3040: ;	TST.l		d2				; test result
                            	  3041: ;	BMI.s		setscreen			; if F2 go set window size
                            	  3042: 
                            	  3043: ;	MOVE.l	#$03200258,d1		; set 800 x 600
                            	  3044: ;	TST.w		d2				; test result
                            	  3045: ;	BMI.s		setscreen			; if F3 go set window size
                            	  3046: 
                            	  3047: 							; else was F4 so ..
                            	  3048: ;	MOVE.l	#$04000300,d1		; set 1024 x 768
                            	  3049: setscreen
                            	  3050: ;	CMP.l		scr_x(a3),d1		; compare with current screen size
                            	  3051: ;	BEQ.s		notscreen			; if already set skip setting it now
                            	  3052: 
                            	  3053: ;	TRAP		#15
                            	  3054: 
                            	  3055: notscreen
                            	  3056: ;	MOVEQ		#0,d1				; get the current window size
                            	  3057: ;	TRAP		#15
                            	  3058: 
00:0000B1A4 223C03200258    	  3059: 	move.l #$03200258,d1		; always 800x600
00:0000B1AA 27410006        	  3060: 	move.l d1,scr_x(a3)			; save the screen x and y size
00:0000B1AE 4E75            	  3061: 	rts
                            	  3062: 
                            	  3063: 
                            	  3064: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3065: ;
                            	  3066: ; setup stuff.
                            	  3067: 
                            	  3068: Initialise:
00:0000B1B0 7200            	  3069: 	moveq	#0,d1					; turn off echo
00:0000B1B2 700C            	  3070: 	moveq	#12,d0				; keyboard echo
00:0000B1B4 4E4F            	  3071: 	trap #15
                            	  3072: 
00:0000B1B6 323CFF00        	  3073: 	move.w #$FF00,d1		; clear screen
00:0000B1BA 700B            	  3074: 	moveq #11,d0				; position cursor
00:0000B1BC 4E4F            	  3075: 	trap #15
                            	  3076: 
00:0000B1BE 7211            	  3077: 	moveq #17,d1				; enable double buffering
00:0000B1C0 705C            	  3078: 	moveq	#92,d0				; set draw mode
00:0000B1C2 4E4F            	  3079: 	trap #15
                            	  3080: 
00:0000B1C4 720A            	  3081: 	moveq #10,d1				; OR mode drawing, this helps on two ways.
                            	  3082: 							; first it emulates a vector display where
                            	  3083: 							; the vectors that cross can bright up the
                            	  3084: 							; intersection and second it means we can
                            	  3085: 							; forget depth sorting of objects
00:0000B1C6 705C            	  3086: 	moveq #92,d0				; set draw mode
00:0000B1C8 4E4F            	  3087: 	trap #15
                            	  3088: 
00:0000B1CA 47FA1D1B        	  3089: 	lea	variables(pc),a3	; get the pointer to the variables base
00:0000B1CE 4BEB00F3        	  3090: 	lea player_1(a3),a5		; get the pointer to player one's variables
00:0000B1D2 4DEB01F7        	  3091: 	lea player_2(a3),a6		; get the pointer to player two's variables
                            	  3092: 
                            	  3093: 										; clear all the variable space
00:0000B1D6 7000            	  3094: 	moveq #0,d0				; clear the longword
00:0000B1D8 41EB0012        	  3095: 	lea hiscore_y(a3),a0		; get the start address
00:0000B1DC 43EB027B        	  3096: 	lea p_2_end(a3),a1			; get the end address
                            	  3097: clear_loop
00:0000B1E0 30C0            	  3098: 	move.w d0,(a0)+			; clear the word
00:0000B1E2 B1C9            	  3099: 	cmpa.l a1,a0				; compare the addresses
00:0000B1E4 66FA            	  3100: 	bne.s clear_loop		; if not at end loop
                            	  3101: 
00:0000B1E6 7008            	  3102: 	moveq #8,d0					; get the time in 1/100 ths seconds
00:0000B1E8 4E4F            	  3103: 	trap #15
                            	  3104: 
00:0000B1EA 0A81DEADBEEF    	  3105: 	eori.l	#$DEADBEEF,d1		; EOR with the initial PRNG seed, this must
                            	  3106: 													; result in any value but zero
00:0000B1F0 4EB900001F3E    	  3107: 	jsr InitRand
00:0000B1F6 2741000A        	  3108: 	move.l	d1,PRNlword(a3)		; save the initial PRNG seed
                            	  3109: 
00:0000B1FA 7203            	  3110: 	moveq #3,d1					; get the switches address
00:0000B1FC 7020            	  3111: 	moveq #32,d0				; simulator hardware
00:0000B1FE 4E4F            	  3112: 	trap #15
                            	  3113: 
00:0000B200 2741000E        	  3114: 	move.l d1,switch_addr(a3)	; save the switches address
                            	  3115: 
                            	  3116: 	;LEA		timer_interrupt(pc),a0	; get the timer interrupt routine address
                            	  3117: 	;MOVE.l	a0,$64.w			; save the timer interrupt as interrupt 1
                            	  3118: 
                            	  3119: 	;MOVEQ		#6,d1				; set auto IRQ
                            	  3120: 	;MOVEQ		#$81,d2			; enable IRQ 1
                            	  3121: 	;MOVEQ		#16,d3			; set the time in ms
                            	  3122: 	;MOVEQ		#32,d0			; set simulator hardware
                            	  3123: 	;TRAP		#15
                            	  3124: 
                            	  3125: 	;MOVEQ		#5,d1				; enable exceptions
                            	  3126: 	;MOVEQ		#32,d0			; set simulator hardware
                            	  3127: 	;TRAP		#15
                            	  3128: 
00:0000B204 49FA0192        	  3129: 	lea vector(pc),a4			; get the pointer to the vector list RAM
00:0000B208 38BCB000        	  3130: 	move.w #HALT,(a4)			; add HALT to the vector list
                            	  3131: 
00:0000B20C 61001B4D        	  3132: 	bsr sound_init				; initialise the sounds
                            	  3133: 
00:0000B210 70FF            	  3134: 	moveq #-1,d0					; flag high score done
00:0000B212 17400176        	  3135: 	move.b d0,p1_high(a3)	; save the player 1 highscore flag
00:0000B216 1740027A        	  3136: 	move.b d0,p2_high(a3)	; save the player 2 highscore flag
                            	  3137: 
00:0000B21A 43FA1CBE        	  3138: 	lea filename(pc),a1		; point to the highscore filename
00:0000B21E 7033            	  3139: 	moveq	#51,d0					; open existing file
00:0000B220 4E4F            	  3140: 	trap #15
                            	  3141: 
00:0000B222 4A40            	  3142: 	tst.w d0							; check for errors
00:0000B224 6706            	  3143: 	beq.s read_hi					; if no error go read the file
                            	  3144: 
00:0000B226 0C400003        	  3145: 	cmpi.w #3,d0					; compare with read only
00:0000B22A 660A            	  3146: 	bne.s	close_all_2			; if not read only go close all files
                            	  3147: 
                            	  3148: read_hi
00:0000B22C 43EB0027        	  3149: 	lea hiscores(a3),a1		; point to the highscore tables
00:0000B230 7432            	  3150: 	moveq	#50,d2					; set the table length
00:0000B232 7035            	  3151: 	moveq	#53,d0					; read file
00:0000B234 4E4F            	  3152: 	trap #15
                            	  3153: 
                            	  3154: close_all_2
00:0000B236 7032            	  3155: 	moveq #50,d0					; close all files
00:0000B238 4E4F            	  3156: 	trap #15
                            	  3157: 
00:0000B23A 4E75            	  3158: 	rts
                            	  3159: 
                            	  3160: 
                            	  3161: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3162: ;
                            	  3163: ; This is the code that generates the pseudo random sequence. A seed word located in
                            	  3164: ; PRNlword(a3) is loaded into a register before being operated on to generate the
                            	  3165: ; next number in the sequence. This number is then saved as the seed for the next
                            	  3166: ; time it's called.
                            	  3167: ;
                            	  3168: ; This code is adapted from the 32 bit version of RND(n) used in EhBASIC68. Taking
                            	  3169: ; the 19th next number is slower but helps to hide the shift and add nature of this
                            	  3170: ; generator as can be seen from analysing the output.
                            	  3171: 
                            	  3172: gen_prng:
00:0000B23C 2F01            	  3173: 	move.l d1,-(a7)
00:0000B23E 4EB900001F7E    	  3174: 	jsr RandGetNum
00:0000B244 2741000A        	  3175: 	move.l d1,PRNlword(a3)
00:0000B248 221F            	  3176: 	move.l (a7)+,d1
00:0000B24A 4E75            	  3177: 	rts
                            	  3178: 
                            	  3179: ;	MOVEM.l	d0-d2,-(sp)			; save d0, d1 and d2
                            	  3180: ;	MOVE.l	PRNlword(a3),d0		; get current seed longword
                            	  3181: ;	MOVEQ		#$AF-$100,d1		; set the EOR value
                            	  3182: ;	MOVEQ		#18,d2			; do this 19 times
                            	  3183: Ninc0
                            	  3184: ;	ADD.l		d0,d0				; shift left 1 bit
                            	  3185: ;	BCC.s		Ninc1				; if bit not set skip feedback
                            	  3186: 
                            	  3187: ;	EOR.b		d1,d0				; do Galois LFSR feedback
                            	  3188: Ninc1
                            	  3189: ;	DBF		d2,Ninc0			; loop
                            	  3190: 
                            	  3191: ;	MOVE.l	d0,PRNlword(a3)		; save back to seed longword
                            	  3192: ;	MOVEM.l	(sp)+,d0-d2			; restore d0, d1 and d2
                            	  3193: 
                            	  3194: ;	RTS
                            	  3195: 
                            	  3196: 
                            	  3197: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3198: ;
                            	  3199: ; vector generator subroutines. this code emulates the atari digital vector generator
                            	  3200: ; and truns the vector draw list into lines on the screen
                            	  3201: 
                            	  3202: ; vector subroutine return code. if a vector subroutine is called the address for this
                            	  3203: ; code is pushed on the stack
                            	  3204: 
                            	  3205: op_rtsvec:
00:0000B24C 285F            	  3206: 	MOVE.l	(sp)+,a4			; restore the vector pointer
                            	  3207: 
                            	  3208: ; evaluate the next vector command. the command is pointed to by (a4) and execution
                            	  3209: ; will continue until an RTSL or HALT command is encountered. this is a subset of the
                            	  3210: ; battlezone DVG command set
                            	  3211: 
                            	  3212: do_vector:
00:0000B24E 381C            	  3213: 	MOVE.w	(a4)+,d4			; get the vector opcode
00:0000B250 3004            	  3214: 	MOVE.w	d4,d0				; copy it
00:0000B252 ED58            	  3215: 	ROL.w		#6,d0				; shift opcode bits to b5-b2
00:0000B254 0240003C        	  3216: 	ANDI.w	#$003C,d0			; mask the opcode bits
00:0000B258 4EFB0076        	  3217: 	JMP		vector_base(pc,d0.w)	; go do the vector opcode
                            	  3218: 
                            	  3219: ; call vector subroutine, push the vector pointer and then the vector subroutine
                            	  3220: ; address as the return address then do jump to vector address
                            	  3221: 
                            	  3222: op_call
00:0000B25C 2F0C            	  3223: 	MOVE.l	a4,-(sp)			; save the vector pointer
00:0000B25E 487AFFEC        	  3224: 	PEA		op_rtsvec(pc)		; push vector return code as return address
                            	  3225: 
                            	  3226: ; jump to vector, the address is a thirteen bit address
                            	  3227: 
                            	  3228: op_jump
00:0000B262 C87C0FFF        	  3229: 	AND.w		#$0FFF,d4			; mask the address
00:0000B266 D844            	  3230: 	ADD.w		d4,d4				; make it a word address
00:0000B268 49FA012E        	  3231: 	LEA		vector(pc),a4		; reset the vector RAM pointer
00:0000B26C 49F44000        	  3232: 	LEA		(a4,d4.w),a4		; calculate the new address
00:0000B270 60DC            	  3233: 	BRA.s		do_vector			; go do the next vector
                            	  3234: 
                            	  3235: ; relative vector routine. co-ordinates are ten bit with sign numbers
                            	  3236: 
                            	  3237: op_vctr
00:0000B272 3E3C07FF        	  3238: 	MOVE.w	#$07FF,d7			; set the co-ordinate and sign bits mask
00:0000B276 720A            	  3239: 	MOVEQ		#10,d1			; set the sign bit number
                            	  3240: 
00:0000B278 C847            	  3241: 	AND.w		d7,d4				; mask the y co-ordinate and sign
00:0000B27A 0384            	  3242: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000B27C 6702            	  3243: 	BEQ.s		no_neg_y11			; if positive skip the negate
                            	  3244: 
00:0000B27E 4444            	  3245: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3246: no_neg_y11
                            	  3247: 
00:0000B280 361C            	  3248: 	MOVE.w	(a4)+,d3			; get the second word
00:0000B282 3403            	  3249: 	MOVE.w	d3,d2				; copy the intensity
                            	  3250: 
00:0000B284 C647            	  3251: 	AND.w		d7,d3				; mask the x co-ordinate and sign
00:0000B286 0383            	  3252: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000B288 6702            	  3253: 	BEQ.s		no_neg_x11			; if positive skip the negate
                            	  3254: 
00:0000B28A 4443            	  3255: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3256: no_neg_x11
                            	  3257: 
00:0000B28C E440            	  3258: 	ASR.w		#2,d0				; make the scale count from the masked JMP
00:0000B28E 4440            	  3259: 	NEG.w		d0				; make negative
00:0000B290 D07C0009        	  3260: 	ADD.w		#9,d0				; make 9 - scale
                            	  3261: 
00:0000B294 E063            	  3262: 	ASR.w		d0,d3				; scale the x co-ordinate
00:0000B296 E064            	  3263: 	ASR.w		d0,d4				; scale the y co-ordinate
                            	  3264: 
00:0000B298 600000A2        	  3265: 	BRA		end_vector			; go do the end of the vector draw
                            	  3266: 
                            	  3267: ; set scale and position the beam
                            	  3268: 
                            	  3269: op_abs
00:0000B29C 3E3C07FF        	  3270: 	MOVE.w	#$07FF,d7			; set the co-ordinate and sign bits mask
00:0000B2A0 720A            	  3271: 	MOVEQ		#10,d1			; set the sign bit number
                            	  3272: 
00:0000B2A2 C847            	  3273: 	AND.w		d7,d4				; mask the y co-ordinate and sign
00:0000B2A4 0384            	  3274: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000B2A6 6702            	  3275: 	BEQ.s		no_neg_y10			; if positive skip the negate
                            	  3276: 
00:0000B2A8 4444            	  3277: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3278: no_neg_y10
                            	  3279: 
00:0000B2AA 361C            	  3280: 	MOVE.w	(a4)+,d3			; get the second word
00:0000B2AC 3403            	  3281: 	MOVE.w	d3,d2				; copy the scale
                            	  3282: 
00:0000B2AE C647            	  3283: 	AND.w		d7,d3				; mask the x co-ordinate and sign
00:0000B2B0 0383            	  3284: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000B2B2 6702            	  3285: 	BEQ.s		no_neg_x10			; if positive skip the negate
                            	  3286: 
00:0000B2B4 4443            	  3287: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3288: no_neg_x10
                            	  3289: 
                            	  3290: ; now convert the scale so it is b15 = direction flag and the rest is the shift count
                            	  3291: 
00:0000B2B6 E95A            	  3292: 	ROL.w		#4,d2				; move the scale bits to bits 3 to 0
00:0000B2B8 0242000F        	  3293: 	ANDI.w	#$000F,d2			; mask the scale bits
00:0000B2BC 08820003        	  3294: 	BCLR.l	#3,d2				; clear the top bit
00:0000B2C0 6706            	  3295: 	BEQ.s		not_right			; ship right shift adjust
                            	  3296: 
00:0000B2C2 4442            	  3297: 	NEG.w		d2				; make negative
00:0000B2C4 D47C8008        	  3298: 	ADD.w		#$8008,d2			; add offset and flag right shift
                            	  3299: not_right
00:0000B2C8 3682            	  3300: 	MOVE.w	d2,(a3)			; save the global scal, offset is zero	##
                            	  3301: ;##	MOVE.w	d2,vector_s(a3)		; save the global scale
                            	  3302: 
00:0000B2CA 7056            	  3303: 	MOVEQ		#86,d0			; set move to x,y
00:0000B2CC 6000009E        	  3304: 	BRA		vector_move			; go do the move
                            	  3305: 
                            	  3306: vector_base
00:0000B2D0 4E75            	  3307: 	RTS						; treat $0xxx as HALT, quit processing vectors
00:0000B2D2 4E71            	  3308: 	NOP						; filler
00:0000B2D4 6000FF9C        	  3309: 	BRA.w		op_vctr			; scale 1 relative long vector
00:0000B2D8 6000FF98        	  3310: 	BRA.w		op_vctr			; scale 2 relative long vector
00:0000B2DC 6000FF94        	  3311: 	BRA.w		op_vctr			; scale 3 relative long vector
00:0000B2E0 6000FF90        	  3312: 	BRA.w		op_vctr			; scale 4 relative long vector
00:0000B2E4 6000FF8C        	  3313: 	BRA.w		op_vctr			; scale 5 relative long vector
00:0000B2E8 6000FF88        	  3314: 	BRA.w		op_vctr			; scale 6 relative long vector
00:0000B2EC 6000FF84        	  3315: 	BRA.w		op_vctr			; scale 7 relative long vector
00:0000B2F0 6000FF80        	  3316: 	BRA.w		op_vctr			; scale 8 relative long vector
00:0000B2F4 6000FF7C        	  3317: 	BRA.w		op_vctr			; scale 9 relative long vector
00:0000B2F8 6000FFA2        	  3318: 	BRA.w		op_abs			; set scale and position beam
00:0000B2FC 4E75            	  3319: 	RTS						; do HALT, quit processing vectors
00:0000B2FE 4E71            	  3320: 	NOP						; filler
00:0000B300 6000FF5A        	  3321: 	BRA.w		op_call			; call vector subroutine
00:0000B304 4E75            	  3322: 	RTS						; return from vector subroutine
00:0000B306 4E71            	  3323: 	NOP						; filler
00:0000B308 6000FF58        	  3324: 	BRA.w		op_jump			; do vector jump
                            	  3325: ;##	BRA.w		op_short			; draw relative short vector
                            	  3326: 
                            	  3327: ; do relative short vector
                            	  3328: 
                            	  3329: op_short
00:0000B30C 3E04            	  3330: 	MOVE.w	d4,d7				; copy the opcode
00:0000B30E 02470808        	  3331: 	ANDI.w	#$0808,d7			; mask the scale bits	0000 x000 0000 y000
00:0000B312 E94F            	  3332: 	LSL.w		#4,d7				; shift bits to b8,b0	x000 0000 y000 0000
00:0000B314 E31F            	  3333: 	ROL.b		#1,d7				; shift bits together	x000 0000 0000 000y
00:0000B316 E35F            	  3334: 	ROL.w		#1,d7				; shift bits to b1,b0	0000 0000 0000 00yx
00:0000B318 5247            	  3335: 	ADDQ.w	#1,d7				; make 1 to 4
                            	  3336: 
00:0000B31A 1F04            	  3337: 	MOVE.b	d4,-(sp)			; push the intensity byte
00:0000B31C 341F            	  3338: 	MOVE.w	(sp)+,d2			; pull the word, intensity now in high byte
                            	  3339: 
00:0000B31E 7007            	  3340: 	MOVEQ		#7,d0				; set the co-ordinate and sign bits mask
00:0000B320 7202            	  3341: 	MOVEQ		#2,d1				; set the sign bit number
                            	  3342: 
00:0000B322 3604            	  3343: 	MOVE.w	d4,d3				; copy the opcode for the x co-ordinate
                            	  3344: 
00:0000B324 3F04            	  3345: 	MOVE.w	d4,-(sp)			; push the opcode
00:0000B326 181F            	  3346: 	MOVE.b	(sp)+,d4			; pull the y co-ordinate byte
                            	  3347: 
00:0000B328 C840            	  3348: 	AND.w		d0,d4				; mask the y co-ordinate and sign bits
00:0000B32A 0384            	  3349: 	BCLR.l	d1,d4				; test and clear the sign bit
00:0000B32C 6702            	  3350: 	BEQ.s		no_neg_y2			; if positive just exit
                            	  3351: 
00:0000B32E 4444            	  3352: 	NEG.w		d4				; else negate the y co-ordinate
                            	  3353: no_neg_y2
                            	  3354: 
00:0000B330 C640            	  3355: 	AND.w		d0,d3				; mask the x co-ordinate and sign bits
00:0000B332 0383            	  3356: 	BCLR.l	d1,d3				; test and clear the sign bit
00:0000B334 6702            	  3357: 	BEQ.s		no_neg_x2			; if positive just exit
                            	  3358: 
00:0000B336 4443            	  3359: 	NEG.w		d3				; else negate the x co-ordinate
                            	  3360: no_neg_x2
                            	  3361: 
00:0000B338 EF63            	  3362: 	ASL.w		d7,d3				; scale the x magnitude
00:0000B33A EF64            	  3363: 	ASL.w		d7,d4				; scale the y magnitude
                            	  3364: 
                            	  3365: end_vector
00:0000B33C 3E13            	  3366: 	MOVE.w	(a3),d7			; get the global scale, offset is zero	##
                            	  3367: ;##	MOVE.w	vector_s(a3),d7		; get the global scale
00:0000B33E 6A06            	  3368: 	BPL.s		shift_left			; if positive go shift left
                            	  3369: 
                            	  3370: 							; else shift right
00:0000B340 EE63            	  3371: 	ASR.w		d7,d3				; scale the x co-ordinate
00:0000B342 EE64            	  3372: 	ASR.w		d7,d4				; scale the y co-ordinate
00:0000B344 6004            	  3373: 	BRA.s		last_vector			; continue
                            	  3374: 
                            	  3375: shift_left
00:0000B346 EF63            	  3376: 	ASL.w		d7,d3				; scale the x co-ordinate
00:0000B348 EF64            	  3377: 	ASL.w		d7,d4				; scale the y co-ordinate
                            	  3378: last_vector
00:0000B34A D66B0002        	  3379: 	ADD.w		local_x(a3),d3		; add x the co-ordinate to vector x
00:0000B34E D86B0004        	  3380: 	ADD.w		local_y(a3),d4		; add y the co-ordinate to vector y
                            	  3381: 
00:0000B352 7056            	  3382: 	MOVEQ		#86,d0			; set move to x,y
                            	  3383: 
00:0000B354 C47CF000        	  3384: 	AND.w		#$F000,d2			; d2 is intensity
00:0000B358 6712            	  3385: 	BEQ.s		vector_move			; if zero intensity just do move
                            	  3386: 
00:0000B35A 7200            	  3387: 	MOVEQ		#0,d1				; clear the longword
00:0000B35C 3F02            	  3388: 	MOVE.w	d2,-(sp)			; copy the intensity
00:0000B35E 141F            	  3389: 	MOVE.b	(sp)+,d2			; to the low byte byte
00:0000B360 1202            	  3390: 	MOVE.b	d2,d1				; copy the intensity byte
00:0000B362 4841            	  3391: 	SWAP		d1				; move to the high word
00:0000B364 3202            	  3392: 	MOVE.w	d2,d1				; get the other word
                            	  3393: 
00:0000B366 7050            	  3394: 	MOVEQ		#80,d0			; set pen colour
00:0000B368 4E4F            	  3395: 	TRAP		#15
                            	  3396: 
00:0000B36A 7055            	  3397: 	MOVEQ		#85,d0			; set draw to x,y
                            	  3398: vector_move
00:0000B36C 3404            	  3399: 	MOVE.w	d4,d2				; copy the y co-ordinate
00:0000B36E 3203            	  3400: 	MOVE.w	d3,d1				; copy the x co-ordinate
                            	  3401: ;##	BRA.s		display_vector		; display the vector
                            	  3402: 
                            	  3403: 
                            	  3404: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3405: ;
                            	  3406: ; display vector and do next. takes the vector, scales the x and y to the current
                            	  3407: ; screen size - does axis inversion if needed - and then displays it. set up the
                            	  3408: ; graphics function in d0, x co-ordinate in d1.w and y co-ordinate in d2.w
                            	  3409: 
                            	  3410: ;##display_vector
00:0000B370 37410002        	  3411: 	MOVE.w	d1,local_x(a3)		; save as new local x co-ordinate
00:0000B374 37420004        	  3412: 	MOVE.w	d2,local_y(a3)		; save as new local y co-ordinate
                            	  3413: 
00:0000B378 760A            	  3414: 	MOVEQ		#10,d3			; set the shift count for / 1024
                            	  3415: 
00:0000B37A C3EB0006        	  3416: 	MULS.w	scr_x(a3),d1		; x ; screen x
00:0000B37E E6A1            	  3417: 	ASR.l		d3,d1				; / 1024
                            	  3418: 
00:0000B380 947C0080        	  3419: 	SUB.w		#128,d2			; subtract offset to centre vertically
00:0000B384 C5EB0006        	  3420: 	MULS.w	scr_x(a3),d2		; y ; screen x
00:0000B388 E6A2            	  3421: 	ASR.l		d3,d2				; / 1024
00:0000B38A 4442            	  3422: 	NEG.w		d2				; y = 0 is top of screen remember
00:0000B38C D46B0008        	  3423: 	ADD.w		scr_y(a3),d2		; + screen y
00:0000B390 5342            	  3424: 	SUBQ.w	#1,d2				; - 1
                            	  3425: 
00:0000B392 4E4F            	  3426: 	TRAP		#15				; do move or draw
                            	  3427: 
00:0000B394 6000FEB8        	  3428: 	BRA		do_vector			; go do the next vector opcode
                            	  3429: 
                            	  3430: 
                            	  3431: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3432: ;
                            	  3433: ; vector commands
                            	  3434: 
                            	  3435: REL1		EQU $1000				; draw relative
                            	  3436: REL2		EQU $2000				; draw relative
                            	  3437: REL3		EQU $3000				; draw relative
                            	  3438: REL4		EQU $4000				; draw relative
                            	  3439: REL5		EQU $5000				; draw relative
                            	  3440: REL6		EQU $6000				; draw relative
                            	  3441: REL7		EQU $7000				; draw relative
                            	  3442: REL8		EQU $8000				; draw relative
                            	  3443: REL9		EQU $9000				; draw relative
                            	  3444: DRAW		EQU $A000				; draw absolute
                            	  3445: HALT		EQU $B000				; halt
                            	  3446: JSRL		EQU $C000				; vector subroutine call
                            	  3447: RTSL		EQU $D000				; return from vector subroutine
                            	  3448: JMPL		EQU $E000				; vector jump
                            	  3449: SHRT		EQU $F000				; relative short vector
                            	  3450: 
                            	  3451: 
                            	  3452: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3453: ;
                            	  3454: ; vector list RAM
                            	  3455: 
                            	  3456: vector
00:0000B398 00              	  3457: 	ds.b	$1000					; 4k of space
00:0000B399 *
                            	  3458: 
                            	  3459: 
                            	  3460: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3461: ;
                            	  3462: ; vector ROM
                            	  3463: 
                            	  3464: ; copyright symbol followed by JSR's to write "2009 LEE DAVISO", followed by a JMP to
                            	  3465: ; char_n, which is the routine for "N"
                            	  3466: 
                            	  3467: copy_msg
00:0000C398 A088            	  3468: 	dc.w	$A088,$019A,$7000,$0000,$F573,$F173,$F178,$F177
00:0000C39A 019A
00:0000C39C 7000
00:0000C39E 0000
00:0000C3A0 F573
00:0000C3A2 F173
00:0000C3A4 F178
00:0000C3A6 F177
00:0000C3A8 F577            	  3469: 	dc.w	$F577,$F578,$3180,$0200,$F875,$FD70,$F871,$FD02
00:0000C3AA F578
00:0000C3AC 3180
00:0000C3AE 0200
00:0000C3B0 F875
00:0000C3B2 FD70
00:0000C3B4 F871
00:0000C3B6 FD02
00:0000C3B8 CAD6            	  3470: 	dc.w	JSRL+(char_2-vector)>>1		; 2
00:0000C3BA CA81            	  3471: 	dc.w	JSRL+(char_o0-vector)>>1	; 0
00:0000C3BC CA81            	  3472: 	dc.w	JSRL+(char_o0-vector)>>1	; 0
00:0000C3BE CB07            	  3473: 	dc.w	JSRL+(char_9-vector)>>1		; 9
00:0000C3C0 CAD0            	  3474: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000C3C2 CA71            	  3475: 	dc.w	JSRL+(char_l-vector)>>1		; L
00:0000C3C4 CA3F            	  3476: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000C3C6 CA3F            	  3477: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000C3C8 CAD0            	  3478: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000C3CA CA37            	  3479: 	dc.w	JSRL+(char_d-vector)>>1		; D
00:0000C3CC CA1C            	  3480: 	dc.w	JSRL+(char_a-vector)>>1		; A
00:0000C3CE CAB2            	  3481: 	dc.w	JSRL+(char_v-vector)>>1		; V
00:0000C3D0 CA5E            	  3482: 	dc.w	JSRL+(char_i-vector)>>1		; I
00:0000C3D2 CA9F            	  3483: 	dc.w	JSRL+(char_s-vector)>>1		; S
00:0000C3D4 CA81            	  3484: 	dc.w	JSRL+(char_o0-vector)>>1	; O
00:0000C3D6 EA7C            	  3485: 	dc.w	JMPL+(char_n-vector)>>1		; N
                            	  3486: 
                            	  3487: ; table for the various saucer and rock explosions
                            	  3488: 
                            	  3489: expl_tab
00:0000C3D8 C874            	  3490: 	dc.w	JSRL+(expl_0-vector)>>1		; explosion 0
00:0000C3DA C859            	  3491: 	dc.w	JSRL+(expl_1-vector)>>1		; explosion 1
00:0000C3DC C83A            	  3492: 	dc.w	JSRL+(expl_2-vector)>>1		; explosion 2
00:0000C3DE C824            	  3493: 	dc.w	JSRL+(expl_3-vector)>>1		; explosion 3
                            	  3494: 
                            	  3495: ; explosion 3
                            	  3496: 
                            	  3497: expl_3
00:0000C3E0 F80D            	  3498: 	dc.w	$F80D,$F8F8,$FD0D,$F8F8,$FD09,$F8F8,$F10B,$F8F8
00:0000C3E2 F8F8
00:0000C3E4 FD0D
00:0000C3E6 F8F8
00:0000C3E8 FD09
00:0000C3EA F8F8
00:0000C3EC F10B
00:0000C3EE F8F8
00:0000C3F0 F50A            	  3499: 	dc.w	$F50A,$F8F8,$F908,$F8F8,$F309,$F8F8,$F30D,$F8F8
00:0000C3F2 F8F8
00:0000C3F4 F908
00:0000C3F6 F8F8
00:0000C3F8 F309
00:0000C3FA F8F8
00:0000C3FC F30D
00:0000C3FE F8F8
00:0000C400 5480            	  3500: 	dc.w	$5480,$0600,$F8F8,$F10F,$F8F8,RTSL
00:0000C402 0600
00:0000C404 F8F8
00:0000C406 F10F
00:0000C408 F8F8
00:0000C40A D000
                            	  3501: 
                            	  3502: ; explosion 2
                            	  3503: 
                            	  3504: expl_2
00:0000C40C 3000            	  3505: 	dc.w	$3000,$0780,$F8F8,$3780,$0780,$F8F8,$3780,$0380
00:0000C40E 0780
00:0000C410 F8F8
00:0000C412 3780
00:0000C414 0780
00:0000C416 F8F8
00:0000C418 3780
00:0000C41A 0380
00:0000C41C F8F8            	  3506: 	dc.w	$F8F8,$40E0,$02A0,$F8F8,$35C0,$0380,$F8F8,$3380
00:0000C41E 40E0
00:0000C420 02A0
00:0000C422 F8F8
00:0000C424 35C0
00:0000C426 0380
00:0000C428 F8F8
00:0000C42A 3380
00:0000C42C 0000            	  3507: 	dc.w	$0000,$F8F8,$42A0,$00E0,$F8F8,$42A0,$04E0,$F8F8
00:0000C42E F8F8
00:0000C430 42A0
00:0000C432 00E0
00:0000C434 F8F8
00:0000C436 42A0
00:0000C438 04E0
00:0000C43A F8F8
00:0000C43C 44E0            	  3508: 	dc.w	$44E0,$0780,$F8F8,$40E0,$06A0,$F8F8,RTSL
00:0000C43E 0780
00:0000C440 F8F8
00:0000C442 40E0
00:0000C444 06A0
00:0000C446 F8F8
00:0000C448 D000
                            	  3509: 
                            	  3510: ; explosion 1
                            	  3511: 
                            	  3512: expl_1
00:0000C44A F807            	  3513: 	dc.w	$F807,$F8F8,$FF07,$F8F8,$FF03,$F8F8,$40C0,$0240
00:0000C44C F8F8
00:0000C44E FF07
00:0000C450 F8F8
00:0000C452 FF03
00:0000C454 F8F8
00:0000C456 40C0
00:0000C458 0240
00:0000C45A F8F8            	  3514: 	dc.w	$F8F8,$3580,$0300,$F8F8,$FB00,$F8F8,$4240,$00C0
00:0000C45C 3580
00:0000C45E 0300
00:0000C460 F8F8
00:0000C462 FB00
00:0000C464 F8F8
00:0000C466 4240
00:0000C468 00C0
00:0000C46A F8F8            	  3515: 	dc.w	$F8F8,$4240,$04C0,$F8F8,$44C0,$0700,$F8F8,$40C0
00:0000C46C 4240
00:0000C46E 04C0
00:0000C470 F8F8
00:0000C472 44C0
00:0000C474 0700
00:0000C476 F8F8
00:0000C478 40C0
00:0000C47A 0640            	  3516: 	dc.w	$0640,$F8F8,RTSL
00:0000C47C F8F8
00:0000C47E D000
                            	  3517: 
                            	  3518: ; explosion 0
                            	  3519: 
                            	  3520: expl_0
00:0000C480 3000            	  3521: 	dc.w	$3000,$0680,$F8F8,$3680,$0680,$F8F8,$3680,$0280
00:0000C482 0680
00:0000C484 F8F8
00:0000C486 3680
00:0000C488 0680
00:0000C48A F8F8
00:0000C48C 3680
00:0000C48E 0280
00:0000C490 F8F8            	  3522: 	dc.w	$F8F8,$3140,$03C0,$F8F8,$3540,$0280,$F8F8,$3280
00:0000C492 3140
00:0000C494 03C0
00:0000C496 F8F8
00:0000C498 3540
00:0000C49A 0280
00:0000C49C F8F8
00:0000C49E 3280
00:0000C4A0 0000            	  3523: 	dc.w	$0000,$F8F8,$33C0,$0140,$F8F8,$33C0,$0540,$F8F8
00:0000C4A2 F8F8
00:0000C4A4 33C0
00:0000C4A6 0140
00:0000C4A8 F8F8
00:0000C4AA 33C0
00:0000C4AC 0540
00:0000C4AE F8F8
00:0000C4B0 44A0            	  3524: 	dc.w	$44A0,$0680,$F8F8,$3140,$07C0,$F8F8,RTSL
00:0000C4B2 0680
00:0000C4B4 F8F8
00:0000C4B6 3140
00:0000C4B8 07C0
00:0000C4BA F8F8
00:0000C4BC D000
                            	  3525: 
                            	  3526: ; table for rocks
                            	  3527: 
                            	  3528: rock_tab
00:0000C4BE C897            	  3529: 	dc.w	JSRL+(rock_0-vector)>>1		; top notch rock
00:0000C4C0 C8A3            	  3530: 	dc.w	JSRL+(rock_1-vector)>>1		; "X" rock
00:0000C4C2 C8B1            	  3531: 	dc.w	JSRL+(rock_2-vector)>>1		; bottom and left notch rock
00:0000C4C4 C8BE            	  3532: 	dc.w	JSRL+(rock_3-vector)>>1		; left and right notch rock
                            	  3533: 
                            	  3534: ; top notch rock
                            	  3535: 
                            	  3536: rock_0
00:0000C4C6 F908            	  3537: 	dc.w	$F908,$F979,$FD79,$F67D,$F679,$F68F,$F08F,$F97D
00:0000C4C8 F979
00:0000C4CA FD79
00:0000C4CC F67D
00:0000C4CE F679
00:0000C4D0 F68F
00:0000C4D2 F08F
00:0000C4D4 F97D
00:0000C4D6 FA78            	  3538: 	dc.w	$FA78,$F979,$FD79,RTSL
00:0000C4D8 F979
00:0000C4DA FD79
00:0000C4DC D000
                            	  3539: 
                            	  3540: ; "X" rock
                            	  3541: 
                            	  3542: rock_1
00:0000C4DE F10A            	  3543: 	dc.w	$F10A,$F17A,$F97D,$F57E,$F17E,$FD7D,$F679,$F67D
00:0000C4E0 F17A
00:0000C4E2 F97D
00:0000C4E4 F57E
00:0000C4E6 F17E
00:0000C4E8 FD7D
00:0000C4EA F679
00:0000C4EC F67D
00:0000C4EE FD79            	  3544: 	dc.w	$FD79,$F179,$F58B,$F38A,$F97D,RTSL
00:0000C4F0 F179
00:0000C4F2 F58B
00:0000C4F4 F38A
00:0000C4F6 F97D
00:0000C4F8 D000
                            	  3545: 
                            	  3546: ; bottom and left notch rock
                            	  3547: 
                            	  3548: rock_2
00:0000C4FA F80D            	  3549: 	dc.w	$F80D,$F57E,$F77A,$F37A,$F778,$F879,$F37A,$F978
00:0000C4FC F57E
00:0000C4FE F77A
00:0000C500 F37A
00:0000C502 F778
00:0000C504 F879
00:0000C506 F37A
00:0000C508 F978
00:0000C50A F37E            	  3550: 	dc.w	$F37E,$F07F,$F77F,$F57A,RTSL
00:0000C50C F07F
00:0000C50E F77F
00:0000C510 F57A
00:0000C512 D000
                            	  3551: 
                            	  3552: ; left and right notch rock
                            	  3553: 
                            	  3554: rock_3
00:0000C514 F009            	  3555: 	dc.w	$F009,$F17B,$F168,$F27F,$F07F,$F669,$F07F,$F778
00:0000C516 F17B
00:0000C518 F168
00:0000C51A F27F
00:0000C51C F07F
00:0000C51E F669
00:0000C520 F07F
00:0000C522 F778
00:0000C524 F77A            	  3556: 	dc.w	$F77A,$F17B,$F569,$F969,$F27F,RTSL
00:0000C526 F17B
00:0000C528 F569
00:0000C52A F969
00:0000C52C F27F
00:0000C52E D000
                            	  3557: 
                            	  3558: ; indirect saucer table
                            	  3559: 
                            	  3560: sauc_jsr
00:0000C530 C8CD            	  3561: 	dc.w	JSRL+(sauc_vec-vector)>>1	; saucer
                            	  3562: 
                            	  3563: ; saucer
                            	  3564: 
                            	  3565: sauc_vec
00:0000C532 F10E            	  3566: 	dc.w	$F10E,$F8CA,$F60B,$6000,$D680,$F6DB,$F8CA,$F2DB
00:0000C534 F8CA
00:0000C536 F60B
00:0000C538 6000
00:0000C53A D680
00:0000C53C F6DB
00:0000C53E F8CA
00:0000C540 F2DB
00:0000C542 F2DF            	  3567: 	dc.w	$F2DF,$F2CD,$F8CD,$F6CD,$F6DF,RTSL
00:0000C544 F2CD
00:0000C546 F8CD
00:0000C548 F6CD
00:0000C54A F6DF
00:0000C54C D000
                            	  3568: 
                            	  3569: ; player ship address table
                            	  3570: 
                            	  3571: play_tab
00:0000C54E 0022            	  3572: 	dc.w	play_00-play_tab
00:0000C550 003A            	  3573: 	dc.w	play_01-play_tab
00:0000C552 005E            	  3574: 	dc.w	play_02-play_tab
00:0000C554 0082            	  3575: 	dc.w	play_03-play_tab
00:0000C556 00A6            	  3576: 	dc.w	play_04-play_tab
00:0000C558 00C8            	  3577: 	dc.w	play_05-play_tab
00:0000C55A 00EC            	  3578: 	dc.w	play_06-play_tab
00:0000C55C 0110            	  3579: 	dc.w	play_07-play_tab
00:0000C55E 0134            	  3580: 	dc.w	play_08-play_tab
00:0000C560 0158            	  3581: 	dc.w	play_09-play_tab
00:0000C562 017C            	  3582: 	dc.w	play_0A-play_tab
00:0000C564 01A0            	  3583: 	dc.w	play_0B-play_tab
00:0000C566 01C4            	  3584: 	dc.w	play_0C-play_tab
00:0000C568 01E8            	  3585: 	dc.w	play_0D-play_tab
00:0000C56A 020C            	  3586: 	dc.w	play_0E-play_tab
00:0000C56C 0230            	  3587: 	dc.w	play_0F-play_tab
00:0000C56E 0254            	  3588: 	dc.w	play_10-play_tab
                            	  3589: 
                            	  3590: ; ship and thrust outlines. each ship outline is followed by its thrust outline which
                            	  3591: ; is only copied if the thrust button is pressed
                            	  3592: 
                            	  3593: play_00
00:0000C570 F60F            	  3594: 	dc.w	$F60F,$FAC8,$F9BD,$6500,$C300,$6500,$C700,$F9B9
00:0000C572 FAC8
00:0000C574 F9BD
00:0000C576 6500
00:0000C578 C300
00:0000C57A 6500
00:0000C57C C700
00:0000C57E F9B9
00:0000C580 D000            	  3595: 	dc.w	RTSL
00:0000C582 F9CE            	  3596: 	dc.w	$F9CE,$F9CA,RTSL
00:0000C584 F9CA
00:0000C586 D000
                            	  3597: play_01
00:0000C588 4640            	  3598: 	dc.w	$4640,$06C0,$5200,$C430,$41C0,$C620,$64B0,$C318
00:0000C58A 06C0
00:0000C58C 5200
00:0000C58E C430
00:0000C590 41C0
00:0000C592 C620
00:0000C594 64B0
00:0000C596 C318
00:0000C598 6548            	  3599: 	dc.w	$6548,$C6E0,$4220,$C1C0,RTSL
00:0000C59A C6E0
00:0000C59C 4220
00:0000C59E C1C0
00:0000C5A0 D000
00:0000C5A2 50D0            	  3600: 	dc.w	$50D0,$C610,$4260,$C3C0,RTSL
00:0000C5A4 C610
00:0000C5A6 4260
00:0000C5A8 C3C0
00:0000C5AA D000
                            	  3601: play_02
00:0000C5AC 4680            	  3602: 	dc.w	$4680,$0680,$43E0,$C4C0,$41A0,$C660,$6468,$C320
00:0000C5AE 0680
00:0000C5B0 43E0
00:0000C5B2 C4C0
00:0000C5B4 41A0
00:0000C5B6 C660
00:0000C5B8 6468
00:0000C5BA C320
00:0000C5BC 6590            	  3603: 	dc.w	$6590,$C6C0,$4260,$C1A0,RTSL
00:0000C5BE C6C0
00:0000C5C0 4260
00:0000C5C2 C1A0
00:0000C5C4 D000
00:0000C5C6 5090            	  3604: 	dc.w	$5090,$C630,$42C0,$C380,RTSL
00:0000C5C8 C630
00:0000C5CA 42C0
00:0000C5CC C380
00:0000C5CE D000
                            	  3605: play_03
00:0000C5D0 46C0            	  3606: 	dc.w	$46C0,$0640,$43E0,$C520,$4160,$C680,$6418,$C328
00:0000C5D2 0640
00:0000C5D4 43E0
00:0000C5D6 C520
00:0000C5D8 4160
00:0000C5DA C680
00:0000C5DC 6418
00:0000C5DE C328
00:0000C5E0 65D0            	  3607: 	dc.w	$65D0,$C698,$4280,$C160,RTSL
00:0000C5E2 C698
00:0000C5E4 4280
00:0000C5E6 C160
00:0000C5E8 D000
00:0000C5EA 5060            	  3608: 	dc.w	$5060,$C630,$4320,$C340,RTSL
00:0000C5EC C630
00:0000C5EE 4320
00:0000C5F0 C340
00:0000C5F2 D000
                            	  3609: play_04
00:0000C5F4 F70E            	  3610: 	dc.w	$F70E,$43C0,$C580,$4120,$C6A0,$6038,$C328,$6610
00:0000C5F6 43C0
00:0000C5F8 C580
00:0000C5FA 4120
00:0000C5FC C6A0
00:0000C5FE 6038
00:0000C600 C328
00:0000C602 6610
00:0000C604 C660            	  3611: 	dc.w	$C660,$42A0,$C120,RTSL
00:0000C606 42A0
00:0000C608 C120
00:0000C60A D000
00:0000C60C 5030            	  3612: 	dc.w	$5030,$C640,$4360,$C2E0,RTSL
00:0000C60E C640
00:0000C610 4360
00:0000C612 C2E0
00:0000C614 D000
                            	  3613: play_05
00:0000C616 4720            	  3614: 	dc.w	$4720,$05C0,$4380,$C5E0,$40E0,$C6C0,$6088,$C320
00:0000C618 05C0
00:0000C61A 4380
00:0000C61C C5E0
00:0000C61E 40E0
00:0000C620 C6C0
00:0000C622 6088
00:0000C624 C320
00:0000C626 6648            	  3615: 	dc.w	$6648,$C630,$42C0,$C0E0,RTSL
00:0000C628 C630
00:0000C62A 42C0
00:0000C62C C0E0
00:0000C62E D000
00:0000C630 5410            	  3616: 	dc.w	$5410,$C640,$43A0,$C2A0,RTSL
00:0000C632 C640
00:0000C634 43A0
00:0000C636 C2A0
00:0000C638 D000
                            	  3617: play_06
00:0000C63A 4760            	  3618: 	dc.w	$4760,$0560,$4360,$C640,$4080,$C6C0,$60D8,$C310
00:0000C63C 0560
00:0000C63E 4360
00:0000C640 C640
00:0000C642 4080
00:0000C644 C6C0
00:0000C646 60D8
00:0000C648 C310
00:0000C64A 6680            	  3619: 	dc.w	$6680,$C5F0,$42C0,$C080,RTSL
00:0000C64C C5F0
00:0000C64E 42C0
00:0000C650 C080
00:0000C652 D000
00:0000C654 5440            	  3620: 	dc.w	$5440,$C630,$43E0,$C240,RTSL
00:0000C656 C630
00:0000C658 43E0
00:0000C65A C240
00:0000C65C D000
                            	  3621: play_07
00:0000C65E 4780            	  3622: 	dc.w	$4780,$0500,$4320,$C680,$4040,$C6E0,$6120,$C2F8
00:0000C660 0500
00:0000C662 4320
00:0000C664 C680
00:0000C666 4040
00:0000C668 C6E0
00:0000C66A 6120
00:0000C66C C2F8
00:0000C66E 66B0            	  3623: 	dc.w	$66B0,$C5B0,$42E0,$C040,RTSL
00:0000C670 C5B0
00:0000C672 42E0
00:0000C674 C040
00:0000C676 D000
00:0000C678 5480            	  3624: 	dc.w	$5480,$C630,$5210,$C0F0,RTSL
00:0000C67A C630
00:0000C67C 5210
00:0000C67E C0F0
00:0000C680 D000
                            	  3625: play_08
00:0000C682 4780            	  3626: 	dc.w	$4780,$04C0,$42E0,$C6E0,$4000,$C6E0,$6168,$C2D8
00:0000C684 04C0
00:0000C686 42E0
00:0000C688 C6E0
00:0000C68A 4000
00:0000C68C C6E0
00:0000C68E 6168
00:0000C690 C2D8
00:0000C692 66D8            	  3627: 	dc.w	$66D8,$C568,$42E0,$C000,RTSL
00:0000C694 C568
00:0000C696 42E0
00:0000C698 C000
00:0000C69A D000
00:0000C69C 54B0            	  3628: 	dc.w	$54B0,$C620,$5220,$C0B0,RTSL
00:0000C69E C620
00:0000C6A0 5220
00:0000C6A2 C0B0
00:0000C6A4 D000
                            	  3629: play_09
00:0000C6A6 47A0            	  3630: 	dc.w	$47A0,$0460,$4280,$C720,$4440,$C6E0,$61B0,$C2B0
00:0000C6A8 0460
00:0000C6AA 4280
00:0000C6AC C720
00:0000C6AE 4440
00:0000C6B0 C6E0
00:0000C6B2 61B0
00:0000C6B4 C2B0
00:0000C6B6 66F8            	  3631: 	dc.w	$66F8,$C520,$42E0,$C440,RTSL
00:0000C6B8 C520
00:0000C6BA 42E0
00:0000C6BC C440
00:0000C6BE D000
00:0000C6C0 54F0            	  3632: 	dc.w	$54F0,$C610,$5230,$C080,RTSL
00:0000C6C2 C610
00:0000C6C4 5230
00:0000C6C6 C080
00:0000C6C8 D000
                            	  3633: play_0A
00:0000C6CA 47A0            	  3634: 	dc.w	$47A0,$0000,$4240,$C760,$4480,$C6C0,$61F0,$C280
00:0000C6CC 0000
00:0000C6CE 4240
00:0000C6D0 C760
00:0000C6D2 4480
00:0000C6D4 C6C0
00:0000C6D6 61F0
00:0000C6D8 C280
00:0000C6DA 6710            	  3635: 	dc.w	$6710,$C4D8,$42C0,$C480,RTSL
00:0000C6DC C4D8
00:0000C6DE 42C0
00:0000C6E0 C480
00:0000C6E2 D000
00:0000C6E4 4640            	  3636: 	dc.w	$4640,$C7E0,$5230,$C040,RTSL
00:0000C6E6 C7E0
00:0000C6E8 5230
00:0000C6EA C040
00:0000C6EC D000
                            	  3637: play_0B
00:0000C6EE 47A0            	  3638: 	dc.w	$47A0,$0060,$41E0,$C780,$44E0,$C6C0,$6230,$C248
00:0000C6F0 0060
00:0000C6F2 41E0
00:0000C6F4 C780
00:0000C6F6 44E0
00:0000C6F8 C6C0
00:0000C6FA 6230
00:0000C6FC C248
00:0000C6FE 6720            	  3639: 	dc.w	$6720,$C488,$42C0,$C4E0,RTSL
00:0000C700 C488
00:0000C702 42C0
00:0000C704 C4E0
00:0000C706 D000
00:0000C708 46A0            	  3640: 	dc.w	$46A0,$C7A0,$5240,$C010,RTSL
00:0000C70A C7A0
00:0000C70C 5240
00:0000C70E C010
00:0000C710 D000
                            	  3641: play_0C
00:0000C712 4780            	  3642: 	dc.w	$4780,$00C0,$4180,$C7C0,$4520,$C6A0,$6260,$C210
00:0000C714 00C0
00:0000C716 4180
00:0000C718 C7C0
00:0000C71A 4520
00:0000C71C C6A0
00:0000C71E 6260
00:0000C720 C210
00:0000C722 6728            	  3643: 	dc.w	$6728,$C438,$42A0,$C520,RTSL
00:0000C724 C438
00:0000C726 42A0
00:0000C728 C520
00:0000C72A D000
00:0000C72C 46E0            	  3644: 	dc.w	$46E0,$C760,$5240,$C430,RTSL
00:0000C72E C760
00:0000C730 5240
00:0000C732 C430
00:0000C734 D000
                            	  3645: play_0D
00:0000C736 4780            	  3646: 	dc.w	$4780,$0100,$4120,$C7E0,$4560,$C680,$6298,$C1D0
00:0000C738 0100
00:0000C73A 4120
00:0000C73C C7E0
00:0000C73E 4560
00:0000C740 C680
00:0000C742 6298
00:0000C744 C1D0
00:0000C746 6728            	  3647: 	dc.w	$6728,$C018,$4280,$C560,RTSL
00:0000C748 C018
00:0000C74A 4280
00:0000C74C C560
00:0000C74E D000
00:0000C750 4740            	  3648: 	dc.w	$4740,$C720,$5230,$C460,RTSL
00:0000C752 C720
00:0000C754 5230
00:0000C756 C460
00:0000C758 D000
                            	  3649: play_0E
00:0000C75A 4760            	  3650: 	dc.w	$4760,$0160,$40C0,$C7E0,$45A0,$C660,$62C0,$C190
00:0000C75C 0160
00:0000C75E 40C0
00:0000C760 C7E0
00:0000C762 45A0
00:0000C764 C660
00:0000C766 62C0
00:0000C768 C190
00:0000C76A 6720            	  3651: 	dc.w	$6720,$C068,$4260,$C5A0,RTSL
00:0000C76C C068
00:0000C76E 4260
00:0000C770 C5A0
00:0000C772 D000
00:0000C774 4780            	  3652: 	dc.w	$4780,$C6C0,$5230,$C490,RTSL
00:0000C776 C6C0
00:0000C778 5230
00:0000C77A C490
00:0000C77C D000
                            	  3653: play_0F
00:0000C77E 4720            	  3654: 	dc.w	$4720,$01C0,$5030,$C600,$45C0,$C620,$62E0,$C148
00:0000C780 01C0
00:0000C782 5030
00:0000C784 C600
00:0000C786 45C0
00:0000C788 C620
00:0000C78A 62E0
00:0000C78C C148
00:0000C78E 6718            	  3655: 	dc.w	$6718,$C0B0,$4220,$C5C0,RTSL
00:0000C790 C0B0
00:0000C792 4220
00:0000C794 C5C0
00:0000C796 D000
00:0000C798 47C0            	  3656: 	dc.w	$47C0,$C660,$5210,$C4D0,RTSL
00:0000C79A C660
00:0000C79C 5210
00:0000C79E C4D0
00:0000C7A0 D000
                            	  3657: play_10
00:0000C7A2 F70A            	  3658: 	dc.w	$F70A,$F8CE,$FDCD,$6300,$C100,$6700,$C100,$F9CD
00:0000C7A4 F8CE
00:0000C7A6 FDCD
00:0000C7A8 6300
00:0000C7AA C100
00:0000C7AC 6700
00:0000C7AE C100
00:0000C7B0 F9CD
00:0000C7B2 D000            	  3659: 	dc.w	RTSL
00:0000C7B4 FECD            	  3660: 	dc.w	$FECD,$FACD,RTSL
00:0000C7B6 FACD
00:0000C7B8 D000
                            	  3661: 
                            	  3662: ; ship outline for player lives
                            	  3663: 
                            	  3664: play_liv
00:0000C7BA F70E            	  3665: 	dc.w	$F70E,$F87A,$FD79,$6300,$7500,$6700,$7500,$F979
00:0000C7BC F87A
00:0000C7BE FD79
00:0000C7C0 6300
00:0000C7C2 7500
00:0000C7C4 6700
00:0000C7C6 7500
00:0000C7C8 F979
00:0000C7CA 60C0            	  3666: 	dc.w	$60C0,$0280,$D09F
00:0000C7CC 0280
00:0000C7CE D09F
                            	  3667: 
                            	  3668: ; character set
                            	  3669: 
                            	  3670: char_a						; A
00:0000C7D0 FA70            	  3671: 	dc.w	$FA70,$F272,$F672,$FE70
00:0000C7D2 F272
00:0000C7D4 F672
00:0000C7D6 FE70
00:0000C7D8 F906            	  3672: 	dc.w	$F906,$F872,$F602,RTSL
00:0000C7DA F872
00:0000C7DC F602
00:0000C7DE D000
                            	  3673: char_b						; B
00:0000C7E0 FB70            	  3674: 	dc.w	$FB70,$F073,$F571,$F570
00:0000C7E2 F073
00:0000C7E4 F571
00:0000C7E6 F570
00:0000C7E8 F575            	  3675: 	dc.w	$F575,$F077,$F003,$F571
00:0000C7EA F077
00:0000C7EC F003
00:0000C7EE F571
00:0000C7F0 F570            	  3676: 	dc.w	$F570,$F575,$F077,$F803,RTSL
00:0000C7F2 F575
00:0000C7F4 F077
00:0000C7F6 F803
00:0000C7F8 D000
                            	  3677: char_c						; C
00:0000C7FA FB70            	  3678: 	dc.w	$FB70,$F872,$FF06,$F872
00:0000C7FC F872
00:0000C7FE FF06
00:0000C800 F872
00:0000C802 F002            	  3679: 	dc.w	$F002,RTSL
00:0000C804 D000
                            	  3680: char_d						; D
00:0000C806 FB70            	  3681: 	dc.w	$FB70,$F072,$F672,$F670
00:0000C808 F072
00:0000C80A F672
00:0000C80C F670
00:0000C80E F676            	  3682: 	dc.w	$F676,$F076,$F803,RTSL
00:0000C810 F076
00:0000C812 F803
00:0000C814 D000
                            	  3683: char_e						; E
00:0000C816 FB70            	  3684: 	dc.w	$FB70,$F872,$F705,$F077
00:0000C818 F872
00:0000C81A F705
00:0000C81C F077
00:0000C81E F700            	  3685: 	dc.w	$F700,$F872,$F002,RTSL
00:0000C820 F872
00:0000C822 F002
00:0000C824 D000
                            	  3686: char_f						; F
00:0000C826 FB70            	  3687: 	dc.w	$FB70,$F872,$F705,$F077
00:0000C828 F872
00:0000C82A F705
00:0000C82C F077
00:0000C82E F700            	  3688: 	dc.w	$F700,$F803,RTSL
00:0000C830 F803
00:0000C832 D000
                            	  3689: char_g						; G
00:0000C834 FB70            	  3690: 	dc.w	$FB70,$F872,$F670,$F606
00:0000C836 F872
00:0000C838 F670
00:0000C83A F606
00:0000C83C F072            	  3691: 	dc.w	$F072,$F670,$F876,$F803
00:0000C83E F670
00:0000C840 F876
00:0000C842 F803
00:0000C844 D000            	  3692: 	dc.w	RTSL
                            	  3693: char_h						; H
00:0000C846 FB70            	  3694: 	dc.w	$FB70,$F700,$F872,$F300
00:0000C848 F700
00:0000C84A F872
00:0000C84C F300
00:0000C84E FF70            	  3695: 	dc.w	$FF70,$F002,RTSL
00:0000C850 F002
00:0000C852 D000
                            	  3696: char_i						; I
00:0000C854 F872            	  3697: 	dc.w	$F872,$F006,$FB70,$F002
00:0000C856 F006
00:0000C858 FB70
00:0000C85A F002
00:0000C85C F876            	  3698: 	dc.w	$F876,$FF03,RTSL
00:0000C85E FF03
00:0000C860 D000
                            	  3699: char_j						; J
00:0000C862 F200            	  3700: 	dc.w	$F200,$F672,$F072,$FB70
00:0000C864 F672
00:0000C866 F072
00:0000C868 FB70
00:0000C86A FF01            	  3701: 	dc.w	$FF01,RTSL
00:0000C86C D000
                            	  3702: char_k						; K
00:0000C86E FB70            	  3703: 	dc.w	$FB70,$F003,$F777,$F773
00:0000C870 F003
00:0000C872 F777
00:0000C874 F773
00:0000C876 F003            	  3704: 	dc.w	$F003,RTSL
00:0000C878 D000
                            	  3705: char_l						; L
00:0000C87A FB00            	  3706: 	dc.w	$FB00,$FF70,$F872,$F002,RTSL
00:0000C87C FF70
00:0000C87E F872
00:0000C880 F002
00:0000C882 D000
                            	  3707: char_m						; M
00:0000C884 FB70            	  3708: 	dc.w	$FB70,$F672,$F272,$FF70
00:0000C886 F672
00:0000C888 F272
00:0000C88A FF70
00:0000C88C F002            	  3709: 	dc.w	$F002,RTSL
00:0000C88E D000
                            	  3710: char_n						; N
00:0000C890 FB70            	  3711: 	dc.w	$FB70,$FF72,$FB70,$FF01,RTSL
00:0000C892 FF72
00:0000C894 FB70
00:0000C896 FF01
00:0000C898 D000
                            	  3712: char_o0						; O,0
00:0000C89A FB70            	  3713: 	dc.w	$FB70,$F872,$FF70,$F876
00:0000C89C F872
00:0000C89E FF70
00:0000C8A0 F876
00:0000C8A2 F803            	  3714: 	dc.w	$F803,RTSL
00:0000C8A4 D000
                            	  3715: char_p						; P
00:0000C8A6 FB70            	  3716: 	dc.w	$FB70,$F872,$F770,$F876
00:0000C8A8 F872
00:0000C8AA F770
00:0000C8AC F876
00:0000C8AE F703            	  3717: 	dc.w	$F703,$F003,RTSL
00:0000C8B0 F003
00:0000C8B2 D000
                            	  3718: char_q						; Q
00:0000C8B4 FB70            	  3719: 	dc.w	$FB70,$F872,$FE70,$F676
00:0000C8B6 F872
00:0000C8B8 FE70
00:0000C8BA F676
00:0000C8BC F076            	  3720: 	dc.w	$F076,$F202,$F672,$F002
00:0000C8BE F202
00:0000C8C0 F672
00:0000C8C2 F002
00:0000C8C4 D000            	  3721: 	dc.w	RTSL
                            	  3722: char_r						; R
00:0000C8C6 FB70            	  3723: 	dc.w	$FB70,$F872,$F770,$F876
00:0000C8C8 F872
00:0000C8CA F770
00:0000C8CC F876
00:0000C8CE F001            	  3724: 	dc.w	$F001,$F773,$F002,RTSL
00:0000C8D0 F773
00:0000C8D2 F002
00:0000C8D4 D000
                            	  3725: char_s						; S
00:0000C8D6 F872            	  3726: 	dc.w	$F872,$F370,$F876,$F370
00:0000C8D8 F370
00:0000C8DA F876
00:0000C8DC F370
00:0000C8DE F872            	  3727: 	dc.w	$F872,$FF01,RTSL
00:0000C8E0 FF01
00:0000C8E2 D000
                            	  3728: char_t						; T
00:0000C8E4 F002            	  3729: 	dc.w	$F002,$FB70,$F006,$F872
00:0000C8E6 FB70
00:0000C8E8 F006
00:0000C8EA F872
00:0000C8EC FF01            	  3730: 	dc.w	$FF01,RTSL
00:0000C8EE D000
                            	  3731: char_u						; U
00:0000C8F0 FB00            	  3732: 	dc.w	$FB00,$FF70,$F872,$FB70
00:0000C8F2 FF70
00:0000C8F4 F872
00:0000C8F6 FB70
00:0000C8F8 FF01            	  3733: 	dc.w	$FF01,RTSL
00:0000C8FA D000
                            	  3734: char_v						; V
00:0000C8FC FB00            	  3735: 	dc.w	$FB00,$FF71,$FB71,$FF01,RTSL
00:0000C8FE FF71
00:0000C900 FB71
00:0000C902 FF01
00:0000C904 D000
                            	  3736: char_w						; W
00:0000C906 FB00            	  3737: 	dc.w	$FB00,$FF70,$F272,$F672
00:0000C908 FF70
00:0000C90A F272
00:0000C90C F672
00:0000C90E FB70            	  3738: 	dc.w	$FB70,$FF01,RTSL
00:0000C910 FF01
00:0000C912 D000
                            	  3739: char_x						; X
00:0000C914 FB72            	  3740: 	dc.w	$FB72,$F806,$FF72,$F002,RTSL
00:0000C916 F806
00:0000C918 FF72
00:0000C91A F002
00:0000C91C D000
                            	  3741: char_y						; Y
00:0000C91E F002            	  3742: 	dc.w	$F002,$FA70,$F276,$F802
00:0000C920 FA70
00:0000C922 F276
00:0000C924 F802
00:0000C926 F676            	  3743: 	dc.w	$F676,$FE02,RTSL
00:0000C928 FE02
00:0000C92A D000
                            	  3744: char_z						; Z
00:0000C92C FB00            	  3745: 	dc.w	$FB00,$F872,$FF76,$F872
00:0000C92E F872
00:0000C930 FF76
00:0000C932 F872
00:0000C934 F002            	  3746: 	dc.w	$F002,RTSL
00:0000C936 D000
                            	  3747: char_spc						; [SPACE]
00:0000C938 F803            	  3748: 	dc.w	$F803,RTSL
00:0000C93A D000
                            	  3749: char_1						; 1
00:0000C93C F002            	  3750: 	dc.w	$F002,$FB70,$FF02,RTSL
00:0000C93E FB70
00:0000C940 FF02
00:0000C942 D000
                            	  3751: char_2						; 2
00:0000C944 FB00            	  3752: 	dc.w	$FB00,$F872,$F770,$F876
00:0000C946 F872
00:0000C948 F770
00:0000C94A F876
00:0000C94C F770            	  3753: 	dc.w	$F770,$F872,$F002,RTSL
00:0000C94E F872
00:0000C950 F002
00:0000C952 D000
                            	  3754: char_3						; 3
00:0000C954 F872            	  3755: 	dc.w	$F872,$FB70,$F876,$F700
00:0000C956 FB70
00:0000C958 F876
00:0000C95A F700
00:0000C95C F872            	  3756: 	dc.w	$F872,$F702,RTSL
00:0000C95E F702
00:0000C960 D000
                            	  3757: char_4						; 4
00:0000C962 FB00            	  3758: 	dc.w	$FB00,$F770,$F872,$F300
00:0000C964 F770
00:0000C966 F872
00:0000C968 F300
00:0000C96A FF70            	  3759: 	dc.w	$FF70,$F002,RTSL
00:0000C96C F002
00:0000C96E D000
                            	  3760: char_5						; 6
00:0000C970 F872            	  3761: 	dc.w	$F872,$F370,$F876,$F370
00:0000C972 F370
00:0000C974 F876
00:0000C976 F370
00:0000C978 F872            	  3762: 	dc.w	$F872,$FF01,RTSL
00:0000C97A FF01
00:0000C97C D000
                            	  3763: char_6						; 6
00:0000C97E F300            	  3764: 	dc.w	$F300,$F872,$F770,$F876
00:0000C980 F872
00:0000C982 F770
00:0000C984 F876
00:0000C986 FB70            	  3765: 	dc.w	$FB70,$FF03,RTSL
00:0000C988 FF03
00:0000C98A D000
                            	  3766: char_7						; 7
00:0000C98C FB00            	  3767: 	dc.w	$FB00,$F872,$FF70,$F002,RTSL
00:0000C98E F872
00:0000C990 FF70
00:0000C992 F002
00:0000C994 D000
                            	  3768: char_8						; 8
00:0000C996 F872            	  3769: 	dc.w	$F872,$FB70,$F876,$FF70
00:0000C998 FB70
00:0000C99A F876
00:0000C99C FF70
00:0000C99E F300            	  3770: 	dc.w	$F300,$F872,$F702,RTSL
00:0000C9A0 F872
00:0000C9A2 F702
00:0000C9A4 D000
                            	  3771: char_9						; 9
00:0000C9A6 F802            	  3772: 	dc.w	$F802,$FB70,$F876,$F770
00:0000C9A8 FB70
00:0000C9AA F876
00:0000C9AC F770
00:0000C9AE F872            	  3773: 	dc.w	$F872,$F702,RTSL
00:0000C9B0 F702
00:0000C9B2 D000
                            	  3774: 
                            	  3775: ; indirect table for character set
                            	  3776: 
                            	  3777: char_set
00:0000C9B4 CAD0            	  3778: 	dc.w	JSRL+(char_spc-vector)>>1	; [SPACE]
00:0000C9B6 CA81            	  3779: 	dc.w	JSRL+(char_o0-vector)>>1	; 0 also O
00:0000C9B8 CAD2            	  3780: 	dc.w	JSRL+(char_1-vector)>>1		; 1
00:0000C9BA CAD6            	  3781: 	dc.w	JSRL+(char_2-vector)>>1		; 2
00:0000C9BC CADE            	  3782: 	dc.w	JSRL+(char_3-vector)>>1		; 3
00:0000C9BE CAE5            	  3783: 	dc.w	JSRL+(char_4-vector)>>1		; 4
00:0000C9C0 CAEC            	  3784: 	dc.w	JSRL+(char_5-vector)>>1		; 5
00:0000C9C2 CAF3            	  3785: 	dc.w	JSRL+(char_6-vector)>>1		; 6
00:0000C9C4 CAFA            	  3786: 	dc.w	JSRL+(char_7-vector)>>1		; 7
00:0000C9C6 CAFF            	  3787: 	dc.w	JSRL+(char_8-vector)>>1		; 8
00:0000C9C8 CB07            	  3788: 	dc.w	JSRL+(char_9-vector)>>1		; 9
00:0000C9CA CA1C            	  3789: 	dc.w	JSRL+(char_a-vector)>>1		; A
00:0000C9CC CA24            	  3790: 	dc.w	JSRL+(char_b-vector)>>1		; B
00:0000C9CE CA31            	  3791: 	dc.w	JSRL+(char_c-vector)>>1		; C
00:0000C9D0 CA37            	  3792: 	dc.w	JSRL+(char_d-vector)>>1		; D
00:0000C9D2 CA3F            	  3793: 	dc.w	JSRL+(char_e-vector)>>1		; E
00:0000C9D4 CA47            	  3794: 	dc.w	JSRL+(char_f-vector)>>1		; F
00:0000C9D6 CA4E            	  3795: 	dc.w	JSRL+(char_g-vector)>>1		; G
00:0000C9D8 CA57            	  3796: 	dc.w	JSRL+(char_h-vector)>>1		; H
00:0000C9DA CA5E            	  3797: 	dc.w	JSRL+(char_i-vector)>>1		; I
00:0000C9DC CA65            	  3798: 	dc.w	JSRL+(char_j-vector)>>1		; J
00:0000C9DE CA6B            	  3799: 	dc.w	JSRL+(char_k-vector)>>1		; K
00:0000C9E0 CA71            	  3800: 	dc.w	JSRL+(char_l-vector)>>1		; L
00:0000C9E2 CA76            	  3801: 	dc.w	JSRL+(char_m-vector)>>1		; M
00:0000C9E4 CA7C            	  3802: 	dc.w	JSRL+(char_n-vector)>>1		; N
00:0000C9E6 CA81            	  3803: 	dc.w	JSRL+(char_o0-vector)>>1	; O also 0
00:0000C9E8 CA87            	  3804: 	dc.w	JSRL+(char_p-vector)>>1		; P
00:0000C9EA CA8E            	  3805: 	dc.w	JSRL+(char_q-vector)>>1		; Q
00:0000C9EC CA97            	  3806: 	dc.w	JSRL+(char_r-vector)>>1		; R
00:0000C9EE CA9F            	  3807: 	dc.w	JSRL+(char_s-vector)>>1		; S
00:0000C9F0 CAA6            	  3808: 	dc.w	JSRL+(char_t-vector)>>1		; T
00:0000C9F2 CAAC            	  3809: 	dc.w	JSRL+(char_u-vector)>>1		; U
00:0000C9F4 CAB2            	  3810: 	dc.w	JSRL+(char_v-vector)>>1		; V
00:0000C9F6 CAB7            	  3811: 	dc.w	JSRL+(char_w-vector)>>1		; W
00:0000C9F8 CABE            	  3812: 	dc.w	JSRL+(char_x-vector)>>1		; X
00:0000C9FA CAC3            	  3813: 	dc.w	JSRL+(char_y-vector)>>1		; Y
00:0000C9FC CACA            	  3814: 	dc.w	JSRL+(char_z-vector)>>1		; Z
                            	  3815: 
                            	  3816: ; indirect shot table
                            	  3817: 
                            	  3818: shot_jsr
00:0000C9FE CB34            	  3819: 	dc.w	JSRL+(shot_vec-vector)>>1	; shot
                            	  3820: 
                            	  3821: ; shot vector object, a small cross of intensity $F
                            	  3822: 
                            	  3823: shot_vec
00:0000CA00 7420            	  3824: 	dc.w	$7420,$0000
00:0000CA02 0000
00:0000CA04 7040            	  3825: 	dc.w	$7040,$F000
00:0000CA06 F000
00:0000CA08 7420            	  3826: 	dc.w	$7420,$0420
00:0000CA0A 0420
00:0000CA0C 7000            	  3827: 	dc.w	$7000,$F040
00:0000CA0E F040
00:0000CA10 D000            	  3828: 	dc.w	RTSL
                            	  3829: 
                            	  3830: 
                            	  3831: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3832: ;
                            	  3833: ; canned messages
                            	  3834: 
                            	  3835: ; x,y co-ordinates for the message origins
                            	  3836: 
                            	  3837: mess_origin
00:0000CA12 0064            	  3838: 	dc.w	$0064,$00B6				; message 0 x,y
00:0000CA14 00B6
00:0000CA16 0064            	  3839: 	dc.w	$0064,$00B6				; message 1 x,y
00:0000CA18 00B6
00:0000CA1A 000C            	  3840: 	dc.w	$000C,$00AA				; message 2 x,y
00:0000CA1C 00AA
00:0000CA1E 000C            	  3841: 	dc.w	$000C,$00A2				; message 3 x,y
00:0000CA20 00A2
00:0000CA22 000C            	  3842: 	dc.w	$000C,$009A				; message 4 x,y
00:0000CA24 009A
00:0000CA26 000C            	  3843: 	dc.w	$000C,$0092				; message 5 x,y
00:0000CA28 0092
00:0000CA2A 0064            	  3844: 	dc.w	$0064,$00C6				; message 6 x,y
00:0000CA2C 00C6
00:0000CA2E 0064            	  3845: 	dc.w	$0064,$009D				; message 7 x,y
00:0000CA30 009D
                            	  3846: 
                            	  3847: ; message tables
                            	  3848: 
                            	  3849: mess_table
00:0000CA32 0008            	  3850: 	dc.w	e_messages-mess_table		; english
00:0000CA34 00C2            	  3851: 	dc.w	d_messages-mess_table		; german
00:0000CA36 019E            	  3852: 	dc.w	f_messages-mess_table		; french
00:0000CA38 026C            	  3853: 	dc.w	s_messages-mess_table		; spanish
                            	  3854: 
                            	  3855: ; message offset table
                            	  3856: 
                            	  3857: e_messages
00:0000CA3A 0010            	  3858: 	dc.w	e_mess_0-e_messages		; message 0
00:0000CA3C 001C            	  3859: 	dc.w	e_mess_1-e_messages		; message 1
00:0000CA3E 0024            	  3860: 	dc.w	e_mess_2-e_messages		; message 2
00:0000CA40 0046            	  3861: 	dc.w	e_mess_3-e_messages		; message 3
00:0000CA42 0061            	  3862: 	dc.w	e_mess_4-e_messages		; message 4
00:0000CA44 007E            	  3863: 	dc.w	e_mess_5-e_messages		; message 5
00:0000CA46 00A5            	  3864: 	dc.w	e_mess_6-e_messages		; message 6
00:0000CA48 00B0            	  3865: 	dc.w	e_mess_7-e_messages		; message 7
                            	  3866: 
                            	  3867: e_mess_0
00:0000CA4A 484947482053434F	  3868: 	dc.b	'HIGH SCORES',$00
00:0000CA52 524553
00:0000CA55 00
                            	  3869: e_mess_1
00:0000CA56 504C4159455220  	  3870: 	dc.b	'PLAYER ',$00
00:0000CA5D 00
                            	  3871: e_mess_2
00:0000CA5E 594F55522053434F	  3872: 	dc.b	'YOUR SCORE IS ONE OF THE TEN BEST',$00
00:0000CA66 5245204953204F4E
00:0000CA6E 45204F4620544845
00:0000CA76 2054454E20424553
00:0000CA7E 54
00:0000CA7F 00
                            	  3873: e_mess_3
00:0000CA80 504C454153452045	  3874: 	dc.b	'PLEASE ENTER YOUR INITIALS',$00
00:0000CA88 4E54455220594F55
00:0000CA90 5220494E49544941
00:0000CA98 4C53
00:0000CA9A 00
                            	  3875: e_mess_4
00:0000CA9B 5055534820524F54	  3876: 	dc.b	'PUSH ROTATE TO SELECT LETTER',$00
00:0000CAA3 41544520544F2053
00:0000CAAB 454C454354204C45
00:0000CAB3 54544552
00:0000CAB7 00
                            	  3877: e_mess_5
00:0000CAB8 5055534820485950	  3878: 	dc.b	'PUSH HYPERSPACE WHEN LETTER IS CORRECT',$00
00:0000CAC0 4552535041434520
00:0000CAC8 5748454E204C4554
00:0000CAD0 5445522049532043
00:0000CAD8 4F5252454354
00:0000CADE 00
                            	  3879: e_mess_6
00:0000CADF 5055534820535441	  3880: 	dc.b	'PUSH START',$00
00:0000CAE7 5254
00:0000CAE9 00
                            	  3881: e_mess_7
00:0000CAEA 47414D45204F5645	  3882: 	dc.b	'GAME OVER',$00
00:0000CAF2 52
00:0000CAF3 00
                            	  3883: 
                            	  3884: 	ds.w	0					; ensure even
                            	  3885: 
                            	  3886: ; german message offset table
                            	  3887: 
                            	  3888: d_messages
00:0000CAF4 0010            	  3889: 	dc.w	d_mess_0-d_messages		; message 0
00:0000CAF6 0020            	  3890: 	dc.w	d_mess_1-d_messages		; message 1
00:0000CAF8 0029            	  3891: 	dc.w	d_mess_2-d_messages		; message 2
00:0000CAFA 0050            	  3892: 	dc.w	d_mess_3-d_messages		; message 3
00:0000CAFC 0073            	  3893: 	dc.w	d_mess_4-d_messages		; message 4
00:0000CAFE 0096            	  3894: 	dc.w	d_mess_5-d_messages		; message 5
00:0000CB00 00BC            	  3895: 	dc.w	d_mess_6-d_messages		; message 6
00:0000CB02 00D2            	  3896: 	dc.w	d_mess_7-d_messages		; message 7
                            	  3897: 
                            	  3898: d_mess_0
00:0000CB04 484F454348535445	  3899: 	dc.b	'HOECHSTERGEBNIS',$00
00:0000CB0C 524745424E4953
00:0000CB13 00
                            	  3900: d_mess_1
00:0000CB14 535049454C455220	  3901: 	dc.b	'SPIELER ',$00
00:0000CB1C 00
                            	  3902: d_mess_2
00:0000CB1D 4948522045524745	  3903: 	dc.b	'IHR ERGEBNIS IST EINES DER ZEHN BESTEN',$00
00:0000CB25 424E495320495354
00:0000CB2D 2045494E45532044
00:0000CB35 4552205A45484E20
00:0000CB3D 42455354454E
00:0000CB43 00
                            	  3904: d_mess_3
00:0000CB44 4249545445204745	  3905: 	dc.b	'BITTE GEBEN SIE IHRE INITIALEN EIN',$00
00:0000CB4C 42454E2053494520
00:0000CB54 4948524520494E49
00:0000CB5C 5449414C454E2045
00:0000CB64 494E
00:0000CB66 00
                            	  3906: d_mess_4
00:0000CB67 5A55522042554348	  3907: 	dc.b	'ZUR BUCHSTABENWAHL ROTATE DRUECKEN',$00
00:0000CB6F 53544142454E5741
00:0000CB77 484C20524F544154
00:0000CB7F 452044525545434B
00:0000CB87 454E
00:0000CB89 00
                            	  3908: d_mess_5
00:0000CB8A 57454E4E20425543	  3909: 	dc.b	'WENN BUCHSTABE OK HYPERSPACE DRUECKEN',$00
00:0000CB92 485354414245204F
00:0000CB9A 4B20485950455253
00:0000CBA2 5041434520445255
00:0000CBAA 45434B454E
00:0000CBAF 00
                            	  3910: d_mess_6
00:0000CBB0 53544152544B4E4F	  3911: 	dc.b	'STARTKNOEPFE DRUECKEN',$00
00:0000CBB8 4550464520445255
00:0000CBC0 45434B454E
00:0000CBC5 00
                            	  3912: d_mess_7
00:0000CBC6 535049454C454E44	  3913: 	dc.b	'SPIELENDE',$00
00:0000CBCE 45
00:0000CBCF 00
                            	  3914: 
                            	  3915: 	ds.w	0					; ensure even
                            	  3916: 
                            	  3917: ; french message offset table
                            	  3918: 
                            	  3919: f_messages
00:0000CBD0 0010            	  3920: 	dc.w	f_mess_0-f_messages		; message 0
00:0000CBD2 001F            	  3921: 	dc.w	f_mess_1-f_messages		; message 1
00:0000CBD4 0026            	  3922: 	dc.w	f_mess_2-f_messages		; message 2
00:0000CBD6 004A            	  3923: 	dc.w	f_mess_3-f_messages		; message 3
00:0000CBD8 0063            	  3924: 	dc.w	f_mess_4-f_messages		; message 4
00:0000CBDA 0085            	  3925: 	dc.w	f_mess_5-f_messages		; message 5
00:0000CBDC 00AE            	  3926: 	dc.w	f_mess_6-f_messages		; message 6
00:0000CBDE 00C0            	  3927: 	dc.w	f_mess_7-f_messages		; message 7
                            	  3928: 
                            	  3929: f_mess_0
00:0000CBE0 4D45494C4C455552	  3930: 	dc.b	'MEILLEUR SCORE',$00
00:0000CBE8 2053434F5245
00:0000CBEE 00
                            	  3931: f_mess_1
00:0000CBEF 4A4F55455220    	  3932: 	dc.b	'JOUER ',$00
00:0000CBF5 00
                            	  3933: f_mess_2
00:0000CBF6 564F545245205343	  3934: 	dc.b	'VOTRE SCORE EST UN DES 10 MEILLEURS',$00
00:0000CBFE 4F52452045535420
00:0000CC06 554E204445532031
00:0000CC0E 30204D45494C4C45
00:0000CC16 555253
00:0000CC19 00
                            	  3935: f_mess_3
00:0000CC1A 53565020454E5452	  3936: 	dc.b	'SVP ENTREZ VOS INITIALES',$00
00:0000CC22 455A20564F532049
00:0000CC2A 4E495449414C4553
00:0000CC32 00
                            	  3937: f_mess_4
00:0000CC33 504F555353455A20	  3938: 	dc.b	'POUSSEZ ROTATE POUR VOS INITIALES',$00
00:0000CC3B 524F544154452050
00:0000CC43 4F555220564F5320
00:0000CC4B 494E495449414C45
00:0000CC53 53
00:0000CC54 00
                            	  3939: f_mess_5
00:0000CC55 504F555353455A20	  3940: 	dc.b	'POUSSEZ HYPERSPACE QUAND LETTRE CORRECTE',$00
00:0000CC5D 4859504552535041
00:0000CC65 4345205155414E44
00:0000CC6D 204C455454524520
00:0000CC75 434F525245435445
00:0000CC7D 00
                            	  3941: f_mess_6
00:0000CC7E 4150505559455220	  3942: 	dc.b	'APPUYER SUR START',$00
00:0000CC86 5355522053544152
00:0000CC8E 54
00:0000CC8F 00
                            	  3943: f_mess_7
00:0000CC90 46494E2044452050	  3944: 	dc.b	'FIN DE PARTIE',$00
00:0000CC98 4152544945
00:0000CC9D 00
                            	  3945: 
                            	  3946: 	ds.w	0					; ensure even
                            	  3947: 
                            	  3948: ; spanish message offset table
                            	  3949: 
                            	  3950: s_messages
00:0000CC9E 0010            	  3951: 	dc.w	s_mess_0-s_messages		; message 0
00:0000CCA0 0018            	  3952: 	dc.w	s_mess_1-s_messages		; message 1
00:0000CCA2 0021            	  3953: 	dc.w	s_mess_2-s_messages		; message 2
00:0000CCA4 0048            	  3954: 	dc.w	s_mess_3-s_messages		; message 3
00:0000CCA6 0066            	  3955: 	dc.w	s_mess_4-s_messages		; message 4
00:0000CCA8 008E            	  3956: 	dc.w	s_mess_5-s_messages		; message 5
00:0000CCAA 00A0            	  3957: 	dc.w	s_mess_6-s_messages		; message 6
00:0000CCAC 00AD            	  3958: 	dc.w	s_mess_7-s_messages		; message 7
                            	  3959: 
                            	  3960: s_mess_0
00:0000CCAE 5245434F524453  	  3961: 	dc.b	'RECORDS',$00
00:0000CCB5 00
                            	  3962: s_mess_1
00:0000CCB6 4A554741444F5220	  3963: 	dc.b	'JUGADOR ',$00
00:0000CCBE 00
                            	  3964: s_mess_2
00:0000CCBF 53552050554E5441	  3965: 	dc.b	'SU PUNTAJE ESTA ENTRE LOS DIEZ MEJORES',$00
00:0000CCC7 4A45204553544120
00:0000CCCF 454E545245204C4F
00:0000CCD7 53204449455A204D
00:0000CCDF 454A4F524553
00:0000CCE5 00
                            	  3966: s_mess_3
00:0000CCE6 504F52204641564F	  3967: 	dc.b	'POR FAVOR ENTRE SUS INICIALES',$00
00:0000CCEE 5220454E54524520
00:0000CCF6 53555320494E4943
00:0000CCFE 49414C4553
00:0000CD03 00
                            	  3968: s_mess_4
00:0000CD04 4F5052494D412052	  3969: 	dc.b	'OPRIMA ROTATE PARA SELECCIONAR LA LETRA',$00
00:0000CD0C 4F54415445205041
00:0000CD14 52412053454C4543
00:0000CD1C 43494F4E4152204C
00:0000CD24 41204C45545241
00:0000CD2B 00
                            	  3970: s_mess_5
00:0000CD2C 4F5052494D412048	  3971: 	dc.b	'OPRIMA HYPERSPACE',$00
00:0000CD34 5950455253504143
00:0000CD3C 45
00:0000CD3D 00
                            	  3972: s_mess_6
00:0000CD3E 50554C5341522053	  3973: 	dc.b	'PULSAR START',$00
00:0000CD46 54415254
00:0000CD4A 00
                            	  3974: s_mess_7
00:0000CD4B 4A5545474F205445	  3975: 	dc.b	'JUEGO TERMINADO',$00
00:0000CD53 524D494E41444F
00:0000CD5A 00
                            	  3976: 
                            	  3977: 	ds.w	0					; ensure even
                            	  3978: 
                            	  3979: 
                            	  3980: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3981: ;
                            	  3982: ; include files
                            	  3983: 
                            	  3984: 	INCLUDE	"games/asteroids/sounds.x68"

Source: "games\asteroids\sounds.x68"
                            	     1: *************************************************************************************
                            	     2: *														*
                            	     3: *	Sound routines V1.00. This is an include file for asteroids 1_0.x68		*
                            	     4: *														*
                            	     5: *	load the sounds, play an indexed sample. Uses the DirextX sound play and	*
                            	     6: *	requires EASy68K 3.7.10 beta or later.							*
                            	     7: *														*
                            	     8: *************************************************************************************
                            	     9: 
                            	    10: sfire_snd	EQU  0
                            	    11: pfire_snd	EQU  1
                            	    12: thrst_snd	EQU  2
                            	    13: smsau_snd	EQU  3
                            	    14: lgsau_snd	EQU  4
                            	    15: sexpl_snd	EQU  5
                            	    16: mexpl_snd	EQU  sexpl_snd+1
                            	    17: lexpl_snd	EQU  sexpl_snd+2
                            	    18: beat1_snd	EQU  8				* beat_2 must be beat_1 XOR 1
                            	    19: beat2_snd	EQU  9				* see above
                            	    20: extra_snd	EQU 10
                            	    21: 
                            	    22: 
                            	    23: *************************************************************************************
                            	    24: *
                            	    25: * initialise the sounds routine
                            	    26: 
                            	    27: sound_init
00:0000CD5C 422B0014        	    28: 	MOVE.b	#0,s_key(a3)		* clear the last [S] key status
00:0000CD60 177C00FF0015    	    29: 	MOVE.b	#-1,play_sound(a3)	* set the sound flag
                            	    30: 
00:0000CD66 43FA0098        	    31: 	LEA		beat1_sound(pc),a1	* point to the background beat sound file name
00:0000CD6A 7208            	    32: 	MOVEQ		#beat1_snd,d1		* index 10
00:0000CD6C 614E            	    33: 	BSR.s		load_sound			* load the sound into directx memory
                            	    34: 
00:0000CD6E 43FA00A2        	    35: 	LEA		beat2_sound(pc),a1	* point to the background beat sound file name
00:0000CD72 7209            	    36: 	MOVEQ		#beat2_snd,d1		* index 9
00:0000CD74 6146            	    37: 	BSR.s		load_sound			* load the sound into directx memory
                            	    38: 
00:0000CD76 43FA00AC        	    39: 	LEA		lexpl_sound(pc),a1	* point to the large explosion sound file name
00:0000CD7A 7207            	    40: 	MOVEQ		#lexpl_snd,d1		* index 8
00:0000CD7C 613E            	    41: 	BSR.s		load_sound			* load the sound into directx memory
                            	    42: 
00:0000CD7E 43FA00B9        	    43: 	LEA		mexpl_sound(pc),a1	* point to the medium explosion sound file name
00:0000CD82 7206            	    44: 	MOVEQ		#mexpl_snd,d1		* index 7
00:0000CD84 6136            	    45: 	BSR.s		load_sound			* load the sound into directx memory
                            	    46: 
00:0000CD86 43FA00C6        	    47: 	LEA		sexpl_sound(pc),a1	* point to the small explosion sound file name
00:0000CD8A 7205            	    48: 	MOVEQ		#sexpl_snd,d1		* index 6
00:0000CD8C 612E            	    49: 	BSR.s		load_sound			* load the sound into directx memory
                            	    50: 
00:0000CD8E 43FA00D3        	    51: 	LEA		extra_sound(pc),a1	* point to the extra life sound file name
00:0000CD92 720A            	    52: 	MOVEQ		#extra_snd,d1		* index 5
00:0000CD94 6126            	    53: 	BSR.s		load_sound			* load the sound into directx memory
                            	    54: 
00:0000CD96 43FA00E1        	    55: 	LEA		lgsau_sound(pc),a1	* point to the large saucer sound file name
00:0000CD9A 7204            	    56: 	MOVEQ		#lgsau_snd,d1		* index 4
00:0000CD9C 6124            	    57: 	BSR.s		load_old_sound		* load the sound into sound memory
                            	    58: 
00:0000CD9E 43FA00EE        	    59: 	LEA		smsau_sound(pc),a1	* point to the small saucer sound file name
00:0000CDA2 7203            	    60: 	MOVEQ		#smsau_snd,d1		* index 3
00:0000CDA4 611C            	    61: 	BSR.s		load_old_sound		* load the sound into directx memory
                            	    62: 
00:0000CDA6 43FA00FB        	    63: 	LEA		thrst_sound(pc),a1	* point to the ship thrust sound file name
00:0000CDAA 7202            	    64: 	MOVEQ		#thrst_snd,d1		* index 2
00:0000CDAC 610E            	    65: 	BSR.s		load_sound			* load the sound into directx memory
                            	    66: 
00:0000CDAE 43FA0106        	    67: 	LEA		pfire_sound(pc),a1	* point to the player fire sound file name
00:0000CDB2 7201            	    68: 	MOVEQ		#pfire_snd,d1		* index 1
00:0000CDB4 6106            	    69: 	BSR.s		load_sound			* load the sound into directx memory
                            	    70: 
00:0000CDB6 43FA0110        	    71: 	LEA		sfire_sound(pc),a1	* point to the saucer fire sound file name
00:0000CDBA 7200            	    72: 	MOVEQ		#sfire_snd,d1		* index 0
                            	    73: 
                            	    74: 
                            	    75: *************************************************************************************
                            	    76: *
                            	    77: * load the sound into directx memory
                            	    78: 
                            	    79: load_sound
00:0000CDBC 704A            	    80: 	MOVEQ		#74,d0			* load the sound into directx memory
00:0000CDBE 4E4F            	    81: 	TRAP		#15
                            	    82: 
00:0000CDC0 4E75            	    83: 	RTS
                            	    84: 
                            	    85: 
                            	    86: *************************************************************************************
                            	    87: *
                            	    88: * load the sound into sound memory
                            	    89: 
                            	    90: load_old_sound
00:0000CDC2 7047            	    91: 	MOVEQ		#71,d0			* load the sound into sound memory
00:0000CDC4 4E4F            	    92: 	TRAP		#15
                            	    93: 
00:0000CDC6 4E75            	    94: 	RTS
                            	    95: 
                            	    96: 
                            	    97: *************************************************************************************
                            	    98: *
                            	    99: * play a sound sample
                            	   100: 
                            	   101: play_sample
00:0000CDC8 4A2B001A        	   102: 	TST.b		num_players(a3)		* test the number of players in the game
00:0000CDCC 6718            	   103: 	BEQ.s		exit_play_sample		* if no players left just exit
                            	   104: 
00:0000CDCE 4A2B0015        	   105: 	TST.b		play_sound(a3)		* test the sound flag
00:0000CDD2 6712            	   106: 	BEQ.s		exit_play_sample		* if the sound is off just exit
                            	   107: 
00:0000CDD4 7048            	   108: 	MOVEQ		#72,d0			* play a sound from sound memory
00:0000CDD6 0C410003        	   109: 	CMPI.w	#smsau_snd,d1		* is it the small saucer sound
00:0000CDDA 6708            	   110: 	BEQ.s		old_sound_play		* if so go play it with the old player
                            	   111: 
00:0000CDDC 0C410004        	   112: 	CMPI.w	#lgsau_snd,d1		* is it the large saucer sound
00:0000CDE0 6702            	   113: 	BEQ.s		old_sound_play		* if so go play it with the old player
                            	   114: 
00:0000CDE2 704B            	   115: 	MOVEQ		#75,d0			* play a sound from directx memory
                            	   116: old_sound_play
00:0000CDE4 4E4F            	   117: 	TRAP		#15
                            	   118: 
                            	   119: exit_play_sample
00:0000CDE6 4E75            	   120: 	RTS
                            	   121: 
                            	   122: 
                            	   123: *************************************************************************************
                            	   124: *
                            	   125: * test the sound key
                            	   126: 
                            	   127: sound_key
00:0000CDE8 7253            	   128: 	MOVEQ		#$53,d1			* [][][][S] key
00:0000CDEA 7013            	   129: 	MOVEQ		#19,d0			* check for keypress
00:0000CDEC 4E4F            	   130: 	TRAP		#15
                            	   131: 
00:0000CDEE 102B0014        	   132: 	MOVE.b	s_key(a3),d0		* get the last key(s) state
00:0000CDF2 B300            	   133: 	EOR.b		d1,d0				* compare the result with the last key(s) state,
                            	   134: 							* each byte is now $FF if a key has changed or
                            	   135: 							* $00 if a key has not changed
00:0000CDF4 C001            	   136: 	AND.b		d1,d0				* make each byte $FF if key just pressed or
                            	   137: 							* $00 if key not just pressed
00:0000CDF6 B12B0015        	   138: 	EOR.b		d0,play_sound(a3)		* if key just pressed toggle the sound flag
00:0000CDFA 17410014        	   139: 	MOVE.b	d1,s_key(a3)		* save the last [S] key status
00:0000CDFE 4E75            	   140: 	RTS
                            	   141: 
                            	   142: 
                            	   143: *************************************************************************************
                            	   144: *
                            	   145: * sound file names
                            	   146: 
                            	   147: beat1_sound
00:0000CE00 73616D706C65735C	   148: 	dc.b	'samples\beat1.wav',$00		* background beat sound
00:0000CE08 62656174312E7761
00:0000CE10 76
00:0000CE11 00
                            	   149: 
                            	   150: beat2_sound
00:0000CE12 73616D706C65735C	   151: 	dc.b	'samples\beat2.wav',$00		* background beat sound
00:0000CE1A 62656174322E7761
00:0000CE22 76
00:0000CE23 00
                            	   152: 
                            	   153: lexpl_sound
00:0000CE24 73616D706C65735C	   154: 	dc.b	'samples\lexplode.wav',$00	* large explosion sound
00:0000CE2C 6C6578706C6F6465
00:0000CE34 2E776176
00:0000CE38 00
                            	   155: 
                            	   156: mexpl_sound
00:0000CE39 73616D706C65735C	   157: 	dc.b	'samples\mexplode.wav',$00	* medium explosion sound
00:0000CE41 6D6578706C6F6465
00:0000CE49 2E776176
00:0000CE4D 00
                            	   158: 
                            	   159: sexpl_sound
00:0000CE4E 73616D706C65735C	   160: 	dc.b	'samples\sexplode.wav',$00	* small explosion sound
00:0000CE56 736578706C6F6465
00:0000CE5E 2E776176
00:0000CE62 00
                            	   161: 
                            	   162: extra_sound
00:0000CE63 73616D706C65735C	   163: 	dc.b	'samples\extraship.wav',$00	* extra life sound
00:0000CE6B 6578747261736869
00:0000CE73 702E776176
00:0000CE78 00
                            	   164: 
                            	   165: lgsau_sound
00:0000CE79 73616D706C65735C	   166: 	dc.b	'samples\lgsaucer.wav',$00	* large saucer sound
00:0000CE81 6C67736175636572
00:0000CE89 2E776176
00:0000CE8D 00
                            	   167: 
                            	   168: smsau_sound
00:0000CE8E 73616D706C65735C	   169: 	dc.b	'samples\smsaucer.wav',$00	* small saucer sound
00:0000CE96 736D736175636572
00:0000CE9E 2E776176
00:0000CEA2 00
                            	   170: 
                            	   171: thrst_sound
00:0000CEA3 73616D706C65735C	   172: 	dc.b	'samples\thrust.wav',$00	* ship thrust sound
00:0000CEAB 7468727573742E77
00:0000CEB3 6176
00:0000CEB5 00
                            	   173: 
                            	   174: pfire_sound
00:0000CEB6 73616D706C65735C	   175: 	dc.b	'samples\pfire.wav',$00		* player fire sound
00:0000CEBE 70666972652E7761
00:0000CEC6 76
00:0000CEC7 00
                            	   176: 
                            	   177: sfire_sound
00:0000CEC8 73616D706C65735C	   178: 	dc.b	'samples\sfire.wav',$00		* saucer fire sound
00:0000CED0 73666972652E7761
00:0000CED8 76
00:0000CED9 00
                            	   179: 
                            	   180: 	ds.w	0					* ensure even
                            	   181: 
                            	   182: 
                            	   183: *************************************************************************************
                            	   184: 
                            	   185: 

Source: "games\asteroids\asteroids 1_0.x68"
                            	  3985: 							; sound routines
                            	  3986: 
                            	  3987: 
                            	  3988: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3989: ;
                            	  3990: ; high score table filename
                            	  3991: 
                            	  3992: filename
00:0000CEDA 61737465726F6964	  3993: 	dc.b		'asteroids.hi',0		; highscore filename
00:0000CEE2 732E6869
00:0000CEE6 00
                            	  3994: 	ds.w		0				; ensure even
                            	  3995: 
                            	  3996: 
                            	  3997: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  3998: ;
                            	  3999: ; variables
                            	  4000: 
                            	  4001: variables
                            	  4002: 
                            	  4003: 	OFFSET	0				; going to use relative addressing
                            	  4004: 
                            	  4005: vector_s
                            	  4006: ;##	ds.w	1				; vector scale
02:00000000 0000            	  4007: glob_scale	ds.w	1				; global scale
                            	  4008: 
                            	  4009: 
02:00000002 0000            	  4010: local_x	ds.w	1				; local screen x co-ordinate offset
02:00000004 0000            	  4011: local_y	ds.w	1				; local screen y co-ordinate offset
                            	  4012: 
02:00000006 0000            	  4013: scr_x		ds.w	1				; screen x size
02:00000008 0000            	  4014: scr_y		ds.w	1				; screen y size
                            	  4015: 
02:0000000A 00000000        	  4016: PRNlword	ds.l	1				; PRNG seed long word
                            	  4017: 
02:0000000E 00000000        	  4018: switch_addr	ds.l	1				; hardware switch address
                            	  4019: 
02:00000012 0000            	  4020: hiscore_y	ds.w	1				; high score y co-ordinate
                            	  4021: 
                            	  4022: 
02:00000014 00              	  4023: s_key		ds.b	1				; last [s] key status
02:00000015 00              	  4024: play_sound	ds.b	1				; sound flag
                            	  4025: 
02:00000016 00              	  4026: suppress_0	ds.b	1				; leading zero suppress flag
                            	  4027: 							; 0 = don't suppress
                            	  4028: 
02:00000017 00              	  4029: high_idx	ds.b	1				; high score index, single byte, 1 to 10 in BCD
                            	  4030: 
02:00000018 00              	  4031: player_idx	ds.b	1				; player index
                            	  4032: 							; 0 = player 1
                            	  4033: 							; 1 = player 2
                            	  4034: 
02:00000019 00              	  4035: past_play	ds.b	1				; number of players that were in the game
                            	  4036: 
02:0000001A 00              	  4037: num_players	ds.b	1				; number of players in the game
                            	  4038: 							; $00 - game over
                            	  4039: 							; $01 - 1 player game
                            	  4040: 							; $02 - 2 player game
                            	  4041: 							; $FF - game over, high score not checked
                            	  4042: 
02:0000001B 00              	  4043: ss_count	ds.b	1				; starting ship count
                            	  4044: 
02:0000001C 00              	  4045: px_time	ds.b	1				; "PLAYER x" timer. while this is non zero
                            	  4046: 							; "PLAYER x" will be displayed. this is used at
                            	  4047: 							; the beginning of any game and at the beginning
                            	  4048: 							; of each turn in a two player game
                            	  4049: 
02:0000001D 00              	  4050: sixteen_ms	ds.b	1				; 16ms counter, incremented every 16ms by the
                            	  4051: 							; timer interrupt and cleared by the main
                            	  4052: 							; program loop
                            	  4053: 
02:0000001E 00              	  4054: p_orient	ds.b	1				; player orientation, this is shared by both
                            	  4055: 							; players as it is in the arcade machine
                            	  4056: 							;
                            	  4057: 							; $00 = right
                            	  4058: 							; $40 = up
                            	  4059: 							; $80 = left
                            	  4060: 							; $C0 = down
                            	  4061: 							;
                            	  4062: 							; this is $00 = right then anticlockwise each
                            	  4063: 							; positive step being 1.40625 degrees so that
                            	  4064: 							; by the time you get back to $00 one full
                            	  4065: 							; rotation has been done
                            	  4066: 
02:0000001F 00              	  4067: s_orient	ds.b	1				; shot direction, see above
                            	  4068: 
02:00000020 00              	  4069: hi_char	ds.b	1				; high score input character index
                            	  4070: 
02:00000021 00              	  4071: last_fire	ds.b	1				; fire key last state register
02:00000022 00              	  4072: last_hype	ds.b	1				; hyperspace key last state register
                            	  4073: 
02:00000023 00              	  4074: thump_snd	ds.b	1				; thump sound value
02:00000024 00              	  4075: thump_time	ds.b	1				; thump sound change timer
02:00000025 00              	  4076: time_count	ds.b	1				; game counter byte
                            	  4077: 
02:00000026 00              	  4078: hyper		ds.b	1				; hyperspace flag
                            	  4079: 							; $00 = no jump
                            	  4080: 							; $01 = jump successful
                            	  4081: 							; $80 = jump unsuccessful
                            	  4082: 							; $xx = 
                            	  4083: 
                            	  4084: 		ds.w	0
                            	  4085: 
02:00000027 0000            	  4086: hiscores	ds.w	10				; high score table, each score is a BCD word
02:00000029 *
02:0000003B 00              	  4087: hinames	ds.b	3*10				; high score initials table
02:0000003C *
                            	  4088: 
02:00000059 0000            	  4089: game_count	ds.w	1				; game counter word
                            	  4090: 
02:0000005B 0000            	  4091: expl_x_pos	ds.w	6				; player ship explosion pieces x positions
02:0000005D *
                            	  4092: 
02:00000067 0000            	  4093: expl_y_pos	ds.w	6				; player ship explosion pieces y positions
02:00000069 *
                            	  4094: 
                            	  4095: 
                            	  4096: ; player 1 variables
                            	  4097: 
                            	  4098: player_1	EQU	*+$80				; player one variables base
                            	  4099: 
                            	  4100: x_pos_off	EQU	*-player_1			; offset to the x position base
02:00000073 0000            	  4101: 		ds.w	$1B				; item x position base address
02:00000075 *
                            	  4102: 
                            	  4103: p_xpos_off	EQU	*-player_1			; offset to the player x position
02:000000A9 0000            	  4104: 		ds.w	1				; player x position
                            	  4105: 
                            	  4106: s_xpos_off	EQU	*-player_1			; offset to the saucer x position
02:000000AB 0000            	  4107: 		ds.w	1				; saucer x position
                            	  4108: 
                            	  4109: f_xpos_off	EQU	*-player_1			; offset to the player x position
02:000000AD 0000            	  4110: 		ds.w	6				; fire objects x position
02:000000AF *
                            	  4111: x_pos_end	EQU	*-player_1			; offset to the flags end
                            	  4112: 
                            	  4113: y_pos_off	EQU	*-player_1			; offset to the y position base
02:000000B9 0000            	  4114: 		ds.w	$1B				; item y position base address
02:000000BB *
                            	  4115: 
                            	  4116: p_ypos_off	EQU	*-player_1			; offset to the player y position
02:000000EF 0000            	  4117: 		ds.w	1				; player y position
                            	  4118: s_ypos_off	EQU	*-player_1			; offset to the saucer y position
02:000000F1 0000            	  4119: 		ds.w	1				; saucer y position
                            	  4120: 
                            	  4121: f_ypos_off	EQU	*-player_1			; offset to the player y position
02:000000F3 0000            	  4122: 		ds.w	6				; fire objects y position
02:000000F5 *
                            	  4123: 
                            	  4124: 							; items $xx00 to $xx1A are rocks
                            	  4125: 							; $00 = no item
                            	  4126: 							; $0x = item exists
                            	  4127: 							; $Ax = item exploding
                            	  4128: 
                            	  4129: flags_off	EQU	*-player_1			; offset to the flags base
02:000000FF 00              	  4130: 		ds.b	$1B				; space for the rock flags
02:00000100 *
                            	  4131: 
                            	  4132: p_flag_off	EQU	*-player_1			; offset to the player flag
02:0000011A 00              	  4133: 		ds.b	1				; player flag
                            	  4134: 
                            	  4135: s_flag_off	EQU	*-player_1			; offset to the saucer flag
02:0000011B 00              	  4136: 		ds.b	1				; saucer flag
                            	  4137: 							; $00 = no saucer
                            	  4138: 							; $01 = small saucer
                            	  4139: 							; $02 = large saucer
                            	  4140: 							; $8x = saucer exploding
                            	  4141: 
                            	  4142: s_fire_off	EQU	*-player_1			; offset to the saucer fire flags
02:0000011C 00              	  4143: 		ds.b	2				; saucer fire objects
02:0000011D *
                            	  4144: 
                            	  4145: p_fire_off	EQU	*-player_1			; offset to the player fire flags
02:0000011E 00              	  4146: 		ds.b	4				; player fire objects
02:0000011F *
                            	  4147: flag_end	EQU	*-player_1			; offset to the flags end
                            	  4148: 
                            	  4149: x_vel_off	EQU	*-player_1			; offset to the x velocity base
02:00000122 00              	  4150: 		ds.b	$1B				; item x velocity base address
02:00000123 *
                            	  4151: 
                            	  4152: p_xvel_off	EQU	*-player_1			; offset to the player x velocity
02:0000013D 00              	  4153: 		ds.b	1				; player x velocity
                            	  4154: 
                            	  4155: s_xvel_off	EQU	*-player_1			; offset to the saucer x velocity
02:0000013E 00              	  4156: 		ds.b	1				; saucer x velocity
                            	  4157: 
                            	  4158: f_xvel_off	EQU	*-player_1			; offset to the fire objects x velocity
02:0000013F 00              	  4159: 		ds.b	6				; fire objects x velocity
02:00000140 *
                            	  4160: 
                            	  4161: y_vel_off	EQU	*-player_1			; offset to the x velocity base
02:00000145 00              	  4162: 		ds.b	$1B				; item y velocity base address
02:00000146 *
                            	  4163: 
                            	  4164: p_yvel_off	EQU	*-player_1			; offset to the player y velocity
02:00000160 00              	  4165: 		ds.b	1				; player y velocity
                            	  4166: 
                            	  4167: s_yvel_off	EQU	*-player_1			; offset to the saucer y velocity
02:00000161 00              	  4168: 		ds.b	1				; saucer y velocity
                            	  4169: 
                            	  4170: f_yvel_off	EQU	*-player_1			; offset to the fire objects y velocity
02:00000162 00              	  4171: 		ds.b	6				; fire objects y velocity
02:00000163 *
                            	  4172: 
                            	  4173: 
                            	  4174: i_rk_count	EQU	*-player_1			; offset to the initial rock count
02:00000168 00              	  4175: 		ds.b	1				; initial rock count
                            	  4176: rock_count	EQU	*-player_1			; offset to the rock count
02:00000169 00              	  4177: 		ds.b	1				; rock count
                            	  4178: 
                            	  4179: sauc_cntdn	EQU	*-player_1			; offset to the saucer countdown timer
02:0000016A 00              	  4180: 		ds.b	1				; saucer countdown timer
                            	  4181: 
                            	  4182: i_sauc_tim	EQU	*-player_1			; offset to the initial saucer timer
02:0000016B 00              	  4183: 		ds.b	1				; small saucer boundary/initial saucer timer
                            	  4184: 
                            	  4185: r_hit_tim	EQU	*-player_1			; offset to the rock hit timer
02:0000016C 00              	  4186: 		ds.b	1				; rock hit timer. if this times out because the
                            	  4187: 							; player hasn't shot a rock for a while then
                            	  4188: 							; the saucer timer initial value is decremented
                            	  4189: 							; so that the saucers come faster if the player
                            	  4190: 							; is just ignoring the last rock
                            	  4191: 
                            	  4192: hide_p_cnt	EQU	*-player_1			; offset to the hide the player count
02:0000016D 00              	  4193: 		ds.b	1				; hide the player count. when this count is non
                            	  4194: 							; zero the player is not displayed and the
                            	  4195: 							; thump sound does not sound. this count is set
                            	  4196: 							; to various lengths after certain events have
                            	  4197: 							; occured
                            	  4198: 							;
                            	  4199: 							; $0x player hidden, will appear
                            	  4200: 							; $8x player hidden, gonna die
                            	  4201: 
                            	  4202: new_rocks	EQU	*-player_1			; offset to the new rocks flag
02:0000016E 00              	  4203: 		ds.b	1				; generate new rocks flag
                            	  4204: 							; 0 = generate new rocks
                            	  4205: thmp_sndi	EQU	*-player_1			; offset to the thump sound change initial value
02:0000016F 00              	  4206: 		ds.b	1				; thump sound change timer initial value
                            	  4207: 
                            	  4208: min_rocks	EQU	*-player_1			; offset to the minimum rock count
02:00000170 00              	  4209: 		ds.b	1				; minimum rock count before the saucer initial
                            	  4210: 							; timer starts to decrement
                            	  4211: 
                            	  4212: p_xvlo_off	EQU	*-player_1			; offset to the player y velocity low byte
02:00000171 00              	  4213: 		ds.b	1				; player x velocity low byte
                            	  4214: p_yvlo_off	EQU	*-player_1			; offset to the player y velocity low byte
02:00000172 00              	  4215: 		ds.b	1				; player y velocity low byte
                            	  4216: 
                            	  4217: 		ds.w	0				; ensure even
                            	  4218: 
                            	  4219: score_off	EQU	*-player_1			; offset to the score word
02:00000173 0000            	  4220: p1_score	ds.w	1				; player score
                            	  4221: 
                            	  4222: ships_off	EQU	*-player_1			; offset to the ship count
02:00000175 00              	  4223: p1_ships	ds.b	1				; player 1 ship count
                            	  4224: 
                            	  4225: high_off	EQU	*-player_1			; offset to the player entering hiscore flag
02:00000176 00              	  4226: p1_high	ds.b	1				; player 1 highscore flag
                            	  4227: 							; $0x - entering high score, also index
                            	  4228: 							; $8x - done
                            	  4229: 
                            	  4230: 
                            	  4231: 		ds.w	0				; ensure even
                            	  4232: 
                            	  4233: ; player 2 variables
                            	  4234: 
                            	  4235: 
                            	  4236: player_2	EQU	*+$80				; player two variables base
02:00000177 00              	  4237: 		ds.b	score_off+$80		; space for the player two variables
02:00000178 *
                            	  4238: 
02:00000277 0000            	  4239: p2_score	ds.w	1				; player 2 score
                            	  4240: 
02:00000279 00              	  4241: p2_ships	ds.b	1				; player 2 ship count
                            	  4242: 
02:0000027A 00              	  4243: p2_high	ds.b	1				; player 2 highscore flag
                            	  4244: 							; $0x - entering high score, also index
                            	  4245: 							; $8x - done
                            	  4246: 
                            	  4247: 		ds.w	0				; ensure even
                            	  4248: 
                            	  4249: p_2_end
                            	  4250: 
                            	  4251: 
                            	  4252: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  4253: 
                            	  4254: 
                            	  4255: ;	END	asteroids_start
                            	  4256: 
                            	  4257: 
                            	  4258: ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                            	  4259: 

Source: "boot.x68"
                            	  3757: 


Symbols by name:
ABCD_INNER1                     00:0000445C
ABCD_INNER2                     00:000044CA
ABCD_NO_C1                      00:00004478
ABCD_NO_C2                      00:00004480
ABCD_NO_C3                      00:000044E6
ABCD_NO_C4                      00:000044EE
ABCD_OUTER1                     00:0000445A
ABCD_OUTER2                     00:000044C8
ABS                             00:00006B3C
ACIA                             E:FD060000
ACIA_CMD                         E:00000008
ACIA_CTRL                        E:0000000C
ACIA_RX                          E:00000000
ACIA_STAT                        E:00000004
ACIA_TX                          E:00000000
ADDA_OUTER1                     00:00004FCA
ADDQ_LOOP1                      00:000047E4
ADDQ_LOOP2                      00:00004822
ADDQ_LOOP3                      00:00004858
ADDX_LOOP3                      00:000050F0
ADDX_LOOP4                      00:0000510C
ADDX_LOOP5                      00:00005128
ADDX_OUTER1                     00:0000505C
ADD_OUTER1                      00:00004DF0
ADD_OUTER2                      00:00004E64
AHOW                            00:00006DB4
ALL_DONE                        00:000021BE
AND_OUTER1                      00:00004B0E
AND_OUTER2                      00:00004B82
ASORRY                          00:00006DAC
AUXIN                           00:000070D8
AUXOUT                          00:000070C4
AWHAT                           00:00006D6C
AXIRET                          00:000070F6
AllocateString                  00:00006854
ArmAllBreakpoints               00:00008D94
ArmBreakpoint                   00:00008DC4
AsciiToHexNybble                00:000087D0
AudioInputTest                  00:00008B76
BCC1                            00:00004702
BCC10                           00:00004754
BCC11                           00:0000475C
BCC12                           00:00004766
BCC13                           00:0000476E
BCC14                           00:00004778
BCC2                            00:0000470C
BCC3                            00:00004714
BCC4                            00:0000471E
BCC5                            00:00004726
BCC6                            00:00004730
BCC7                            00:00004738
BCC8                            00:00004742
BCC9                            00:0000474A
BLANK                            E:00000020
BRTBL                           00:0000978A
BSR_CLOSE1                      00:00003292
BSR_CLOSE2                      00:000032C8
BSR_FAR1                        00:000021C0
BSR_FAR2                        00:000046F2
BUFFER                          00:000071C8
BUFLEN                           E:00000050
BUFSIZE                          E:0000003F
BYEBYE                          00:000070F8
BlankLastLine                   00:000013D0
BouncingBalls                   00:00008B78
BreakpointWords                  E:00040280
Breakpoints                      E:00040220
BufByte                         00:0000885C
BufNybble                       00:00008862
BufTetra                        00:00008850
BufWyde                         00:00008856
CALL                            00:000064FA
CHKIO                           00:0000706A
CHKRET                          00:0000707A
CHR                             00:00006CE6
CLMSG                           00:00007160
CLS                             00:00007088
CMPA_OUTER1                     00:00004CE4
CMPM_LOOP1                      00:00004D72
CMPM_LOOP2                      00:00004D8C
CMPM_LOOP3                      00:00004DA6
CMP_OUTER1                      00:00004C6E
COMMON                          00:00009B7C
COMMON35                        00:00009B8A
COMMON4                         00:00009B7A
COM_CMDTBL                      00:000014B0
CORENO                          00:00006B64
CR                               E:0000000D
CRLF                            00:0000727E
CS11                            00:000095C0
CS12                            00:00009530
CS13                            00:000094B6
CS14                            00:0000944C
CS15                            00:0000940E
CS16                            00:000093A0
CS17                            00:00009756
CS18                            00:000096F2
CS19                            00:00009802
CS20                            00:0000965A
CSTART                          00:00005C50
CTRLC                            E:00000003
CTRLH                            E:00000008
CTRLS                            E:00000013
CTRLX                            E:00000018
CTRLZ                            E:0000001A
CURRNT                          00:00007170
CalcScreenLoc                   00:000011A4
CallOS                          00:00000240
CheckForCtrlC                   00:00000842
CheckForKey                     00:000007FC
CheckNumeric                    00:000065C4
ClearBreakpointList             00:00008EB6
ClearScreen                     00:00008B7C
ClearStringArea                 00:00005D7A
ClearStringStack                00:00005D9A
CmdBuf                           E:00040040
CmdBufEnd                        E:00040080
ConcatString                    00:000066D0
Cursor1                         00:00007714
DBCC_LOOP1                      00:00004782
DBCC_LOOP2                      00:00004790
DCB_BKCOLOR                      E:00000060
DCB_CMDPROC                      E:00000018
DCB_FGCOLOR                      E:00000064
DCB_INBUFPTR                     E:00000038
DCB_INBUFPTR2                    E:00000070
DCB_INBUFSIZE                    E:00000040
DCB_INDIMX                       E:00000048
DCB_INDIMY                       E:0000004C
DCB_INDIMZ                       E:00000050
DCB_INPOSX                       E:0000002C
DCB_INPOSY                       E:00000030
DCB_INPOSZ                       E:00000034
DCB_MAGIC                        E:00000000
DCB_NAME                         E:00000004
DCB_OPCODE                       E:00000068
DCB_OUTBUFPTR                    E:0000003C
DCB_OUTBUFPTR2                   E:00000074
DCB_OUTBUFSIZE                   E:00000044
DCB_OUTBUFSIZE2                  E:0000007C
DCB_OUTDIMX                      E:00000054
DCB_OUTDIMY                      E:00000058
DCB_OUTDIMZ                      E:0000005C
DCB_OUTPOSX                      E:00000020
DCB_OUTPOSY                      E:00000024
DCB_OUTPOSZ                      E:00000028
DCB_SIZE                         E:00000084
DCB_UNIT                         E:00000080
DCODE68K                        00:00009AE2
DDATA                            E:FFFFFFF0
DEC311                          00:00009AF6
DEC404                          00:00009B14
DEC411                          00:00009B24
DEC425                          00:00009B34
DEC510                          00:00009B40
DEC515                          00:00009B44
DEC530                          00:00009B4C
DEC535                          00:00009B52
DEC537                          00:00009B5E
DEFLT                           00:0000638A
DEV_CLEAR                        E:0000000C
DEV_GETBUF1                      E:00000010
DEV_GET_COLOR                    E:00000015
DEV_GET_DIMEN                    E:00000014
DEV_GET_OUTPOS                   E:00000017
DEV_GET_OUTPTR                   E:00000018
DEV_PUTCHAR                      E:00000002
DEV_SET_OUTPOS                   E:00000007
DEV_SWAPBUF                      E:0000000D
DEV_WRITEAT                      E:00000012
DIRECT                          00:00005F54
DIRFLG                          00:000071C4
DIV1                            00:00006A80
DIV2                            00:00006A86
DIV3                            00:00006A8C
DIV32                           00:00006A6E
DIV4                            00:00006A9A
DIVRT                           00:00006AA8
DIVS_OUTER1                     00:000049CE
DIVU_OUTER1                     00:0000497C
DOMID                           00:00006C14
DOQUO                           00:00007048
DOQUO1                          00:00007050
DRAW                             E:0000A000
DT_NUMERIC                       E:00000001
DT_STRING                        E:00000002
Delay3s                         00:000020A0
Delay3s2                        00:000020C4
Diagonal1                       00:00007598
Diagonal2                       00:000075B8
DisarmAllBreakpoints            00:00008D68
DisarmBreakpoint                00:00008E42
DispatchMsg                     00:00008F48
DisplayAddr                     00:0000887A
DisplayByte                     00:00008830
DisplayHelp                     00:00007B0E
DisplayMem                      00:000080E2
DisplayNybble                   00:00008836
DisplaySpace                    00:0000881C
DisplayString                   00:00007298
DisplayStringCRLF               00:000072AE
DisplayStringLimited            00:000072B2
DisplayStringLimitedCRLF        00:000072D2
DisplayTetra                    00:00008824
DisplayTwoSpaces                00:0000880A
DisplayWyde                     00:0000882A
DrawHorizTo                     00:000076B2
DrawToXY                        00:00007634
DrawVertTo                      00:000076E4
DumpMem1                        00:000080D0
EA000                           00:00009832
EA001                           00:0000983E
EA010                           00:0000984A
EA011                           00:0000985E
EA011RTS                        00:00009874
EA100                           00:00009876
EA101                           00:00009918
EA1105                          00:000098F4
EA1107                          00:000098F8
EA1109                          00:0000990E
EA111                           00:0000992E
EA1112                          00:0000994C
EA1113                          00:00009968
EA1113A                         00:00009978
EA1114                          00:0000999A
EA1115                          00:00009A04
EA11153                         00:00009A3C
EA11155                         00:00009A46
EAF25                           00:000099E2
EAF27                           00:000099E6
EAF35                           00:000099FA
EEA                             00:00009890
EEA10                           00:000094BE
ENDCHK                          00:00006D58
ENDCHK1                         00:00006D68
ENDMEM                          00:00005C4C
EOR_OUTER2                      00:00004BF8
EOT                              E:00000004
ERROR                           00:00006D70
ETYPE                           00:00006DBA
EX1                             00:00005F8E
EXCEPTION_6                     00:000021C8
EXCEPTION_7                     00:000021D0
EXEC                            00:00005F64
EXGO                            00:00005F9A
EXLP                            00:00005F6C
EXMAT                           00:00005F94
EXNGO                           00:00005F76
EXP4RT                          00:000067C4
EXPR                            00:00006570
EXPR2                           00:00006660
EXPR3                           00:0000673E
EXPR4                           00:000067A8
EXPR_AND                        00:00006596
EXPR_OR                         00:00006570
EXPR_REL                        00:000065D6
E_BadDevNum                      E:00000020
E_Func                           E:00000002
E_NotAlloc                       E:00000009
E_NotSupported                   E:0000000A
E_Ok                             E:00000000
EditMemHelper                   00:00007EFC
ExecuteCode                     00:00007F92
FDATA                            E:0000000A
FE10                            00:0000988C
FE11                            00:00009974
FE12                            00:00009B32
FERROR                          00:00009BA4
FERROR35                        00:00009BAE
FERROR39                        00:00009BBA
FI1                             00:00006D4A
FI2                             00:00006D56
FIN                             00:00006D3E
FINISH                          00:00006172
FMTK_SEMA                        E:00000008
FNDLN                           00:00006E5E
FNDLNP                          00:00006E6C
FNDNXT                          00:00006E84
FNDRET                          00:00006E82
FNDSKP                          00:00006E86
FOC                              E:0000001F
FOP                              E:00000027
FOR                             00:000061E0
FORM1                           00:00009444
FORM10                          00:00009500
FORM103                         00:00009506
FORM104                         00:0000950A
FORM105                         00:0000951A
FORM10E3                        00:000094E4
FORM10E4                        00:000094EC
FORM10E6                        00:000094F8
FORM10EX                        00:000094C2
FORM11                          00:00009534
FORM112                         00:00009550
FORM114                         00:0000955E
FORM11SL                        00:0000953C
FORM12                          00:00009560
FORM125                         00:0000957A
FORM12A                         00:0000959C
FORM1A                          00:00009448
FORM3                           00:0000944E
FORM4                           00:00009452
FORM5                           00:00009464
FORM6A                          00:00009468
FORM6D                          00:00009478
FORM7                           00:0000949E
FORM8                           00:000094AA
FORM815                         00:000094AE
FORM9                           00:000094B8
FORM91                          00:0000981A
FORM93                          00:0000982E
FORM95                          00:00009830
FORMREG5                        00:0000948C
FORMREGA                        00:00009488
FORMREGD                        00:00009498
FORMSIZE                        00:00009806
FR1                             00:000061FA
FR2                             00:00006212
FR3                             00:00006218
FR4                             00:0000621E
FR5                             00:00006226
FR6                             00:00006238
FR7                             00:00006244
FR8                             00:0000625C
FRAMEBUF                         E:FD200000
FRAMEBUF_CMDTBL                 00:00001934
FREL10                          00:00009308
FREL15                          00:0000931A
FREL20                          00:00009334
FREL25                          00:00009346
FREL30                          00:00009350
FRELADDR                        00:000092FA
FemtikiInit                     00:00000220
FemtikiInitIRQ                  00:00000230
FemtikiTimerIRQ                 00:0000030E
ForceUnlockSemaphore            00:0000202C
FreeTCB                          E:0010030C
FromScreen                      00:00007874
GBYTE                           00:000063E2
GBYTE1                          00:000063E6
GBYTE2                          00:000063F4
GETLN                           00:00006DC0
GFXACCEL                         E:FD300000
GFXACCEL_CMDTBL                 00:00001BF8
GL1                             00:00006DD0
GL2                             00:00006DEE
GL3                             00:00006E02
GL4                             00:00006E26
GL5                             00:00006E32
GL6                             00:00006E4E
GL7                             00:00006E56
GOAUXI                          00:00005C40
GOAUXO                          00:00005C3C
GOBYE                           00:00005C44
GOIN                            00:00005C38
GOOUT                           00:00005C34
GOSUB                           00:0000617A
GOTO                            00:0000607C
GOWARM                          00:00005C30
GRBufferToScreen                00:000074BE
GarbageCollectStrings           00:000068B2
GetCmdLine                      00:00007CC2
GetDecNumber                    00:0000826E
GetHexNumber                    00:00008240
GetKey                          00:00000808
GetRunningTCBPointer            00:000002AA
GetSzChar                       00:00007ED6
GetTick                         00:0000748C
GlobalReadLong                  00:00001EE4
GlobalWriteLong                 00:00001EEA
GraphicsDemo                    00:00008B7A
HALT                             E:0000B000
HAS_MMU                          E:00000000
HEX2DEC                         00:00009282
HEX2DEC2                        00:00009234
HISPC                            E:FFFFFFFC
HOWMSG                          00:00007131
HX2DC                           00:00009292
HX2DC0                          00:00009296
HX2DC1                          00:0000929E
HX2DC2                          00:000092B8
HX2DC22                         00:000092BA
HX2DC3                          00:000092C4
HX2DC4                          00:000092CC
HX2DC5                          00:000092D4
HX2DC57                         00:000092DC
HX2DC6                          00:000092E0
HelpMsg                         00:00007B1A
HomeCursor                      00:0000142A
I2C2                             E:FD069000
I2C_CMD                          E:00000004
I2C_CTRL                         E:00000002
I2C_PREH                         E:00000001
I2C_PREL                         E:00000000
I2C_RXR                          E:00000003
I2C_STAT                         E:00000004
I2C_TXR                          E:00000003
IBSR                            00:000096AC
ICC                             00:000096A8
ICC35                           00:000096BE
ICC55                           00:000096D4
ICCCC                           00:00009772
ICCCC9                          00:00009788
IDBCC                           00:00009696
IF                              00:000062CC
IF1                             00:000062D0
IF2                             00:000062D6
IGNBLK                          00:00007016
ILINK                           00:0000942E
IM7788                          00:0000936C
IM7799                          00:00009370
IMMED                           00:000093B6
IMMED45                         00:000093DC
IMMED55                         00:00009410
IMMED65                         00:00009416
IMMED75                         00:00009426
IMOVE                           00:0000942A
IMOVE19                         00:000097D0
IMOVEA1                         00:000097AA
IMOVEMFR                        00:00009358
IMOVEMTR                        00:00009386
IMOVEP                          00:00009632
IMOVEP11                        00:00009642
IMOVEP35                        00:0000965E
IMOVEP66                        00:0000966C
IMOVEQ                          00:000095C8
IMVFSR                          00:000095E8
IMVFUSP                         00:000095F6
IMVT44                          00:00009612
IMVTCCR                         00:00009622
IMVTSR                          00:00009604
IMVTUSP                         00:00009616
INC                             00:000070A4
INC1                            00:000070B0
INCOM                           00:00005FAC
INCON                           00:00005F9E
INITMSG                         00:00007106
INPERR                          00:000062E6
INPPTR                          00:00007168
INPUT                           00:000062F4
INT                             00:00006CD0
INT_EXPR                        00:0000655E
IOCOM                           00:00005FBA
IOCON                           00:00005FD0
IOFocus                          E:00100000
IP2                             00:00006326
IP3                             00:00006340
IP4                             00:0000637A
IP5                             00:00006386
IP6                             00:00006322
IP7                             00:00006318
IQUICK                          00:000095C4
IQUICK21                        00:000097E8
IQUICK31                        00:000097FE
IQUICKA                         00:000097D6
IRQFlag                          E:000400A0
IRQROUT                         00:000071A4
IRQ_trampolines                 01:00000100
ISCC                            00:0000968C
ISETD                           00:000096E4
ISETD12                         00:000096EA
ISETS                           00:000096F4
ISHIFT                          00:0000970E
ISHIFT13                        00:0000971A
ISHIFT23                        00:0000973E
ISHIFT33                        00:0000974A
ISHIFT44                        00:0000974E
ISHIFTM1                        00:00009758
ISTOP                           00:000093A2
IncCursorPos                    00:00001346
IncCursorRow                    00:00001360
InitIOPBitmap                   00:00001EF2
InitIRQ                         00:00009004
InitRand                        00:00001F3E
InitSemaphores                  00:00001FE4
Initialise                      00:0000B1B0
InputDevice                      E:000400A4
InstallIRQ                      00:0000901A
JMPL                             E:0000E000
JSRL                             E:0000C000
KBD_CMDTBL                      00:00000580
KEYBD                            E:FD0FFE00
KEYBD_SEMA                       E:00000003
KI                              00:00009BCE
KIEND                           00:00009BD0
KeybdEcho                        E:0004000C
KeybdGetChar                    00:00000862
KeybdGetCharNoWait              00:00000852
KeybdGetCharWait                00:0000085A
KeybdGetID                      00:000005DE
KeybdID                          E:00100018
KeybdIRQ                        00:00000B0E
KeybdInit                       00:00000648
KeybdLEDs                        E:0010000E
KeybdRecvByte                   00:000007AC
KeybdSendByte                   00:00000ACE
KeybdSetLED                     00:0000061C
KeybdSetLEDStatus               00:00000A7E
KeybdWaitFlag                    E:0004000D
KeybdWaitTx                     00:000007CE
LEA1                            00:00003C9E
LEFT                            00:00006C76
LEN                             00:00006CAA
LET                             00:00006392
LF                               E:0000000A
LIST                            00:000060C4
LOAD                            00:000063A2
LOCVARSZ                         E:00000010
LOD1                            00:000063AE
LOD2                            00:000063C8
LODEND                          00:000063D8
LOPINC                          00:00007184
LOPLMT                          00:00007190
LOPLN                           00:0000719C
LOPPT                           00:000071A0
LOPVAR                          00:00007180
LS1                             00:000060D0
LS2                             00:000060E4
LS3                             00:000060EA
LSTROM                          00:00007164
LT1                             00:0000639E
LastStr                         00:000071B4
ListBreakpoints                 00:00008E96
LockSemaphore                   00:0000200A
LockSysSemaphore                00:00000396
LorR1                           00:00006BA8
LorRArgs                        00:00006B70
MAX_TID                          E:00000FFF
MEMORY_SEMA                      E:00000006
MID                             00:00006BAC
MID1                            00:00006C72
MID2                            00:00006BF4
MID4                            00:00006C40
MID5                            00:00006C0C
MMU                              E:FDC00000
MOVE1                           00:0000390C
MOVE2                           00:00003890
MOVE3                           00:0000398C
MOVE4                           00:00003AE6
MOVEMR                          00:00009A66
MOVEMR11                        00:00009A76
MOVEMR33                        00:00009A7E
MOVEMR44                        00:00009A90
MOVEMR77                        00:00009AAA
MOVEMR79                        00:00009ABC
MOVEMR88                        00:00009ABE
MOVEMR94                        00:00009AD6
MOVEMS                          00:00009A52
MOVEMS2                         00:00009A62
MSG111                          00:00009BC4
MULS_OUTER1                     00:000052C4
MULU_OUTER1                     00:00005278
MVDOWN                          00:00006EA8
MVRET                           00:00006E9C
MVUP                            00:00006E94
MVUPW                           00:00006E9E
Monitor                         00:00007888
MoveToXY                        00:00007626
NBCD_LOOP                       00:00004642
NBCD_LOOP1                      00:00004688
NBCD_NO_C                       00:0000464E
NBCD_NO_C1                      00:0000469C
NBCD_NO_Z                       00:00004652
NBCD_NO_Z1                      00:000046A0
NCORES                           E:00000004
NEW                             00:00005FE6
NEXT                            00:00006260
NOSTRING                        00:00007148
NR_TCB                           E:00001000
NUM_EXPR                        00:00006550
NX0                             00:0000626A
NX1                             00:000062AA
NX2                             00:000062C2
NX3                             00:0000627C
NextRec                         00:00008968
NextString                      00:000068EE
Ninc0                           00:0000B24C
Ninc1                           00:0000B24C
NumSetBreakpoints                E:00040202
OFFSET                           E:00040880
OKMSG                           00:0000712A
ONIRQ                           00:00006090
ONIRQ1                          00:000060AA
OPCTBL                          00:00009E88
OR_OUTER1                       00:00004A24
OR_OUTER2                       00:00004A98
OSCallTable                     00:0000023E
OUTC                            00:00007094
OUTCOM                          00:00005FC4
OUTCON                          00:00005FDA
OUTPTR                          00:0000716C
OutputChar                      00:00008FEA
OutputDevice                     E:000400A8
PARN                            00:0000683E
PBYTE                           00:00006460
PBYTE1                          00:00006462
PBYTE2                          00:00006476
PEEK                            00:00006AAA
PKER                            00:000064F6
PLIC                             E:FD090000
PNT4HEX                         00:000092E6
PNT4HX                          00:000092E6
PNT6HX                          00:000092EA
PNT8HX                          00:000092F6
POKE                            00:00006480
POPA                            00:00006EB0
PR0                             00:0000610E
PR1                             00:0000611C
PR2                             00:00006100
PR3                             00:0000612A
PR6                             00:00006136
PR8                             00:0000613C
PR9                             00:00006158
PRINT                           00:000060F0
PRMESG                          00:0000707C
PRMRET                          00:00007086
PRNlword                         S:0000000A
PRTLN                           00:00006F94
PRTNUM                          00:00006F4A
PRTRET                          00:00006F3C
PRTSTG                          00:00006F22
PRTSTR2                         00:00006F44
PRTSTR2a                        00:00006F3E
PS1                             00:00006F24
PUSHA                           00:00006EEC
PeekScreenChar                  00:00007ED0
PointsIntoStringArea            00:0000694A
ProcessBreakpoint               00:00008D62
ProcessRec                      00:0000897A
ProcessS1                       00:00008A7E
ProcessS2                       00:00008A82
ProcessS3                       00:00008A86
ProcessS7                       00:00008A8A
ProcessS8                       00:00008A9C
ProcessS9                       00:00008AAE
Prompt1                         00:000078CA
Prompt3                         00:000078B4
PromptLn                        00:000078A8
QHOW                            00:00006DB2
QSORRY                          00:00006DAA
QWHAT                           00:00006D6A
QueueCycle                       E:0010031C
RAND                             E:FD0FFD00
RAND_MW                          E:FD0FFD0C
RAND_MZ                          E:FD0FFD08
RAND_NUM                         E:FD0FFD00
RAND_SEMA                        E:00000004
RAND_STRM                        E:FD0FFD04
RANPNT                          00:00007164
REL4                             E:00004000
REL5                             E:00005000
REL7                             E:00007000
REM                             00:000062CA
RETURN                          00:000061B4
RIGHT                           00:00006C82
RND                             00:00006B12
ROXx_FLAGS                      00:0000558C
ROXx_LOOP1                      00:000055A2
ROXx_LOOP2                      00:000055C2
ROXx_LOOP3                      00:000055E2
ROXx_LOOP4                      00:00005602
ROXx_LOOP5                      00:00005622
ROXx_LOOP6                      00:00005644
ROx_FLAGS                       00:00005356
ROx_LOOP1                       00:0000536C
ROx_LOOP2                       00:0000538C
ROx_LOOP3                       00:000053AC
ROx_LOOP4                       00:000053CC
ROx_LOOP5                       00:000053EC
ROx_LOOP6                       00:0000540E
RST_REG                          E:FD0FFC00
RTCBuf                           E:00100200
RTR_DONE                        00:000046E4
RTSL                             E:0000D000
RUN                             00:00006002
RUN1                            00:00006056
RUNNXL                          00:00006016
RUNSML                          00:0000606C
RUNTSL                          00:00006062
RandGetNum                      00:00001F7E
RandInit                        00:00001F3E
RandWait                        00:00001FCE
ReceiveMsg                      00:00008F06
Regsave                          E:00040100
RunningTCB                       E:00100224
S1932a                          00:00008AF8
S1932b                          00:00008B0C
S19Checksum                      E:00100150
S19Get16BitAddress              00:00008AC0
S19Get24BitAddress              00:00008ACE
S19Get32BitAddress              00:00008ADA
S19StartAddress                  E:00040008
SAVE                            00:00006402
SAVE1                           00:0000640A
SAVE2                           00:0000642E
SAVEND                          00:0000643C
SBCD_INNER1                     00:00004554
SBCD_INNER2                     00:000045C2
SBCD_NO_C1                      00:00004570
SBCD_NO_C2                      00:00004578
SBCD_NO_C3                      00:000045DE
SBCD_NO_C4                      00:000045E6
SBCD_OUTER1                     00:00004552
SBCD_OUTER2                     00:000045C0
SCHR                            00:000095E0
SCOMMON                         00:00009688
SCREEN_FORMAT                    E:00000001
SCREEN_SEMA                      E:00000005
SC_ALT                           E:00000011
SC_CAPSLOCK                      E:00000058
SC_CTRL                          E:00000014
SC_EXTEND                        E:000000E0
SC_KEYUP                         E:000000F0
SC_LSHIFT                        E:00000012
SC_NUMLOCK                       E:00000077
SC_RSHIFT                        E:00000059
SC_SCROLLLOCK                    E:0000007E
SC_TAB                           E:0000000D
SERIAL_SEMA                      E:00000002
SETVAL                          00:00006D1E
SHIFTS2_FLAGS                   00:00005A04
SHIFTS2_LOOP1                   00:00005A1A
SHIFTS2_LOOP2                   00:00005A36
SHIFTS2_LOOP3                   00:00005A52
SHIFTS2_LOOP4                   00:00005A6E
SHIFTS2_LOOP5                   00:00005A8A
SHIFTS2_LOOP6                   00:00005AA8
SHIFTS_FLAGS                    00:000057C2
SHIFTS_LOOP1                    00:000057D8
SHIFTS_LOOP2                    00:000057F8
SHIFTS_LOOP3                    00:00005818
SHIFTS_LOOP4                    00:00005838
SHIFTS_LOOP5                    00:00005858
SHIFTS_LOOP6                    00:0000587A
SHRT                             E:0000F000
SIV1                            00:00006922
SIZE                            00:00006B48
SRYMSG                          00:0000715A
ST3                             00:00005CEE
ST4                             00:00005D40
START                           00:00005C2E
STKFP                           00:00007174
STKGOS                          00:00007178
STKINP                          00:0000717C
STKLMT                          00:000071C0
STOP                            00:00005FFA
STRAREASIZE                      E:00000800
STRSTK                          00:000071A8
SUBA_OUTER1                     00:00005016
SUBQ_LOOP1                      00:000048A2
SUBQ_LOOP2                      00:000048DC
SUBQ_LOOP3                      00:00004912
SUBX_LOOP3                      00:00005200
SUBX_LOOP4                      00:0000521C
SUBX_LOOP5                      00:00005238
SUBX_OUTER1                     00:0000516C
SUB_OUTER1                      00:00004EDA
SUB_OUTER2                      00:00004F4E
SV1                             00:00006D3C
ScrollUp                        00:0000138A
SelectThreadToRun               00:000002C2
SendMsg                         00:00008EC8
SerHeadRcv                       E:00100162
SerHeadXmit                      E:00100168
SerRcvBuf                        E:00101000
SerRcvXoff                       E:00100165
SerRcvXon                        E:00100164
SerTailRcv                       E:00100160
SerTailXmit                      E:00100166
SerXmitBuf                       E:00102000
SerXmitXoff                      E:0010016A
SerialGetChar                   00:000015CC
SerialIRQ                       00:00001742
SerialInit                      00:0000158E
SerialPeekChar                  00:00001644
SerialPeekCharDirect            00:00001680
SerialPutChar                   00:0000169A
SerialPutCharDirect             00:000016FE
SerialRbo                       00:0000171A
SerialRcvCount                  00:00001722
SetDrawMode                     00:00007494
SetKeyboardEcho                 00:000007F4
SetPenColor                     00:000074B6
ShiftBuf                        00:0000921A
SimHardware                     00:0000747C
SpuriousIRQ                     00:000090D2
StartMon                        00:0000787E
StartQ                          00:00000172
StrArea                         00:000071B0
StrSp                           00:000071AC
StringInVar                     00:00006904
StringOnStack                   00:0000696E
StubRout                        00:0000774C
SyncCursor                      00:0000143C
T15Abort                        00:0000207C
T15DispatchTable                00:000072EC
T15FloatToString                00:00008F90
T15GetFloat                     00:0000206E
T15LockSemaphore                00:00002062
T15UnlockSemaphore              00:00002068
TAB1                            00:00005DAE
TAB10                           00:00005E63
TAB10_1                         00:00005F44
TAB11                           00:00005E66
TAB11_1                         00:00005F4C
TAB1_1                          00:00005E6C
TAB2                            00:00005DDD
TAB2_1                          00:00005E9C
TAB4                            00:00005E1A
TAB4_1                          00:00005EDC
TAB5                            00:00005E4C
TAB5_1                          00:00005F10
TAB6                            00:00005E4F
TAB6_1                          00:00005F18
TAB8                            00:00005E54
TAB8_1                          00:00005F20
TAB9                            00:00005E5F
TAB9_1                          00:00005F3C
TBL                             00:00009BD0
TBLE                            00:00009E88
TC1                             00:00006FC4
TCBAffineChose                  00:000000A0
TCBAffinity                      E:00000084
TCBAffinityBase                  E:00000082
TCBAlloc                        00:0000006E
TCBEndTick                       E:00000070
TCBFree                         00:00000092
TCBHandleToPointer              00:00000028
TCBIAlloc                       00:00000050
TCBIFree                        00:0000007C
TCBInit                         00:00000000
TCBInsertIntoReadyQueue         00:000000D8
TCBNext                          E:0000007C
TCBPC                            E:00000050
TCBPointerToHandle              00:00000040
TCBPopReadyQueue                00:0000017A
TCBPrev                          E:00000080
TCBPriority                      E:00000055
TCBRegs                          E:00000004
TCBRemoveFromReadyQueue         00:00000150
TCBSR                            E:0000004C
TCBSSP                           E:00000048
TCBStartTick                     E:0000006C
TCBStatus                        E:00000054
TCBTicks                         E:00000074
TCBUSP                           E:00000044
TCB_SIZE                         E:00000100
TEXTCOL                          E:00000040
TEXTREG                          E:FD080000
TEXTROW                          E:00000020
TEXTVID_CMDTBL                  00:00000EC4
TICK                            00:00006B58
TOUPB1                          00:00007026
TOUPBRT                         00:00007046
TOUPBUF                         00:00007020
TOUPPER                         00:00007058
TOUPRET                         00:00007068
TRAP15                          00:000072D6
TSTC                            00:00006FB2
TSTNUM                          00:00006FCA
TSTV                            00:000069EC
TSTVRT                          00:00006A6C
TS_PREEMPT                       E:00000020
TS_RUNNING                       E:00000080
TV1                             00:00006A34
TV2                             00:00006A64
TXT                             00:00007218
TXTBGN                          00:00005C48
TXTUNF                          00:000071B8
TYPMSG                          00:00007140
TestBitmap                      00:000074F8
TextCols                         E:0004008D
TextRows                         E:0004008C
TextScr                          E:00040004
TickIRQ                         00:0000905E
TimerStack                       E:00041BFC
USP1                            00:000069CA
UnlockSemaphore                 00:00002046
UnlockSysSemaphore              00:000003A6
UpdateIRQLive                   00:000002EC
UpdateStringPointers            00:0000699E
VARBGN                          00:000071BC
Vertical1                       00:000075E2
Vertical2                       00:000075FE
WAITIRQ                         00:000060B4
WHTMSG                          00:00007138
WSTART                          00:00005CBA
Wait10ms                        00:00000AD6
Wait300ms                       00:00000AF2
X                               00:00009358
XOFF                             E:00000013
XON                              E:00000011
XP11                            00:000065EA
XP12                            00:000065F6
XP13                            00:00006602
XP14                            00:0000660E
XP15                            00:0000661A
XP15RT                          00:00006626
XP16                            00:00006628
XP17                            00:00006646
XP18                            00:0000664C
XP21                            00:0000666E
XP22                            00:00006674
XP23                            00:00006678
XP24                            00:00006686
XP25                            00:000066B4
XP26                            00:000066BA
XP27                            00:000066CE
XP30                            00:00006744
XP31                            00:00006750
XP34                            00:00006766
XP35                            00:00006780
XP36                            00:00006740
XP40                            00:000067B4
XP41                            00:000067C6
XP42                            00:0000684E
XP43                            00:00006850
XP44                            00:00006832
XP45                            00:000067E0
XPRT0                           00:00006636
XPRT1                           00:0000663E
XPSTNG                          00:000067D6
XP_AND                          00:000065A8
XP_ANDX                         00:000065BE
XP_MOD                          00:00006786
XP_OR                           00:00006580
XP_ORX                          00:000065BE
XP_POP                          00:00006524
XP_POP1                         00:0000653A
XP_PUSH                         00:0000650E
_CheckNan                       00:000082DC
_CheckNegative                  00:0000835A
_CheckZero                      00:00008340
_ComputeDigitsBeforeDecpt       00:000083B4
_E                               E:0004050C
_ExtExpDigit                    00:000084D8
_ExtExpDigits                   00:000084F6
_FloatToString                  00:000085A0
_GetExponent                    00:00008658
_GetFloat                       00:00008758
_GetFloatBackupChar             00:000085F0
_GetFloatGetChar                00:000085E2
_GetFloatIgnBlanks              00:000085E8
_GetFraction                    00:000085F4
_GetInteger                     00:000086E2
_GetRand                        00:00001FAC
_KeyState1                       E:0010000F
_KeyState2                       E:00100010
_KeybdBuf                        E:00100020
_KeybdClearIRQ                  00:00000796
_KeybdCnt                        E:00100013
_KeybdGetScancode               00:00000778
_KeybdGetStatus                 00:0000075A
_KeybdHead                       E:00100011
_KeybdInit                      00:00000648
_KeybdOBuf                       E:00100080
_KeybdTail                       E:00100012
_Keybd_tick                      E:0001001C
_LeadingZero                    00:000083EE
_LessThanDbl                    00:00008388
_MakeBig                        00:0000836C
_PadLeft                        00:0000851E
_PadRight                       00:0000856E
_SpitOutDigits                  00:000083FE
_SpitOutE                       00:000084C0
_TrimDotZero                    00:00008498
_TrimTrailingPoint              00:0000847A
_TrimTrailingZeros              00:000084B4
_canary                          E:00040098
_dasmbuf                         E:00040800
_dfMil                          00:000082C8
_dfOne                          00:000082B0
_dfTen                          00:000082BC
_digits_before_decpt             E:00040510
_fpBuf                           E:00040520
_fpTextIncr                      E:00040094
_fpWork                          E:00040600
_keybdControlCodes              00:00000DC4
_keybdExtendedCodes             00:00000E44
_msgInf                         00:000082D8
_msgNan                         00:000082D4
_precision                       E:00040514
_shiftedScanCodes               00:00000CC4
_unshiftedScanCodes             00:00000BC4
_width                           E:00040508
a_was_less                      00:0000B044
add_address                     00:0000B16C
add_char_loop                   00:0000B114
add_character                   00:0000A6B0
add_coords                      00:0000B182
add_explode                     00:0000ABEA
add_fire                        00:0000ABF6
add_hex_chr                     00:0000B152
add_item                        00:0000ABD0
add_message                     00:0000B0CC
add_p_size                      00:0000A1B4
add_pair                        00:0000B19E
add_play_explode                00:0000AD0E
add_player                      00:0000ADB4
add_saucer                      00:0000ABF0
add_score                       00:0000AC08
add_ships                       00:0000A6C0
add_ships_loop                  00:0000A6DC
add_single                      00:0000B19C
add_sup_hex_chr                 00:0000B146
add_sup_zero                    00:0000B15C
add_the_char                    00:0000B12A
add_to_list                     00:0000AB9C
add_to_score                    00:0000AE96
addr_err                        00:000090E6
aim_shot                        00:0000A372
asteroids_start                 00:00009F88
atn_eight                       00:0000AFB0
atn_quad                        00:0000AFA0
atn_semi                        00:0000AF90
atn_tab                         00:0000AFCE
attract_fire                    00:0000A34E
attract_saucer                  00:0000A29C
beat1_snd                        E:00000008
beat1_sound                     00:0000CE00
beat2_snd                        E:00000009
beat2_sound                     00:0000CE12
bkColor                          E:00040088
brdisp_trap                     00:000090FC
bus_err                         00:00008D0A
calc_fire_byte                  00:0000A460
char_1                          00:0000C93C
char_2                          00:0000C944
char_3                          00:0000C954
char_4                          00:0000C962
char_5                          00:0000C970
char_6                          00:0000C97E
char_7                          00:0000C98C
char_8                          00:0000C996
char_9                          00:0000C9A6
char_a                          00:0000C7D0
char_b                          00:0000C7E0
char_c                          00:0000C7FA
char_d                          00:0000C806
char_e                          00:0000C816
char_f                          00:0000C826
char_g                          00:0000C834
char_h                          00:0000C846
char_i                          00:0000C854
char_j                          00:0000C862
char_k                          00:0000C86E
char_l                          00:0000C87A
char_m                          00:0000C884
char_n                          00:0000C890
char_o0                         00:0000C89A
char_p                          00:0000C8A6
char_q                          00:0000C8B4
char_r                          00:0000C8C6
char_s                          00:0000C8D6
char_set                        00:0000C9B4
char_spc                        00:0000C938
char_t                          00:0000C8E4
char_u                          00:0000C8F0
char_v                          00:0000C8FC
char_w                          00:0000C906
char_x                          00:0000C914
char_y                          00:0000C91E
char_z                          00:0000C92C
check_all                       00:0000A15E
check_alpha                     00:0000A5CC
check_clear                     00:0000A8F0
check_clear_loop                00:0000A8F4
check_clear_y                   00:0000A90E
check_hi_loop                   00:0000AF02
check_hi_next                   00:0000AF10
check_hi_player                 00:0000AEFA
check_hiscores                  00:0000AEDE
check_hits                      00:0000A13E
check_neg_velocity              00:0000A8E4
check_next_object               00:0000A15A
check_pss                       00:0000A14C
check_velocity                  00:0000A8D6
chk_exception                   00:0000208C
clear_hyper                     00:0000A828
clear_items_loop                00:0000A688
clear_loop                      00:0000B1E0
clear_rock                      00:0000AE82
clear_rocks                     00:0000A9CE
clear_rocks_loop                00:0000A9D0
clear_saucer                    00:0000A7C8
close_all                       00:0000A53C
close_all_2                     00:0000B236
cmdAsteroids                    00:00007990
cmdBreakpoint                   00:0000796C
cmdClearScreen                  00:000079AC
cmdClock                        00:00007A9E
cmdCore                         00:000079B8
cmdDisassemble                  00:0000805C
cmdDispatch                     00:000078E4
cmdDumpMemory                   00:000080AC
cmdDumpRegs                     00:00008176
cmdEditMemory                   00:00007F1E
cmdFMTK                         00:000079DC
cmdFillB                        00:00007DCA
cmdFillL                        00:00007E72
cmdFillW                        00:00007E1E
cmdGrDemo                       00:00007FA2
cmdHelp                         00:00007B0E
cmdJump                         00:00007F92
cmdLoadS19                      00:00008962
cmdMonitor                      00:00007888
cmdReceiveSerial                00:00007D96
cmdReset                        00:00007ABC
cmdSendSerial                   00:00007D66
cmdString                       00:000077C6
cmdTable                        00:00007804
cmdTestCPU                      00:0000799C
cmdTestFP                       00:000079E4
cmdTestGF                       00:00007A70
cmdTestRAM                      00:0000889A
cmdTestSerialReceive            00:00008220
cmdTinyBasic                    00:00007998
cmdVideoMode                    00:0000792A
col_table                       00:0000A1C4
col_table_l                     00:0000A1DC
col_table_p                     00:0000A1CC
col_table_s                     00:0000A1D4
copy_msg                        00:0000C398
copy_rock                       00:0000AA26
copy_rock_2                     00:0000AA2A
copy_short                      00:0000AE06
copy_vectors                    00:0000AE0A
copy_velocity                   00:0000AA50
cos_d0                          00:0000B02C
cossin_d0                       00:0000B03E
cpu_test                        00:000020E0
d_mess_0                        00:0000CB04
d_mess_1                        00:0000CB14
d_mess_2                        00:0000CB1D
d_mess_3                        00:0000CB44
d_mess_4                        00:0000CB67
d_mess_5                        00:0000CB8A
d_mess_6                        00:0000CBB0
d_mess_7                        00:0000CBC6
d_messages                      00:0000CAF4
dccr                            00:000011F8
dclf                            00:000012CC
dcx10                           00:00001260
dcx11                           00:00001282
dcx12                           00:00001278
dcx14                           00:000011EC
dcx16                           00:000012D0
dcx4                            00:000012D4
dcx6                            00:00001216
dcx7                            00:000011F0
dcx8                            00:0000122C
dcx9                            00:00001242
dec_isaucer_time                00:0000A2C4
delta_x_pos                     00:0000A178
delta_y_pos                     00:0000A18A
dly3s1                          00:000020B0
dly3s2                          00:000020AE
doBackspace                     00:000012DE
doCtrlX                         00:00001322
doDelete                        00:000012EC
do_nothing                      00:000004D8
do_p1_ships                     00:0000AB04
do_p2_score                     00:0000AB78
do_saucer                       00:0000A270
do_start_mess                   00:0000A038
do_vector                       00:0000B24E
dspj1                           00:0000729C
dspmem1                         00:0000810E
dspspc1                         00:00008814
dsret                           00:000072A8
e_mess_0                        00:0000CA4A
e_mess_1                        00:0000CA56
e_mess_2                        00:0000CA5E
e_mess_3                        00:0000CA80
e_mess_4                        00:0000CA9B
e_mess_5                        00:0000CAB8
e_mess_6                        00:0000CADF
e_mess_7                        00:0000CAEA
e_messages                      00:0000CA3A
edtmem1                         00:00007F28
end_game                        00:0000A12A
end_vector                      00:0000B33C
enter_hiscores                  00:0000A486
err_cmdproc                     00:000014AC
err_dcb                          E:00040B8C
err_init                        00:0000147E
err_ret                         00:000014AA
existing_saucer                 00:0000A32A
exit_add_message                00:0000B132
exit_add_score                  00:0000AC36
exit_add_ships                  00:0000A6E8
exit_check_hiscores             00:0000AF3E
exit_check_velocity             00:0000A8EE
exit_copy_vectors               00:0000AE24
exit_do_saucer                  00:0000A328
exit_enter_hiscores             00:0000A5DA
exit_existing_saucer            00:0000A354
exit_find_rock                  00:0000ACF4
exit_game_message               00:0000A128
exit_hi_chk                     00:0000AF34
exit_high_scores                00:0000ACDC
exit_hit_a_rock                 00:0000AED8
exit_hyperspace                 00:0000A66A
exit_insert_loop                00:0000AF66
exit_limit_velocity             00:0000AAAA
exit_make_rocks                 00:0000A9D8
exit_no_scores                  00:0000ACE2
exit_not_done                   00:0000A5D8
exit_play_sample                00:0000CDE6
exit_push_start                 00:0000A0AA
exit_ship_fire                  00:0000A40C
exit_ship_move                  00:0000A82C
exit_static                     00:0000AB9A
expl_0                          00:0000C480
expl_1                          00:0000C44A
expl_2                          00:0000C40C
expl_3                          00:0000C3E0
expl_tab                        00:0000C3D8
expl_x_pos                       S:0000005B
expl_y_pos                       S:00000067
explode_object                  00:0000A22A
extra_snd                        E:0000000A
extra_sound                     00:0000CE63
f_mess_0                        00:0000CBE0
f_mess_1                        00:0000CBEF
f_mess_2                        00:0000CBF6
f_mess_3                        00:0000CC1A
f_mess_4                        00:0000CC33
f_mess_5                        00:0000CC55
f_mess_6                        00:0000CC7E
f_mess_7                        00:0000CC90
f_messages                      00:0000CBD0
f_xpos_off                       E:FFFFFFBA
f_xvel_off                       E:0000004C
f_ypos_off                       E:00000000
f_yvel_off                       E:0000006F
fgColor                          E:00040084
filename                        00:0000CEDA
find_next_rock                  00:0000ACEA
find_rock                       00:0000ACE8
fire_ok                         00:0000A47C
fire_saucer                     00:0000A35A
fire_shot                       00:0000A40E
first_quad                      00:0000ADDE
flag_end                         E:0000002F
flags_off                        E:0000000C
fpBuf                            E:000402C0
framebuf_clear                  00:00001B98
framebuf_cmdproc                00:0000198C
framebuf_dcb                     E:00040D18
framebuf_get_color              00:00001A5E
framebuf_get_dimen              00:00001A6E
framebuf_getbuf                 00:00001A5A
framebuf_getbuf1                00:000019CC
framebuf_getbuf2                00:000019D4
framebuf_getchar                00:000019AE
framebuf_init                   00:00001884
framebuf_putbuf                 00:00001A5A
framebuf_putchar                00:000019AE
framebuf_set_inpos              00:000019B0
framebuf_set_outpos             00:000019BE
framebuf_set_unit               00:00001A50
framebuf_setbuf1                00:000019DC
framebuf_setbuf2                00:000019EA
framebuf_stat                   00:000019AE
framebuf_stub                   00:00001A5A
framebuf_swapbuf                00:000019F8
framebuf_writeat                00:00001A9E
fx_sounds                       00:0000AE26
game_count                       S:00000059
game_message                    00:0000A024
game_over                       00:0000A0AC
gen_prng                        00:0000B23C
gen_rock_loop                   00:0000A978
get_atn                         00:0000AF84
get_screen_address              00:0000726C
get_screen_color                00:00001184
gfxaccel_clear                  00:00001CD8
gfxaccel_cmdproc                00:00001CAC
gfxaccel_draw_line              00:00001D32
gfxaccel_draw_rectangle         00:00001DA2
gfxaccel_draw_triangle          00:00001E12
gfxaccel_get_color              00:00001CE0
gfxaccel_get_dimen              00:00001CDC
gfxaccel_get_inpos              00:00001CDC
gfxaccel_get_outpos             00:00001CDC
gfxaccel_get_outptr             00:00001CDC
gfxaccel_getbuf                 00:00001CDC
gfxaccel_getbuf1                00:00001CDC
gfxaccel_getbuf2                00:00001CDC
gfxaccel_getchar                00:00001CDC
gfxaccel_init                   00:00001C74
gfxaccel_plot_point             00:00001CDC
gfxaccel_putbuf                 00:00001CDC
gfxaccel_putchar                00:00001CDC
gfxaccel_set_color              00:00001CEA
gfxaccel_set_color123           00:00001D08
gfxaccel_set_inpos              00:00001CDC
gfxaccel_set_outpos             00:00001CDC
gfxaccel_set_unit               00:00001CDC
gfxaccel_setbuf1                00:00001CDC
gfxaccel_setbuf2                00:00001CDC
gfxaccel_stat                   00:00001CCE
gfxaccel_stub                   00:00001CDC
gfxaccel_swapbuf                00:00001CDC
gfxaccel_wait                   00:00001EB6
gfxaccel_writeat                00:00001CDC
glob_scale                       S:00000000
go_reset_play                   00:0000A72C
go_reset_sauc                   00:0000A732
gr_bitmap_buffer                 E:000408B0
gr_bitmap_screen                 E:000408A4
gr_double_buffer                 E:000408AC
gr_height                        E:000408A0
gr_width                         E:0004089C
gr_x                             E:00040894
gr_y                             E:00040898
gthx3                           00:00008806
gthx5                           00:000087E2
gthx6                           00:000087F4
handle_collision                00:0000A1E4
hi_char                          S:00000020
hide_p_cnt                       E:0000007A
high_idx                         S:00000017
high_off                         E:00000083
high_scores                     00:0000AC3C
high_scores_loop                00:0000AC6E
hinames                          S:0000003B
hiscore_y                        S:00000012
hiscores                         S:00000027
hit_a_rock                      00:0000AE68
hype_xok1                       00:0000A618
hype_xok2                       00:0000A622
hype_yok1                       00:0000A640
hype_yok2                       00:0000A64A
hyper                            S:00000026
hyperspace                      00:0000A5DC
i2c_setup                       00:00008B8C
i2c_wait_rx_nack                00:00008BDA
i2c_wait_tip                    00:00008B9C
i2c_wr_cmd                      00:00008BAC
i2c_xmit1                       00:00008BBC
i_rk_count                       E:00000075
i_sauc_tim                       E:00000078
icc1                            00:00001388
ignBlanks                       00:00007EBE
illegal_trap                    00:00009134
init_i2c                        00:00008B8C
init_plic                       00:00007790
insert_hiscore                  00:0000AF40
insert_loop                     00:0000AF44
io_irq                          00:0000914A
io_trap                         00:00008FC4
irq3_rout                       00:000090A0
irq6_rout                       00:000090A0
irq_list_tbl                     A:00000400
irq_proc_generic                00:000090B4
irq_rout                        00:000090A0
is_closer                       00:0000A92C
item_exploding                  00:0000A73A
kbdi0002                        00:00000674
kbdi0004                        00:000006EC
kbdi0005                        00:00000708
kbdiTryAgain                    00:000006DE
kbdiXmitBusy                    00:00000722
keep_saucer_dir                 00:0000A342
keep_scale                      00:0000A7BA
keep_small                      00:0000A26A
keybd_cmdproc                   00:000005A0
keybd_dcb                        E:00040A84
keybd_getbuf                    00:000005DA
keybd_getchar                   00:000005D2
keybd_init                      00:00000510
keybd_putbuf                    00:000005DA
keybd_putchar                   00:000005CA
keybd_set_inpos                 00:000005DA
keybd_set_outpos                00:000005DA
keybd_stat                      00:000005C2
kgid1                           00:00000610
kgnotKbd                        00:00000618
kill_the_player                 00:0000A812
last_fire                        S:00000021
last_hype                        S:00000022
last_vector                     00:0000B34A
leds                             E:FD0FFF00
ledxit                          00:0000070C
lexpl_snd                        E:00000007
lexpl_sound                     00:0000CE24
lgsau_snd                        E:00000004
lgsau_sound                     00:0000CE79
limit_p_vel                     00:0000AA9A
limit_velocity                  00:0000AA86
load_old_sound                  00:0000CDC2
load_sound                      00:0000CDBC
local_x                          S:00000002
local_y                          S:00000004
loop1                           00:000004A0
loop2                           00:0000049E
loop3                           00:00001166
loop_atn                        00:0000AFB4
main_loop                       00:00009F90
make_rocks                      00:0000A932
memend                           E:00100004
mess_origin                     00:0000CA12
mess_table                      00:0000CA32
mexpl_snd                        E:00000006
mexpl_sound                     00:0000CE39
min_rocks                        E:0000007D
move_item                       00:0000A754
move_items                      00:0000A6EA
move_next_item                  00:0000A6EE
move_next_object                00:0000A7C0
msgAddrErr                      00:00009196
msgBadKeybd                     00:00000730
msgBusErr                       00:00008CF9
msgChk                          00:000091F2
msgHello                        00:00007CB0
msgRtcReadFail                  00:00008CE0
msgStackCanary                  00:00009200
msgUnknownCmd                   00:00007CA0
msgXmitBusy                     00:0000073F
msg_bad_branch_disp             00:000091B5
msg_core_start                  00:00009185
msg_illegal                     00:000091A3
msg_io_access                   00:000091D7
msg_reglist                     00:000081FA
msg_regs                        00:000081F6
msg_start                       00:0000915E
msg_test_done                   00:000091C7
nd1                             00:00001EEE
nd2                             00:00001EEE
nd3                             00:00001EEE
nd4                             00:00001EEE
neg_upper_ok                    00:0000AA90
net_delay                       00:00001EEE
new_rocks                        E:0000007B
next_hi_char                    00:0000A554
next_p_high                     00:0000A520
next_pss                        00:0000A146
nmeSerial                       00:00001818
nmi_rout                        00:000090D4
no_add_size                     00:0000A1B6
no_aim_shot                     00:0000A3C8
no_dec_new_rocks                00:0000A014
no_game_over                    00:0000A0EA
no_inc_min                      00:0000A95C
no_neg_x10                      00:0000B2B6
no_neg_x11                      00:0000B28C
no_neg_x2                       00:0000B338
no_neg_y10                      00:0000B2AA
no_neg_y11                      00:0000B280
no_neg_y2                       00:0000B330
no_new_rocks                    00:0000A724
no_play                         00:00009FF6
no_playerx                      00:0000A4B4
no_pos_reflect                  00:0000ADCA
no_reset_scale                  00:0000A752
no_reset_xy                     00:0000AD38
no_saucer_sound                 00:0000AE34
no_save_ist                     00:0000A2D4
no_set_max                      00:0000A96C
no_shot_dec                     00:0000AC06
no_shot_or                      00:0000A3C4
no_thrust                       00:0000AE04
no_thump_sound                  00:0000AE66
nodec_thmpi                     00:0000A0C0
notRxInt                        00:000017B8
notTxInt                        00:00001806
not_closer                      00:0000A922
not_player                      00:0000A202
not_pss_player                  00:0000A21A
not_right                       00:0000B2C8
not_rot_left                    00:0000A59E
not_rot_left1                   00:0000A83A
not_rot_right1                  00:0000A842
not_rot_right2                  00:0000A5A6
not_saucer                      00:0000A1F4
not_thrust                      00:0000A8A0
not_timed_out                   00:0000A582
not_x_max                       00:0000A776
not_y_max                       00:0000A796
notscreen                       00:0000B1A4
null_cmdproc                    00:0000050C
null_dcb                         E:00040A00
null_init                       00:000004DE
null_ret                        00:0000050A
numBreakpoints                   E:00000008
num_players                      S:0000001A
old_sound_play                  00:0000CDE4
op_ABCD                         00:0000443A
op_ADD                          00:00004DD0
op_ADDA                         00:00004FA4
op_ADDQ                         00:000047D0
op_ADDX                         00:0000503C
op_ADD_I                        00:000034B8
op_AND                          00:00004AEE
op_ANDI_TO_CCR                  00:00002268
op_ANDI_TO_SR                   00:0000228E
op_BCC                          00:000046FA
op_BCHG                         00:0000265E
op_BCLR                         00:000029C6
op_BOOL_I                       00:000030E8
op_BSET                         00:00002D14
op_BSR                          00:0000329A
op_BTST                         00:000022B4
op_BTST0                        00:0000243E
op_BTST1                        00:0000244A
op_BTST10                       00:00002492
op_BTST11                       00:0000249A
op_BTST12                       00:000024A0
op_BTST2                        00:00002452
op_BTST20                       00:000025F8
op_BTST21                       00:00002602
op_BTST22                       00:00002608
op_BTST23                       00:0000260E
op_BTST24                       00:00002614
op_BTST25                       00:0000261A
op_BTST26                       00:00002620
op_BTST27                       00:00002626
op_BTST28                       00:0000262C
op_BTST29                       00:00002632
op_BTST3                        00:0000245A
op_BTST30                       00:00002638
op_BTST31                       00:0000263E
op_BTST32                       00:00002642
op_BTST4                        00:00002462
op_BTST5                        00:0000246A
op_BTST6                        00:00002472
op_BTST7                        00:0000247A
op_BTST8                        00:00002482
op_BTST9                        00:0000248A
op_CHK                          00:00003D44
op_CMP                          00:00004C4E
op_CMPA                         00:00004CC4
op_CMPM                         00:00004D2A
op_CMP_I                        00:000032D0
op_DBCC                         00:0000477A
op_DIVS                         00:000049B2
op_DIVU                         00:00004960
op_EOR                          00:00004BD8
op_EORI_TO_CCR                  00:0000221C
op_EORI_TO_SR                   00:00002242
op_EXG                          00:000052F4
op_EXT                          00:00003BC4
op_LEAPEA                       00:00003C06
op_LINKS                        00:00003D16
op_MOVE                         00:000037C4
op_MOVEM                        00:0000411C
op_MOVEP                        00:0000305C
op_MOVEQ                        00:00004944
op_MOVE_USP                     00:00003D34
op_MOVE_xxx_FLAGS               00:000039D0
op_MULS                         00:000052A8
op_MULU                         00:0000525C
op_NBCD                         00:0000462A
op_NEGS                         00:00003D8E
op_OR                           00:00004A04
op_ORI_TO_CCR                   00:000021D8
op_ORI_TO_SR                    00:000021FA
op_ROXx                         00:00005598
op_ROx                          00:00005362
op_RTR                          00:000046D8
op_SBCD                         00:00004532
op_SCC                          00:000047A0
op_SHIFTS                       00:000057CE
op_SHIFTS2                      00:00005A10
op_SUB                          00:00004EBA
op_SUBA                         00:00004FF0
op_SUBQ                         00:0000488A
op_SUBX                         00:0000514C
op_SUB_I                        00:0000363E
op_SWAP                         00:00003BF0
op_TAS                          00:00003CB2
op_TRAPV                        00:000046BC
op_TST                          00:00003CD8
op_abs                          00:0000B29C
op_call                         00:0000B25C
op_jump                         00:0000B262
op_rtsvec                       00:0000B24C
op_short                        00:0000B30C
op_vctr                         00:0000B272
output_number                   00:0000B00E
output_number_loop              00:0000B010
p1_high                          S:00000176
p1_score                         S:00000173
p1_ships                         S:00000175
p2_high                          S:0000027A
p2_score                         S:00000277
p2_ships                         S:00000279
p_2_end                          S:0000027B
p_fire_off                       E:0000002B
p_flag_off                       E:00000027
p_orient                         S:0000001E
p_xpos_off                       E:FFFFFFB6
p_xvel_off                       E:0000004A
p_xvlo_off                       E:0000007E
p_ypos_off                       E:FFFFFFFC
p_yvel_off                       E:0000006D
p_yvlo_off                       E:0000007F
past_play                        S:00000019
pcssxa                          00:00008A12
pen_color                        E:00040890
pfire_snd                        E:00000001
pfire_sound                     00:0000CEB6
piece_draw_loop                 00:0000AD42
play_00                         00:0000C570
play_01                         00:0000C588
play_02                         00:0000C5AC
play_03                         00:0000C5D0
play_04                         00:0000C5F4
play_05                         00:0000C616
play_06                         00:0000C63A
play_07                         00:0000C65E
play_08                         00:0000C682
play_09                         00:0000C6A6
play_0A                         00:0000C6CA
play_0B                         00:0000C6EE
play_0C                         00:0000C712
play_0D                         00:0000C736
play_0E                         00:0000C75A
play_0F                         00:0000C77E
play_10                         00:0000C7A2
play_liv                        00:0000C7BA
play_sample                     00:0000CDC8
play_sound                       S:00000015
play_tab                        00:0000C54E
player_1                         E:000000F3
player_2                         E:000001F7
player_idx                       S:00000018
player_init                     00:0000A9DA
player_n                        00:0000B13E
player_reset                    00:0000AA10
player_shot                     00:0000A246
player_x                        00:0000B13A
plot                            00:00001A9E
plot_and                        00:00001B60
plot_black                      00:00001B82
plot_copy                       00:00001B74
plot_or                         00:00001B36
plot_sw                         00:00001B10
plot_white                      00:00001B8C
plot_xor                        00:00001B4A
plottbl                         00:00001AD4
pos_lower_ok                    00:0000AAA2
prtflt                          00:00008F4A
pss_check_loop                  00:0000A140
push_start_mess                 00:0000A094
px_hide                         00:00009FEE
px_time                          S:0000001C
r_hit_tim                        E:00000079
ramtest                         00:0000889A
ramtest0                        00:000088E4
ramtest1                        00:000088EC
ramtest2                        00:0000891A
ramtest3                        00:00008960
ramtest6                        00:0000890A
rbo                             00:00008B84
read_hi                         00:0000B22C
readyQ                           E:00100320
reset_game                      00:0000A66C
reset_xy_loop                   00:0000AD20
reveal_player                   00:0000A80A
rmtst1                          00:000088FE
rmtst2                          00:00008932
rmtst3                          00:0000893A
rmtst5                          00:000088B4
rock_0                          00:0000C4C6
rock_1                          00:0000C4DE
rock_2                          00:0000C4FA
rock_3                          00:0000C514
rock_count                       E:00000076
rock_hit_out                    00:0000A2A6
rock_on_x                       00:0000A9AC
rock_score                      00:0000AEDA
rock_tab                        00:0000C4BE
rock_y_ok                       00:0000A9AA
rot_and_thrust                  00:0000A82E
rot_not_left                    00:0000A5A6
rotate_iofocus                  00:00007760
rtc_read                        00:00008BEA
rtc_write                       00:00008C76
sGetChar                        00:00008B4E
s_controls                      00:0000B1A4
s_fire_off                       E:00000029
s_flag_off                       E:00000028
s_key                            S:00000014
s_mess_0                        00:0000CCAE
s_mess_1                        00:0000CCB6
s_mess_2                        00:0000CCBF
s_mess_3                        00:0000CCE6
s_mess_4                        00:0000CD04
s_mess_5                        00:0000CD2C
s_mess_6                        00:0000CD3E
s_mess_7                        00:0000CD4B
s_messages                      00:0000CC9E
s_orient                         S:0000001F
s_xpos_off                       E:FFFFFFB8
s_xvel_off                       E:0000004B
s_ypos_off                       E:FFFFFFFE
s_yvel_off                       E:0000006E
sauc_cntdn                       E:00000077
sauc_jsr                        00:0000C530
sauc_vec                        00:0000C532
saucer_yok                      00:0000A2E6
saucer_yvel                     00:0000A356
save_char                       00:0000A5D4
save_hbutton                    00:0000A56C
save_hi_index                   00:0000AF30
save_hyperspace                 00:0000A666
save_saucer                     00:0000A324
save_ship_fire                  00:0000A408
score_off                        E:00000080
scr_x                            S:00000006
scr_y                            S:00000008
select_focus1                   00:00007772
select_iofocus                  00:0000774E
semamem                          E:FD050000
serial_cmdproc                  00:00001536
serial_dcb                       E:00040C94
serial_getbuf                   00:0000158A
serial_getchar                  00:00001564
serial_getchar_direct           00:0000156A
serial_init                     00:000014E0
serial_peek_char                00:00001572
serial_peek_char_direct         00:0000157A
serial_putbuf                   00:0000158A
serial_putchar                  00:0000155C
serial_putchar_direct           00:00001582
serial_set_inpos                00:0000158A
serial_set_outpos               00:0000158A
serial_stat                     00:00001558
set_graphics_mode               00:00007242
set_text_mode                   00:00007218
setscreen                       00:0000B1A4
setup_err                       00:0000147E
setup_framebuf                  00:00001820
setup_gfxaccel                  00:00001C74
setup_keybd                     00:00000510
setup_null                      00:000004DE
setup_serial                    00:000014E0
setup_textvid                   00:00000F4C
sexpl_snd                        E:00000005
sexpl_sound                     00:0000CE4E
sfire_snd                        E:00000000
sfire_sound                     00:0000CEC8
shift_left                      00:0000B346
ship_fire                       00:0000A3DE
ship_move                       00:0000A7DC
ship_parts                      00:0000ADA8
ship_wrk_x                      00:0000ACF6
ship_wrk_y                      00:0000AD02
ships_off                        E:00000082
shot_jsr                        00:0000C9FE
shot_mask                       00:0000A3DA
shot_or                         00:0000A3DC
shot_vec                        00:0000CA00
show_ships                      00:0000A6CA
sin_cos                         00:0000B04A
sin_d0                          00:0000B030
sirq0001                        00:00001768
sirq0002                        00:00001806
sirqNxtByte                     00:00001756
sirqRxFull                      00:000017B8
sirqTxEmpty                     00:00001806
sirqXmitOff                     00:00001806
sixteen_ms                       S:0000001D
skip_add                        00:0000AE9E
skip_p2_score                   00:0000AB8C
skip_play_flash                 00:0000AAF0
skip_play_inc                   00:0000A70A
skip_player_cont                00:00009FEA
skip_player_move                00:00009FE6
skip_sub                        00:0000AFBE
small_s_size                    00:0000A1B2
small_saucer                    00:0000A322
smsau_snd                        E:00000003
smsau_sound                     00:0000CE8E
sound_init                      00:0000CD5B
sound_key                       00:0000CDE8
ss_count                         S:0000001B
start                           00:000003B8
start_game                      00:0000A060
start_left                      00:0000A2FA
start_other                     00:000004B2
static_messages                 00:0000AAAC
suppress_0                       S:00000016
switch_addr                      S:0000000E
sys_switches                     E:000408B8
tblPow2                         00:00007AEE
tcbs                             E:20010000
test_fire_loop                  00:0000A3FC
test_neg_fire                   00:0000A474
textvid_clear                   00:0000111A
textvid_cmdproc                 00:00000F28
textvid_dcb                      E:00040B08
textvid_get_color               00:000010C0
textvid_get_dimen               00:000010EA
textvid_get_inpos               00:00001042
textvid_get_outpos              00:00001084
textvid_get_outptr              00:0000109A
textvid_getbuf                  00:0000103E
textvid_getbuf1                 00:000010D0
textvid_getchar                 00:00001036
textvid_init                    00:00000F8A
textvid_putbuf                  00:0000103E
textvid_putchar                 00:000011CE
textvid_set_inpos               00:00001058
textvid_set_outpos              00:0000106E
textvid_set_unit                00:000010E0
textvid_stat                    00:00001032
textvid_stub                    00:0000103E
third_quad                      00:0000ADD0
thmp_sndi                        E:0000007C
three_ship_start                00:0000A67A
thrst_snd                        E:00000002
thrst_sound                     00:0000CEA3
thump_snd                        S:00000023
thump_time                       S:00000024
tickcnt                          E:0004009C
time_count                       S:00000025
timer_interrupt                 00:0000B134
trap3                           00:00008D24
variables                       00:0000CEE7
vec_x_pos                       00:0000AD68
vec_y_pos                       00:0000AD74
vector                          00:0000B398
vector_base                     00:0000B2D0
vector_move                     00:0000B36C
was_rot_left                    00:0000A5A6
what_hit_rock                   00:0000A226
what_hit_saucer                 00:0000A252
wide_shot                       00:0000A3BA
wrap_to_a                       00:0000A5C6
wrap_to_z                       00:0000A5CA
write_initial                   00:0000A696
x_off_pos                       00:0000AA60
x_pos_end                        E:FFFFFFC6
x_pos_neg                       00:0000A766
x_pos_off                        E:FFFFFF80
x_vel_off                        E:0000002F
y_not_neg                       00:0000A78C
y_off_pos                       00:0000AA7A
y_pos_off                        E:FFFFFFC6
y_vel_off                        E:00000052
zero_suppress                   00:0000B020

Symbols by value:
FD050000 semamem
FD060000 ACIA
FD069000 I2C2
FD080000 TEXTREG
FD090000 PLIC
FD0FFC00 RST_REG
FD0FFD00 RAND_NUM
FD0FFD00 RAND
FD0FFD04 RAND_STRM
FD0FFD08 RAND_MZ
FD0FFD0C RAND_MW
FD0FFE00 KEYBD
FD0FFF00 leds
FD200000 FRAMEBUF
FD300000 GFXACCEL
FDC00000 MMU
FFFFFF80 x_pos_off
FFFFFFB6 p_xpos_off
FFFFFFB8 s_xpos_off
FFFFFFBA f_xpos_off
FFFFFFC6 x_pos_end
FFFFFFC6 y_pos_off
FFFFFFF0 DDATA
FFFFFFFC p_ypos_off
FFFFFFFC HISPC
FFFFFFFE s_ypos_off
00000000 E_Ok
00000000 f_ypos_off
00000000 ACIA_TX
00000000 TCBInit
00000000 glob_scale
00000000 DCB_MAGIC
00000000 sfire_snd
00000000 ACIA_RX
00000000 HAS_MMU
00000000 I2C_PREL
00000001 DT_NUMERIC
00000001 SCREEN_FORMAT
00000001 pfire_snd
00000001 I2C_PREH
00000002 local_x
00000002 I2C_CTRL
00000002 DT_STRING
00000002 SERIAL_SEMA
00000002 DEV_PUTCHAR
00000002 E_Func
00000002 thrst_snd
00000003 I2C_TXR
00000003 KEYBD_SEMA
00000003 CTRLC
00000003 I2C_RXR
00000003 smsau_snd
00000004 local_y
00000004 ACIA_STAT
00000004 I2C_CMD
00000004 EOT
00000004 I2C_STAT
00000004 TCBRegs
00000004 RAND_SEMA
00000004 lgsau_snd
00000004 DCB_NAME
00000004 NCORES
00000005 SCREEN_SEMA
00000005 sexpl_snd
00000006 scr_x
00000006 MEMORY_SEMA
00000006 mexpl_snd
00000007 DEV_SET_OUTPOS
00000007 lexpl_snd
00000008 numBreakpoints
00000008 beat1_snd
00000008 CTRLH
00000008 FMTK_SEMA
00000008 scr_y
00000008 ACIA_CMD
00000009 beat2_snd
00000009 E_NotAlloc
0000000A PRNlword
0000000A LF
0000000A E_NotSupported
0000000A extra_snd
0000000A FDATA
0000000C DEV_CLEAR
0000000C ACIA_CTRL
0000000C flags_off
0000000D SC_TAB
0000000D DEV_SWAPBUF
0000000D CR
0000000E switch_addr
00000010 DEV_GETBUF1
00000010 LOCVARSZ
00000011 XON
00000011 SC_ALT
00000012 DEV_WRITEAT
00000012 hiscore_y
00000012 SC_LSHIFT
00000013 CTRLS
00000013 XOFF
00000014 DEV_GET_DIMEN
00000014 s_key
00000014 SC_CTRL
00000015 play_sound
00000015 DEV_GET_COLOR
00000016 suppress_0
00000017 high_idx
00000017 DEV_GET_OUTPOS
00000018 DCB_CMDPROC
00000018 CTRLX
00000018 player_idx
00000018 DEV_GET_OUTPTR
00000019 past_play
0000001A num_players
0000001A CTRLZ
0000001B ss_count
0000001C px_time
0000001D sixteen_ms
0000001E p_orient
0000001F FOC
0000001F s_orient
00000020 hi_char
00000020 DCB_OUTPOSX
00000020 TEXTROW
00000020 BLANK
00000020 TS_PREEMPT
00000020 E_BadDevNum
00000021 last_fire
00000022 last_hype
00000023 thump_snd
00000024 thump_time
00000024 DCB_OUTPOSY
00000025 time_count
00000026 hyper
00000027 FOP
00000027 p_flag_off
00000027 hiscores
00000028 DCB_OUTPOSZ
00000028 s_flag_off
00000028 TCBHandleToPointer
00000029 s_fire_off
0000002B p_fire_off
0000002C DCB_INPOSX
0000002F flag_end
0000002F x_vel_off
00000030 DCB_INPOSY
00000034 DCB_INPOSZ
00000038 DCB_INBUFPTR
0000003B hinames
0000003C DCB_OUTBUFPTR
0000003F BUFSIZE
00000040 TCBPointerToHandle
00000040 DCB_INBUFSIZE
00000040 TEXTCOL
00000044 DCB_OUTBUFSIZE
00000044 TCBUSP
00000048 DCB_INDIMX
00000048 TCBSSP
0000004A p_xvel_off
0000004B s_xvel_off
0000004C DCB_INDIMY
0000004C TCBSR
0000004C f_xvel_off
00000050 BUFLEN
00000050 DCB_INDIMZ
00000050 TCBPC
00000050 TCBIAlloc
00000052 y_vel_off
00000054 TCBStatus
00000054 DCB_OUTDIMX
00000055 TCBPriority
00000058 SC_CAPSLOCK
00000058 DCB_OUTDIMY
00000059 SC_RSHIFT
00000059 game_count
0000005B expl_x_pos
0000005C DCB_OUTDIMZ
00000060 DCB_BKCOLOR
00000064 DCB_FGCOLOR
00000067 expl_y_pos
00000068 DCB_OPCODE
0000006C TCBStartTick
0000006D p_yvel_off
0000006E s_yvel_off
0000006E TCBAlloc
0000006F f_yvel_off
00000070 DCB_INBUFPTR2
00000070 TCBEndTick
00000074 DCB_OUTBUFPTR2
00000074 TCBTicks
00000075 i_rk_count
00000076 rock_count
00000077 sauc_cntdn
00000077 SC_NUMLOCK
00000078 i_sauc_tim
00000079 r_hit_tim
0000007A hide_p_cnt
0000007B new_rocks
0000007C thmp_sndi
0000007C DCB_OUTBUFSIZE2
0000007C TCBIFree
0000007C TCBNext
0000007D min_rocks
0000007E SC_SCROLLLOCK
0000007E p_xvlo_off
0000007F p_yvlo_off
00000080 TS_RUNNING
00000080 TCBPrev
00000080 DCB_UNIT
00000080 score_off
00000082 TCBAffinityBase
00000082 ships_off
00000083 high_off
00000084 DCB_SIZE
00000084 TCBAffinity
00000092 TCBFree
000000A0 TCBAffineChose
000000D8 TCBInsertIntoReadyQueue
000000E0 SC_EXTEND
000000F0 SC_KEYUP
000000F3 player_1
00000100 IRQ_trampolines
00000100 TCB_SIZE
00000150 TCBRemoveFromReadyQueue
00000172 StartQ
00000173 p1_score
00000175 p1_ships
00000176 p1_high
0000017A TCBPopReadyQueue
000001F7 player_2
00000220 FemtikiInit
00000230 FemtikiInitIRQ
0000023E OSCallTable
00000240 CallOS
00000277 p2_score
00000279 p2_ships
0000027A p2_high
0000027B p_2_end
000002AA GetRunningTCBPointer
000002C2 SelectThreadToRun
000002EC UpdateIRQLive
0000030E FemtikiTimerIRQ
00000396 LockSysSemaphore
000003A6 UnlockSysSemaphore
000003B8 start
00000400 irq_list_tbl
0000049E loop2
000004A0 loop1
000004B2 start_other
000004D8 do_nothing
000004DE null_init
000004DE setup_null
0000050A null_ret
0000050C null_cmdproc
00000510 keybd_init
00000510 setup_keybd
00000580 KBD_CMDTBL
000005A0 keybd_cmdproc
000005C2 keybd_stat
000005CA keybd_putchar
000005D2 keybd_getchar
000005DA keybd_getbuf
000005DA keybd_putbuf
000005DA keybd_set_inpos
000005DA keybd_set_outpos
000005DE KeybdGetID
00000610 kgid1
00000618 kgnotKbd
0000061C KeybdSetLED
00000648 _KeybdInit
00000648 KeybdInit
00000674 kbdi0002
000006DE kbdiTryAgain
000006EC kbdi0004
00000708 kbdi0005
0000070C ledxit
00000722 kbdiXmitBusy
00000730 msgBadKeybd
0000073F msgXmitBusy
0000075A _KeybdGetStatus
00000778 _KeybdGetScancode
00000796 _KeybdClearIRQ
000007AC KeybdRecvByte
000007CE KeybdWaitTx
000007F4 SetKeyboardEcho
000007FC CheckForKey
00000800 STRAREASIZE
00000808 GetKey
00000842 CheckForCtrlC
00000852 KeybdGetCharNoWait
0000085A KeybdGetCharWait
00000862 KeybdGetChar
00000A7E KeybdSetLEDStatus
00000ACE KeybdSendByte
00000AD6 Wait10ms
00000AF2 Wait300ms
00000B0E KeybdIRQ
00000BC4 _unshiftedScanCodes
00000CC4 _shiftedScanCodes
00000DC4 _keybdControlCodes
00000E44 _keybdExtendedCodes
00000EC4 TEXTVID_CMDTBL
00000F28 textvid_cmdproc
00000F4C setup_textvid
00000F8A textvid_init
00000FFF MAX_TID
00001000 NR_TCB
00001032 textvid_stat
00001036 textvid_getchar
0000103E textvid_putbuf
0000103E textvid_stub
0000103E textvid_getbuf
00001042 textvid_get_inpos
00001058 textvid_set_inpos
0000106E textvid_set_outpos
00001084 textvid_get_outpos
0000109A textvid_get_outptr
000010C0 textvid_get_color
000010D0 textvid_getbuf1
000010E0 textvid_set_unit
000010EA textvid_get_dimen
0000111A textvid_clear
00001166 loop3
00001184 get_screen_color
000011A4 CalcScreenLoc
000011CE textvid_putchar
000011EC dcx14
000011F0 dcx7
000011F8 dccr
00001216 dcx6
0000122C dcx8
00001242 dcx9
00001260 dcx10
00001278 dcx12
00001282 dcx11
000012CC dclf
000012D0 dcx16
000012D4 dcx4
000012DE doBackspace
000012EC doDelete
00001322 doCtrlX
00001346 IncCursorPos
00001360 IncCursorRow
00001388 icc1
0000138A ScrollUp
000013D0 BlankLastLine
0000142A HomeCursor
0000143C SyncCursor
0000147E err_init
0000147E setup_err
000014AA err_ret
000014AC err_cmdproc
000014B0 COM_CMDTBL
000014E0 setup_serial
000014E0 serial_init
00001536 serial_cmdproc
00001558 serial_stat
0000155C serial_putchar
00001564 serial_getchar
0000156A serial_getchar_direct
00001572 serial_peek_char
0000157A serial_peek_char_direct
00001582 serial_putchar_direct
0000158A serial_putbuf
0000158A serial_set_outpos
0000158A serial_set_inpos
0000158A serial_getbuf
0000158E SerialInit
000015CC SerialGetChar
00001644 SerialPeekChar
00001680 SerialPeekCharDirect
0000169A SerialPutChar
000016FE SerialPutCharDirect
0000171A SerialRbo
00001722 SerialRcvCount
00001742 SerialIRQ
00001756 sirqNxtByte
00001768 sirq0001
000017B8 notRxInt
000017B8 sirqRxFull
00001806 sirqXmitOff
00001806 sirq0002
00001806 notTxInt
00001806 sirqTxEmpty
00001818 nmeSerial
00001820 setup_framebuf
00001884 framebuf_init
00001934 FRAMEBUF_CMDTBL
0000198C framebuf_cmdproc
000019AE framebuf_getchar
000019AE framebuf_stat
000019AE framebuf_putchar
000019B0 framebuf_set_inpos
000019BE framebuf_set_outpos
000019CC framebuf_getbuf1
000019D4 framebuf_getbuf2
000019DC framebuf_setbuf1
000019EA framebuf_setbuf2
000019F8 framebuf_swapbuf
00001A50 framebuf_set_unit
00001A5A framebuf_getbuf
00001A5A framebuf_stub
00001A5A framebuf_putbuf
00001A5E framebuf_get_color
00001A6E framebuf_get_dimen
00001A9E plot
00001A9E framebuf_writeat
00001AD4 plottbl
00001B10 plot_sw
00001B36 plot_or
00001B4A plot_xor
00001B60 plot_and
00001B74 plot_copy
00001B82 plot_black
00001B8C plot_white
00001B98 framebuf_clear
00001BF8 GFXACCEL_CMDTBL
00001C74 setup_gfxaccel
00001C74 gfxaccel_init
00001CAC gfxaccel_cmdproc
00001CCE gfxaccel_stat
00001CD8 gfxaccel_clear
00001CDC gfxaccel_set_inpos
00001CDC gfxaccel_putchar
00001CDC gfxaccel_set_unit
00001CDC gfxaccel_putbuf
00001CDC gfxaccel_setbuf1
00001CDC gfxaccel_setbuf2
00001CDC gfxaccel_writeat
00001CDC gfxaccel_stub
00001CDC gfxaccel_get_dimen
00001CDC gfxaccel_swapbuf
00001CDC gfxaccel_get_inpos
00001CDC gfxaccel_get_outpos
00001CDC gfxaccel_get_outptr
00001CDC gfxaccel_getbuf
00001CDC gfxaccel_getbuf1
00001CDC gfxaccel_getbuf2
00001CDC gfxaccel_getchar
00001CDC gfxaccel_set_outpos
00001CDC gfxaccel_plot_point
00001CE0 gfxaccel_get_color
00001CEA gfxaccel_set_color
00001D08 gfxaccel_set_color123
00001D32 gfxaccel_draw_line
00001DA2 gfxaccel_draw_rectangle
00001E12 gfxaccel_draw_triangle
00001EB6 gfxaccel_wait
00001EE4 GlobalReadLong
00001EEA GlobalWriteLong
00001EEE nd3
00001EEE nd2
00001EEE net_delay
00001EEE nd4
00001EEE nd1
00001EF2 InitIOPBitmap
00001F3E InitRand
00001F3E RandInit
00001F7E RandGetNum
00001FAC _GetRand
00001FCE RandWait
00001FE4 InitSemaphores
0000200A LockSemaphore
0000202C ForceUnlockSemaphore
00002046 UnlockSemaphore
00002062 T15LockSemaphore
00002068 T15UnlockSemaphore
0000206E T15GetFloat
0000207C T15Abort
0000208C chk_exception
000020A0 Delay3s
000020AE dly3s2
000020B0 dly3s1
000020C4 Delay3s2
000020E0 cpu_test
000021BE ALL_DONE
000021C0 BSR_FAR1
000021C8 EXCEPTION_6
000021D0 EXCEPTION_7
000021D8 op_ORI_TO_CCR
000021FA op_ORI_TO_SR
0000221C op_EORI_TO_CCR
00002242 op_EORI_TO_SR
00002268 op_ANDI_TO_CCR
0000228E op_ANDI_TO_SR
000022B4 op_BTST
0000243E op_BTST0
0000244A op_BTST1
00002452 op_BTST2
0000245A op_BTST3
00002462 op_BTST4
0000246A op_BTST5
00002472 op_BTST6
0000247A op_BTST7
00002482 op_BTST8
0000248A op_BTST9
00002492 op_BTST10
0000249A op_BTST11
000024A0 op_BTST12
000025F8 op_BTST20
00002602 op_BTST21
00002608 op_BTST22
0000260E op_BTST23
00002614 op_BTST24
0000261A op_BTST25
00002620 op_BTST26
00002626 op_BTST27
0000262C op_BTST28
00002632 op_BTST29
00002638 op_BTST30
0000263E op_BTST31
00002642 op_BTST32
0000265E op_BCHG
000029C6 op_BCLR
00002D14 op_BSET
0000305C op_MOVEP
000030E8 op_BOOL_I
00003292 BSR_CLOSE1
0000329A op_BSR
000032C8 BSR_CLOSE2
000032D0 op_CMP_I
000034B8 op_ADD_I
0000363E op_SUB_I
000037C4 op_MOVE
00003890 MOVE2
0000390C MOVE1
0000398C MOVE3
000039D0 op_MOVE_xxx_FLAGS
00003AE6 MOVE4
00003BC4 op_EXT
00003BF0 op_SWAP
00003C06 op_LEAPEA
00003C9E LEA1
00003CB2 op_TAS
00003CD8 op_TST
00003D16 op_LINKS
00003D34 op_MOVE_USP
00003D44 op_CHK
00003D8E op_NEGS
00004000 REL4
0000411C op_MOVEM
0000443A op_ABCD
0000445A ABCD_OUTER1
0000445C ABCD_INNER1
00004478 ABCD_NO_C1
00004480 ABCD_NO_C2
000044C8 ABCD_OUTER2
000044CA ABCD_INNER2
000044E6 ABCD_NO_C3
000044EE ABCD_NO_C4
00004532 op_SBCD
00004552 SBCD_OUTER1
00004554 SBCD_INNER1
00004570 SBCD_NO_C1
00004578 SBCD_NO_C2
000045C0 SBCD_OUTER2
000045C2 SBCD_INNER2
000045DE SBCD_NO_C3
000045E6 SBCD_NO_C4
0000462A op_NBCD
00004642 NBCD_LOOP
0000464E NBCD_NO_C
00004652 NBCD_NO_Z
00004688 NBCD_LOOP1
0000469C NBCD_NO_C1
000046A0 NBCD_NO_Z1
000046BC op_TRAPV
000046D8 op_RTR
000046E4 RTR_DONE
000046F2 BSR_FAR2
000046FA op_BCC
00004702 BCC1
0000470C BCC2
00004714 BCC3
0000471E BCC4
00004726 BCC5
00004730 BCC6
00004738 BCC7
00004742 BCC8
0000474A BCC9
00004754 BCC10
0000475C BCC11
00004766 BCC12
0000476E BCC13
00004778 BCC14
0000477A op_DBCC
00004782 DBCC_LOOP1
00004790 DBCC_LOOP2
000047A0 op_SCC
000047D0 op_ADDQ
000047E4 ADDQ_LOOP1
00004822 ADDQ_LOOP2
00004858 ADDQ_LOOP3
0000488A op_SUBQ
000048A2 SUBQ_LOOP1
000048DC SUBQ_LOOP2
00004912 SUBQ_LOOP3
00004944 op_MOVEQ
00004960 op_DIVU
0000497C DIVU_OUTER1
000049B2 op_DIVS
000049CE DIVS_OUTER1
00004A04 op_OR
00004A24 OR_OUTER1
00004A98 OR_OUTER2
00004AEE op_AND
00004B0E AND_OUTER1
00004B82 AND_OUTER2
00004BD8 op_EOR
00004BF8 EOR_OUTER2
00004C4E op_CMP
00004C6E CMP_OUTER1
00004CC4 op_CMPA
00004CE4 CMPA_OUTER1
00004D2A op_CMPM
00004D72 CMPM_LOOP1
00004D8C CMPM_LOOP2
00004DA6 CMPM_LOOP3
00004DD0 op_ADD
00004DF0 ADD_OUTER1
00004E64 ADD_OUTER2
00004EBA op_SUB
00004EDA SUB_OUTER1
00004F4E SUB_OUTER2
00004FA4 op_ADDA
00004FCA ADDA_OUTER1
00004FF0 op_SUBA
00005000 REL5
00005016 SUBA_OUTER1
0000503C op_ADDX
0000505C ADDX_OUTER1
000050F0 ADDX_LOOP3
0000510C ADDX_LOOP4
00005128 ADDX_LOOP5
0000514C op_SUBX
0000516C SUBX_OUTER1
00005200 SUBX_LOOP3
0000521C SUBX_LOOP4
00005238 SUBX_LOOP5
0000525C op_MULU
00005278 MULU_OUTER1
000052A8 op_MULS
000052C4 MULS_OUTER1
000052F4 op_EXG
00005356 ROx_FLAGS
00005362 op_ROx
0000536C ROx_LOOP1
0000538C ROx_LOOP2
000053AC ROx_LOOP3
000053CC ROx_LOOP4
000053EC ROx_LOOP5
0000540E ROx_LOOP6
0000558C ROXx_FLAGS
00005598 op_ROXx
000055A2 ROXx_LOOP1
000055C2 ROXx_LOOP2
000055E2 ROXx_LOOP3
00005602 ROXx_LOOP4
00005622 ROXx_LOOP5
00005644 ROXx_LOOP6
000057C2 SHIFTS_FLAGS
000057CE op_SHIFTS
000057D8 SHIFTS_LOOP1
000057F8 SHIFTS_LOOP2
00005818 SHIFTS_LOOP3
00005838 SHIFTS_LOOP4
00005858 SHIFTS_LOOP5
0000587A SHIFTS_LOOP6
00005A04 SHIFTS2_FLAGS
00005A10 op_SHIFTS2
00005A1A SHIFTS2_LOOP1
00005A36 SHIFTS2_LOOP2
00005A52 SHIFTS2_LOOP3
00005A6E SHIFTS2_LOOP4
00005A8A SHIFTS2_LOOP5
00005AA8 SHIFTS2_LOOP6
00005C2E START
00005C30 GOWARM
00005C34 GOOUT
00005C38 GOIN
00005C3C GOAUXO
00005C40 GOAUXI
00005C44 GOBYE
00005C48 TXTBGN
00005C4C ENDMEM
00005C50 CSTART
00005CBA WSTART
00005CEE ST3
00005D40 ST4
00005D7A ClearStringArea
00005D9A ClearStringStack
00005DAE TAB1
00005DDD TAB2
00005E1A TAB4
00005E4C TAB5
00005E4F TAB6
00005E54 TAB8
00005E5F TAB9
00005E63 TAB10
00005E66 TAB11
00005E6C TAB1_1
00005E9C TAB2_1
00005EDC TAB4_1
00005F10 TAB5_1
00005F18 TAB6_1
00005F20 TAB8_1
00005F3C TAB9_1
00005F44 TAB10_1
00005F4C TAB11_1
00005F54 DIRECT
00005F64 EXEC
00005F6C EXLP
00005F76 EXNGO
00005F8E EX1
00005F94 EXMAT
00005F9A EXGO
00005F9E INCON
00005FAC INCOM
00005FBA IOCOM
00005FC4 OUTCOM
00005FD0 IOCON
00005FDA OUTCON
00005FE6 NEW
00005FFA STOP
00006002 RUN
00006016 RUNNXL
00006056 RUN1
00006062 RUNTSL
0000606C RUNSML
0000607C GOTO
00006090 ONIRQ
000060AA ONIRQ1
000060B4 WAITIRQ
000060C4 LIST
000060D0 LS1
000060E4 LS2
000060EA LS3
000060F0 PRINT
00006100 PR2
0000610E PR0
0000611C PR1
0000612A PR3
00006136 PR6
0000613C PR8
00006158 PR9
00006172 FINISH
0000617A GOSUB
000061B4 RETURN
000061E0 FOR
000061FA FR1
00006212 FR2
00006218 FR3
0000621E FR4
00006226 FR5
00006238 FR6
00006244 FR7
0000625C FR8
00006260 NEXT
0000626A NX0
0000627C NX3
000062AA NX1
000062C2 NX2
000062CA REM
000062CC IF
000062D0 IF1
000062D6 IF2
000062E6 INPERR
000062F4 INPUT
00006318 IP7
00006322 IP6
00006326 IP2
00006340 IP3
0000637A IP4
00006386 IP5
0000638A DEFLT
00006392 LET
0000639E LT1
000063A2 LOAD
000063AE LOD1
000063C8 LOD2
000063D8 LODEND
000063E2 GBYTE
000063E6 GBYTE1
000063F4 GBYTE2
00006402 SAVE
0000640A SAVE1
0000642E SAVE2
0000643C SAVEND
00006460 PBYTE
00006462 PBYTE1
00006476 PBYTE2
00006480 POKE
000064F6 PKER
000064FA CALL
0000650E XP_PUSH
00006524 XP_POP
0000653A XP_POP1
00006550 NUM_EXPR
0000655E INT_EXPR
00006570 EXPR
00006570 EXPR_OR
00006580 XP_OR
00006596 EXPR_AND
000065A8 XP_AND
000065BE XP_ANDX
000065BE XP_ORX
000065C4 CheckNumeric
000065D6 EXPR_REL
000065EA XP11
000065F6 XP12
00006602 XP13
0000660E XP14
0000661A XP15
00006626 XP15RT
00006628 XP16
00006636 XPRT0
0000663E XPRT1
00006646 XP17
0000664C XP18
00006660 EXPR2
0000666E XP21
00006674 XP22
00006678 XP23
00006686 XP24
000066B4 XP25
000066BA XP26
000066CE XP27
000066D0 ConcatString
0000673E EXPR3
00006740 XP36
00006744 XP30
00006750 XP31
00006766 XP34
00006780 XP35
00006786 XP_MOD
000067A8 EXPR4
000067B4 XP40
000067C4 EXP4RT
000067C6 XP41
000067D6 XPSTNG
000067E0 XP45
00006832 XP44
0000683E PARN
0000684E XP42
00006850 XP43
00006854 AllocateString
000068B2 GarbageCollectStrings
000068EE NextString
00006904 StringInVar
00006922 SIV1
0000694A PointsIntoStringArea
0000696E StringOnStack
0000699E UpdateStringPointers
000069CA USP1
000069EC TSTV
00006A34 TV1
00006A64 TV2
00006A6C TSTVRT
00006A6E DIV32
00006A80 DIV1
00006A86 DIV2
00006A8C DIV3
00006A9A DIV4
00006AA8 DIVRT
00006AAA PEEK
00006B12 RND
00006B3C ABS
00006B48 SIZE
00006B58 TICK
00006B64 CORENO
00006B70 LorRArgs
00006BA8 LorR1
00006BAC MID
00006BF4 MID2
00006C0C MID5
00006C14 DOMID
00006C40 MID4
00006C72 MID1
00006C76 LEFT
00006C82 RIGHT
00006CAA LEN
00006CD0 INT
00006CE6 CHR
00006D1E SETVAL
00006D3C SV1
00006D3E FIN
00006D4A FI1
00006D56 FI2
00006D58 ENDCHK
00006D68 ENDCHK1
00006D6A QWHAT
00006D6C AWHAT
00006D70 ERROR
00006DAA QSORRY
00006DAC ASORRY
00006DB2 QHOW
00006DB4 AHOW
00006DBA ETYPE
00006DC0 GETLN
00006DD0 GL1
00006DEE GL2
00006E02 GL3
00006E26 GL4
00006E32 GL5
00006E4E GL6
00006E56 GL7
00006E5E FNDLN
00006E6C FNDLNP
00006E82 FNDRET
00006E84 FNDNXT
00006E86 FNDSKP
00006E94 MVUP
00006E9C MVRET
00006E9E MVUPW
00006EA8 MVDOWN
00006EB0 POPA
00006EEC PUSHA
00006F22 PRTSTG
00006F24 PS1
00006F3C PRTRET
00006F3E PRTSTR2a
00006F44 PRTSTR2
00006F4A PRTNUM
00006F94 PRTLN
00006FB2 TSTC
00006FC4 TC1
00006FCA TSTNUM
00007000 REL7
00007016 IGNBLK
00007020 TOUPBUF
00007026 TOUPB1
00007046 TOUPBRT
00007048 DOQUO
00007050 DOQUO1
00007058 TOUPPER
00007068 TOUPRET
0000706A CHKIO
0000707A CHKRET
0000707C PRMESG
00007086 PRMRET
00007088 CLS
00007094 OUTC
000070A4 INC
000070B0 INC1
000070C4 AUXOUT
000070D8 AUXIN
000070F6 AXIRET
000070F8 BYEBYE
00007106 INITMSG
0000712A OKMSG
00007131 HOWMSG
00007138 WHTMSG
00007140 TYPMSG
00007148 NOSTRING
0000715A SRYMSG
00007160 CLMSG
00007164 LSTROM
00007164 RANPNT
00007168 INPPTR
0000716C OUTPTR
00007170 CURRNT
00007174 STKFP
00007178 STKGOS
0000717C STKINP
00007180 LOPVAR
00007184 LOPINC
00007190 LOPLMT
0000719C LOPLN
000071A0 LOPPT
000071A4 IRQROUT
000071A8 STRSTK
000071AC StrSp
000071B0 StrArea
000071B4 LastStr
000071B8 TXTUNF
000071BC VARBGN
000071C0 STKLMT
000071C4 DIRFLG
000071C8 BUFFER
00007218 TXT
00007218 set_text_mode
00007242 set_graphics_mode
0000726C get_screen_address
0000727E CRLF
00007298 DisplayString
0000729C dspj1
000072A8 dsret
000072AE DisplayStringCRLF
000072B2 DisplayStringLimited
000072D2 DisplayStringLimitedCRLF
000072D6 TRAP15
000072EC T15DispatchTable
0000747C SimHardware
0000748C GetTick
00007494 SetDrawMode
000074B6 SetPenColor
000074BE GRBufferToScreen
000074F8 TestBitmap
00007598 Diagonal1
000075B8 Diagonal2
000075E2 Vertical1
000075FE Vertical2
00007626 MoveToXY
00007634 DrawToXY
000076B2 DrawHorizTo
000076E4 DrawVertTo
00007714 Cursor1
0000774C StubRout
0000774E select_iofocus
00007760 rotate_iofocus
00007772 select_focus1
00007790 init_plic
000077C6 cmdString
00007804 cmdTable
00007874 FromScreen
0000787E StartMon
00007888 Monitor
00007888 cmdMonitor
000078A8 PromptLn
000078B4 Prompt3
000078CA Prompt1
000078E4 cmdDispatch
0000792A cmdVideoMode
0000796C cmdBreakpoint
00007990 cmdAsteroids
00007998 cmdTinyBasic
0000799C cmdTestCPU
000079AC cmdClearScreen
000079B8 cmdCore
000079DC cmdFMTK
000079E4 cmdTestFP
00007A70 cmdTestGF
00007A9E cmdClock
00007ABC cmdReset
00007AEE tblPow2
00007B0E DisplayHelp
00007B0E cmdHelp
00007B1A HelpMsg
00007CA0 msgUnknownCmd
00007CB0 msgHello
00007CC2 GetCmdLine
00007D66 cmdSendSerial
00007D96 cmdReceiveSerial
00007DCA cmdFillB
00007E1E cmdFillW
00007E72 cmdFillL
00007EBE ignBlanks
00007ED0 PeekScreenChar
00007ED6 GetSzChar
00007EFC EditMemHelper
00007F1E cmdEditMemory
00007F28 edtmem1
00007F92 cmdJump
00007F92 ExecuteCode
00007FA2 cmdGrDemo
0000805C cmdDisassemble
000080AC cmdDumpMemory
000080D0 DumpMem1
000080E2 DisplayMem
0000810E dspmem1
00008176 cmdDumpRegs
000081F6 msg_regs
000081FA msg_reglist
00008220 cmdTestSerialReceive
00008240 GetHexNumber
0000826E GetDecNumber
000082B0 _dfOne
000082BC _dfTen
000082C8 _dfMil
000082D4 _msgNan
000082D8 _msgInf
000082DC _CheckNan
00008340 _CheckZero
0000835A _CheckNegative
0000836C _MakeBig
00008388 _LessThanDbl
000083B4 _ComputeDigitsBeforeDecpt
000083EE _LeadingZero
000083FE _SpitOutDigits
0000847A _TrimTrailingPoint
00008498 _TrimDotZero
000084B4 _TrimTrailingZeros
000084C0 _SpitOutE
000084D8 _ExtExpDigit
000084F6 _ExtExpDigits
0000851E _PadLeft
0000856E _PadRight
000085A0 _FloatToString
000085E2 _GetFloatGetChar
000085E8 _GetFloatIgnBlanks
000085F0 _GetFloatBackupChar
000085F4 _GetFraction
00008658 _GetExponent
000086E2 _GetInteger
00008758 _GetFloat
000087D0 AsciiToHexNybble
000087E2 gthx5
000087F4 gthx6
00008806 gthx3
0000880A DisplayTwoSpaces
00008814 dspspc1
0000881C DisplaySpace
00008824 DisplayTetra
0000882A DisplayWyde
00008830 DisplayByte
00008836 DisplayNybble
00008850 BufTetra
00008856 BufWyde
0000885C BufByte
00008862 BufNybble
0000887A DisplayAddr
0000889A cmdTestRAM
0000889A ramtest
000088B4 rmtst5
000088E4 ramtest0
000088EC ramtest1
000088FE rmtst1
0000890A ramtest6
0000891A ramtest2
00008932 rmtst2
0000893A rmtst3
00008960 ramtest3
00008962 cmdLoadS19
00008968 NextRec
0000897A ProcessRec
00008A12 pcssxa
00008A7E ProcessS1
00008A82 ProcessS2
00008A86 ProcessS3
00008A8A ProcessS7
00008A9C ProcessS8
00008AAE ProcessS9
00008AC0 S19Get16BitAddress
00008ACE S19Get24BitAddress
00008ADA S19Get32BitAddress
00008AF8 S1932a
00008B0C S1932b
00008B4E sGetChar
00008B76 AudioInputTest
00008B78 BouncingBalls
00008B7A GraphicsDemo
00008B7C ClearScreen
00008B84 rbo
00008B8C init_i2c
00008B8C i2c_setup
00008B9C i2c_wait_tip
00008BAC i2c_wr_cmd
00008BBC i2c_xmit1
00008BDA i2c_wait_rx_nack
00008BEA rtc_read
00008C76 rtc_write
00008CE0 msgRtcReadFail
00008CF9 msgBusErr
00008D0A bus_err
00008D24 trap3
00008D62 ProcessBreakpoint
00008D68 DisarmAllBreakpoints
00008D94 ArmAllBreakpoints
00008DC4 ArmBreakpoint
00008E42 DisarmBreakpoint
00008E96 ListBreakpoints
00008EB6 ClearBreakpointList
00008EC8 SendMsg
00008F06 ReceiveMsg
00008F48 DispatchMsg
00008F4A prtflt
00008F90 T15FloatToString
00008FC4 io_trap
00008FEA OutputChar
00009004 InitIRQ
0000901A InstallIRQ
0000905E TickIRQ
000090A0 irq_rout
000090A0 irq6_rout
000090A0 irq3_rout
000090B4 irq_proc_generic
000090D2 SpuriousIRQ
000090D4 nmi_rout
000090E6 addr_err
000090FC brdisp_trap
00009134 illegal_trap
0000914A io_irq
0000915E msg_start
00009185 msg_core_start
00009196 msgAddrErr
000091A3 msg_illegal
000091B5 msg_bad_branch_disp
000091C7 msg_test_done
000091D7 msg_io_access
000091F2 msgChk
00009200 msgStackCanary
0000921A ShiftBuf
00009234 HEX2DEC2
00009282 HEX2DEC
00009292 HX2DC
00009296 HX2DC0
0000929E HX2DC1
000092B8 HX2DC2
000092BA HX2DC22
000092C4 HX2DC3
000092CC HX2DC4
000092D4 HX2DC5
000092DC HX2DC57
000092E0 HX2DC6
000092E6 PNT4HEX
000092E6 PNT4HX
000092EA PNT6HX
000092F6 PNT8HX
000092FA FRELADDR
00009308 FREL10
0000931A FREL15
00009334 FREL20
00009346 FREL25
00009350 FREL30
00009358 X
00009358 IMOVEMFR
0000936C IM7788
00009370 IM7799
00009386 IMOVEMTR
000093A0 CS16
000093A2 ISTOP
000093B6 IMMED
000093DC IMMED45
0000940E CS15
00009410 IMMED55
00009416 IMMED65
00009426 IMMED75
0000942A IMOVE
0000942E ILINK
00009444 FORM1
00009448 FORM1A
0000944C CS14
0000944E FORM3
00009452 FORM4
00009464 FORM5
00009468 FORM6A
00009478 FORM6D
00009488 FORMREGA
0000948C FORMREG5
00009498 FORMREGD
0000949E FORM7
000094AA FORM8
000094AE FORM815
000094B6 CS13
000094B8 FORM9
000094BE EEA10
000094C2 FORM10EX
000094E4 FORM10E3
000094EC FORM10E4
000094F8 FORM10E6
00009500 FORM10
00009506 FORM103
0000950A FORM104
0000951A FORM105
00009530 CS12
00009534 FORM11
0000953C FORM11SL
00009550 FORM112
0000955E FORM114
00009560 FORM12
0000957A FORM125
0000959C FORM12A
000095C0 CS11
000095C4 IQUICK
000095C8 IMOVEQ
000095E0 SCHR
000095E8 IMVFSR
000095F6 IMVFUSP
00009604 IMVTSR
00009612 IMVT44
00009616 IMVTUSP
00009622 IMVTCCR
00009632 IMOVEP
00009642 IMOVEP11
0000965A CS20
0000965E IMOVEP35
0000966C IMOVEP66
00009688 SCOMMON
0000968C ISCC
00009696 IDBCC
000096A8 ICC
000096AC IBSR
000096BE ICC35
000096D4 ICC55
000096E4 ISETD
000096EA ISETD12
000096F2 CS18
000096F4 ISETS
0000970E ISHIFT
0000971A ISHIFT13
0000973E ISHIFT23
0000974A ISHIFT33
0000974E ISHIFT44
00009756 CS17
00009758 ISHIFTM1
00009772 ICCCC
00009788 ICCCC9
0000978A BRTBL
000097AA IMOVEA1
000097D0 IMOVE19
000097D6 IQUICKA
000097E8 IQUICK21
000097FE IQUICK31
00009802 CS19
00009806 FORMSIZE
0000981A FORM91
0000982E FORM93
00009830 FORM95
00009832 EA000
0000983E EA001
0000984A EA010
0000985E EA011
00009874 EA011RTS
00009876 EA100
0000988C FE10
00009890 EEA
000098F4 EA1105
000098F8 EA1107
0000990E EA1109
00009918 EA101
0000992E EA111
0000994C EA1112
00009968 EA1113
00009974 FE11
00009978 EA1113A
0000999A EA1114
000099E2 EAF25
000099E6 EAF27
000099FA EAF35
00009A04 EA1115
00009A3C EA11153
00009A46 EA11155
00009A52 MOVEMS
00009A62 MOVEMS2
00009A66 MOVEMR
00009A76 MOVEMR11
00009A7E MOVEMR33
00009A90 MOVEMR44
00009AAA MOVEMR77
00009ABC MOVEMR79
00009ABE MOVEMR88
00009AD6 MOVEMR94
00009AE2 DCODE68K
00009AF6 DEC311
00009B14 DEC404
00009B24 DEC411
00009B32 FE12
00009B34 DEC425
00009B40 DEC510
00009B44 DEC515
00009B4C DEC530
00009B52 DEC535
00009B5E DEC537
00009B7A COMMON4
00009B7C COMMON
00009B8A COMMON35
00009BA4 FERROR
00009BAE FERROR35
00009BBA FERROR39
00009BC4 MSG111
00009BCE KI
00009BD0 KIEND
00009BD0 TBL
00009E88 TBLE
00009E88 OPCTBL
00009F88 asteroids_start
00009F90 main_loop
00009FE6 skip_player_move
00009FEA skip_player_cont
00009FEE px_hide
00009FF6 no_play
0000A000 DRAW
0000A014 no_dec_new_rocks
0000A024 game_message
0000A038 do_start_mess
0000A060 start_game
0000A094 push_start_mess
0000A0AA exit_push_start
0000A0AC game_over
0000A0C0 nodec_thmpi
0000A0EA no_game_over
0000A128 exit_game_message
0000A12A end_game
0000A13E check_hits
0000A140 pss_check_loop
0000A146 next_pss
0000A14C check_pss
0000A15A check_next_object
0000A15E check_all
0000A178 delta_x_pos
0000A18A delta_y_pos
0000A1B2 small_s_size
0000A1B4 add_p_size
0000A1B6 no_add_size
0000A1C4 col_table
0000A1CC col_table_p
0000A1D4 col_table_s
0000A1DC col_table_l
0000A1E4 handle_collision
0000A1F4 not_saucer
0000A202 not_player
0000A21A not_pss_player
0000A226 what_hit_rock
0000A22A explode_object
0000A246 player_shot
0000A252 what_hit_saucer
0000A26A keep_small
0000A270 do_saucer
0000A29C attract_saucer
0000A2A6 rock_hit_out
0000A2C4 dec_isaucer_time
0000A2D4 no_save_ist
0000A2E6 saucer_yok
0000A2FA start_left
0000A322 small_saucer
0000A324 save_saucer
0000A328 exit_do_saucer
0000A32A existing_saucer
0000A342 keep_saucer_dir
0000A34E attract_fire
0000A354 exit_existing_saucer
0000A356 saucer_yvel
0000A35A fire_saucer
0000A372 aim_shot
0000A3BA wide_shot
0000A3C4 no_shot_or
0000A3C8 no_aim_shot
0000A3DA shot_mask
0000A3DC shot_or
0000A3DE ship_fire
0000A3FC test_fire_loop
0000A408 save_ship_fire
0000A40C exit_ship_fire
0000A40E fire_shot
0000A460 calc_fire_byte
0000A474 test_neg_fire
0000A47C fire_ok
0000A486 enter_hiscores
0000A4B4 no_playerx
0000A520 next_p_high
0000A53C close_all
0000A554 next_hi_char
0000A56C save_hbutton
0000A582 not_timed_out
0000A59E not_rot_left
0000A5A6 was_rot_left
0000A5A6 not_rot_right2
0000A5A6 rot_not_left
0000A5C6 wrap_to_a
0000A5CA wrap_to_z
0000A5CC check_alpha
0000A5D4 save_char
0000A5D8 exit_not_done
0000A5DA exit_enter_hiscores
0000A5DC hyperspace
0000A618 hype_xok1
0000A622 hype_xok2
0000A640 hype_yok1
0000A64A hype_yok2
0000A666 save_hyperspace
0000A66A exit_hyperspace
0000A66C reset_game
0000A67A three_ship_start
0000A688 clear_items_loop
0000A696 write_initial
0000A6B0 add_character
0000A6C0 add_ships
0000A6CA show_ships
0000A6DC add_ships_loop
0000A6E8 exit_add_ships
0000A6EA move_items
0000A6EE move_next_item
0000A70A skip_play_inc
0000A724 no_new_rocks
0000A72C go_reset_play
0000A732 go_reset_sauc
0000A73A item_exploding
0000A752 no_reset_scale
0000A754 move_item
0000A766 x_pos_neg
0000A776 not_x_max
0000A78C y_not_neg
0000A796 not_y_max
0000A7BA keep_scale
0000A7C0 move_next_object
0000A7C8 clear_saucer
0000A7DC ship_move
0000A80A reveal_player
0000A812 kill_the_player
0000A828 clear_hyper
0000A82C exit_ship_move
0000A82E rot_and_thrust
0000A83A not_rot_left1
0000A842 not_rot_right1
0000A8A0 not_thrust
0000A8D6 check_velocity
0000A8E4 check_neg_velocity
0000A8EE exit_check_velocity
0000A8F0 check_clear
0000A8F4 check_clear_loop
0000A90E check_clear_y
0000A922 not_closer
0000A92C is_closer
0000A932 make_rocks
0000A95C no_inc_min
0000A96C no_set_max
0000A978 gen_rock_loop
0000A9AA rock_y_ok
0000A9AC rock_on_x
0000A9CE clear_rocks
0000A9D0 clear_rocks_loop
0000A9D8 exit_make_rocks
0000A9DA player_init
0000AA10 player_reset
0000AA26 copy_rock
0000AA2A copy_rock_2
0000AA50 copy_velocity
0000AA60 x_off_pos
0000AA7A y_off_pos
0000AA86 limit_velocity
0000AA90 neg_upper_ok
0000AA9A limit_p_vel
0000AAA2 pos_lower_ok
0000AAAA exit_limit_velocity
0000AAAC static_messages
0000AAF0 skip_play_flash
0000AB04 do_p1_ships
0000AB78 do_p2_score
0000AB8C skip_p2_score
0000AB9A exit_static
0000AB9C add_to_list
0000ABD0 add_item
0000ABEA add_explode
0000ABF0 add_saucer
0000ABF6 add_fire
0000AC06 no_shot_dec
0000AC08 add_score
0000AC36 exit_add_score
0000AC3C high_scores
0000AC6E high_scores_loop
0000ACDC exit_high_scores
0000ACE2 exit_no_scores
0000ACE8 find_rock
0000ACEA find_next_rock
0000ACF4 exit_find_rock
0000ACF6 ship_wrk_x
0000AD02 ship_wrk_y
0000AD0E add_play_explode
0000AD20 reset_xy_loop
0000AD38 no_reset_xy
0000AD42 piece_draw_loop
0000AD68 vec_x_pos
0000AD74 vec_y_pos
0000ADA8 ship_parts
0000ADB4 add_player
0000ADCA no_pos_reflect
0000ADD0 third_quad
0000ADDE first_quad
0000AE04 no_thrust
0000AE06 copy_short
0000AE0A copy_vectors
0000AE24 exit_copy_vectors
0000AE26 fx_sounds
0000AE34 no_saucer_sound
0000AE66 no_thump_sound
0000AE68 hit_a_rock
0000AE82 clear_rock
0000AE96 add_to_score
0000AE9E skip_add
0000AED8 exit_hit_a_rock
0000AEDA rock_score
0000AEDE check_hiscores
0000AEFA check_hi_player
0000AF02 check_hi_loop
0000AF10 check_hi_next
0000AF30 save_hi_index
0000AF34 exit_hi_chk
0000AF3E exit_check_hiscores
0000AF40 insert_hiscore
0000AF44 insert_loop
0000AF66 exit_insert_loop
0000AF84 get_atn
0000AF90 atn_semi
0000AFA0 atn_quad
0000AFB0 atn_eight
0000AFB4 loop_atn
0000AFBE skip_sub
0000AFCE atn_tab
0000B000 HALT
0000B00E output_number
0000B010 output_number_loop
0000B020 zero_suppress
0000B02C cos_d0
0000B030 sin_d0
0000B03E cossin_d0
0000B044 a_was_less
0000B04A sin_cos
0000B0CC add_message
0000B114 add_char_loop
0000B12A add_the_char
0000B132 exit_add_message
0000B134 timer_interrupt
0000B13A player_x
0000B13E player_n
0000B146 add_sup_hex_chr
0000B152 add_hex_chr
0000B15C add_sup_zero
0000B16C add_address
0000B182 add_coords
0000B19C add_single
0000B19E add_pair
0000B1A4 notscreen
0000B1A4 setscreen
0000B1A4 s_controls
0000B1B0 Initialise
0000B1E0 clear_loop
0000B22C read_hi
0000B236 close_all_2
0000B23C gen_prng
0000B24C Ninc0
0000B24C op_rtsvec
0000B24C Ninc1
0000B24E do_vector
0000B25C op_call
0000B262 op_jump
0000B272 op_vctr
0000B280 no_neg_y11
0000B28C no_neg_x11
0000B29C op_abs
0000B2AA no_neg_y10
0000B2B6 no_neg_x10
0000B2C8 not_right
0000B2D0 vector_base
0000B30C op_short
0000B330 no_neg_y2
0000B338 no_neg_x2
0000B33C end_vector
0000B346 shift_left
0000B34A last_vector
0000B36C vector_move
0000B398 vector
0000C000 JSRL
0000C398 copy_msg
0000C3D8 expl_tab
0000C3E0 expl_3
0000C40C expl_2
0000C44A expl_1
0000C480 expl_0
0000C4BE rock_tab
0000C4C6 rock_0
0000C4DE rock_1
0000C4FA rock_2
0000C514 rock_3
0000C530 sauc_jsr
0000C532 sauc_vec
0000C54E play_tab
0000C570 play_00
0000C588 play_01
0000C5AC play_02
0000C5D0 play_03
0000C5F4 play_04
0000C616 play_05
0000C63A play_06
0000C65E play_07
0000C682 play_08
0000C6A6 play_09
0000C6CA play_0A
0000C6EE play_0B
0000C712 play_0C
0000C736 play_0D
0000C75A play_0E
0000C77E play_0F
0000C7A2 play_10
0000C7BA play_liv
0000C7D0 char_a
0000C7E0 char_b
0000C7FA char_c
0000C806 char_d
0000C816 char_e
0000C826 char_f
0000C834 char_g
0000C846 char_h
0000C854 char_i
0000C862 char_j
0000C86E char_k
0000C87A char_l
0000C884 char_m
0000C890 char_n
0000C89A char_o0
0000C8A6 char_p
0000C8B4 char_q
0000C8C6 char_r
0000C8D6 char_s
0000C8E4 char_t
0000C8F0 char_u
0000C8FC char_v
0000C906 char_w
0000C914 char_x
0000C91E char_y
0000C92C char_z
0000C938 char_spc
0000C93C char_1
0000C944 char_2
0000C954 char_3
0000C962 char_4
0000C970 char_5
0000C97E char_6
0000C98C char_7
0000C996 char_8
0000C9A6 char_9
0000C9B4 char_set
0000C9FE shot_jsr
0000CA00 shot_vec
0000CA12 mess_origin
0000CA32 mess_table
0000CA3A e_messages
0000CA4A e_mess_0
0000CA56 e_mess_1
0000CA5E e_mess_2
0000CA80 e_mess_3
0000CA9B e_mess_4
0000CAB8 e_mess_5
0000CADF e_mess_6
0000CAEA e_mess_7
0000CAF4 d_messages
0000CB04 d_mess_0
0000CB14 d_mess_1
0000CB1D d_mess_2
0000CB44 d_mess_3
0000CB67 d_mess_4
0000CB8A d_mess_5
0000CBB0 d_mess_6
0000CBC6 d_mess_7
0000CBD0 f_messages
0000CBE0 f_mess_0
0000CBEF f_mess_1
0000CBF6 f_mess_2
0000CC1A f_mess_3
0000CC33 f_mess_4
0000CC55 f_mess_5
0000CC7E f_mess_6
0000CC90 f_mess_7
0000CC9E s_messages
0000CCAE s_mess_0
0000CCB6 s_mess_1
0000CCBF s_mess_2
0000CCE6 s_mess_3
0000CD04 s_mess_4
0000CD2C s_mess_5
0000CD3E s_mess_6
0000CD4B s_mess_7
0000CD5B sound_init
0000CDBC load_sound
0000CDC2 load_old_sound
0000CDC8 play_sample
0000CDE4 old_sound_play
0000CDE6 exit_play_sample
0000CDE8 sound_key
0000CE00 beat1_sound
0000CE12 beat2_sound
0000CE24 lexpl_sound
0000CE39 mexpl_sound
0000CE4E sexpl_sound
0000CE63 extra_sound
0000CE79 lgsau_sound
0000CE8E smsau_sound
0000CEA3 thrst_sound
0000CEB6 pfire_sound
0000CEC8 sfire_sound
0000CEDA filename
0000CEE7 variables
0000D000 RTSL
0000E000 JMPL
0000F000 SHRT
0001001C _Keybd_tick
00040004 TextScr
00040008 S19StartAddress
0004000C KeybdEcho
0004000D KeybdWaitFlag
00040040 CmdBuf
00040080 CmdBufEnd
00040084 fgColor
00040088 bkColor
0004008C TextRows
0004008D TextCols
00040094 _fpTextIncr
00040098 _canary
0004009C tickcnt
000400A0 IRQFlag
000400A4 InputDevice
000400A8 OutputDevice
00040100 Regsave
00040202 NumSetBreakpoints
00040220 Breakpoints
00040280 BreakpointWords
000402C0 fpBuf
00040508 _width
0004050C _E
00040510 _digits_before_decpt
00040514 _precision
00040520 _fpBuf
00040600 _fpWork
00040800 _dasmbuf
00040880 OFFSET
00040890 pen_color
00040894 gr_x
00040898 gr_y
0004089C gr_width
000408A0 gr_height
000408A4 gr_bitmap_screen
000408AC gr_double_buffer
000408B0 gr_bitmap_buffer
000408B8 sys_switches
00040A00 null_dcb
00040A84 keybd_dcb
00040B08 textvid_dcb
00040B8C err_dcb
00040C94 serial_dcb
00040D18 framebuf_dcb
00041BFC TimerStack
00100000 IOFocus
00100004 memend
0010000E KeybdLEDs
0010000F _KeyState1
00100010 _KeyState2
00100011 _KeybdHead
00100012 _KeybdTail
00100013 _KeybdCnt
00100018 KeybdID
00100020 _KeybdBuf
00100080 _KeybdOBuf
00100150 S19Checksum
00100160 SerTailRcv
00100162 SerHeadRcv
00100164 SerRcvXon
00100165 SerRcvXoff
00100166 SerTailXmit
00100168 SerHeadXmit
0010016A SerXmitXoff
00100200 RTCBuf
00100224 RunningTCB
0010030C FreeTCB
0010031C QueueCycle
00100320 readyQ
00101000 SerRcvBuf
00102000 SerXmitBuf
20010000 tcbs
